[LOG] GENERATED TETRA
[LOG] GENERATED TETRA
[LOG] GENERATED TETRA
[LOG] GENERATED TETRA
[LOG] GENERATED TETRA
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1240 Tetrahedra.
    [LOG] Generated 37 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.18918918918919
    [LOG] Max number of nodes per cluster is 33 and the number is 10
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1353 Tetrahedra.
    [LOG] Generated 43 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.790697674418604
    [LOG] Max number of nodes per cluster is 32 and the number is 29
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1298 Tetrahedra.
    [LOG] Generated 50 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.12
    [LOG] Max number of nodes per cluster is 30 and the number is 16
[LOG] We will select 201 edges and 1353 tetra
[LOG] Edges from tetra 0 and KDTree 201 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 2319 Tetrahedra.
    [LOG] Generated 79 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.683544303797468
    [LOG] Max number of nodes per cluster is 55 and the number is 48
[LOG] We will select 217 edges and 1240 tetra
[LOG] Edges from tetra 0 and KDTree 217 with 0 edges in common.
[LOG] We will select 616 edges and 1298 tetra
[LOG] Edges from tetra 0 and KDTree 616 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] GENERATED TETRA
[LOG] We will select 372 edges and 2319 tetra
[LOG] Edges from tetra 0 and KDTree 372 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] GENERATED TETRA
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 2137 Tetrahedra.
    [LOG] Generated 58 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.844827586206897
    [LOG] Max number of nodes per cluster is 67 and the number is 23
[LOG] We will select 1367 edges and 2137 tetra
[LOG] Edges from tetra 0 and KDTree 1367 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] GENERATED TETRA
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2060 Tetrahedra.
    [LOG] Generated 58 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.775862068965518
    [LOG] Max number of nodes per cluster is 26 and the number is 29
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1280 Tetrahedra.
    [LOG] Generated 42 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.071428571428571
    [LOG] Max number of nodes per cluster is 39 and the number is 6
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.
[LOG] We will select 164 edges and 1280 tetra
[LOG] Edges from tetra 0 and KDTree 164 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] We will select 165 edges and 2060 tetra
[LOG] Edges from tetra 0 and KDTree 165 with 0 edges in common.
[LOG] Removed 1 subset clusters.
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 994 Tetrahedra.
    [LOG] Generated 30 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.8
    [LOG] Max number of nodes per cluster is 31 and the number is 26
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 915 Tetrahedra.
    [LOG] Generated 31 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.806451612903226
    [LOG] Max number of nodes per cluster is 27 and the number is 6
[LOG] GENERATED TETRA
[LOG] We will select 721 edges and 994 tetra
[LOG] Edges from tetra 0 and KDTree 721 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2460 Tetrahedra.
    [LOG] Generated 70 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.057142857142857
    [LOG] Max number of nodes per cluster is 85 and the number is 61
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1370 Tetrahedra.
    [LOG] Generated 29 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.344827586206897
    [LOG] Max number of nodes per cluster is 67 and the number is 15
[LOG] Process 28: Created combinatorial complex for file data_224.hdf5
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1056 Tetrahedra.
    [LOG] Generated 31 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.806451612903226
    [LOG] Max number of nodes per cluster is 19 and the number is 12
[LOG] GENERATED TETRA
[LOG] We will select 81 edges and 915 tetra
[LOG] Edges from tetra 0 and KDTree 81 with 0 edges in common.
[LOG] We will select 213 edges and 1370 tetra
[LOG] Edges from tetra 0 and KDTree 213 with 0 edges in common.
[LOG] We will select 426 edges and 1056 tetra
[LOG] Edges from tetra 0 and KDTree 426 with 0 edges in common.
[LOG] Removed 2 subset clusters.
[LOG] Removed 5 subset clusters.

    [LOG] We Currently have 1577 Tetrahedra.
    [LOG] Generated 49 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.73469387755102
    [LOG] Max number of nodes per cluster is 31 and the number is 20
[LOG] Process 10: Created combinatorial complex for file data_80.hdf5
[LOG] GENERATED TETRA
[LOG] We will select 609 edges and 2460 tetra
[LOG] Edges from tetra 0 and KDTree 609 with 0 edges in common.
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 982 Tetrahedra.
    [LOG] Generated 28 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.821428571428571
    [LOG] Max number of nodes per cluster is 25 and the number is 4
[LOG] We will select 279 edges and 1577 tetra
[LOG] Edges from tetra 0 and KDTree 279 with 0 edges in common.
[LOG] We will select 119 edges and 982 tetra
[LOG] Edges from tetra 0 and KDTree 119 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] Process 28: Calculating Neighbors
[LOG] Loading pickle file data_224.pickle
[LOG] Processing node features for num 224
[LOG] GENERATED TETRA
[LOG] Process 10: Calculating Neighbors
[LOG] Loading pickle file data_80.pickle
[LOG] Processing node features for num 80
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1167 Tetrahedra.
    [LOG] Generated 44 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.386363636363637
    [LOG] Max number of nodes per cluster is 29 and the number is 10
[LOG] GENERATED TETRA
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 1524 Tetrahedra.
    [LOG] Generated 60 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.433333333333334
    [LOG] Max number of nodes per cluster is 38 and the number is 32
[LOG] Process 104: Created combinatorial complex for file data_832.hdf5
[LOG] We will select 182 edges and 1167 tetra
[LOG] Edges from tetra 0 and KDTree 182 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.
[LOG] GENERATED TETRA

    [LOG] We Currently have 1372 Tetrahedra.
    [LOG] Generated 45 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.133333333333333
    [LOG] Max number of nodes per cluster is 32 and the number is 28
[LOG] Processing edge features for num 80
[LOG] Processing edge features for num 224
[LOG] We will select 249 edges and 1524 tetra
[LOG] Edges from tetra 0 and KDTree 249 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 940 Tetrahedra.
    [LOG] Generated 19 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.57894736842105
    [LOG] Max number of nodes per cluster is 54 and the number is 12
[LOG] Processing tetra features for num 224
[LOG] Processing tetra features for num 80
[LOG] We will select 96 edges and 940 tetra
[LOG] Edges from tetra 0 and KDTree 96 with 0 edges in common.
[LOG] We will select 245 edges and 1372 tetra
[LOG] Edges from tetra 0 and KDTree 245 with 0 edges in common.
[LOG] Processing cluster features for num 224
[LOG] Processing cluster features for num 80
[LOG] Removed 1 subset clusters.
[LOG] Processing cluster features for num 224
[LOG] Processing cluster features for num 80
[LOG] Processing adjacency and incidence matrices for num 224
[LOG] Computing n0_to_0 for num 224
[LOG] Processing adjacency and incidence matrices for num 80
[LOG] Computing n0_to_0 for num 80
[LOG] Removed 4 subset clusters.

    [LOG] We Currently have 2129 Tetrahedra.
    [LOG] Generated 55 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.909090909090908
    [LOG] Max number of nodes per cluster is 47 and the number is 15
[LOG] Computing n1_to_1 for num 224
[LOG] Computing n1_to_1 for num 80
[LOG] Removed 1 subset clusters.
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1064 Tetrahedra.
    [LOG] Generated 27 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.25925925925926
    [LOG] Max number of nodes per cluster is 30 and the number is 20
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1336 Tetrahedra.
    [LOG] Generated 33 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.06060606060606
    [LOG] Max number of nodes per cluster is 23 and the number is 26
[LOG] Process 42: Created combinatorial complex for file data_336.hdf5
[LOG] We will select 107 edges and 1064 tetra
[LOG] Edges from tetra 0 and KDTree 107 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] Computing n2_to_2 (adjacency) for num 224
[LOG] Computing n2_to_2 (adjacency) for num 80
[LOG] Process 104: Calculating Neighbors
[LOG] Loading pickle file data_832.pickle
[LOG] Processing node features for num 832
[LOG] We will select 2105 edges and 2129 tetra
[LOG] Edges from tetra 0 and KDTree 2105 with 0 edges in common.
[LOG] We will select 106 edges and 1336 tetra
[LOG] Edges from tetra 0 and KDTree 106 with 0 edges in common.
[LOG] Removed 4 subset clusters.
[LOG] Processing edge features for num 832
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1797 Tetrahedra.
    [LOG] Generated 41 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.975609756097562
    [LOG] Max number of nodes per cluster is 66 and the number is 13
[LOG] Process 42: Calculating Neighbors
[LOG] Loading pickle file data_336.pickle
[LOG] Processing node features for num 336
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1401 Tetrahedra.
    [LOG] Generated 44 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.818181818181818
    [LOG] Max number of nodes per cluster is 32 and the number is 20
[LOG] Removed 0 subset clusters.
[LOG] Removed 0 subset clusters.
[LOG] Processing tetra features for num 832
[LOG] Processing edge features for num 336
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.
[LOG] Computing n3_to_3 (adjacency) for num 224
[LOG] Processing tetra features for num 336
[LOG] GENERATED TETRA
[LOG] Computing n4_to_4 (coadjacency) for num 224
[LOG] Computing n0_to_1 for num 224
[LOG] Removed 1 subset clusters.
[LOG] Processing cluster features for num 832
[LOG] GENERATED TETRA
[LOG] Processing cluster features for num 336
[LOG] Computing n0_to_2 for num 224
[LOG] Computing n3_to_3 (adjacency) for num 80
[LOG] Computing n4_to_4 (coadjacency) for num 80
[LOG] Processing cluster features for num 336
[LOG] Process 100: Created combinatorial complex for file data_800.hdf5
[LOG] We will select 144 edges and 1797 tetra
[LOG] Edges from tetra 0 and KDTree 144 with 0 edges in common.
[LOG] Computing n0_to_1 for num 80
[LOG] Processing cluster features for num 832
[LOG] GENERATED TETRA
[LOG] Processing adjacency and incidence matrices for num 336
[LOG] Computing n0_to_0 for num 336
[LOG] Computing n0_to_2 for num 80
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1464 Tetrahedra.
    [LOG] Generated 42 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.404761904761905
    [LOG] Max number of nodes per cluster is 37 and the number is 2
[LOG] Process 37: Created combinatorial complex for file data_296.hdf5
[LOG] Processing adjacency and incidence matrices for num 832
[LOG] Computing n0_to_0 for num 832
[LOG] We will select 753 edges and 1401 tetra
[LOG] Edges from tetra 0 and KDTree 753 with 0 edges in common.
[LOG] Computing n1_to_1 for num 336
[LOG] GENERATED TETRA
[LOG] Computing n2_to_2 (adjacency) for num 336
[LOG] Process 23: Created combinatorial complex for file data_184.hdf5
[LOG] Computing n1_to_1 for num 832
[LOG] Process 21: Created combinatorial complex for file data_168.hdf5
[LOG] We will select 718 edges and 1464 tetra
[LOG] Edges from tetra 0 and KDTree 718 with 0 edges in common.
[LOG] Computing n3_to_3 (adjacency) for num 336
[LOG] Computing n4_to_4 (coadjacency) for num 336
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1360 Tetrahedra.
    [LOG] Generated 49 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.938775510204081
    [LOG] Max number of nodes per cluster is 41 and the number is 47
[LOG] Computing n0_to_1 for num 336
[LOG] Removed 0 subset clusters.
[LOG] Process 8: Created combinatorial complex for file data_64.hdf5
[LOG] Process 100: Calculating Neighbors
[LOG] Loading pickle file data_800.pickle
[LOG] Processing node features for num 800
[LOG] Computing n0_to_2 for num 336
[LOG] Computing n0_to_3 for num 224
[LOG] Removed 0 subset clusters.
[LOG] Process 37: Calculating Neighbors
[LOG] Loading pickle file data_296.pickle
[LOG] Processing node features for num 296
[LOG] Computing n0_to_4 for num 224
[LOG] Processing edge features for num 800
[LOG] Processing edge features for num 296
[LOG] Computing n1_to_2 for num 224
[LOG] Process 23: Calculating Neighbors
[LOG] Loading pickle file data_184.pickle
[LOG] Processing node features for num 184
[LOG] Processing tetra features for num 800
[LOG] Processing edge features for num 184
[LOG] Removed 1 subset clusters.
[LOG] Processing tetra features for num 296
[LOG] Processing tetra features for num 184
[LOG] Computing n0_to_3 for num 80
[LOG] Processing cluster features for num 800
[LOG] Computing n0_to_4 for num 80
[LOG] Processing cluster features for num 296
[LOG] Process 21: Calculating Neighbors
[LOG] Loading pickle file data_168.pickle
[LOG] Processing node features for num 168
[LOG] We will select 1539 edges and 1360 tetra
[LOG] Edges from tetra 0 and KDTree 1539 with 0 edges in common.
[LOG] Processing cluster features for num 800
[LOG] Computing n1_to_2 for num 80
[LOG] Processing cluster features for num 184
[LOG] Computing n0_to_3 for num 336
[LOG] Processing cluster features for num 296
[LOG] Computing n0_to_4 for num 336
[LOG] Processing cluster features for num 184
[LOG] Processing edge features for num 168
[LOG] Processing adjacency and incidence matrices for num 800
[LOG] Computing n0_to_0 for num 800
[LOG] Computing n1_to_2 for num 336
[LOG] Process 97: Created combinatorial complex for file data_776.hdf5
[LOG] Processing adjacency and incidence matrices for num 296
[LOG] Computing n0_to_0 for num 296
[LOG] Processing adjacency and incidence matrices for num 184
[LOG] Computing n0_to_0 for num 184
[LOG] Computing n1_to_3 for num 224
[LOG] Computing n1_to_4 for num 224
[LOG] Computing n1_to_1 for num 800
[LOG] Processing tetra features for num 168
[LOG] GENERATED TETRA
[LOG] Process 8: Calculating Neighbors
[LOG] Loading pickle file data_64.pickle
[LOG] Processing node features for num 64
[LOG] Computing n1_to_1 for num 184
[LOG] Computing n1_to_3 for num 336
[LOG] Computing n2_to_3 for num 224
[LOG] Computing n1_to_4 for num 336
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1761 Tetrahedra.
    [LOG] Generated 46 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.26086956521739
    [LOG] Max number of nodes per cluster is 28 and the number is 23
[LOG] GENERATED TETRA
[LOG] Computing n2_to_3 for num 336
[LOG] Computing n1_to_1 for num 296
[LOG] Removed 0 subset clusters.
[LOG] Processing edge features for num 64
[LOG] Computing n2_to_4 for num 336
[LOG] Computing n2_to_4 for num 224
[LOG] Processing cluster features for num 168
[LOG] Computing n3_to_4 for num 336
[LOG] Global feature for num 336
[LOG] Processing tetra features for num 64
[LOG] Computing n3_to_4 for num 224
[LOG] Global feature for num 224
[LOG] Computing n2_to_2 (adjacency) for num 184
[LOG] Processing cluster features for num 168
[LOG] Computing n1_to_3 for num 80
[LOG] Global feature for num 336
[LOG] Global feature for num 224
[LOG] Saving tensor x_0_224.pt
[LOG] Saving tensor x_0_336.pt
[LOG] Computing n1_to_4 for num 80
[LOG] Saving tensor x_1_336.pt
[LOG] Saving tensor x_1_224.pt
[LOG] GENERATED TETRA
[LOG] Computing n2_to_3 for num 80
[LOG] Saving tensor x_2_336.pt
[LOG] Saving tensor x_2_224.pt
[LOG] Processing adjacency and incidence matrices for num 168
[LOG] Computing n0_to_0 for num 168
[LOG] Saving tensor x_3_336.pt
[LOG] Saving tensor x_3_224.pt
[LOG] Saving tensor x_4_224.pt
[LOG] Saving tensor x_4_336.pt
[LOG] Saving tensor n0_to_0_224.pt
[LOG] Computing n2_to_2 (adjacency) for num 800
[LOG] Saving tensor n0_to_0_336.pt
[LOG] Removed 2 subset clusters.
[LOG] Processing cluster features for num 64
[LOG] Saving tensor n1_to_1_224.pt
[LOG] Saving tensor n1_to_1_336.pt
[LOG] Saving tensor n2_to_2_224.pt
[LOG] Computing n2_to_4 for num 80
[LOG] Saving tensor n2_to_2_336.pt
[LOG] Saving tensor n3_to_3_224.pt
[LOG] Processing cluster features for num 64
[LOG] Saving tensor n3_to_3_336.pt
[LOG] Computing n2_to_2 (adjacency) for num 832
[LOG] Saving tensor n4_to_4_336.pt
[LOG] We will select 371 edges and 1761 tetra
[LOG] Edges from tetra 0 and KDTree 371 with 0 edges in common.
[LOG] Saving tensor n4_to_4_224.pt
[LOG] Saving tensor n0_to_1_336.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n0_to_1_224.pt
[LOG] Process 97: Calculating Neighbors
[LOG] Loading pickle file data_776.pickle
[LOG] Processing node features for num 776
[LOG] Process 91: Created combinatorial complex for file data_728.hdf5
[LOG] Saving tensor n0_to_2_336.pt
[LOG] Computing n3_to_4 for num 80
[LOG] Saving tensor n0_to_2_224.pt
[LOG] Processing adjacency and incidence matrices for num 64
[LOG] Computing n0_to_0 for num 64
[LOG] Computing n3_to_3 (adjacency) for num 184
[LOG] Global feature for num 80
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor n0_to_3_336.pt
[LOG] Process 112: Created combinatorial complex for file data_888.hdf5
[LOG] Global feature for num 80
[LOG] Saving tensor n0_to_3_224.pt
[LOG] Saving tensor x_0_80.pt
[LOG] Computing n4_to_4 (coadjacency) for num 184
[LOG] Computing n1_to_1 for num 168
[LOG] Computing n0_to_1 for num 184
[LOG] Processing edge features for num 776
[LOG] Saving tensor n0_to_4_336.pt
[LOG] Saving tensor n0_to_4_224.pt
[LOG] Saving tensor x_1_80.pt
[LOG] Computing n0_to_2 for num 184
[LOG] Saving tensor n1_to_2_336.pt
[LOG] Saving tensor n1_to_2_224.pt
[LOG] Processing tetra features for num 776
[LOG] Computing n1_to_1 for num 64
[LOG] Process 51: Created combinatorial complex for file data_408.hdf5
[LOG] Processing cluster features for num 776
[LOG] Removed 2 subset clusters.
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1567 Tetrahedra.
    [LOG] Generated 56 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.142857142857142
    [LOG] Max number of nodes per cluster is 45 and the number is 2
[LOG] Processing cluster features for num 776
[LOG] Computing n2_to_2 (adjacency) for num 296
[LOG] Processing adjacency and incidence matrices for num 776
[LOG] Computing n0_to_0 for num 776
[LOG] Computing n3_to_3 (adjacency) for num 800
[LOG] Computing n1_to_1 for num 776
[LOG] Computing n3_to_3 (adjacency) for num 832
[LOG] Computing n4_to_4 (coadjacency) for num 800
[LOG] Computing n4_to_4 (coadjacency) for num 832
[LOG] Process 31: Created combinatorial complex for file data_248.hdf5
[LOG] Computing n0_to_1 for num 800
[LOG] Computing n0_to_1 for num 832
[LOG] Process 112: Calculating Neighbors
[LOG] Loading pickle file data_888.pickle
[LOG] Processing node features for num 888
[LOG] Computing n0_to_2 for num 800
[LOG] Computing n0_to_3 for num 184
[LOG] Computing n0_to_4 for num 184
[LOG] Computing n2_to_2 (adjacency) for num 64
[LOG] Computing n2_to_2 (adjacency) for num 776
[LOG] Computing n3_to_3 (adjacency) for num 296
[LOG] Computing n4_to_4 (coadjacency) for num 296
[LOG] Processing edge features for num 888
[LOG] Computing n1_to_2 for num 184
[LOG] Computing n0_to_1 for num 296
[LOG] Removed 0 subset clusters.
[LOG] Processing tetra features for num 888
[LOG] Computing n0_to_2 for num 832
[LOG] Saving tensor x_2_80.pt
[LOG] Saving tensor x_3_80.pt
[LOG] Computing n0_to_2 for num 296
[LOG] Saving tensor n1_to_3_224.pt
[LOG] Removed 3 subset clusters.
[LOG] Saving tensor n1_to_3_336.pt
[LOG] Saving tensor x_4_80.pt
[LOG] Process 108: Created combinatorial complex for file data_860.hdf5
[LOG] We will select 288 edges and 1567 tetra
[LOG] Edges from tetra 0 and KDTree 288 with 0 edges in common.
[LOG] Saving tensor n0_to_0_80.pt
[LOG] Saving tensor n1_to_4_224.pt
[LOG] Computing n1_to_3 for num 184
[LOG] Saving tensor n1_to_4_336.pt
[LOG] Removed 3 subset clusters.
[LOG] Computing n1_to_4 for num 184

    [LOG] We Currently have 2513 Tetrahedra.
    [LOG] Generated 71 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.295774647887324
    [LOG] Max number of nodes per cluster is 37 and the number is 66
[LOG] Computing n2_to_3 for num 184
[LOG] Processing cluster features for num 888
[LOG] Process 118: Created combinatorial complex for file data_930.hdf5
[LOG] Computing n2_to_4 for num 184
[LOG] Processing cluster features for num 888
[LOG] Computing n3_to_3 (adjacency) for num 776
[LOG] Computing n4_to_4 (coadjacency) for num 776
[LOG] Computing n3_to_4 for num 184
[LOG] Computing n0_to_1 for num 776
[LOG] Global feature for num 184
[LOG] Global feature for num 184
[LOG] Saving tensor x_0_184.pt
[LOG] Processing adjacency and incidence matrices for num 888
[LOG] Computing n0_to_0 for num 888
[LOG] Process 91: Calculating Neighbors
[LOG] Loading pickle file data_728.pickle
[LOG] Processing node features for num 728
[LOG] Computing n0_to_2 for num 776
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2471 Tetrahedra.
    [LOG] Generated 62 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.483870967741936
    [LOG] Max number of nodes per cluster is 42 and the number is 38
[LOG] Processing edge features for num 728
[LOG] Computing n1_to_1 for num 888
[LOG] GENERATED TETRA
[LOG] Computing n2_to_2 (adjacency) for num 168
[LOG] Computing n3_to_3 (adjacency) for num 64
[LOG] Computing n4_to_4 (coadjacency) for num 64
[LOG] GENERATED TETRA
[LOG] GENERATED TETRA
[LOG] Computing n0_to_1 for num 64
[LOG] Computing n0_to_3 for num 800
[LOG] Processing tetra features for num 728
[LOG] Computing n0_to_3 for num 296
[LOG] Computing n0_to_4 for num 800
[LOG] Computing n0_to_2 for num 64
[LOG] Computing n0_to_4 for num 296
[LOG] Process 31: Calculating Neighbors
[LOG] Loading pickle file data_248.pickle
[LOG] Processing node features for num 248
[LOG] Process 48: Created combinatorial complex for file data_384.hdf5
[LOG] Computing n1_to_2 for num 296
[LOG] Computing n1_to_2 for num 800
[LOG] Processing edge features for num 248
[LOG] Computing n0_to_3 for num 832
[LOG] Computing n0_to_3 for num 776
[LOG] Computing n2_to_2 (adjacency) for num 888
[LOG] Process 108: Calculating Neighbors
[LOG] Loading pickle file data_860.pickle
[LOG] Processing node features for num 860
[LOG] Computing n0_to_4 for num 776
[LOG] Saving tensor n1_to_1_80.pt
[LOG] Saving tensor n2_to_3_336.pt
[LOG] Computing n3_to_3 (adjacency) for num 168
[LOG] Computing n0_to_4 for num 832
[LOG] Processing tetra features for num 248
[LOG] Computing n4_to_4 (coadjacency) for num 168
[LOG] GENERATED TETRA
[LOG] We will select 448 edges and 2513 tetra
[LOG] Edges from tetra 0 and KDTree 448 with 0 edges in common.
[LOG] Computing n1_to_2 for num 776
[LOG] Process 76: Created combinatorial complex for file data_608.hdf5
[LOG] Computing n0_to_1 for num 168
[LOG] Computing n1_to_2 for num 832
[LOG] Processing cluster features for num 728
[LOG] Processing edge features for num 860
[LOG] Processing cluster features for num 248
[LOG] Process 51: Calculating Neighbors
[LOG] Loading pickle file data_408.pickle
[LOG] Processing node features for num 408
[LOG] Computing n1_to_3 for num 776
[LOG] We will select 497 edges and 2471 tetra
[LOG] Edges from tetra 0 and KDTree 497 with 0 edges in common.
[LOG] Processing tetra features for num 860
[LOG] Computing n1_to_4 for num 776
[LOG] Processing cluster features for num 248
[LOG] Computing n2_to_3 for num 776
[LOG] Processing cluster features for num 728
[LOG] Computing n1_to_3 for num 800
[LOG] Computing n0_to_2 for num 168
[LOG] Computing n1_to_4 for num 800
[LOG] Computing n2_to_4 for num 776
[LOG] Processing adjacency and incidence matrices for num 248
[LOG] Computing n0_to_0 for num 248
[LOG] Processing edge features for num 408
[LOG] Computing n2_to_3 for num 800
[LOG] Computing n3_to_4 for num 776
[LOG] Global feature for num 776
[LOG] Global feature for num 776
[LOG] Saving tensor x_0_776.pt
[LOG] Computing n1_to_1 for num 248
[LOG] Processing adjacency and incidence matrices for num 728
[LOG] Computing n0_to_0 for num 728
[LOG] Removed 0 subset clusters.
[LOG] Computing n3_to_3 (adjacency) for num 888
[LOG] Computing n2_to_4 for num 800
[LOG] Processing tetra features for num 408
[LOG] Processing cluster features for num 860
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1723 Tetrahedra.
    [LOG] Generated 47 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.48936170212766
    [LOG] Max number of nodes per cluster is 68 and the number is 42
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2313 Tetrahedra.
    [LOG] Generated 55 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.945454545454545
    [LOG] Max number of nodes per cluster is 50 and the number is 37
[LOG] Computing n4_to_4 (coadjacency) for num 888
[LOG] Computing n0_to_1 for num 888
[LOG] GENERATED TETRA
[LOG] Processing cluster features for num 860
[LOG] Computing n3_to_4 for num 800
[LOG] Computing n0_to_2 for num 888
[LOG] Global feature for num 800
[LOG] Global feature for num 800
[LOG] Saving tensor x_0_800.pt
[LOG] Computing n2_to_2 (adjacency) for num 248
[LOG] Processing adjacency and incidence matrices for num 860
[LOG] Computing n0_to_0 for num 860
[LOG] Computing n1_to_3 for num 296
[LOG] Computing n0_to_3 for num 64
[LOG] Computing n1_to_4 for num 296
[LOG] Computing n1_to_1 for num 728
[LOG] Process 48: Calculating Neighbors
[LOG] Loading pickle file data_384.pickle
[LOG] Processing node features for num 384
[LOG] Saving tensor n2_to_3_224.pt
[LOG] Computing n0_to_4 for num 64
[LOG] Processing cluster features for num 408
[LOG] Saving tensor n2_to_4_336.pt
[LOG] Computing n2_to_3 for num 296
[LOG] Saving tensor x_1_800.pt
[LOG] Saving tensor x_1_776.pt
[LOG] Saving tensor x_2_800.pt
[LOG] Saving tensor x_1_184.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n2_to_2_80.pt
[LOG] Saving tensor x_2_776.pt
[LOG] Saving tensor x_3_800.pt
[LOG] Saving tensor n2_to_4_224.pt
[LOG] Computing n1_to_2 for num 64
[LOG] Process 118: Calculating Neighbors
[LOG] Loading pickle file data_930.pickle
[LOG] Processing node features for num 930
[LOG] Saving tensor x_4_800.pt
[LOG] Computing n0_to_3 for num 168
[LOG] Saving tensor x_2_184.pt
[LOG] Saving tensor x_3_776.pt
[LOG] Saving tensor n0_to_0_800.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1769 Tetrahedra.
    [LOG] Generated 58 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.431034482758621
    [LOG] Max number of nodes per cluster is 36 and the number is 44
[LOG] Process 76: Calculating Neighbors
[LOG] Loading pickle file data_608.pickle
[LOG] Processing node features for num 608
[LOG] Computing n2_to_4 for num 296
[LOG] Processing edge features for num 384
[LOG] Saving tensor x_3_184.pt
[LOG] Saving tensor n3_to_4_224.pt
[LOG] Saving tensor x_4_776.pt
[LOG] Saving tensor n3_to_3_80.pt
[LOG] Saving tensor n3_to_4_336.pt
[LOG] Computing n0_to_4 for num 168
[LOG] Saving tensor x_4_184.pt
[LOG] Saving tensor n1_to_1_800.pt
[LOG] Saving tensor n0_to_0_776.pt
[LOG] Computing n1_to_1 for num 860
[LOG] Saving tensor global_feature_224.pt
[LOG] Processing cluster features for num 408
[LOG] Saving tensor n0_to_0_184.pt
[LOG] GENERATED TETRA
[LOG] Process 28: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2353 Tetrahedra.
    [LOG] Generated 51 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.588235294117647
    [LOG] Max number of nodes per cluster is 44 and the number is 44
[LOG] Saving tensor global_feature_336.pt
[LOG] Computing n1_to_2 for num 168
[LOG] Saving tensor n4_to_4_80.pt
[LOG] Processing edge features for num 930
[LOG] Saving tensor n2_to_2_800.pt
[LOG] Computing n3_to_4 for num 296
[LOG] Process 42: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Global feature for num 296
[LOG] Saving tensor n1_to_1_184.pt
[LOG] Saving tensor n1_to_1_776.pt
[LOG] Processing tetra features for num 384
[LOG] Processing edge features for num 608
[LOG] Global feature for num 296
[LOG] Saving tensor x_0_296.pt
[LOG] Saving tensor n3_to_3_800.pt
[LOG] We will select 479 edges and 1723 tetra
[LOG] Edges from tetra 0 and KDTree 479 with 0 edges in common.
[LOG] Saving tensor n0_to_1_80.pt
[LOG] Processing adjacency and incidence matrices for num 408
[LOG] Computing n0_to_0 for num 408
[LOG] Computing n3_to_3 (adjacency) for num 248
[LOG] Processing tetra features for num 930
[LOG] Saving tensor n2_to_2_776.pt
[LOG] Saving tensor n4_to_4_800.pt
[LOG] Computing n4_to_4 (coadjacency) for num 248
[LOG] Saving tensor x_1_296.pt
[LOG] Saving tensor n0_to_2_80.pt
[LOG] Saving tensor n2_to_2_184.pt
[LOG] Saving tensor n3_to_3_776.pt
[LOG] Processing tetra features for num 608
[LOG] Computing n0_to_1 for num 248
[LOG] Saving tensor n0_to_1_800.pt
[LOG] Saving tensor n4_to_4_776.pt
[LOG] Saving tensor x_2_296.pt
[LOG] Saving tensor n0_to_3_80.pt
[LOG] Saving tensor n3_to_3_184.pt
[LOG] We will select 156 edges and 2313 tetra
[LOG] Edges from tetra 0 and KDTree 156 with 0 edges in common.
[LOG] Computing n0_to_2 for num 248
[LOG] Saving tensor n0_to_4_80.pt
[LOG] Saving tensor n4_to_4_184.pt
[LOG] Saving tensor n0_to_1_776.pt
[LOG] Saving tensor n0_to_2_800.pt
[LOG] Processing cluster features for num 384
[LOG] Saving tensor x_3_296.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n0_to_1_184.pt
[LOG] Saving tensor n0_to_2_184.pt
[LOG] Saving tensor n0_to_3_800.pt
[LOG] Saving tensor n0_to_2_776.pt
[LOG] Saving tensor x_4_296.pt
[LOG] Saving tensor n1_to_2_80.pt
[LOG] Computing n1_to_1 for num 408
[LOG] Saving tensor n0_to_4_800.pt
[LOG] Saving tensor n0_to_3_184.pt
[LOG] Saving tensor n0_to_0_296.pt
[LOG] Processing cluster features for num 384
[LOG] Removed 1 subset clusters.
[LOG] Processing cluster features for num 930
[LOG] Saving tensor n0_to_3_776.pt
[LOG] Saving tensor n1_to_2_800.pt
[LOG] Saving tensor n0_to_4_184.pt
[LOG] Computing n0_to_3 for num 888
[LOG] Saving tensor n0_to_4_776.pt
[LOG] Saving tensor n1_to_2_184.pt
[LOG] Saving tensor n1_to_3_800.pt
[LOG] Process 2: Created combinatorial complex for file data_16.hdf5
[LOG] Processing adjacency and incidence matrices for num 384
[LOG] Computing n0_to_0 for num 384
[LOG] Processing cluster features for num 608
[LOG] Saving tensor n1_to_2_776.pt
[LOG] Computing n1_to_3 for num 64
[LOG] Saving tensor n1_to_3_184.pt
[LOG] Saving tensor n1_to_1_296.pt
[LOG] Processing cluster features for num 930
[LOG] Saving tensor n1_to_4_800.pt
[LOG] Saving tensor n1_to_3_776.pt
[LOG] Computing n1_to_4 for num 64
[LOG] Saving tensor n1_to_4_184.pt
[LOG] Computing n0_to_4 for num 888
[LOG] Saving tensor n2_to_2_296.pt
[LOG] Computing n2_to_3 for num 64
[LOG] Saving tensor n2_to_3_800.pt
[LOG] Saving tensor n1_to_3_80.pt
[LOG] Processing cluster features for num 608
[LOG] Computing n1_to_1 for num 384
[LOG] Processing adjacency and incidence matrices for num 930
[LOG] Computing n0_to_0 for num 930
[LOG] Computing n1_to_2 for num 888
[LOG] We will select 1366 edges and 1769 tetra
[LOG] Edges from tetra 0 and KDTree 1366 with 0 edges in common.
[LOG] Computing n2_to_4 for num 64
[LOG] We will select 1194 edges and 2353 tetra
[LOG] Edges from tetra 0 and KDTree 1194 with 0 edges in common.
[LOG] Saving tensor n2_to_3_184.pt
[LOG] Saving tensor n1_to_4_80.pt
[LOG] Saving tensor n1_to_4_776.pt
[LOG] Saving tensor n2_to_4_184.pt
[LOG] Computing n1_to_3 for num 832
[LOG] Saving tensor n3_to_3_296.pt
[LOG] Saving tensor n2_to_3_80.pt
[LOG] Saving tensor n2_to_3_776.pt
[LOG] Saving tensor n2_to_4_800.pt
[LOG] Processing adjacency and incidence matrices for num 608
[LOG] Computing n0_to_0 for num 608
[LOG] Saving tensor n4_to_4_296.pt
[LOG] Saving tensor n3_to_4_184.pt
[LOG] Saving tensor n2_to_4_776.pt
[LOG] Saving tensor n2_to_4_80.pt
[LOG] Saving tensor n3_to_4_800.pt
[LOG] Computing n3_to_4 for num 64
[LOG] Global feature for num 64
[LOG] Computing n1_to_4 for num 832
[LOG] Computing n1_to_1 for num 930
[LOG] Global feature for num 64
[LOG] Saving tensor x_0_64.pt
[LOG] Removed 2 subset clusters.
[LOG] Saving tensor n0_to_1_296.pt
[LOG] Saving tensor global_feature_184.pt
[LOG] Saving tensor x_1_64.pt
[LOG] Computing n2_to_2 (adjacency) for num 860
[LOG] Process 23: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor global_feature_800.pt
[LOG] Saving tensor x_2_64.pt
[LOG] Saving tensor n3_to_4_80.pt
[LOG] Saving tensor n3_to_4_776.pt
[LOG] Process 100: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor x_3_64.pt
[LOG] Saving tensor global_feature_80.pt
[LOG] Saving tensor n0_to_2_296.pt
[LOG] Saving tensor x_4_64.pt
[LOG] Saving tensor global_feature_776.pt
[LOG] Process 10: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n2_to_3 for num 832
[LOG] Saving tensor n0_to_0_64.pt
[LOG] Process 97: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_3_296.pt
[LOG] Computing n1_to_1 for num 608
[LOG] Computing n2_to_2 (adjacency) for num 384
[LOG] Saving tensor n1_to_1_64.pt
[LOG] Removed 8 subset clusters.

    [LOG] We Currently have 3602 Tetrahedra.
    [LOG] Generated 114 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.31578947368421
    [LOG] Max number of nodes per cluster is 32 and the number is 92
[LOG] Saving tensor n0_to_4_296.pt
[LOG] Saving tensor n2_to_2_64.pt
[LOG] Computing n0_to_3 for num 248
[LOG] Saving tensor n1_to_2_296.pt
[LOG] Saving tensor n1_to_3_296.pt
[LOG] Saving tensor n3_to_3_64.pt
[LOG] Computing n0_to_4 for num 248
[LOG] GENERATED TETRA
[LOG] Saving tensor n4_to_4_64.pt
[LOG] Saving tensor n1_to_4_296.pt
[LOG] Saving tensor n0_to_1_64.pt
[LOG] Computing n2_to_4 for num 832
[LOG] Computing n2_to_2 (adjacency) for num 408
[LOG] Computing n1_to_3 for num 888
[LOG] Saving tensor n2_to_3_296.pt
[LOG] Saving tensor n0_to_2_64.pt
[LOG] Computing n1_to_2 for num 248
[LOG] Saving tensor n2_to_4_296.pt
[LOG] Computing n1_to_4 for num 888
[LOG] Saving tensor n0_to_3_64.pt
[LOG] Saving tensor n3_to_4_296.pt
[LOG] Computing n2_to_3 for num 888
[LOG] Saving tensor global_feature_296.pt
[LOG] Process 13: Created combinatorial complex for file data_104.hdf5
[LOG] Saving tensor n0_to_4_64.pt
[LOG] Process 37: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n1_to_2_64.pt
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 2027 Tetrahedra.
    [LOG] Generated 49 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.204081632653061
    [LOG] Max number of nodes per cluster is 28 and the number is 44
[LOG] Computing n3_to_4 for num 832
[LOG] Saving tensor n1_to_3_64.pt
[LOG] Global feature for num 832
[LOG] Saving tensor n1_to_4_64.pt
[LOG] Global feature for num 832
[LOG] Saving tensor x_0_832.pt
[LOG] Computing n2_to_4 for num 888
[LOG] Saving tensor n2_to_3_64.pt
[LOG] Saving tensor x_1_832.pt
[LOG] Saving tensor x_2_832.pt
[LOG] Saving tensor n2_to_4_64.pt
[LOG] Saving tensor x_3_832.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1998 Tetrahedra.
    [LOG] Generated 54 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.51851851851852
    [LOG] Max number of nodes per cluster is 54 and the number is 12
[LOG] Saving tensor x_4_832.pt
[LOG] Saving tensor n0_to_0_832.pt
[LOG] Saving tensor n3_to_4_64.pt
[LOG] Saving tensor global_feature_64.pt
[LOG] Computing n1_to_3 for num 248
[LOG] Process 8: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n1_to_1_832.pt
[LOG] Computing n1_to_4 for num 248
[LOG] Computing n3_to_4 for num 888
[LOG] Computing n2_to_3 for num 248
[LOG] Global feature for num 888
[LOG] Global feature for num 888
[LOG] Saving tensor x_0_888.pt
[LOG] Computing n1_to_3 for num 168
[LOG] Computing n2_to_2 (adjacency) for num 930
[LOG] Saving tensor n2_to_2_832.pt
[LOG] Saving tensor x_1_888.pt
[LOG] Saving tensor x_2_888.pt
[LOG] Computing n2_to_4 for num 248
[LOG] Computing n1_to_4 for num 168
[LOG] Saving tensor n3_to_3_832.pt
[LOG] Saving tensor x_3_888.pt
[LOG] Computing n3_to_3 (adjacency) for num 384
[LOG] Saving tensor x_4_888.pt
[LOG] Saving tensor n0_to_0_888.pt
[LOG] Saving tensor n4_to_4_832.pt
[LOG] Computing n3_to_4 for num 248
[LOG] Computing n4_to_4 (coadjacency) for num 384
[LOG] Global feature for num 248
[LOG] Saving tensor n1_to_1_888.pt
[LOG] Saving tensor n0_to_1_832.pt
[LOG] Global feature for num 248
[LOG] Computing n0_to_1 for num 384
[LOG] Saving tensor x_0_248.pt
[LOG] Computing n2_to_3 for num 168
[LOG] Saving tensor n2_to_2_888.pt
[LOG] Saving tensor n0_to_2_832.pt
[LOG] Saving tensor x_1_248.pt
[LOG] Computing n0_to_2 for num 384
[LOG] Computing n2_to_2 (adjacency) for num 728
[LOG] Saving tensor x_2_248.pt
[LOG] Saving tensor n3_to_3_888.pt
[LOG] Computing n2_to_2 (adjacency) for num 608
[LOG] Saving tensor x_3_248.pt
[LOG] Saving tensor n0_to_3_832.pt
[LOG] Saving tensor x_4_248.pt
[LOG] Computing n2_to_4 for num 168
[LOG] Saving tensor n0_to_0_248.pt
[LOG] Saving tensor n4_to_4_888.pt
[LOG] Saving tensor n0_to_4_832.pt
[LOG] Saving tensor n1_to_1_248.pt
[LOG] Saving tensor n0_to_1_888.pt
[LOG] Saving tensor n1_to_2_832.pt
[LOG] Process 26: Created combinatorial complex for file data_208.hdf5
[LOG] Saving tensor n2_to_2_248.pt
[LOG] Saving tensor n0_to_2_888.pt
[LOG] Saving tensor n1_to_3_832.pt
[LOG] Removed 3 subset clusters.
[LOG] Computing n3_to_4 for num 168

    [LOG] We Currently have 2592 Tetrahedra.
    [LOG] Generated 96 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.427083333333334
    [LOG] Max number of nodes per cluster is 39 and the number is 17
[LOG] Saving tensor n3_to_3_248.pt
[LOG] Global feature for num 168
[LOG] Saving tensor n0_to_3_888.pt
[LOG] Saving tensor n4_to_4_248.pt
[LOG] Global feature for num 168
[LOG] Saving tensor n1_to_4_832.pt
[LOG] Saving tensor x_0_168.pt
[LOG] Saving tensor n0_to_4_888.pt
[LOG] Saving tensor n0_to_1_248.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n0_to_2_248.pt
[LOG] Saving tensor n2_to_3_832.pt
[LOG] Saving tensor x_1_168.pt
[LOG] Saving tensor n1_to_2_888.pt
[LOG] Saving tensor x_2_168.pt
[LOG] Saving tensor n2_to_4_832.pt
[LOG] Computing n3_to_3 (adjacency) for num 860
[LOG] Saving tensor x_3_168.pt
[LOG] Saving tensor n0_to_3_248.pt
[LOG] Process 16: Created combinatorial complex for file data_128.hdf5
[LOG] Saving tensor x_4_168.pt
[LOG] Saving tensor n1_to_3_888.pt
[LOG] Saving tensor n0_to_0_168.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n3_to_4_832.pt
[LOG] Saving tensor n0_to_4_248.pt
[LOG] Computing n4_to_4 (coadjacency) for num 860
[LOG] Saving tensor n1_to_4_888.pt
[LOG] Saving tensor global_feature_832.pt
[LOG] Saving tensor n1_to_1_168.pt
[LOG] Process 104: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n2_to_3_888.pt
[LOG] Computing n0_to_1 for num 860
[LOG] Saving tensor n1_to_2_248.pt
[LOG] Saving tensor n1_to_3_248.pt
[LOG] Saving tensor n2_to_2_168.pt
[LOG] Saving tensor n2_to_4_888.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 930
[LOG] Process 2: Calculating Neighbors
[LOG] Loading pickle file data_16.pickle
[LOG] Processing node features for num 16
[LOG] Process 13: Calculating Neighbors
[LOG] Loading pickle file data_104.pickle
[LOG] Processing node features for num 104
[LOG] We will select 284 edges and 1998 tetra
[LOG] Edges from tetra 0 and KDTree 284 with 0 edges in common.
[LOG] We will select 315 edges and 2027 tetra
[LOG] Edges from tetra 0 and KDTree 315 with 0 edges in common.
[LOG] Computing n4_to_4 (coadjacency) for num 930
[LOG] Computing n0_to_2 for num 860
[LOG] Computing n0_to_1 for num 930
[LOG] GENERATED TETRA
[LOG] Saving tensor n3_to_3_168.pt
[LOG] Saving tensor n1_to_4_248.pt
[LOG] Saving tensor n4_to_4_168.pt
[LOG] Saving tensor n3_to_4_888.pt
[LOG] Saving tensor n0_to_1_168.pt
[LOG] Saving tensor global_feature_888.pt
[LOG] Processing edge features for num 104
[LOG] Saving tensor n2_to_3_248.pt
[LOG] Processing edge features for num 16
[LOG] Removed 1 subset clusters.
[LOG] Process 112: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_2_168.pt
[LOG] Process 78: Created combinatorial complex for file data_624.hdf5
[LOG] Saving tensor n2_to_4_248.pt
[LOG] Saving tensor n0_to_3_168.pt
[LOG] Computing n0_to_2 for num 930
[LOG] Saving tensor n3_to_4_248.pt
[LOG] Saving tensor n0_to_4_168.pt
[LOG] Saving tensor global_feature_248.pt
[LOG] Saving tensor n1_to_2_168.pt
[LOG] Process 31: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing tetra features for num 104
[LOG] Saving tensor n1_to_3_168.pt
[LOG] Saving tensor n1_to_4_168.pt
[LOG] Saving tensor n2_to_3_168.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n2_to_4_168.pt
[LOG] Saving tensor n3_to_4_168.pt
[LOG] Saving tensor global_feature_168.pt
[LOG] Process 21: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing tetra features for num 16
[LOG] We will select 1430 edges and 3602 tetra
[LOG] Edges from tetra 0 and KDTree 1430 with 0 edges in common.
[LOG] Removed 4 subset clusters.

    [LOG] We Currently have 2257 Tetrahedra.
    [LOG] Generated 69 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.956521739130435
    [LOG] Max number of nodes per cluster is 30 and the number is 16
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_3 (adjacency) for num 408
[LOG] Processing cluster features for num 104
[LOG] Computing n0_to_3 for num 384
[LOG] Computing n4_to_4 (coadjacency) for num 408
[LOG] Process 26: Calculating Neighbors
[LOG] Loading pickle file data_208.pickle
[LOG] Processing node features for num 208
[LOG] Removed 2 subset clusters.
[LOG] Computing n0_to_4 for num 384

    [LOG] We Currently have 2592 Tetrahedra.
    [LOG] Generated 61 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.737704918032787
    [LOG] Max number of nodes per cluster is 62 and the number is 59
[LOG] Computing n0_to_1 for num 408
[LOG] Processing cluster features for num 104
[LOG] Computing n1_to_2 for num 384
[LOG] Processing edge features for num 208
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 608
[LOG] GENERATED TETRA
[LOG] Computing n0_to_2 for num 408
[LOG] Computing n4_to_4 (coadjacency) for num 608
[LOG] Processing adjacency and incidence matrices for num 104
[LOG] Computing n0_to_0 for num 104
[LOG] Computing n0_to_1 for num 608
[LOG] Processing cluster features for num 16
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing tetra features for num 208
[LOG] Computing n0_to_2 for num 608
[LOG] Computing n1_to_1 for num 104
[LOG] Computing n1_to_3 for num 384
[LOG] We will select 928 edges and 2592 tetra
[LOG] Edges from tetra 0 and KDTree 928 with 0 edges in common.
[LOG] Computing n1_to_4 for num 384
[LOG] Computing n2_to_3 for num 384
[LOG] GENERATED TETRA
[LOG] Removed 1 subset clusters.
[LOG] Processing cluster features for num 16
[LOG] Process 78: Calculating Neighbors
[LOG] Loading pickle file data_624.pickle
[LOG] Processing node features for num 624
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_4 for num 384
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_3 for num 930
[LOG] Processing cluster features for num 208
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_4 for num 930
[LOG] Processing edge features for num 624
[LOG] Computing n3_to_4 for num 384
[LOG] Computing n0_to_3 for num 860
[LOG] Global feature for num 384
[LOG] Processing adjacency and incidence matrices for num 16
[LOG] Computing n0_to_0 for num 16
[LOG] Global feature for num 384
[LOG] Saving tensor x_0_384.pt
[LOG] Processing cluster features for num 208
[LOG] Computing n1_to_2 for num 930
[LOG] We will select 669 edges and 2257 tetra
[LOG] Edges from tetra 0 and KDTree 669 with 0 edges in common.
[LOG] Saving tensor x_1_384.pt
[LOG] Saving tensor x_2_384.pt
[LOG] Computing n0_to_4 for num 860
[LOG] Saving tensor x_3_384.pt
[LOG] We will select 463 edges and 2592 tetra
[LOG] Edges from tetra 0 and KDTree 463 with 0 edges in common.
[LOG] Saving tensor x_4_384.pt
[LOG] Removed 4 subset clusters.

    [LOG] We Currently have 3339 Tetrahedra.
    [LOG] Generated 102 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.46078431372549
    [LOG] Max number of nodes per cluster is 44 and the number is 12
[LOG] Process 16: Calculating Neighbors
[LOG] Loading pickle file data_128.pickle
[LOG] Processing node features for num 128
[LOG] Process 38: Created combinatorial complex for file data_304.hdf5
[LOG] Saving tensor n0_to_0_384.pt
[LOG] Processing tetra features for num 624
[LOG] Processing adjacency and incidence matrices for num 208
[LOG] Computing n0_to_0 for num 208
[LOG] Computing n1_to_2 for num 860
[LOG] Saving tensor n1_to_1_384.pt
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n2_to_2_384.pt

    [LOG] We Currently have 2663 Tetrahedra.
    [LOG] Generated 81 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.506172839506172
    [LOG] Max number of nodes per cluster is 40 and the number is 76
[LOG] Computing n2_to_2 (adjacency) for num 104
[LOG] Saving tensor n3_to_3_384.pt
[LOG] Saving tensor n4_to_4_384.pt
[LOG] Processing edge features for num 128
[LOG] Saving tensor n0_to_1_384.pt
[LOG] Saving tensor n0_to_2_384.pt
[LOG] Saving tensor n0_to_3_384.pt
[LOG] Saving tensor n0_to_4_384.pt
[LOG] Saving tensor n1_to_2_384.pt
[LOG] Processing cluster features for num 624
[LOG] Saving tensor n1_to_3_384.pt
[LOG] Computing n3_to_3 (adjacency) for num 728
[LOG] Saving tensor n1_to_4_384.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n4_to_4 (coadjacency) for num 728
[LOG] Saving tensor n2_to_3_384.pt
[LOG] Processing tetra features for num 128
[LOG] Saving tensor n2_to_4_384.pt
[LOG] Computing n0_to_1 for num 728
[LOG] Processing cluster features for num 624
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_1 for num 208
[LOG] Saving tensor n3_to_4_384.pt
[LOG] Saving tensor global_feature_384.pt
[LOG] Process 48: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_3 for num 930
[LOG] Processing adjacency and incidence matrices for num 624
[LOG] Computing n0_to_0 for num 624
[LOG] Computing n1_to_4 for num 930
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_3 for num 930
[LOG] Computing n0_to_2 for num 728
[LOG] Computing n0_to_3 for num 608
[LOG] GENERATED TETRA
[LOG] Computing n2_to_4 for num 930
[LOG] Removed 3 subset clusters.
[LOG] Computing n0_to_4 for num 608
[LOG] Calculating for cell ranks 0 and 2
[LOG] GENERATED TETRA
[LOG] Processing cluster features for num 128
[LOG] Computing n1_to_1 for num 16
[LOG] Computing n1_to_3 for num 860
[LOG] Computing n3_to_4 for num 930
[LOG] Computing n1_to_2 for num 608
[LOG] Global feature for num 930
[LOG] Calculating for cell ranks 0 and 1
[LOG] Global feature for num 930
[LOG] Saving tensor x_0_930.pt
[LOG] Computing n1_to_4 for num 860
[LOG] Computing n1_to_1 for num 624
[LOG] Saving tensor x_1_930.pt
[LOG] Saving tensor x_2_930.pt
[LOG] Computing n2_to_3 for num 860
[LOG] Saving tensor x_3_930.pt
[LOG] Saving tensor x_4_930.pt
[LOG] Saving tensor n0_to_0_930.pt
[LOG] Saving tensor n1_to_1_930.pt
[LOG] Process 38: Calculating Neighbors
[LOG] Loading pickle file data_304.pickle
[LOG] Processing node features for num 304
[LOG] Processing cluster features for num 128
[LOG] Saving tensor n2_to_2_930.pt
[LOG] Saving tensor n3_to_3_930.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing edge features for num 304
[LOG] Computing n2_to_4 for num 860
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 89: Created combinatorial complex for file data_712.hdf5
[LOG] We will select 302 edges and 2663 tetra
[LOG] Edges from tetra 0 and KDTree 302 with 0 edges in common.
[LOG] Saving tensor n4_to_4_930.pt
[LOG] Computing n0_to_3 for num 408
[LOG] Processing adjacency and incidence matrices for num 128
[LOG] Computing n0_to_0 for num 128
[LOG] Saving tensor n0_to_1_930.pt
[LOG] Saving tensor n0_to_2_930.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2408 Tetrahedra.
    [LOG] Generated 73 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.534246575342467
    [LOG] Max number of nodes per cluster is 47 and the number is 38
[LOG] Saving tensor n0_to_3_930.pt
[LOG] Processing tetra features for num 304
[LOG] Saving tensor n0_to_4_930.pt
[LOG] Computing n0_to_4 for num 408
[LOG] Computing n3_to_4 for num 860
[LOG] Global feature for num 860
[LOG] Global feature for num 860
[LOG] Saving tensor x_0_860.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor x_1_860.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n1_to_2_930.pt
[LOG] Saving tensor x_2_860.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor x_3_860.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor x_4_860.pt
[LOG] Computing n1_to_2 for num 408
[LOG] Saving tensor n1_to_3_930.pt
[LOG] Saving tensor n0_to_0_860.pt
[LOG] Saving tensor n1_to_4_930.pt
[LOG] Saving tensor n1_to_1_860.pt
[LOG] We will select 1250 edges and 3339 tetra
[LOG] Edges from tetra 0 and KDTree 1250 with 0 edges in common.
[LOG] Saving tensor n2_to_3_930.pt
[LOG] Saving tensor n2_to_2_860.pt
[LOG] Saving tensor n2_to_4_930.pt
[LOG] Computing n3_to_3 (adjacency) for num 104
[LOG] GENERATED TETRA
[LOG] Saving tensor n3_to_3_860.pt
[LOG] Saving tensor n3_to_4_930.pt
[LOG] Computing n4_to_4 (coadjacency) for num 104
[LOG] Saving tensor global_feature_930.pt
[LOG] Saving tensor n4_to_4_860.pt
[LOG] Processing cluster features for num 304
[LOG] Process 118: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_3 for num 608
[LOG] Computing n0_to_1 for num 104
[LOG] Saving tensor n0_to_1_860.pt
[LOG] Saving tensor n0_to_2_860.pt
[LOG] Computing n1_to_4 for num 608
[LOG] Saving tensor n0_to_3_860.pt
[LOG] Computing n0_to_2 for num 104
[LOG] Computing n2_to_3 for num 608
[LOG] Saving tensor n0_to_4_860.pt
[LOG] Processing cluster features for num 304
[LOG] Saving tensor n1_to_2_860.pt
[LOG] Saving tensor n1_to_3_860.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n1_to_4_860.pt
[LOG] Computing n1_to_1 for num 128
[LOG] Saving tensor n2_to_3_860.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3094 Tetrahedra.
    [LOG] Generated 77 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.87012987012987
    [LOG] Max number of nodes per cluster is 63 and the number is 51
[LOG] Saving tensor n2_to_4_860.pt
[LOG] Processing adjacency and incidence matrices for num 304
[LOG] Computing n0_to_0 for num 304
[LOG] Saving tensor n3_to_4_860.pt
[LOG] Computing n2_to_4 for num 608
[LOG] Saving tensor global_feature_860.pt
[LOG] Process 108: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 2934 Tetrahedra.
    [LOG] Generated 80 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.7
    [LOG] Max number of nodes per cluster is 29 and the number is 76
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_4 for num 608
[LOG] Global feature for num 608
[LOG] Computing n1_to_1 for num 304
[LOG] Global feature for num 608
[LOG] Saving tensor x_0_608.pt
[LOG] Computing n1_to_3 for num 408
[LOG] Saving tensor x_1_608.pt
[LOG] Computing n1_to_4 for num 408
[LOG] Process 89: Calculating Neighbors
[LOG] Loading pickle file data_712.pickle
[LOG] Processing node features for num 712
[LOG] Saving tensor x_2_608.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor x_3_608.pt
[LOG] Computing n2_to_3 for num 408
[LOG] Saving tensor x_4_608.pt
[LOG] Saving tensor n0_to_0_608.pt
[LOG] Removed 3 subset clusters.
[LOG] GENERATED TETRA
[LOG] Saving tensor n1_to_1_608.pt
[LOG] We will select 215 edges and 2408 tetra
[LOG] Edges from tetra 0 and KDTree 215 with 0 edges in common.
[LOG] Saving tensor n2_to_2_608.pt
[LOG] Processing edge features for num 712
[LOG] Saving tensor n3_to_3_608.pt
[LOG] Saving tensor n4_to_4_608.pt
[LOG] Process 5: Created combinatorial complex for file data_40.hdf5
[LOG] Saving tensor n0_to_1_608.pt
[LOG] Computing n2_to_2 (adjacency) for num 208
[LOG] Saving tensor n0_to_2_608.pt
[LOG] Processing tetra features for num 712
[LOG] Saving tensor n0_to_3_608.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2449 Tetrahedra.
    [LOG] Generated 61 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.688524590163935
    [LOG] Max number of nodes per cluster is 51 and the number is 25
[LOG] Computing n2_to_4 for num 408
[LOG] Saving tensor n0_to_4_608.pt
[LOG] Saving tensor n1_to_2_608.pt
[LOG] Saving tensor n1_to_3_608.pt
[LOG] Saving tensor n1_to_4_608.pt
[LOG] Saving tensor n2_to_3_608.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n2_to_4_608.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n3_to_4_608.pt
[LOG] Processing cluster features for num 712
[LOG] Saving tensor global_feature_608.pt
[LOG] Computing n3_to_4 for num 408
[LOG] Process 76: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Global feature for num 408
[LOG] Global feature for num 408
[LOG] Saving tensor x_0_408.pt
[LOG] Saving tensor x_1_408.pt
[LOG] Processing cluster features for num 712
[LOG] Saving tensor x_2_408.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor x_3_408.pt
[LOG] Saving tensor x_4_408.pt
[LOG] We will select 740 edges and 3094 tetra
[LOG] Edges from tetra 0 and KDTree 740 with 0 edges in common.
[LOG] Saving tensor n0_to_0_408.pt
[LOG] Saving tensor n1_to_1_408.pt
[LOG] Computing n2_to_2 (adjacency) for num 624
[LOG] We will select 1136 edges and 2934 tetra
[LOG] Edges from tetra 0 and KDTree 1136 with 0 edges in common.
[LOG] Saving tensor n2_to_2_408.pt
[LOG] Processing adjacency and incidence matrices for num 712
[LOG] Computing n0_to_0 for num 712
[LOG] GENERATED TETRA
[LOG] Saving tensor n3_to_3_408.pt
[LOG] Saving tensor n4_to_4_408.pt
[LOG] Saving tensor n0_to_1_408.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 3484 Tetrahedra.
    [LOG] Generated 88 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.965909090909092
    [LOG] Max number of nodes per cluster is 45 and the number is 40
[LOG] Saving tensor n0_to_2_408.pt
[LOG] Computing n3_to_3 (adjacency) for num 208
[LOG] Computing n0_to_3 for num 728
[LOG] Saving tensor n0_to_3_408.pt
[LOG] Computing n4_to_4 (coadjacency) for num 208
[LOG] Saving tensor n0_to_4_408.pt
[LOG] Computing n0_to_1 for num 208
[LOG] Saving tensor n1_to_2_408.pt
[LOG] Saving tensor n1_to_3_408.pt
[LOG] Saving tensor n1_to_4_408.pt
[LOG] Computing n1_to_1 for num 712
[LOG] Saving tensor n2_to_3_408.pt
[LOG] GENERATED TETRA
[LOG] GENERATED TETRA
[LOG] Saving tensor n2_to_4_408.pt
[LOG] Removed 1 subset clusters.
[LOG] Computing n0_to_4 for num 728
[LOG] Computing n0_to_3 for num 104
[LOG] Saving tensor n3_to_4_408.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor global_feature_408.pt
[LOG] We will select 600 edges and 2449 tetra
[LOG] Edges from tetra 0 and KDTree 600 with 0 edges in common.
[LOG] Process 51: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 1 subset clusters.
[LOG] Computing n0_to_4 for num 104
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 3618 Tetrahedra.
    [LOG] Generated 92 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.51086956521739
    [LOG] Max number of nodes per cluster is 45 and the number is 81
[LOG] GENERATED TETRA
[LOG] Computing n2_to_2 (adjacency) for num 304
[LOG] Computing n1_to_2 for num 104
[LOG] Computing n1_to_2 for num 728
[LOG] Computing n0_to_2 for num 208
[LOG] Process 5: Calculating Neighbors
[LOG] Loading pickle file data_40.pickle
[LOG] Processing node features for num 40
[LOG] Process 24: Created combinatorial complex for file data_192.hdf5
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2645 Tetrahedra.
    [LOG] Generated 67 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.417910447761194
    [LOG] Max number of nodes per cluster is 49 and the number is 31
[LOG] Processing edge features for num 40
[LOG] Computing n3_to_3 (adjacency) for num 624
[LOG] Process 62: Created combinatorial complex for file data_496.hdf5
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2538 Tetrahedra.
    [LOG] Generated 71 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.76056338028169
    [LOG] Max number of nodes per cluster is 36 and the number is 28
[LOG] Computing n4_to_4 (coadjacency) for num 624
[LOG] Computing n0_to_1 for num 624
[LOG] GENERATED TETRA
[LOG] Computing n1_to_3 for num 104
[LOG] Processing tetra features for num 40
[LOG] Computing n1_to_4 for num 104
[LOG] Computing n2_to_3 for num 104
[LOG] GENERATED TETRA
[LOG] Computing n0_to_2 for num 624
[LOG] Computing n2_to_2 (adjacency) for num 712
[LOG] GENERATED TETRA
[LOG] Computing n2_to_4 for num 104
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing cluster features for num 40
[LOG] We will select 377 edges and 3484 tetra
[LOG] Edges from tetra 0 and KDTree 377 with 0 edges in common.
[LOG] Computing n3_to_4 for num 104
[LOG] Global feature for num 104
[LOG] Calculating for cell ranks 0 and 2
[LOG] Global feature for num 104
[LOG] Saving tensor x_0_104.pt
[LOG] Processing cluster features for num 40
[LOG] Saving tensor x_1_104.pt
[LOG] We will select 583 edges and 2645 tetra
[LOG] Edges from tetra 0 and KDTree 583 with 0 edges in common.
[LOG] Saving tensor x_2_104.pt
[LOG] Saving tensor x_3_104.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor x_4_104.pt
[LOG] Saving tensor n0_to_0_104.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2746 Tetrahedra.
    [LOG] Generated 61 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.0
    [LOG] Max number of nodes per cluster is 31 and the number is 60
[LOG] Removed 1 subset clusters.
[LOG] Computing n0_to_3 for num 208
[LOG] Saving tensor n1_to_1_104.pt
[LOG] Computing n3_to_3 (adjacency) for num 304
[LOG] Saving tensor n2_to_2_104.pt
[LOG] Processing adjacency and incidence matrices for num 40
[LOG] Computing n0_to_0 for num 40
[LOG] Computing n4_to_4 (coadjacency) for num 304
[LOG] Computing n0_to_4 for num 208
[LOG] Saving tensor n3_to_3_104.pt
[LOG] Computing n0_to_1 for num 304
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor n4_to_4_104.pt
[LOG] We will select 732 edges and 2538 tetra
[LOG] Edges from tetra 0 and KDTree 732 with 0 edges in common.
[LOG] Saving tensor n0_to_1_104.pt
[LOG] We will select 4172 edges and 3618 tetra
[LOG] Edges from tetra 0 and KDTree 4172 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_2 for num 208
[LOG] Saving tensor n0_to_2_104.pt
[LOG] Process 62: Calculating Neighbors
[LOG] Loading pickle file data_496.pickle
[LOG] Processing node features for num 496
[LOG] Saving tensor n0_to_3_104.pt
[LOG] Saving tensor n0_to_4_104.pt
[LOG] Saving tensor n1_to_2_104.pt
[LOG] Saving tensor n1_to_3_104.pt
[LOG] Computing n0_to_2 for num 304
[LOG] Processing edge features for num 496
[LOG] Computing n2_to_2 (adjacency) for num 128
[LOG] Process 75: Created combinatorial complex for file data_600.hdf5
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing tetra features for num 496
[LOG] Process 124: Created combinatorial complex for file data_972.hdf5
[LOG] Computing n3_to_3 (adjacency) for num 712
[LOG] Saving tensor n1_to_4_104.pt
[LOG] Computing n0_to_3 for num 624
[LOG] Computing n4_to_4 (coadjacency) for num 712
[LOG] Saving tensor n2_to_3_104.pt
[LOG] We will select 529 edges and 2746 tetra
[LOG] Edges from tetra 0 and KDTree 529 with 0 edges in common.
[LOG] Removed 3 subset clusters.
[LOG] Computing n0_to_1 for num 712
[LOG] Computing n0_to_4 for num 624
[LOG] Saving tensor n2_to_4_104.pt
[LOG] Saving tensor n3_to_4_104.pt
[LOG] Process 24: Calculating Neighbors
[LOG] Loading pickle file data_192.pickle
[LOG] Processing node features for num 192
[LOG] Processing cluster features for num 496
[LOG] Saving tensor global_feature_104.pt
[LOG] Computing n1_to_1 for num 40
[LOG] Process 13: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_2 for num 624
[LOG] Process 52: Created combinatorial complex for file data_416.hdf5
[LOG] Computing n1_to_3 for num 728
[LOG] Computing n0_to_2 for num 712
[LOG] Processing edge features for num 192
[LOG] Processing cluster features for num 496
[LOG] Computing n1_to_4 for num 728
[LOG] Computing n2_to_3 for num 728
[LOG] Processing adjacency and incidence matrices for num 496
[LOG] Computing n0_to_0 for num 496
[LOG] Removed 4 subset clusters.

    [LOG] We Currently have 3225 Tetrahedra.
    [LOG] Generated 90 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.71111111111111
    [LOG] Max number of nodes per cluster is 41 and the number is 67
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 0: Created combinatorial complex for file data_0.hdf5
[LOG] Processing tetra features for num 192
[LOG] Computing n1_to_1 for num 496
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_4 for num 728
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 4465 Tetrahedra.
    [LOG] Generated 117 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.418803418803419
    [LOG] Max number of nodes per cluster is 44 and the number is 45
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 3312 Tetrahedra.
    [LOG] Generated 71 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.507042253521126
    [LOG] Max number of nodes per cluster is 49 and the number is 39
[LOG] Removed 0 subset clusters.
[LOG] Processing cluster features for num 192
[LOG] Computing n0_to_3 for num 304
[LOG] Computing n3_to_4 for num 728
[LOG] Process 75: Calculating Neighbors
[LOG] Loading pickle file data_600.pickle
[LOG] Processing node features for num 600
[LOG] Global feature for num 728
[LOG] Global feature for num 728
[LOG] Saving tensor x_0_728.pt
[LOG] Computing n0_to_4 for num 304
[LOG] Saving tensor x_1_728.pt
[LOG] Saving tensor x_2_728.pt
[LOG] Processing edge features for num 600
[LOG] Computing n1_to_2 for num 304
[LOG] Saving tensor x_3_728.pt
[LOG] Saving tensor x_4_728.pt
[LOG] Saving tensor n0_to_0_728.pt
[LOG] Processing cluster features for num 192
[LOG] Saving tensor n1_to_1_728.pt
[LOG] Saving tensor n2_to_2_728.pt
[LOG] Process 20: Created combinatorial complex for file data_160.hdf5
[LOG] Computing n1_to_3 for num 208
[LOG] Computing n0_to_3 for num 712
[LOG] Saving tensor n3_to_3_728.pt
[LOG] Processing tetra features for num 600
[LOG] Saving tensor n4_to_4_728.pt
[LOG] Saving tensor n0_to_1_728.pt
[LOG] Computing n1_to_4 for num 208
[LOG] Saving tensor n0_to_2_728.pt
[LOG] Computing n0_to_4 for num 712
[LOG] Process 124: Calculating Neighbors
[LOG] Loading pickle file data_972.pickle
[LOG] Processing node features for num 972
[LOG] Removed 4 subset clusters.

    [LOG] We Currently have 3474 Tetrahedra.
    [LOG] Generated 94 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.882978723404255
    [LOG] Max number of nodes per cluster is 43 and the number is 31
[LOG] Saving tensor n0_to_3_728.pt
[LOG] We will select 886 edges and 3225 tetra
[LOG] Edges from tetra 0 and KDTree 886 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing adjacency and incidence matrices for num 192
[LOG] Computing n0_to_0 for num 192
[LOG] Saving tensor n0_to_4_728.pt
[LOG] Computing n2_to_3 for num 208
[LOG] GENERATED TETRA
[LOG] Process 52: Calculating Neighbors
[LOG] Loading pickle file data_416.pickle
[LOG] Processing node features for num 416
[LOG] Computing n1_to_2 for num 712
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_2 (adjacency) for num 16
[LOG] Saving tensor n1_to_2_728.pt
[LOG] Processing edge features for num 972
[LOG] Saving tensor n1_to_3_728.pt
[LOG] Saving tensor n1_to_4_728.pt
[LOG] GENERATED TETRA
[LOG] We will select 553 edges and 3312 tetra
[LOG] Edges from tetra 0 and KDTree 553 with 0 edges in common.
[LOG] Saving tensor n2_to_3_728.pt
[LOG] Processing edge features for num 416
[LOG] Computing n2_to_4 for num 208
[LOG] Process 0: Calculating Neighbors
[LOG] Loading pickle file data_0.pickle
[LOG] Processing node features for num 0
[LOG] Saving tensor n2_to_4_728.pt
[LOG] Process 15: Created combinatorial complex for file data_120.hdf5
[LOG] Saving tensor n3_to_4_728.pt
[LOG] Processing cluster features for num 600
[LOG] Saving tensor global_feature_728.pt
[LOG] Process 91: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing edge features for num 0
[LOG] Processing tetra features for num 972
[LOG] Computing n3_to_4 for num 208
[LOG] Global feature for num 208
[LOG] Global feature for num 208
[LOG] Saving tensor x_0_208.pt
[LOG] Processing cluster features for num 600
[LOG] Saving tensor x_1_208.pt
[LOG] Processing tetra features for num 416
[LOG] Saving tensor x_2_208.pt
[LOG] Saving tensor x_3_208.pt
[LOG] Saving tensor x_4_208.pt
[LOG] Saving tensor n0_to_0_208.pt
[LOG] Processing tetra features for num 0
[LOG] Saving tensor n1_to_1_208.pt
[LOG] Processing adjacency and incidence matrices for num 600
[LOG] Computing n0_to_0 for num 600
[LOG] Computing n1_to_3 for num 624
[LOG] Computing n3_to_3 (adjacency) for num 128
[LOG] Saving tensor n2_to_2_208.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n4_to_4 (coadjacency) for num 128
[LOG] Saving tensor n3_to_3_208.pt
[LOG] Computing n0_to_1 for num 128
[LOG] Saving tensor n4_to_4_208.pt
[LOG] Computing n1_to_4 for num 624
[LOG] Saving tensor n0_to_1_208.pt
[LOG] Computing n2_to_2 (adjacency) for num 496
[LOG] Saving tensor n0_to_2_208.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n0_to_3_208.pt
[LOG] Computing n1_to_1 for num 600
[LOG] Computing n2_to_3 for num 624
[LOG] Saving tensor n0_to_4_208.pt
[LOG] Processing cluster features for num 972
[LOG] Saving tensor n1_to_2_208.pt
[LOG] Processing cluster features for num 416
[LOG] Removed 0 subset clusters.
[LOG] Processing cluster features for num 0
[LOG] Saving tensor n1_to_3_208.pt
[LOG] Saving tensor n1_to_4_208.pt
[LOG] Computing n2_to_4 for num 624
[LOG] Saving tensor n2_to_3_208.pt
[LOG] Process 113: Created combinatorial complex for file data_895.hdf5
[LOG] Computing n1_to_3 for num 712
[LOG] Saving tensor n2_to_4_208.pt
[LOG] Processing cluster features for num 972
[LOG] Process 20: Calculating Neighbors
[LOG] Loading pickle file data_160.pickle
[LOG] Processing node features for num 160
[LOG] Computing n1_to_3 for num 304
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor n3_to_4_208.pt
[LOG] Computing n1_to_4 for num 712
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 3255 Tetrahedra.
    [LOG] Generated 69 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.898550724637682
    [LOG] Max number of nodes per cluster is 53 and the number is 68
[LOG] Saving tensor global_feature_208.pt
[LOG] Processing cluster features for num 0
[LOG] Process 26: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_4 for num 304
[LOG] Processing cluster features for num 416
[LOG] Computing n2_to_3 for num 712
[LOG] We will select 1021 edges and 4465 tetra
[LOG] Edges from tetra 0 and KDTree 1021 with 0 edges in common.
[LOG] Processing edge features for num 160
[LOG] Computing n2_to_3 for num 304
[LOG] Computing n3_to_4 for num 624
[LOG] Global feature for num 624
[LOG] Global feature for num 624
[LOG] Saving tensor x_0_624.pt
[LOG] Computing n0_to_2 for num 128
[LOG] Saving tensor x_1_624.pt
[LOG] Processing adjacency and incidence matrices for num 972
[LOG] Computing n0_to_0 for num 972
[LOG] Saving tensor x_2_624.pt
[LOG] Processing adjacency and incidence matrices for num 0
[LOG] Computing n0_to_0 for num 0
[LOG] Saving tensor x_3_624.pt
[LOG] Saving tensor x_4_624.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n0_to_0_624.pt
[LOG] Processing adjacency and incidence matrices for num 416
[LOG] Computing n0_to_0 for num 416
[LOG] Saving tensor n1_to_1_624.pt
[LOG] GENERATED TETRA
[LOG] Computing n2_to_4 for num 712
[LOG] Processing tetra features for num 160
[LOG] Saving tensor n2_to_2_624.pt
[LOG] Computing n2_to_4 for num 304
[LOG] GENERATED TETRA
[LOG] Saving tensor n3_to_3_624.pt
[LOG] Saving tensor n4_to_4_624.pt
[LOG] Saving tensor n0_to_1_624.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 3075 Tetrahedra.
    [LOG] Generated 85 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.16470588235294
    [LOG] Max number of nodes per cluster is 34 and the number is 62
[LOG] Saving tensor n0_to_2_624.pt
[LOG] We will select 837 edges and 3474 tetra
[LOG] Edges from tetra 0 and KDTree 837 with 0 edges in common.
[LOG] Saving tensor n0_to_3_624.pt
[LOG] Saving tensor n0_to_4_624.pt
[LOG] Saving tensor n1_to_2_624.pt
[LOG] Computing n3_to_4 for num 304
[LOG] Computing n1_to_1 for num 0
[LOG] Saving tensor n1_to_3_624.pt
[LOG] Computing n3_to_4 for num 712
[LOG] Global feature for num 304
[LOG] Global feature for num 712
[LOG] Global feature for num 304
[LOG] Saving tensor x_0_304.pt
[LOG] Saving tensor n1_to_4_624.pt
[LOG] Global feature for num 712
[LOG] Saving tensor x_0_712.pt
[LOG] Computing n2_to_2 (adjacency) for num 600
[LOG] Process 15: Calculating Neighbors
[LOG] Loading pickle file data_120.pickle
[LOG] Processing node features for num 120
[LOG] Saving tensor n2_to_3_624.pt
[LOG] Saving tensor x_1_304.pt
[LOG] Saving tensor x_1_712.pt
[LOG] Saving tensor x_2_304.pt
[LOG] Saving tensor n2_to_4_624.pt
[LOG] Saving tensor x_2_712.pt
[LOG] Saving tensor x_3_304.pt
[LOG] Computing n1_to_1 for num 192
[LOG] Saving tensor x_3_712.pt
[LOG] Saving tensor x_4_304.pt
[LOG] Saving tensor n3_to_4_624.pt
[LOG] Processing cluster features for num 160
[LOG] Saving tensor n0_to_0_304.pt
[LOG] Saving tensor global_feature_624.pt
[LOG] Process 78: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n1_to_1_304.pt
[LOG] Processing edge features for num 120
[LOG] Computing n1_to_1 for num 972
[LOG] Saving tensor x_4_712.pt
[LOG] Saving tensor n2_to_2_304.pt
[LOG] Saving tensor n0_to_0_712.pt
[LOG] Computing n1_to_1 for num 416
[LOG] Saving tensor n3_to_3_304.pt
[LOG] Saving tensor n1_to_1_712.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing cluster features for num 160
[LOG] Saving tensor n4_to_4_304.pt
[LOG] Saving tensor n2_to_2_712.pt
[LOG] Removed 8 subset clusters.
[LOG] We will select 609 edges and 3255 tetra
[LOG] Edges from tetra 0 and KDTree 609 with 0 edges in common.
[LOG] Processing adjacency and incidence matrices for num 160
[LOG] Computing n0_to_0 for num 160
[LOG] Saving tensor n0_to_1_304.pt
[LOG] Saving tensor n0_to_2_304.pt
[LOG] Saving tensor n3_to_3_712.pt
[LOG] Processing tetra features for num 120
[LOG] Saving tensor n0_to_3_304.pt
[LOG] Computing n3_to_3 (adjacency) for num 496
[LOG] Saving tensor n4_to_4_712.pt
[LOG] Saving tensor n0_to_4_304.pt
[LOG] Computing n4_to_4 (coadjacency) for num 496
[LOG] Saving tensor n0_to_1_712.pt
[LOG] Computing n0_to_1 for num 496
[LOG] Saving tensor n0_to_2_712.pt
[LOG] Removed 5 subset clusters.

    [LOG] We Currently have 3207 Tetrahedra.
    [LOG] Generated 80 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.1625
    [LOG] Max number of nodes per cluster is 53 and the number is 70
[LOG] Saving tensor n1_to_2_304.pt
[LOG] Saving tensor n0_to_3_712.pt
[LOG] Saving tensor n1_to_3_304.pt
[LOG] Saving tensor n0_to_4_712.pt
[LOG] Computing n1_to_1 for num 160
[LOG] Saving tensor n1_to_4_304.pt
[LOG] Saving tensor n1_to_2_712.pt
[LOG] Saving tensor n2_to_3_304.pt
[LOG] Saving tensor n1_to_3_712.pt
[LOG] Saving tensor n2_to_4_304.pt
[LOG] Saving tensor n1_to_4_712.pt
[LOG] Saving tensor n3_to_4_304.pt
[LOG] Saving tensor n2_to_3_712.pt
[LOG] Saving tensor global_feature_304.pt
[LOG] Process 38: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n2_to_4_712.pt
[LOG] Processing cluster features for num 120
[LOG] Saving tensor n3_to_4_712.pt
[LOG] Computing n0_to_2 for num 496
[LOG] Saving tensor global_feature_712.pt
[LOG] Process 89: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n3_to_3 (adjacency) for num 16
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3254 Tetrahedra.
    [LOG] Generated 78 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.897435897435898
    [LOG] Max number of nodes per cluster is 53 and the number is 76
[LOG] Computing n4_to_4 (coadjacency) for num 16
[LOG] GENERATED TETRA
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 3235 Tetrahedra.
    [LOG] Generated 83 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.08433734939759
    [LOG] Max number of nodes per cluster is 75 and the number is 40
[LOG] Computing n0_to_1 for num 16
[LOG] Processing cluster features for num 120
[LOG] We will select 899 edges and 3075 tetra
[LOG] Edges from tetra 0 and KDTree 899 with 0 edges in common.
[LOG] Process 113: Calculating Neighbors
[LOG] Loading pickle file data_895.pickle
[LOG] Processing node features for num 895
[LOG] Removed 5 subset clusters.

    [LOG] We Currently have 4354 Tetrahedra.
    [LOG] Generated 110 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.036363636363635
    [LOG] Max number of nodes per cluster is 45 and the number is 87
[LOG] Processing adjacency and incidence matrices for num 120
[LOG] Computing n0_to_0 for num 120
[LOG] GENERATED TETRA
[LOG] Computing n2_to_2 (adjacency) for num 0
[LOG] Processing edge features for num 895
[LOG] Removed 3 subset clusters.
[LOG] Process 54: Created combinatorial complex for file data_432.hdf5
[LOG] Calculating for cell ranks 0 and 2
[LOG] GENERATED TETRA
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 3918 Tetrahedra.
    [LOG] Generated 110 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.127272727272727
    [LOG] Max number of nodes per cluster is 38 and the number is 101
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 3438 Tetrahedra.
    [LOG] Generated 96 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.8125
    [LOG] Max number of nodes per cluster is 38 and the number is 65
[LOG] Removed 2 subset clusters.
[LOG] Process 73: Created combinatorial complex for file data_584.hdf5
[LOG] Computing n2_to_2 (adjacency) for num 40
[LOG] Processing tetra features for num 895
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3700 Tetrahedra.
    [LOG] Generated 104 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.067307692307692
    [LOG] Max number of nodes per cluster is 40 and the number is 4
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 4801 Tetrahedra.
    [LOG] Generated 112 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.473214285714286
    [LOG] Max number of nodes per cluster is 45 and the number is 35
[LOG] GENERATED TETRA
[LOG] We will select 553 edges and 3207 tetra
[LOG] Edges from tetra 0 and KDTree 553 with 0 edges in common.
[LOG] Removed 2 subset clusters.
[LOG] Computing n2_to_2 (adjacency) for num 160

    [LOG] We Currently have 3615 Tetrahedra.
    [LOG] Generated 92 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.83695652173913
    [LOG] Max number of nodes per cluster is 37 and the number is 27
[LOG] GENERATED TETRA
[LOG] We will select 803 edges and 3254 tetra
[LOG] Edges from tetra 0 and KDTree 803 with 0 edges in common.
[LOG] Computing n0_to_2 for num 16
[LOG] GENERATED TETRA
[LOG] Processing cluster features for num 895
[LOG] Computing n1_to_1 for num 120
[LOG] We will select 516 edges and 3235 tetra
[LOG] Edges from tetra 0 and KDTree 516 with 0 edges in common.
[LOG] Processing cluster features for num 895
[LOG] Computing n0_to_3 for num 496
[LOG] Computing n3_to_3 (adjacency) for num 40
[LOG] Computing n4_to_4 (coadjacency) for num 40
[LOG] Computing n0_to_1 for num 40
[LOG] Computing n0_to_4 for num 496
[LOG] Computing n2_to_2 (adjacency) for num 416
[LOG] Computing n3_to_3 (adjacency) for num 600
[LOG] Processing adjacency and incidence matrices for num 895
[LOG] Computing n0_to_0 for num 895
[LOG] Computing n4_to_4 (coadjacency) for num 600
[LOG] Computing n1_to_2 for num 496
[LOG] Computing n0_to_1 for num 600
[LOG] GENERATED TETRA
[LOG] Computing n0_to_3 for num 128
[LOG] Computing n2_to_2 (adjacency) for num 972
[LOG] Computing n0_to_2 for num 600
[LOG] GENERATED TETRA
[LOG] Computing n0_to_4 for num 128
[LOG] GENERATED TETRA
[LOG] Computing n3_to_3 (adjacency) for num 0
[LOG] We will select 931 edges and 3438 tetra
[LOG] Edges from tetra 0 and KDTree 931 with 0 edges in common.
[LOG] Removed 1 subset clusters.
[LOG] Computing n4_to_4 (coadjacency) for num 0
[LOG] Computing n0_to_1 for num 0
[LOG] Computing n1_to_2 for num 128
[LOG] Process 73: Calculating Neighbors
[LOG] Loading pickle file data_584.pickle
[LOG] Processing node features for num 584
[LOG] Process 7: Created combinatorial complex for file data_56.hdf5
[LOG] GENERATED TETRA
[LOG] Process 54: Calculating Neighbors
[LOG] Loading pickle file data_432.pickle
[LOG] Processing node features for num 432
[LOG] Processing edge features for num 584
[LOG] Computing n0_to_2 for num 40
[LOG] We will select 1342 edges and 4354 tetra
[LOG] Edges from tetra 0 and KDTree 1342 with 0 edges in common.
[LOG] We will select 903 edges and 3700 tetra
[LOG] Edges from tetra 0 and KDTree 903 with 0 edges in common.
[LOG] Computing n0_to_2 for num 0
[LOG] GENERATED TETRA
[LOG] Processing edge features for num 432
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 3990 Tetrahedra.
    [LOG] Generated 100 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.41
    [LOG] Max number of nodes per cluster is 87 and the number is 95
[LOG] We will select 850 edges and 3615 tetra
[LOG] Edges from tetra 0 and KDTree 850 with 0 edges in common.
[LOG] We will select 891 edges and 3918 tetra
[LOG] Edges from tetra 0 and KDTree 891 with 0 edges in common.
[LOG] Processing tetra features for num 584
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing tetra features for num 432
[LOG] Computing n1_to_1 for num 895
[LOG] GENERATED TETRA
[LOG] Computing n3_to_3 (adjacency) for num 160
[LOG] Computing n4_to_4 (coadjacency) for num 160
[LOG] Computing n0_to_1 for num 160
[LOG] We will select 2000 edges and 4801 tetra
[LOG] Edges from tetra 0 and KDTree 2000 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] Processing cluster features for num 584
[LOG] Computing n0_to_2 for num 160
[LOG] Processing cluster features for num 432
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 584
[LOG] Process 105: Created combinatorial complex for file data_839.hdf5
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 79: Created combinatorial complex for file data_632.hdf5
[LOG] Processing cluster features for num 432
[LOG] Processing adjacency and incidence matrices for num 584
[LOG] Computing n0_to_0 for num 584
[LOG] Computing n1_to_3 for num 496
[LOG] Computing n0_to_3 for num 16
[LOG] Removed 1 subset clusters.
[LOG] Computing n1_to_4 for num 496

    [LOG] We Currently have 3902 Tetrahedra.
    [LOG] Generated 106 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.367924528301886
    [LOG] Max number of nodes per cluster is 68 and the number is 100
[LOG] Processing adjacency and incidence matrices for num 432
[LOG] Computing n0_to_0 for num 432
[LOG] Computing n0_to_4 for num 16
[LOG] Computing n2_to_3 for num 496
[LOG] Computing n0_to_3 for num 40
[LOG] Computing n0_to_4 for num 40
[LOG] Computing n1_to_2 for num 16
[LOG] Computing n1_to_2 for num 40
[LOG] Removed 2 subset clusters.
[LOG] Computing n2_to_4 for num 496
[LOG] Removed 2 subset clusters.
[LOG] Removed 3 subset clusters.
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 4094 Tetrahedra.
    [LOG] Generated 100 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.99
    [LOG] Max number of nodes per cluster is 98 and the number is 9
[LOG] We will select 2045 edges and 3990 tetra
[LOG] Edges from tetra 0 and KDTree 2045 with 0 edges in common.
[LOG] Computing n1_to_1 for num 584
[LOG] Computing n3_to_4 for num 496
[LOG] Global feature for num 496
[LOG] Calculating for cell ranks 0 and 1
[LOG] Global feature for num 496
[LOG] Saving tensor x_0_496.pt
[LOG] Computing n1_to_1 for num 432
[LOG] Removed 1 subset clusters.
[LOG] Process 7: Calculating Neighbors
[LOG] Loading pickle file data_56.pickle
[LOG] Processing node features for num 56

    [LOG] We Currently have 4951 Tetrahedra.
    [LOG] Generated 107 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.869158878504672
    [LOG] Max number of nodes per cluster is 67 and the number is 105
[LOG] Saving tensor x_1_496.pt
[LOG] Saving tensor x_2_496.pt
[LOG] Saving tensor x_3_496.pt
[LOG] Computing n3_to_3 (adjacency) for num 416
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor x_4_496.pt
[LOG] Saving tensor n0_to_0_496.pt
[LOG] Computing n4_to_4 (coadjacency) for num 416
[LOG] Saving tensor n1_to_1_496.pt
[LOG] Processing edge features for num 56
[LOG] Computing n0_to_1 for num 416
[LOG] Saving tensor n2_to_2_496.pt
[LOG] Removed 3 subset clusters.
[LOG] Computing n3_to_3 (adjacency) for num 972
[LOG] Saving tensor n3_to_3_496.pt
[LOG] Computing n4_to_4 (coadjacency) for num 972
[LOG] Process 86: Created combinatorial complex for file data_688.hdf5
[LOG] Computing n0_to_1 for num 972
[LOG] Computing n0_to_3 for num 0
[LOG] Computing n0_to_3 for num 600
[LOG] Saving tensor n4_to_4_496.pt
[LOG] Saving tensor n0_to_1_496.pt
[LOG] Saving tensor n0_to_2_496.pt
[LOG] Computing n0_to_4 for num 0
[LOG] Computing n0_to_4 for num 600
[LOG] Saving tensor n0_to_3_496.pt
[LOG] Removed 0 subset clusters.
[LOG] Processing tetra features for num 56
[LOG] Saving tensor n0_to_4_496.pt
[LOG] Saving tensor n1_to_2_496.pt
[LOG] Saving tensor n1_to_3_496.pt
[LOG] Computing n1_to_2 for num 0
[LOG] Computing n0_to_2 for num 416
[LOG] Saving tensor n1_to_4_496.pt
[LOG] Computing n1_to_2 for num 600
[LOG] Saving tensor n2_to_3_496.pt
[LOG] Saving tensor n2_to_4_496.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 105: Calculating Neighbors
[LOG] Loading pickle file data_839.pickle
[LOG] Processing node features for num 839
[LOG] Saving tensor n3_to_4_496.pt
[LOG] Saving tensor global_feature_496.pt
[LOG] Process 62: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_2 for num 972
[LOG] Processing edge features for num 839
[LOG] Calculating for cell ranks 0 and 3
[LOG] GENERATED TETRA
[LOG] Process 79: Calculating Neighbors
[LOG] Loading pickle file data_632.pickle
[LOG] Processing node features for num 632
[LOG] Processing cluster features for num 56
[LOG] Computing n0_to_3 for num 160
[LOG] Processing tetra features for num 839
[LOG] Processing edge features for num 632
[LOG] We will select 2476 edges and 3902 tetra
[LOG] Edges from tetra 0 and KDTree 2476 with 0 edges in common.
[LOG] Computing n0_to_4 for num 160
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing cluster features for num 56
[LOG] Computing n1_to_2 for num 160
[LOG] Processing tetra features for num 632
[LOG] Computing n1_to_3 for num 128
[LOG] Removed 4 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_3 for num 600
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_4 for num 128
[LOG] Processing cluster features for num 839
[LOG] Computing n1_to_4 for num 600
[LOG] Processing adjacency and incidence matrices for num 56
[LOG] Computing n0_to_0 for num 56
[LOG] Computing n2_to_3 for num 600
[LOG] We will select 522 edges and 4094 tetra
[LOG] Edges from tetra 0 and KDTree 522 with 0 edges in common.
[LOG] Computing n2_to_3 for num 128
[LOG] Processing cluster features for num 839
[LOG] We will select 1850 edges and 4951 tetra
[LOG] Edges from tetra 0 and KDTree 1850 with 0 edges in common.
[LOG] Processing cluster features for num 632
[LOG] Computing n2_to_4 for num 600
[LOG] Processing adjacency and incidence matrices for num 839
[LOG] Computing n0_to_0 for num 839
[LOG] GENERATED TETRA
[LOG] Removed 1 subset clusters.
[LOG] Computing n1_to_3 for num 0
[LOG] Process 86: Calculating Neighbors
[LOG] Loading pickle file data_688.pickle
[LOG] Processing node features for num 688
[LOG] Processing cluster features for num 632
[LOG] Computing n1_to_4 for num 0
[LOG] Computing n2_to_4 for num 128
[LOG] Computing n2_to_3 for num 0
[LOG] GENERATED TETRA
[LOG] Processing edge features for num 688
[LOG] Computing n1_to_1 for num 839
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_4 for num 600
[LOG] Global feature for num 600
[LOG] Global feature for num 600
[LOG] Saving tensor x_0_600.pt
[LOG] Saving tensor x_1_600.pt
[LOG] Processing adjacency and incidence matrices for num 632
[LOG] Computing n0_to_0 for num 632
[LOG] Saving tensor x_2_600.pt
[LOG] Saving tensor x_3_600.pt
[LOG] Saving tensor x_4_600.pt
[LOG] Saving tensor n0_to_0_600.pt
[LOG] Computing n2_to_4 for num 0
[LOG] Saving tensor n1_to_1_600.pt
[LOG] Saving tensor n2_to_2_600.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing tetra features for num 688
[LOG] Saving tensor n3_to_3_600.pt
[LOG] Computing n1_to_1 for num 56
[LOG] Saving tensor n4_to_4_600.pt
[LOG] Process 46: Created combinatorial complex for file data_368.hdf5
[LOG] Computing n3_to_4 for num 128
[LOG] Saving tensor n0_to_1_600.pt
[LOG] Process 74: Created combinatorial complex for file data_592.hdf5
[LOG] Process 69: Created combinatorial complex for file data_552.hdf5
[LOG] Global feature for num 128
[LOG] Saving tensor n0_to_2_600.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 4439 Tetrahedra.
    [LOG] Generated 115 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.069565217391304
    [LOG] Max number of nodes per cluster is 105 and the number is 86
[LOG] Global feature for num 128
[LOG] Saving tensor x_0_128.pt
[LOG] Computing n1_to_3 for num 160
[LOG] Saving tensor n0_to_3_600.pt
[LOG] Saving tensor x_1_128.pt
[LOG] Saving tensor x_2_128.pt
[LOG] Computing n1_to_4 for num 160
[LOG] Saving tensor n0_to_4_600.pt
[LOG] Computing n3_to_4 for num 0
[LOG] Saving tensor x_3_128.pt
[LOG] Saving tensor x_4_128.pt
[LOG] Global feature for num 0
[LOG] Computing n2_to_2 (adjacency) for num 432
[LOG] Saving tensor n0_to_0_128.pt
[LOG] Saving tensor n1_to_2_600.pt
[LOG] Global feature for num 0
[LOG] Saving tensor x_0_0.pt
[LOG] Computing n2_to_3 for num 160
[LOG] Computing n1_to_1 for num 632
[LOG] Saving tensor n1_to_3_600.pt
[LOG] Saving tensor x_1_0.pt
[LOG] Saving tensor n1_to_1_128.pt
[LOG] Saving tensor n1_to_4_600.pt
[LOG] Saving tensor x_2_0.pt
[LOG] Saving tensor n2_to_2_128.pt
[LOG] Process 119: Created combinatorial complex for file data_937.hdf5
[LOG] Saving tensor x_3_0.pt
[LOG] Saving tensor n2_to_3_600.pt
[LOG] Saving tensor x_4_0.pt
[LOG] Process 67: Created combinatorial complex for file data_536.hdf5
[LOG] Saving tensor n0_to_0_0.pt
[LOG] Saving tensor n2_to_4_600.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n1_to_1_0.pt
[LOG] Saving tensor n3_to_4_600.pt
[LOG] Processing cluster features for num 688
[LOG] Saving tensor n2_to_2_0.pt
[LOG] Saving tensor global_feature_600.pt
[LOG] Process 75: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n2_to_4 for num 160
[LOG] Saving tensor n3_to_3_0.pt
[LOG] Saving tensor n4_to_4_0.pt
[LOG] Saving tensor n0_to_1_0.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n0_to_2_0.pt
[LOG] Processing cluster features for num 688
[LOG] Computing n2_to_2 (adjacency) for num 120
[LOG] Saving tensor n0_to_3_0.pt
[LOG] Saving tensor n3_to_3_128.pt
[LOG] Saving tensor n0_to_4_0.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n1_to_2_0.pt
[LOG] Computing n3_to_4 for num 160
[LOG] Saving tensor n4_to_4_128.pt
[LOG] Global feature for num 160
[LOG] Saving tensor n1_to_3_0.pt
[LOG] Saving tensor n0_to_1_128.pt
[LOG] Global feature for num 160
[LOG] Saving tensor x_0_160.pt
[LOG] Processing adjacency and incidence matrices for num 688
[LOG] Computing n0_to_0 for num 688
[LOG] Saving tensor n1_to_4_0.pt
[LOG] Saving tensor n0_to_2_128.pt
[LOG] Computing n2_to_2 (adjacency) for num 839
[LOG] Computing n2_to_2 (adjacency) for num 584
[LOG] Saving tensor x_1_160.pt
[LOG] Saving tensor x_2_160.pt
[LOG] Saving tensor n2_to_3_0.pt
[LOG] Saving tensor x_3_160.pt
[LOG] Saving tensor n0_to_3_128.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n2_to_4_0.pt
[LOG] Saving tensor n0_to_4_128.pt
[LOG] Saving tensor x_4_160.pt
[LOG] Saving tensor n0_to_0_160.pt
[LOG] Saving tensor n3_to_4_0.pt
[LOG] Saving tensor n1_to_2_128.pt
[LOG] Saving tensor n1_to_1_160.pt
[LOG] Saving tensor global_feature_0.pt
[LOG] Process 64: Created combinatorial complex for file data_512.hdf5
[LOG] Saving tensor n2_to_2_160.pt
[LOG] Saving tensor n1_to_3_128.pt
[LOG] Process 0: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n1_to_4_128.pt
[LOG] Saving tensor n3_to_3_160.pt
[LOG] Saving tensor n2_to_3_128.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 3999 Tetrahedra.
    [LOG] Generated 90 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.866666666666667
    [LOG] Max number of nodes per cluster is 42 and the number is 29
[LOG] Saving tensor n4_to_4_160.pt
[LOG] Saving tensor n2_to_4_128.pt
[LOG] Saving tensor n0_to_1_160.pt
[LOG] Computing n0_to_3 for num 416
[LOG] Saving tensor n0_to_2_160.pt
[LOG] Saving tensor n3_to_4_128.pt
[LOG] Saving tensor global_feature_128.pt
[LOG] Saving tensor n0_to_3_160.pt
[LOG] Process 16: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_4_160.pt
[LOG] Computing n0_to_3 for num 972
[LOG] Saving tensor n1_to_2_160.pt
[LOG] Computing n0_to_4 for num 416
[LOG] Saving tensor n1_to_3_160.pt
[LOG] Saving tensor n1_to_4_160.pt
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 4073 Tetrahedra.
    [LOG] Generated 100 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.93
    [LOG] Max number of nodes per cluster is 57 and the number is 46
[LOG] Saving tensor n2_to_3_160.pt
[LOG] Saving tensor n2_to_4_160.pt
[LOG] Computing n1_to_1 for num 688
[LOG] Computing n0_to_4 for num 972
[LOG] Saving tensor n3_to_4_160.pt
[LOG] Saving tensor global_feature_160.pt
[LOG] Computing n1_to_2 for num 416
[LOG] Process 20: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_2 for num 972
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 3994 Tetrahedra.
    [LOG] Generated 101 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.148514851485148
    [LOG] Max number of nodes per cluster is 59 and the number is 98
[LOG] Calculating for cell ranks 0 and 3
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 4490 Tetrahedra.
    [LOG] Generated 121 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.479338842975206
    [LOG] Max number of nodes per cluster is 57 and the number is 120
[LOG] Process 69: Calculating Neighbors
[LOG] Loading pickle file data_552.pickle
[LOG] Processing node features for num 552
[LOG] Computing n1_to_3 for num 40
[LOG] Process 46: Calculating Neighbors
[LOG] Loading pickle file data_368.pickle
[LOG] Processing node features for num 368
[LOG] Computing n3_to_3 (adjacency) for num 120
[LOG] Computing n4_to_4 (coadjacency) for num 120
[LOG] Processing edge features for num 552
[LOG] Computing n0_to_1 for num 120
[LOG] We will select 2760 edges and 4439 tetra
[LOG] Edges from tetra 0 and KDTree 2760 with 0 edges in common.
[LOG] Computing n2_to_2 (adjacency) for num 632
[LOG] Processing edge features for num 368
[LOG] Process 119: Calculating Neighbors
[LOG] Loading pickle file data_937.pickle
[LOG] Processing node features for num 937
[LOG] Process 74: Calculating Neighbors
[LOG] Loading pickle file data_592.pickle
[LOG] Processing node features for num 592
[LOG] Computing n1_to_4 for num 40
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 0 subset clusters.
[LOG] Processing edge features for num 937
[LOG] Removed 6 subset clusters.
[LOG] Processing tetra features for num 552
[LOG] Processing edge features for num 592
[LOG] Processing tetra features for num 368
[LOG] Computing n2_to_3 for num 40
[LOG] Removed 2 subset clusters.
[LOG] Computing n2_to_2 (adjacency) for num 895
[LOG] GENERATED TETRA

    [LOG] We Currently have 4261 Tetrahedra.
    [LOG] Generated 117 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.051282051282051
    [LOG] Max number of nodes per cluster is 39 and the number is 90
[LOG] Process 116: Created combinatorial complex for file data_916.hdf5
[LOG] Processing tetra features for num 937
[LOG] Computing n2_to_4 for num 40
[LOG] Processing tetra features for num 592
[LOG] We will select 887 edges and 3999 tetra
[LOG] Edges from tetra 0 and KDTree 887 with 0 edges in common.
[LOG] Process 67: Calculating Neighbors
[LOG] Loading pickle file data_536.pickle
[LOG] Processing node features for num 536
[LOG] Computing n3_to_4 for num 40
[LOG] Global feature for num 40
[LOG] Global feature for num 40
[LOG] Saving tensor x_0_40.pt
[LOG] Process 125: Created combinatorial complex for file data_979.hdf5
[LOG] Processing cluster features for num 552
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor x_1_40.pt
[LOG] Saving tensor x_2_40.pt
[LOG] Processing cluster features for num 368
[LOG] Saving tensor x_3_40.pt
[LOG] Computing n2_to_2 (adjacency) for num 192
[LOG] GENERATED TETRA
[LOG] Saving tensor x_4_40.pt
[LOG] Saving tensor n0_to_0_40.pt
[LOG] Computing n3_to_3 (adjacency) for num 432
[LOG] Processing edge features for num 536
[LOG] Saving tensor n1_to_1_40.pt
[LOG] Computing n4_to_4 (coadjacency) for num 432
[LOG] Saving tensor n2_to_2_40.pt
[LOG] Removed 3 subset clusters.
[LOG] GENERATED TETRA
[LOG] Computing n0_to_2 for num 120

    [LOG] We Currently have 4837 Tetrahedra.
    [LOG] Generated 126 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.928571428571429
    [LOG] Max number of nodes per cluster is 44 and the number is 84
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 3452 Tetrahedra.
    [LOG] Generated 97 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.29896907216495
    [LOG] Max number of nodes per cluster is 79 and the number is 95
[LOG] Computing n0_to_1 for num 432
[LOG] Saving tensor n3_to_3_40.pt
[LOG] Processing cluster features for num 552
[LOG] Saving tensor n4_to_4_40.pt
[LOG] Processing cluster features for num 937
[LOG] Processing cluster features for num 368
[LOG] Saving tensor n0_to_1_40.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n0_to_2_40.pt
[LOG] Computing n3_to_3 (adjacency) for num 584
[LOG] Computing n4_to_4 (coadjacency) for num 584
[LOG] We will select 825 edges and 4073 tetra
[LOG] Edges from tetra 0 and KDTree 825 with 0 edges in common.
[LOG] Processing cluster features for num 592
[LOG] Computing n0_to_1 for num 584
[LOG] Saving tensor n0_to_3_40.pt
[LOG] Processing adjacency and incidence matrices for num 552
[LOG] Computing n0_to_0 for num 552
[LOG] Processing cluster features for num 937
[LOG] Saving tensor n0_to_4_40.pt
[LOG] Processing adjacency and incidence matrices for num 368
[LOG] Computing n0_to_0 for num 368
[LOG] We will select 887 edges and 3994 tetra
[LOG] Edges from tetra 0 and KDTree 887 with 0 edges in common.
[LOG] Saving tensor n1_to_2_40.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing tetra features for num 536
[LOG] Saving tensor n1_to_3_40.pt
[LOG] Saving tensor n1_to_4_40.pt
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 5413 Tetrahedra.
    [LOG] Generated 133 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.827067669172932
    [LOG] Max number of nodes per cluster is 70 and the number is 118
[LOG] Computing n3_to_3 (adjacency) for num 839
[LOG] Saving tensor n2_to_3_40.pt
[LOG] Computing n0_to_2 for num 432
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n2_to_4_40.pt
[LOG] Computing n4_to_4 (coadjacency) for num 839
[LOG] Saving tensor n3_to_4_40.pt
[LOG] Computing n0_to_1 for num 839
[LOG] Computing n1_to_3 for num 16
[LOG] Saving tensor global_feature_40.pt
[LOG] Process 5: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing adjacency and incidence matrices for num 937
[LOG] Computing n0_to_0 for num 937
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing cluster features for num 592
[LOG] Computing n1_to_4 for num 16
[LOG] Computing n0_to_2 for num 584
[LOG] Computing n0_to_2 for num 839
[LOG] Computing n1_to_1 for num 552
[LOG] GENERATED TETRA
[LOG] Processing cluster features for num 536
[LOG] Computing n1_to_1 for num 368
[LOG] Computing n2_to_3 for num 16
[LOG] Processing adjacency and incidence matrices for num 592
[LOG] Computing n0_to_0 for num 592
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 4351 Tetrahedra.
    [LOG] Generated 106 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.716981132075471
    [LOG] Max number of nodes per cluster is 38 and the number is 14
[LOG] We will select 1228 edges and 4490 tetra
[LOG] Edges from tetra 0 and KDTree 1228 with 0 edges in common.
[LOG] Computing n1_to_3 for num 416
[LOG] Removed 0 subset clusters.
[LOG] Computing n1_to_4 for num 416
[LOG] Processing cluster features for num 536
[LOG] Computing n2_to_3 for num 416
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_1 for num 937
[LOG] Computing n2_to_4 for num 16
[LOG] Computing n1_to_3 for num 972
[LOG] GENERATED TETRA
[LOG] We will select 903 edges and 4261 tetra
[LOG] Edges from tetra 0 and KDTree 903 with 0 edges in common.
[LOG] Computing n1_to_4 for num 972
[LOG] Processing adjacency and incidence matrices for num 536
[LOG] Computing n0_to_0 for num 536
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_3 for num 972
[LOG] We will select 4152 edges and 3452 tetra
[LOG] Edges from tetra 0 and KDTree 4152 with 0 edges in common.
[LOG] Computing n3_to_4 for num 16
[LOG] Global feature for num 16
[LOG] Global feature for num 16
[LOG] Saving tensor x_0_16.pt
[LOG] Computing n2_to_4 for num 416
[LOG] Computing n2_to_2 (adjacency) for num 688
[LOG] Process 90: Created combinatorial complex for file data_720.hdf5
[LOG] Saving tensor x_1_16.pt
[LOG] Process 116: Calculating Neighbors
[LOG] Loading pickle file data_916.pickle
[LOG] Processing node features for num 916
[LOG] Saving tensor x_2_16.pt
[LOG] Computing n0_to_3 for num 120
[LOG] Saving tensor x_3_16.pt
[LOG] Saving tensor x_4_16.pt
[LOG] Saving tensor n0_to_0_16.pt
[LOG] Computing n3_to_3 (adjacency) for num 895
[LOG] Saving tensor n1_to_1_16.pt
[LOG] Computing n0_to_4 for num 120
[LOG] Computing n4_to_4 (coadjacency) for num 895
[LOG] Saving tensor n2_to_2_16.pt
[LOG] Processing edge features for num 916
[LOG] Computing n0_to_1 for num 895
[LOG] Computing n2_to_4 for num 972
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n3_to_3_16.pt
[LOG] Computing n1_to_2 for num 120
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_1 for num 592
[LOG] Saving tensor n4_to_4_16.pt
[LOG] Saving tensor n0_to_1_16.pt
[LOG] Process 93: Created combinatorial complex for file data_744.hdf5
[LOG] Saving tensor n0_to_2_16.pt
[LOG] Saving tensor n0_to_3_16.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_3 (adjacency) for num 192
[LOG] Saving tensor n0_to_4_16.pt
[LOG] Process 125: Calculating Neighbors
[LOG] Loading pickle file data_979.pickle
[LOG] Processing node features for num 979
[LOG] Computing n3_to_4 for num 416
[LOG] Saving tensor n1_to_2_16.pt
[LOG] Computing n4_to_4 (coadjacency) for num 192
[LOG] Global feature for num 416
[LOG] Global feature for num 416
[LOG] Saving tensor n1_to_3_16.pt
[LOG] Saving tensor x_0_416.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_1 for num 192
[LOG] Processing tetra features for num 916
[LOG] Saving tensor n1_to_4_16.pt
[LOG] Saving tensor x_1_416.pt
[LOG] Computing n3_to_3 (adjacency) for num 632
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor x_2_416.pt
[LOG] Processing edge features for num 979
[LOG] Saving tensor n2_to_3_16.pt
[LOG] Saving tensor x_3_416.pt
[LOG] Saving tensor x_4_416.pt
[LOG] Computing n4_to_4 (coadjacency) for num 632
[LOG] Saving tensor n2_to_4_16.pt
[LOG] Saving tensor n0_to_0_416.pt
[LOG] Saving tensor n3_to_4_16.pt
[LOG] Computing n0_to_1 for num 632
[LOG] We will select 1341 edges and 4837 tetra
[LOG] Edges from tetra 0 and KDTree 1341 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n1_to_1_416.pt
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 6125 Tetrahedra.
    [LOG] Generated 151 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.357615894039736
    [LOG] Max number of nodes per cluster is 60 and the number is 45
[LOG] Computing n2_to_2 (adjacency) for num 56
[LOG] Saving tensor global_feature_16.pt
[LOG] Process 2: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n2_to_2_416.pt
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 4593 Tetrahedra.
    [LOG] Generated 118 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.576271186440678
    [LOG] Max number of nodes per cluster is 64 and the number is 68
[LOG] Saving tensor n3_to_3_416.pt
[LOG] Computing n3_to_4 for num 972
[LOG] Saving tensor n4_to_4_416.pt
[LOG] Saving tensor n0_to_1_416.pt
[LOG] Global feature for num 972
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n0_to_2_416.pt
[LOG] Global feature for num 972
[LOG] Saving tensor x_0_972.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n0_to_3_416.pt
[LOG] Saving tensor x_1_972.pt
[LOG] Saving tensor x_2_972.pt
[LOG] Saving tensor n0_to_4_416.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor x_3_972.pt
[LOG] Saving tensor n1_to_2_416.pt
[LOG] Saving tensor x_4_972.pt
[LOG] Saving tensor n1_to_3_416.pt
[LOG] Computing n0_to_2 for num 632
[LOG] Saving tensor n0_to_0_972.pt
[LOG] Saving tensor n1_to_4_416.pt
[LOG] Saving tensor n2_to_3_416.pt
[LOG] Saving tensor n1_to_1_972.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing tetra features for num 979
[LOG] We will select 1284 edges and 4351 tetra
[LOG] Edges from tetra 0 and KDTree 1284 with 0 edges in common.
[LOG] Saving tensor n2_to_4_416.pt
[LOG] Saving tensor n2_to_2_972.pt
[LOG] Computing n1_to_1 for num 536
[LOG] Processing cluster features for num 916
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor n3_to_4_416.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] Saving tensor n3_to_3_972.pt
[LOG] Saving tensor global_feature_416.pt
[LOG] Saving tensor n4_to_4_972.pt
[LOG] Computing n0_to_2 for num 895
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 52: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_1_972.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 4926 Tetrahedra.
    [LOG] Generated 117 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.786324786324787
    [LOG] Max number of nodes per cluster is 41 and the number is 78
[LOG] Saving tensor n0_to_2_972.pt
[LOG] Processing cluster features for num 916
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 4771 Tetrahedra.
    [LOG] Generated 107 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.672897196261683
    [LOG] Max number of nodes per cluster is 48 and the number is 49
[LOG] Saving tensor n0_to_3_972.pt
[LOG] Saving tensor n0_to_4_972.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor n1_to_2_972.pt
[LOG] Processing adjacency and incidence matrices for num 916
[LOG] Computing n0_to_0 for num 916
[LOG] Saving tensor n1_to_3_972.pt
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 5204 Tetrahedra.
    [LOG] Generated 143 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.377622377622378
    [LOG] Max number of nodes per cluster is 46 and the number is 142
[LOG] Computing n0_to_3 for num 584
[LOG] Saving tensor n1_to_4_972.pt
[LOG] Process 45: Created combinatorial complex for file data_360.hdf5
[LOG] Processing cluster features for num 979
[LOG] Computing n0_to_4 for num 584
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_2 for num 584
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_3 for num 839
[LOG] Computing n0_to_2 for num 192
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 4141 Tetrahedra.
    [LOG] Generated 80 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.3375
    [LOG] Max number of nodes per cluster is 151 and the number is 78
[LOG] Saving tensor n2_to_3_972.pt
[LOG] Computing n0_to_3 for num 432
[LOG] Saving tensor n2_to_4_972.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing cluster features for num 979
[LOG] Computing n1_to_1 for num 916
[LOG] Computing n0_to_4 for num 839
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n3_to_4_972.pt
[LOG] Computing n2_to_2 (adjacency) for num 552
[LOG] GENERATED TETRA
[LOG] Saving tensor global_feature_972.pt
[LOG] Computing n0_to_4 for num 432
[LOG] Process 124: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 93: Calculating Neighbors
[LOG] Loading pickle file data_744.pickle
[LOG] Processing node features for num 744
[LOG] Process 90: Calculating Neighbors
[LOG] Loading pickle file data_720.pickle
[LOG] Processing node features for num 720
[LOG] Computing n1_to_2 for num 839
[LOG] Computing n1_to_2 for num 432
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing adjacency and incidence matrices for num 979
[LOG] Computing n0_to_0 for num 979
[LOG] Processing edge features for num 744
[LOG] Computing n2_to_2 (adjacency) for num 368
[LOG] Processing edge features for num 720
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_3 (adjacency) for num 688
[LOG] Computing n4_to_4 (coadjacency) for num 688
[LOG] We will select 769 edges and 4593 tetra
[LOG] Edges from tetra 0 and KDTree 769 with 0 edges in common.
[LOG] Computing n0_to_1 for num 688
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing tetra features for num 720
[LOG] Processing tetra features for num 744
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 82: Created combinatorial complex for file data_656.hdf5
[LOG] We will select 1110 edges and 4926 tetra
[LOG] Edges from tetra 0 and KDTree 1110 with 0 edges in common.
[LOG] Computing n0_to_2 for num 688
[LOG] We will select 1383 edges and 4771 tetra
[LOG] Edges from tetra 0 and KDTree 1383 with 0 edges in common.
[LOG] Process 103: Created combinatorial complex for file data_824.hdf5
[LOG] Removed 1 subset clusters.
[LOG] Processing cluster features for num 720

    [LOG] We Currently have 4943 Tetrahedra.
    [LOG] Generated 117 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.974358974358974
    [LOG] Max number of nodes per cluster is 94 and the number is 113
[LOG] We will select 1431 edges and 6125 tetra
[LOG] Edges from tetra 0 and KDTree 1431 with 0 edges in common.
[LOG] Computing n3_to_3 (adjacency) for num 56
[LOG] We will select 2223 edges and 4141 tetra
[LOG] Edges from tetra 0 and KDTree 2223 with 0 edges in common.
[LOG] Process 64: Calculating Neighbors
[LOG] Loading pickle file data_512.pickle
[LOG] Processing node features for num 512
[LOG] Computing n1_to_3 for num 839
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n4_to_4 (coadjacency) for num 56
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_4 for num 839
[LOG] Computing n0_to_1 for num 56
[LOG] Removed 0 subset clusters.
[LOG] Removed 1 subset clusters.
[LOG] Computing n2_to_3 for num 839
[LOG] Processing edge features for num 512
[LOG] Computing n2_to_2 (adjacency) for num 937
[LOG] Processing cluster features for num 744
[LOG] Process 12: Created combinatorial complex for file data_96.hdf5
[LOG] Processing cluster features for num 720
[LOG] Computing n0_to_3 for num 895
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 45: Calculating Neighbors
[LOG] Loading pickle file data_360.pickle
[LOG] Processing node features for num 360
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_4 for num 895
[LOG] Processing adjacency and incidence matrices for num 720
[LOG] Computing n0_to_0 for num 720
[LOG] Computing n1_to_1 for num 979
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing cluster features for num 744
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_4 for num 839
[LOG] Processing edge features for num 360
[LOG] Computing n1_to_2 for num 895
[LOG] Removed 3 subset clusters.
[LOG] Processing tetra features for num 512
[LOG] Computing n0_to_3 for num 632
[LOG] Process 50: Created combinatorial complex for file data_400.hdf5
[LOG] We will select 1405 edges and 5204 tetra
[LOG] Edges from tetra 0 and KDTree 1405 with 0 edges in common.
[LOG] Computing n0_to_3 for num 192
[LOG] Processing adjacency and incidence matrices for num 744
[LOG] Computing n0_to_0 for num 744
[LOG] Processing tetra features for num 360
[LOG] Computing n0_to_4 for num 632
[LOG] Computing n0_to_4 for num 192
[LOG] Computing n3_to_4 for num 839
[LOG] Computing n0_to_2 for num 56
[LOG] Global feature for num 839
[LOG] Calculating for cell ranks 0 and 4
[LOG] Global feature for num 839
[LOG] Saving tensor x_0_839.pt
[LOG] Saving tensor x_1_839.pt
[LOG] Computing n1_to_2 for num 192
[LOG] Removed 1 subset clusters.
[LOG] GENERATED TETRA
[LOG] Computing n1_to_2 for num 632
[LOG] Saving tensor x_2_839.pt
[LOG] Process 58: Created combinatorial complex for file data_464.hdf5
[LOG] Saving tensor x_3_839.pt
[LOG] Saving tensor x_4_839.pt
[LOG] Saving tensor n0_to_0_839.pt
[LOG] Saving tensor n1_to_1_839.pt
[LOG] Computing n1_to_1 for num 720
[LOG] GENERATED TETRA
[LOG] Computing n2_to_2 (adjacency) for num 916
[LOG] Saving tensor n2_to_2_839.pt
[LOG] Processing cluster features for num 512
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n3_to_3_839.pt
[LOG] Computing n3_to_3 (adjacency) for num 552
[LOG] Saving tensor n4_to_4_839.pt
[LOG] Saving tensor n0_to_1_839.pt
[LOG] Computing n4_to_4 (coadjacency) for num 552
[LOG] Saving tensor n0_to_2_839.pt
[LOG] Processing cluster features for num 360
[LOG] Computing n0_to_1 for num 552
[LOG] Computing n1_to_3 for num 432
[LOG] Saving tensor n0_to_3_839.pt
[LOG] Computing n2_to_2 (adjacency) for num 592
[LOG] Saving tensor n0_to_4_839.pt
[LOG] Saving tensor n1_to_2_839.pt
[LOG] Computing n1_to_4 for num 432
[LOG] Saving tensor n1_to_3_839.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_3 for num 120
[LOG] Saving tensor n1_to_4_839.pt
[LOG] Saving tensor n2_to_3_839.pt
[LOG] Computing n2_to_3 for num 432
[LOG] Processing cluster features for num 512
[LOG] Saving tensor n2_to_4_839.pt
[LOG] Processing cluster features for num 360
[LOG] Computing n1_to_3 for num 584
[LOG] Process 82: Calculating Neighbors
[LOG] Loading pickle file data_656.pickle
[LOG] Processing node features for num 656
[LOG] Saving tensor n3_to_4_839.pt
[LOG] Computing n3_to_3 (adjacency) for num 368
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_4 for num 120
[LOG] Saving tensor global_feature_839.pt
[LOG] Process 105: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n4_to_4 (coadjacency) for num 368
[LOG] Computing n0_to_1 for num 368
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 4694 Tetrahedra.
    [LOG] Generated 112 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.366071428571429
    [LOG] Max number of nodes per cluster is 67 and the number is 110
[LOG] Computing n1_to_4 for num 584
[LOG] Computing n1_to_1 for num 744
[LOG] Processing edge features for num 656
[LOG] Computing n0_to_2 for num 552
[LOG] Processing adjacency and incidence matrices for num 360
[LOG] Computing n0_to_0 for num 360
[LOG] Processing adjacency and incidence matrices for num 512
[LOG] Computing n0_to_0 for num 512
[LOG] We will select 3104 edges and 5413 tetra
[LOG] Edges from tetra 0 and KDTree 3104 with 0 edges in common.
[LOG] Computing n2_to_4 for num 432
[LOG] Computing n2_to_3 for num 120
[LOG] Computing n2_to_3 for num 584
[LOG] Process 103: Calculating Neighbors
[LOG] Loading pickle file data_824.pickle
[LOG] Processing node features for num 824
[LOG] GENERATED TETRA
[LOG] Processing edge features for num 824
[LOG] We will select 1872 edges and 4943 tetra
[LOG] Edges from tetra 0 and KDTree 1872 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_4 for num 120
[LOG] GENERATED TETRA
[LOG] Processing tetra features for num 656
[LOG] Computing n3_to_4 for num 432
[LOG] Global feature for num 432
[LOG] Computing n0_to_2 for num 368
[LOG] Computing n2_to_4 for num 584
[LOG] Global feature for num 432
[LOG] Saving tensor x_0_432.pt
[LOG] Removed 1 subset clusters.
[LOG] Process 12: Calculating Neighbors
[LOG] Loading pickle file data_96.pickle
[LOG] Processing node features for num 96

    [LOG] We Currently have 5037 Tetrahedra.
    [LOG] Generated 121 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.900826446280991
    [LOG] Max number of nodes per cluster is 40 and the number is 16
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 4658 Tetrahedra.
    [LOG] Generated 119 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.51260504201681
    [LOG] Max number of nodes per cluster is 62 and the number is 45
[LOG] Saving tensor x_1_432.pt
[LOG] Saving tensor x_2_432.pt
[LOG] Computing n3_to_4 for num 120
[LOG] Global feature for num 120
[LOG] Removed 3 subset clusters.
[LOG] Saving tensor x_3_432.pt
[LOG] Computing n0_to_3 for num 688
[LOG] Global feature for num 120
[LOG] Saving tensor x_0_120.pt
[LOG] Saving tensor x_4_432.pt
[LOG] Processing tetra features for num 824
[LOG] Saving tensor n0_to_0_432.pt
[LOG] Saving tensor x_1_120.pt
[LOG] Saving tensor x_2_120.pt
[LOG] Processing edge features for num 96
[LOG] Saving tensor n1_to_1_432.pt
[LOG] Saving tensor x_3_120.pt
[LOG] Computing n0_to_4 for num 688
[LOG] Saving tensor n2_to_2_432.pt
[LOG] Saving tensor x_4_120.pt
[LOG] Saving tensor n0_to_0_120.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n1_to_1_120.pt
[LOG] Computing n1_to_1 for num 360
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n2_to_2_120.pt
[LOG] Computing n3_to_4 for num 584
[LOG] Saving tensor n3_to_3_432.pt
[LOG] Global feature for num 584
[LOG] Computing n1_to_2 for num 688
[LOG] Saving tensor n3_to_3_120.pt
[LOG] Saving tensor n4_to_4_432.pt
[LOG] Global feature for num 584
[LOG] Computing n1_to_3 for num 632
[LOG] Saving tensor x_0_584.pt
[LOG] Saving tensor n0_to_1_432.pt
[LOG] Processing cluster features for num 656
[LOG] Saving tensor n4_to_4_120.pt
[LOG] Computing n3_to_3 (adjacency) for num 937
[LOG] Saving tensor x_1_584.pt
[LOG] Saving tensor n0_to_2_432.pt
[LOG] Saving tensor x_2_584.pt
[LOG] Saving tensor n0_to_1_120.pt
[LOG] Computing n1_to_4 for num 632
[LOG] Saving tensor x_3_584.pt
[LOG] GENERATED TETRA
[LOG] Processing tetra features for num 96
[LOG] Saving tensor x_4_584.pt
[LOG] Computing n4_to_4 (coadjacency) for num 937
[LOG] Saving tensor n0_to_3_432.pt
[LOG] Saving tensor n0_to_2_120.pt
[LOG] Saving tensor n0_to_0_584.pt
[LOG] Saving tensor n0_to_4_432.pt
[LOG] Computing n0_to_1 for num 937
[LOG] Saving tensor n0_to_3_120.pt
[LOG] Computing n2_to_3 for num 632
[LOG] Saving tensor n1_to_1_584.pt
[LOG] Saving tensor n1_to_2_432.pt
[LOG] Saving tensor n0_to_4_120.pt
[LOG] Saving tensor n1_to_3_432.pt
[LOG] Saving tensor n2_to_2_584.pt
[LOG] Saving tensor n1_to_4_432.pt
[LOG] Saving tensor n1_to_2_120.pt
[LOG] Saving tensor n2_to_3_432.pt
[LOG] Saving tensor n1_to_3_120.pt
[LOG] Saving tensor n3_to_3_584.pt
[LOG] Saving tensor n1_to_4_120.pt
[LOG] Saving tensor n2_to_4_432.pt
[LOG] Processing cluster features for num 656
[LOG] Saving tensor n2_to_3_120.pt
[LOG] Processing cluster features for num 824
[LOG] Saving tensor n4_to_4_584.pt
[LOG] Saving tensor n3_to_4_432.pt
[LOG] Saving tensor n0_to_1_584.pt
[LOG] Saving tensor n2_to_4_120.pt
[LOG] Process 50: Calculating Neighbors
[LOG] Loading pickle file data_400.pickle
[LOG] Processing node features for num 400
[LOG] Saving tensor global_feature_432.pt
[LOG] Process 54: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n3_to_4_120.pt
[LOG] Saving tensor n0_to_2_584.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor global_feature_120.pt
[LOG] Process 15: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_3_584.pt
[LOG] Saving tensor n0_to_4_584.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing edge features for num 400
[LOG] Saving tensor n1_to_2_584.pt
[LOG] Process 58: Calculating Neighbors
[LOG] Loading pickle file data_464.pickle
[LOG] Processing node features for num 464
[LOG] Saving tensor n1_to_3_584.pt
[LOG] Processing adjacency and incidence matrices for num 656
[LOG] Computing n0_to_0 for num 656
[LOG] Saving tensor n1_to_4_584.pt
[LOG] Processing cluster features for num 824
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n2_to_3_584.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n2_to_4_584.pt
[LOG] Processing cluster features for num 96
[LOG] Processing edge features for num 464
[LOG] Saving tensor n3_to_4_584.pt
[LOG] Saving tensor global_feature_584.pt
[LOG] Process 73: Calculating Cross-Cell-Invariants
[LOG] We will select 1576 edges and 4694 tetra
[LOG] Edges from tetra 0 and KDTree 1576 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_2 for num 937
[LOG] Process 120: Created combinatorial complex for file data_944.hdf5
[LOG] Removed 2 subset clusters.
[LOG] Computing n2_to_4 for num 632

    [LOG] We Currently have 6385 Tetrahedra.
    [LOG] Generated 144 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.027777777777779
    [LOG] Max number of nodes per cluster is 56 and the number is 138
[LOG] Processing adjacency and incidence matrices for num 824
[LOG] Computing n0_to_0 for num 824
[LOG] Computing n1_to_1 for num 512
[LOG] Processing tetra features for num 400
[LOG] Processing cluster features for num 96
[LOG] Processing tetra features for num 464
[LOG] Process 85: Created combinatorial complex for file data_680.hdf5
[LOG] Processing adjacency and incidence matrices for num 96
[LOG] Computing n0_to_0 for num 96
[LOG] Computing n2_to_2 (adjacency) for num 536
[LOG] Computing n3_to_4 for num 632
[LOG] Global feature for num 632
[LOG] Global feature for num 632
[LOG] Computing n0_to_3 for num 56
[LOG] Saving tensor x_0_632.pt
[LOG] Saving tensor x_1_632.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor x_2_632.pt
[LOG] Saving tensor x_3_632.pt
[LOG] Saving tensor x_4_632.pt
[LOG] Saving tensor n0_to_0_632.pt
[LOG] Processing cluster features for num 400
[LOG] Process 14: Created combinatorial complex for file data_112.hdf5
[LOG] Saving tensor n1_to_1_632.pt
[LOG] Computing n0_to_4 for num 56
[LOG] Computing n1_to_1 for num 656
[LOG] Saving tensor n2_to_2_632.pt
[LOG] Processing cluster features for num 464
[LOG] Removed 1 subset clusters.
[LOG] We will select 978 edges and 5037 tetra
[LOG] Edges from tetra 0 and KDTree 978 with 0 edges in common.
[LOG] Saving tensor n3_to_3_632.pt
[LOG] Saving tensor n4_to_4_632.pt
[LOG] Saving tensor n0_to_1_632.pt
[LOG] Process 32: Created combinatorial complex for file data_256.hdf5
[LOG] Saving tensor n0_to_2_632.pt
[LOG] We will select 2958 edges and 4658 tetra
[LOG] Edges from tetra 0 and KDTree 2958 with 0 edges in common.
[LOG] Saving tensor n0_to_3_632.pt
[LOG] Saving tensor n0_to_4_632.pt
[LOG] Computing n1_to_2 for num 56
[LOG] Saving tensor n1_to_2_632.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing cluster features for num 400
[LOG] Computing n1_to_1 for num 824
[LOG] Saving tensor n1_to_3_632.pt
[LOG] Saving tensor n1_to_4_632.pt
[LOG] Saving tensor n2_to_3_632.pt
[LOG] Processing cluster features for num 464
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n2_to_4_632.pt
[LOG] Computing n1_to_1 for num 96
[LOG] Saving tensor n3_to_4_632.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor global_feature_632.pt
[LOG] Process 79: Calculating Cross-Cell-Invariants
[LOG] Computing n2_to_2 (adjacency) for num 720
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing adjacency and incidence matrices for num 400
[LOG] Computing n0_to_0 for num 400
[LOG] Processing adjacency and incidence matrices for num 464
[LOG] Computing n0_to_0 for num 464
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 5821 Tetrahedra.
    [LOG] Generated 117 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.512820512820513
    [LOG] Max number of nodes per cluster is 56 and the number is 82
[LOG] Computing n0_to_3 for num 552
[LOG] Removed 3 subset clusters.
[LOG] Computing n0_to_4 for num 552
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_2 for num 552
[LOG] Computing n0_to_3 for num 368
[LOG] Computing n3_to_3 (adjacency) for num 592
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n4_to_4 (coadjacency) for num 592
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 5948 Tetrahedra.
    [LOG] Generated 164 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.097560975609756
    [LOG] Max number of nodes per cluster is 55 and the number is 130
[LOG] Computing n1_to_1 for num 464
[LOG] Computing n0_to_1 for num 592
[LOG] Computing n0_to_4 for num 368
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_3 for num 688
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_2 for num 368
[LOG] Process 120: Calculating Neighbors
[LOG] Loading pickle file data_944.pickle
[LOG] Processing node features for num 944
[LOG] Computing n1_to_4 for num 688
[LOG] Computing n1_to_1 for num 400
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_3 for num 688
[LOG] Processing edge features for num 944
[LOG] We will select 2113 edges and 6385 tetra
[LOG] Edges from tetra 0 and KDTree 2113 with 0 edges in common.
[LOG] Process 85: Calculating Neighbors
[LOG] Loading pickle file data_680.pickle
[LOG] Processing node features for num 680
[LOG] Process 107: Created combinatorial complex for file data_853.hdf5
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 5182 Tetrahedra.
    [LOG] Generated 114 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.0
    [LOG] Max number of nodes per cluster is 76 and the number is 112
[LOG] Computing n2_to_4 for num 688
[LOG] Computing n1_to_3 for num 895
[LOG] Processing edge features for num 680
[LOG] Computing n0_to_2 for num 592
[LOG] Processing tetra features for num 944
[LOG] Computing n2_to_2 (adjacency) for num 360
[LOG] Computing n1_to_4 for num 895
[LOG] Computing n0_to_3 for num 937
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 3 subset clusters.
[LOG] Removed 2 subset clusters.
[LOG] Process 14: Calculating Neighbors
[LOG] Loading pickle file data_112.pickle
[LOG] Processing node features for num 112

    [LOG] We Currently have 5371 Tetrahedra.
    [LOG] Generated 122 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.032786885245901
    [LOG] Max number of nodes per cluster is 82 and the number is 120
[LOG] Computing n0_to_4 for num 937
[LOG] Computing n3_to_4 for num 688
[LOG] Computing n2_to_3 for num 895
[LOG] Global feature for num 688
[LOG] Global feature for num 688
[LOG] Saving tensor x_0_688.pt
[LOG] Processing tetra features for num 680
[LOG] Saving tensor x_1_688.pt
[LOG] Saving tensor x_2_688.pt
[LOG] Saving tensor x_3_688.pt
[LOG] Saving tensor x_4_688.pt
[LOG] Processing edge features for num 112
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n0_to_0_688.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_2 for num 937
[LOG] Computing n3_to_3 (adjacency) for num 916
[LOG] We will select 1828 edges and 5821 tetra
[LOG] Edges from tetra 0 and KDTree 1828 with 0 edges in common.
[LOG] Saving tensor n1_to_1_688.pt
[LOG] Computing n2_to_4 for num 895
[LOG] Computing n4_to_4 (coadjacency) for num 916
[LOG] Saving tensor n2_to_2_688.pt
[LOG] Processing cluster features for num 944
[LOG] Computing n0_to_1 for num 916
[LOG] Saving tensor n3_to_3_688.pt
[LOG] Saving tensor n4_to_4_688.pt
[LOG] Saving tensor n0_to_1_688.pt
[LOG] Saving tensor n0_to_2_688.pt
[LOG] Removed 3 subset clusters.
[LOG] Saving tensor n0_to_3_688.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n0_to_4_688.pt
[LOG] Processing tetra features for num 112
[LOG] Saving tensor n1_to_2_688.pt
[LOG] Computing n3_to_4 for num 895
[LOG] Saving tensor n1_to_3_688.pt
[LOG] Global feature for num 895
[LOG] Processing cluster features for num 944
[LOG] Saving tensor n1_to_4_688.pt
[LOG] Global feature for num 895
[LOG] Saving tensor x_0_895.pt
[LOG] Saving tensor n2_to_3_688.pt
[LOG] Removed 2 subset clusters.
[LOG] Saving tensor n2_to_4_688.pt
[LOG] Saving tensor x_1_895.pt
[LOG] Processing cluster features for num 680
[LOG] Computing n3_to_3 (adjacency) for num 536
[LOG] Saving tensor x_2_895.pt
[LOG] Computing n2_to_2 (adjacency) for num 744
[LOG] Saving tensor n3_to_4_688.pt
[LOG] Saving tensor x_3_895.pt
[LOG] Saving tensor global_feature_688.pt
[LOG] Removed 5 subset clusters.
[LOG] Saving tensor x_4_895.pt

    [LOG] We Currently have 5536 Tetrahedra.
    [LOG] Generated 138 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.478260869565217
    [LOG] Max number of nodes per cluster is 44 and the number is 66
[LOG] Process 86: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n4_to_4 (coadjacency) for num 536
[LOG] Saving tensor n0_to_0_895.pt
[LOG] Computing n0_to_2 for num 916
[LOG] Computing n0_to_1 for num 536
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n1_to_1_895.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n2_to_2_895.pt
[LOG] Processing adjacency and incidence matrices for num 944
[LOG] Computing n0_to_0 for num 944
[LOG] Saving tensor n3_to_3_895.pt
[LOG] Saving tensor n4_to_4_895.pt
[LOG] Saving tensor n0_to_1_895.pt
[LOG] Processing cluster features for num 680
[LOG] Saving tensor n0_to_2_895.pt
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 5595 Tetrahedra.
    [LOG] Generated 128 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.2890625
    [LOG] Max number of nodes per cluster is 55 and the number is 117
[LOG] Saving tensor n0_to_3_895.pt
[LOG] Saving tensor n0_to_4_895.pt
[LOG] Saving tensor n1_to_2_895.pt
[LOG] Saving tensor n1_to_3_895.pt
[LOG] Saving tensor n1_to_4_895.pt
[LOG] Processing cluster features for num 112
[LOG] Saving tensor n2_to_3_895.pt
[LOG] Saving tensor n2_to_4_895.pt
[LOG] Processing adjacency and incidence matrices for num 680
[LOG] Computing n0_to_0 for num 680
[LOG] Saving tensor n3_to_4_895.pt
[LOG] Computing n2_to_2 (adjacency) for num 96
[LOG] Saving tensor global_feature_895.pt
[LOG] Process 113: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_3 for num 552
[LOG] GENERATED TETRA
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 6149 Tetrahedra.
    [LOG] Generated 141 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.297872340425531
    [LOG] Max number of nodes per cluster is 50 and the number is 86
[LOG] Processing cluster features for num 112
[LOG] Computing n1_to_4 for num 552
[LOG] We will select 1563 edges and 5182 tetra
[LOG] Edges from tetra 0 and KDTree 1563 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_3 for num 552
[LOG] Processing adjacency and incidence matrices for num 112
[LOG] Computing n0_to_0 for num 112
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_2 (adjacency) for num 979
[LOG] Computing n0_to_2 for num 536
[LOG] Computing n1_to_1 for num 944
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_4 for num 552
[LOG] Removed 1 subset clusters.
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 43: Created combinatorial complex for file data_344.hdf5
[LOG] Process 39: Created combinatorial complex for file data_312.hdf5
[LOG] Process 107: Calculating Neighbors
[LOG] Loading pickle file data_853.pickle
[LOG] Processing node features for num 853
[LOG] Computing n2_to_2 (adjacency) for num 464
[LOG] Calculating for cell ranks 1 and 3
[LOG] GENERATED TETRA
[LOG] Processing edge features for num 853
[LOG] Computing n1_to_3 for num 368
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 720
[LOG] GENERATED TETRA
[LOG] Removed 2 subset clusters.
[LOG] Computing n1_to_1 for num 680
[LOG] Computing n4_to_4 (coadjacency) for num 720
[LOG] Computing n1_to_4 for num 368
[LOG] Computing n0_to_1 for num 720
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_4 for num 552
[LOG] Global feature for num 552
[LOG] Global feature for num 552
[LOG] Saving tensor x_0_552.pt
[LOG] Computing n2_to_3 for num 368
[LOG] Saving tensor x_1_552.pt
[LOG] Saving tensor x_2_552.pt
[LOG] Saving tensor x_3_552.pt
[LOG] Saving tensor x_4_552.pt
[LOG] Saving tensor n0_to_0_552.pt
[LOG] Saving tensor n1_to_1_552.pt
[LOG] Processing tetra features for num 853
[LOG] Saving tensor n2_to_2_552.pt
[LOG] Removed 4 subset clusters.
[LOG] Computing n1_to_3 for num 56
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n3_to_3_552.pt
[LOG] Saving tensor n4_to_4_552.pt
[LOG] Saving tensor n0_to_1_552.pt
[LOG] GENERATED TETRA
[LOG] Computing n2_to_4 for num 368
[LOG] Removed 1 subset clusters.
[LOG] Computing n2_to_2 (adjacency) for num 824
[LOG] Saving tensor n0_to_2_552.pt
[LOG] Computing n1_to_4 for num 56
[LOG] We will select 1214 edges and 5536 tetra
[LOG] Edges from tetra 0 and KDTree 1214 with 0 edges in common.
[LOG] Computing n1_to_1 for num 112
[LOG] Computing n2_to_2 (adjacency) for num 656
[LOG] Saving tensor n0_to_3_552.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_2 for num 720
[LOG] Saving tensor n0_to_4_552.pt
[LOG] Computing n2_to_3 for num 56
[LOG] Saving tensor n1_to_2_552.pt
[LOG] Saving tensor n1_to_3_552.pt
[LOG] Saving tensor n1_to_4_552.pt
[LOG] Computing n3_to_4 for num 368
[LOG] Saving tensor n2_to_3_552.pt
[LOG] Global feature for num 368
[LOG] Saving tensor n2_to_4_552.pt
[LOG] Global feature for num 368
[LOG] We will select 1104 edges and 5595 tetra
[LOG] Edges from tetra 0 and KDTree 1104 with 0 edges in common.
[LOG] Saving tensor x_0_368.pt
[LOG] Computing n1_to_3 for num 192
[LOG] Saving tensor n3_to_4_552.pt
[LOG] Processing cluster features for num 853
[LOG] Saving tensor x_1_368.pt
[LOG] Saving tensor global_feature_552.pt
[LOG] Saving tensor x_2_368.pt
[LOG] Process 69: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 25: Created combinatorial complex for file data_200.hdf5
[LOG] Saving tensor x_3_368.pt
[LOG] Saving tensor x_4_368.pt
[LOG] Saving tensor n0_to_0_368.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n1_to_1_368.pt
[LOG] Saving tensor n2_to_2_368.pt
[LOG] Removed 0 subset clusters.
[LOG] Computing n1_to_4 for num 192
[LOG] Processing cluster features for num 853
[LOG] Computing n2_to_4 for num 56
[LOG] Saving tensor n3_to_3_368.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_3 for num 592
[LOG] Saving tensor n4_to_4_368.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n0_to_1_368.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n3_to_3 (adjacency) for num 360
[LOG] Computing n0_to_4 for num 592
[LOG] Saving tensor n0_to_2_368.pt
[LOG] Computing n4_to_4 (coadjacency) for num 360
[LOG] Processing adjacency and incidence matrices for num 853
[LOG] Computing n0_to_0 for num 853
[LOG] Computing n1_to_3 for num 937
[LOG] Computing n0_to_1 for num 360
[LOG] Computing n2_to_3 for num 192
[LOG] Saving tensor n0_to_3_368.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 5644 Tetrahedra.
    [LOG] Generated 148 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.675675675675675
    [LOG] Max number of nodes per cluster is 43 and the number is 63
[LOG] Saving tensor n0_to_4_368.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_4 for num 937
[LOG] Computing n1_to_2 for num 592
[LOG] Computing n3_to_4 for num 56
[LOG] Global feature for num 56
[LOG] Global feature for num 56
[LOG] Saving tensor n1_to_2_368.pt
[LOG] Saving tensor x_0_56.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_4 for num 192
[LOG] Computing n2_to_3 for num 937
[LOG] Saving tensor n1_to_3_368.pt
[LOG] Saving tensor x_1_56.pt
[LOG] Saving tensor x_2_56.pt
[LOG] Saving tensor n1_to_4_368.pt
[LOG] Saving tensor x_3_56.pt
[LOG] Process 99: Created combinatorial complex for file data_792.hdf5
[LOG] Saving tensor n2_to_3_368.pt
[LOG] Process 39: Calculating Neighbors
[LOG] Loading pickle file data_312.pickle
[LOG] Processing node features for num 312
[LOG] Saving tensor x_4_56.pt
[LOG] Saving tensor n2_to_4_368.pt
[LOG] Computing n3_to_4 for num 192
[LOG] GENERATED TETRA
[LOG] Global feature for num 192
[LOG] Global feature for num 192
[LOG] Saving tensor x_0_192.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_2 for num 360
[LOG] Saving tensor n0_to_0_56.pt
[LOG] Saving tensor n3_to_4_368.pt
[LOG] Computing n2_to_4 for num 937
[LOG] Saving tensor x_1_192.pt
[LOG] Processing edge features for num 312
[LOG] Saving tensor x_2_192.pt
[LOG] Saving tensor global_feature_368.pt
[LOG] Saving tensor x_3_192.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 46: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n1_to_1_56.pt
[LOG] Saving tensor x_4_192.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n0_to_0_192.pt
[LOG] Saving tensor n2_to_2_56.pt
[LOG] Saving tensor n1_to_1_192.pt
[LOG] Computing n2_to_2 (adjacency) for num 400
[LOG] Saving tensor n3_to_3_56.pt
[LOG] Saving tensor n2_to_2_192.pt
[LOG] Saving tensor n4_to_4_56.pt
[LOG] Saving tensor n3_to_3_192.pt
[LOG] Saving tensor n0_to_1_56.pt
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 6851 Tetrahedra.
    [LOG] Generated 140 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.564285714285713
    [LOG] Max number of nodes per cluster is 67 and the number is 132
[LOG] Saving tensor n4_to_4_192.pt
[LOG] Saving tensor n0_to_2_56.pt
[LOG] Computing n3_to_3 (adjacency) for num 744
[LOG] Process 32: Calculating Neighbors
[LOG] Loading pickle file data_256.pickle
[LOG] Processing node features for num 256
[LOG] Saving tensor n0_to_1_192.pt
[LOG] Saving tensor n0_to_3_56.pt
[LOG] Processing tetra features for num 312
[LOG] Computing n4_to_4 (coadjacency) for num 744
[LOG] Saving tensor n0_to_2_192.pt
[LOG] Saving tensor n0_to_4_56.pt
[LOG] Process 80: Created combinatorial complex for file data_640.hdf5
[LOG] Computing n3_to_4 for num 937
[LOG] Global feature for num 937
[LOG] Computing n0_to_1 for num 744
[LOG] Global feature for num 937
[LOG] Saving tensor x_0_937.pt
[LOG] Processing edge features for num 256
[LOG] Saving tensor n1_to_2_56.pt
[LOG] Saving tensor n0_to_3_192.pt
[LOG] Computing n1_to_1 for num 853
[LOG] Saving tensor n1_to_3_56.pt
[LOG] Saving tensor n0_to_4_192.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor x_1_937.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n1_to_4_56.pt
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 7294 Tetrahedra.
    [LOG] Generated 168 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.255952380952381
    [LOG] Max number of nodes per cluster is 70 and the number is 128
[LOG] Saving tensor n1_to_2_192.pt
[LOG] Saving tensor x_2_937.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n2_to_3_56.pt
[LOG] Saving tensor n1_to_3_192.pt
[LOG] Process 65: Created combinatorial complex for file data_520.hdf5
[LOG] Saving tensor x_3_937.pt
[LOG] Saving tensor n1_to_4_192.pt
[LOG] Saving tensor n2_to_4_56.pt
[LOG] Computing n0_to_3 for num 536
[LOG] Saving tensor x_4_937.pt
[LOG] Processing tetra features for num 256
[LOG] Saving tensor n2_to_3_192.pt
[LOG] Computing n0_to_3 for num 916
[LOG] Saving tensor n0_to_0_937.pt
[LOG] Computing n3_to_3 (adjacency) for num 96
[LOG] Saving tensor n3_to_4_56.pt
[LOG] Saving tensor n2_to_4_192.pt
[LOG] Removed 5 subset clusters.
[LOG] Computing n0_to_4 for num 536
[LOG] Computing n4_to_4 (coadjacency) for num 96
[LOG] Processing cluster features for num 312
[LOG] Saving tensor global_feature_56.pt
[LOG] Computing n0_to_1 for num 96
[LOG] Saving tensor n3_to_4_192.pt
[LOG] Saving tensor n1_to_1_937.pt
[LOG] Process 7: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor global_feature_192.pt
[LOG] Computing n0_to_4 for num 916
[LOG] Process 24: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n2_to_2_937.pt
[LOG] Computing n1_to_2 for num 536
[LOG] Saving tensor n3_to_3_937.pt
[LOG] Saving tensor n4_to_4_937.pt
[LOG] Saving tensor n0_to_1_937.pt
[LOG] Computing n0_to_2 for num 744
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n0_to_2_937.pt
[LOG] Saving tensor n0_to_3_937.pt
[LOG] Computing n1_to_2 for num 916
[LOG] Processing cluster features for num 312
[LOG] Saving tensor n0_to_4_937.pt
[LOG] Process 96: Created combinatorial complex for file data_768.hdf5
[LOG] Process 111: Created combinatorial complex for file data_881.hdf5
[LOG] We will select 1422 edges and 5948 tetra
[LOG] Edges from tetra 0 and KDTree 1422 with 0 edges in common.
[LOG] Saving tensor n1_to_2_937.pt
[LOG] Saving tensor n1_to_3_937.pt
[LOG] Process 25: Calculating Neighbors
[LOG] Loading pickle file data_200.pickle
[LOG] Processing node features for num 200
[LOG] Computing n0_to_2 for num 96
[LOG] Saving tensor n1_to_4_937.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n2_to_3_937.pt
[LOG] We will select 3096 edges and 5371 tetra
[LOG] Edges from tetra 0 and KDTree 3096 with 0 edges in common.
[LOG] Saving tensor n2_to_4_937.pt
[LOG] Processing adjacency and incidence matrices for num 312
[LOG] Computing n0_to_0 for num 312
[LOG] Processing cluster features for num 256
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n3_to_4_937.pt
[LOG] Process 95: Created combinatorial complex for file data_760.hdf5
[LOG] Saving tensor global_feature_937.pt
[LOG] Processing edge features for num 200
[LOG] Process 119: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 2
[LOG] We will select 1807 edges and 5644 tetra
[LOG] Edges from tetra 0 and KDTree 1807 with 0 edges in common.
[LOG] Process 114: Created combinatorial complex for file data_902.hdf5
[LOG] Computing n3_to_3 (adjacency) for num 979
[LOG] Computing n4_to_4 (coadjacency) for num 979
[LOG] Processing cluster features for num 256
[LOG] Computing n3_to_3 (adjacency) for num 464
[LOG] Computing n0_to_1 for num 979
[LOG] Computing n4_to_4 (coadjacency) for num 464
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_1 for num 464
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing tetra features for num 200
[LOG] Computing n3_to_3 (adjacency) for num 656
[LOG] Computing n4_to_4 (coadjacency) for num 656
[LOG] Computing n0_to_1 for num 656
[LOG] Computing n2_to_2 (adjacency) for num 512
[LOG] Processing adjacency and incidence matrices for num 256
[LOG] Computing n0_to_0 for num 256
[LOG] Computing n1_to_1 for num 312
[LOG] GENERATED TETRA
[LOG] Removed 2 subset clusters.
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 6152 Tetrahedra.
    [LOG] Generated 113 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.946902654867257
    [LOG] Max number of nodes per cluster is 138 and the number is 111
[LOG] GENERATED TETRA
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_3 for num 720
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_2 for num 464
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 53: Created combinatorial complex for file data_424.hdf5
[LOG] Computing n0_to_4 for num 720
[LOG] We will select 2783 edges and 6851 tetra
[LOG] Edges from tetra 0 and KDTree 2783 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 824
[LOG] Computing n1_to_2 for num 720
[LOG] Computing n4_to_4 (coadjacency) for num 824
[LOG] Processing cluster features for num 200
[LOG] Process 99: Calculating Neighbors
[LOG] Loading pickle file data_792.pickle
[LOG] Processing node features for num 792
[LOG] Computing n0_to_1 for num 824
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing edge features for num 792
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_2 for num 656
[LOG] Process 65: Calculating Neighbors
[LOG] Loading pickle file data_520.pickle
[LOG] Processing node features for num 520
[LOG] Computing n2_to_2 (adjacency) for num 944
[LOG] Computing n0_to_2 for num 979
[LOG] Processing edge features for num 520
[LOG] Computing n2_to_2 (adjacency) for num 680
[LOG] Processing cluster features for num 200
[LOG] We will select 1398 edges and 6149 tetra
[LOG] Edges from tetra 0 and KDTree 1398 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] GENERATED TETRA
[LOG] Process 111: Calculating Neighbors
[LOG] Loading pickle file data_881.pickle
[LOG] Processing node features for num 881
[LOG] Processing adjacency and incidence matrices for num 200
[LOG] Computing n0_to_0 for num 200
[LOG] Processing tetra features for num 520
[LOG] Computing n1_to_3 for num 592
[LOG] Computing n1_to_3 for num 916
[LOG] Computing n0_to_2 for num 824
[LOG] Processing edge features for num 881
[LOG] Computing n1_to_1 for num 256
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_4 for num 916
[LOG] Computing n1_to_4 for num 592
[LOG] Computing n2_to_3 for num 916
[LOG] Processing tetra features for num 792
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_3 for num 360
[LOG] Computing n2_to_3 for num 592
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 95: Calculating Neighbors
[LOG] Loading pickle file data_760.pickle
[LOG] Processing node features for num 760
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_4 for num 360
[LOG] Processing tetra features for num 881
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 6094 Tetrahedra.
    [LOG] Generated 141 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.659574468085106
    [LOG] Max number of nodes per cluster is 68 and the number is 137
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing edge features for num 760
[LOG] Process 43: Calculating Neighbors
[LOG] Loading pickle file data_344.pickle
[LOG] Processing node features for num 344
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_2 for num 360
[LOG] Computing n2_to_2 (adjacency) for num 112
[LOG] Processing cluster features for num 520
[LOG] Processing edge features for num 344
[LOG] Computing n2_to_4 for num 916
[LOG] Computing n2_to_4 for num 592
[LOG] Processing tetra features for num 760
[LOG] Processing cluster features for num 520
[LOG] Processing cluster features for num 792
[LOG] Processing cluster features for num 881
[LOG] Processing tetra features for num 344
[LOG] Calculating for cell ranks 0 and 3
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing adjacency and incidence matrices for num 520
[LOG] Computing n0_to_0 for num 520
[LOG] GENERATED TETRA
[LOG] Computing n3_to_3 (adjacency) for num 400
[LOG] Computing n3_to_4 for num 592
[LOG] Computing n4_to_4 (coadjacency) for num 400
[LOG] Global feature for num 592
[LOG] Global feature for num 592
[LOG] Computing n0_to_1 for num 400
[LOG] Saving tensor x_0_592.pt
[LOG] Processing cluster features for num 881
[LOG] Computing n3_to_4 for num 916
[LOG] Saving tensor x_1_592.pt
[LOG] Processing cluster features for num 792
[LOG] Global feature for num 916
[LOG] Global feature for num 916
[LOG] Saving tensor x_0_916.pt
[LOG] Removed 4 subset clusters.
[LOG] GENERATED TETRA
[LOG] Saving tensor x_2_592.pt
[LOG] Saving tensor x_3_592.pt
[LOG] Saving tensor x_4_592.pt
[LOG] Saving tensor x_1_916.pt
[LOG] Saving tensor n0_to_0_592.pt
[LOG] Saving tensor x_2_916.pt
[LOG] Process 35: Created combinatorial complex for file data_280.hdf5
[LOG] Saving tensor x_3_916.pt
[LOG] Saving tensor x_4_916.pt
[LOG] Processing cluster features for num 760
[LOG] Saving tensor n1_to_1_592.pt
[LOG] Saving tensor n0_to_0_916.pt
[LOG] Computing n0_to_3 for num 744
[LOG] Saving tensor n1_to_1_916.pt
[LOG] Saving tensor n2_to_2_592.pt
[LOG] Computing n0_to_3 for num 96
[LOG] Saving tensor n2_to_2_916.pt
[LOG] Process 53: Calculating Neighbors
[LOG] Loading pickle file data_424.pickle
[LOG] Processing node features for num 424
[LOG] Saving tensor n3_to_3_592.pt
[LOG] Process 56: Created combinatorial complex for file data_448.hdf5
[LOG] Processing adjacency and incidence matrices for num 881
[LOG] Computing n0_to_0 for num 881
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 6225 Tetrahedra.
    [LOG] Generated 141 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.333333333333334
    [LOG] Max number of nodes per cluster is 54 and the number is 26
[LOG] Computing n0_to_4 for num 744
[LOG] Computing n0_to_4 for num 96
[LOG] Processing edge features for num 424
[LOG] Processing cluster features for num 760
[LOG] Processing adjacency and incidence matrices for num 792
[LOG] Computing n0_to_0 for num 792
[LOG] Processing cluster features for num 344
[LOG] Computing n1_to_2 for num 744
[LOG] Computing n1_to_2 for num 96
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing adjacency and incidence matrices for num 760
[LOG] Computing n0_to_0 for num 760
[LOG] Computing n0_to_2 for num 400
[LOG] Processing cluster features for num 344
[LOG] Processing tetra features for num 424
[LOG] Removed 2 subset clusters.
[LOG] Computing n1_to_1 for num 200
[LOG] Computing n1_to_1 for num 520
[LOG] Computing n1_to_3 for num 720
[LOG] Computing n2_to_2 (adjacency) for num 312
[LOG] Saving tensor n3_to_3_916.pt
[LOG] Processing adjacency and incidence matrices for num 344
[LOG] Computing n0_to_0 for num 344
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_4 for num 720
[LOG] Computing n2_to_3 for num 720
[LOG] We will select 2101 edges and 6094 tetra
[LOG] Edges from tetra 0 and KDTree 2101 with 0 edges in common.
[LOG] Computing n1_to_1 for num 881
[LOG] Computing n0_to_3 for num 464
[LOG] Process 115: Created combinatorial complex for file data_909.hdf5
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 94: Created combinatorial complex for file data_752.hdf5
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 6815 Tetrahedra.
    [LOG] Generated 172 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.19767441860465
    [LOG] Max number of nodes per cluster is 64 and the number is 118
[LOG] Processing cluster features for num 424
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_3 for num 656
[LOG] Computing n0_to_4 for num 464
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 47: Created combinatorial complex for file data_376.hdf5
[LOG] Computing n2_to_2 (adjacency) for num 853
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_4 for num 720
[LOG] Computing n0_to_4 for num 656
[LOG] Computing n1_to_1 for num 760
[LOG] Computing n1_to_2 for num 464
[LOG] Processing cluster features for num 424
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_3 for num 536
[LOG] Computing n1_to_2 for num 656
[LOG] Computing n1_to_4 for num 536
[LOG] Processing adjacency and incidence matrices for num 424
[LOG] Computing n0_to_0 for num 424
[LOG] Computing n3_to_4 for num 720
[LOG] Saving tensor n4_to_4_592.pt
[LOG] Saving tensor n4_to_4_916.pt
[LOG] Global feature for num 720
[LOG] Calculating for cell ranks 0 and 3
[LOG] Global feature for num 720
[LOG] Saving tensor x_0_720.pt
[LOG] Computing n2_to_3 for num 536
[LOG] Computing n3_to_3 (adjacency) for num 512
[LOG] Computing n0_to_3 for num 979
[LOG] We will select 1914 edges and 7294 tetra
[LOG] Edges from tetra 0 and KDTree 1914 with 0 edges in common.
[LOG] Computing n4_to_4 (coadjacency) for num 512
[LOG] Computing n0_to_1 for num 512
[LOG] Removed 3 subset clusters.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_4 for num 979
[LOG] Computing n0_to_3 for num 824
[LOG] We will select 1959 edges and 6225 tetra
[LOG] Edges from tetra 0 and KDTree 1959 with 0 edges in common.
[LOG] Process 80: Calculating Neighbors
[LOG] Loading pickle file data_640.pickle
[LOG] Processing node features for num 640
[LOG] Computing n1_to_3 for num 360
[LOG] Process 35: Calculating Neighbors
[LOG] Loading pickle file data_280.pickle
[LOG] Processing node features for num 280
[LOG] Computing n0_to_4 for num 824
[LOG] Computing n1_to_4 for num 360
[LOG] Computing n2_to_4 for num 536
[LOG] Computing n3_to_3 (adjacency) for num 944
[LOG] Computing n1_to_2 for num 979
[LOG] Processing edge features for num 280
[LOG] Computing n2_to_3 for num 360
[LOG] Computing n4_to_4 (coadjacency) for num 944
[LOG] Processing edge features for num 640
[LOG] We will select 3484 edges and 6152 tetra
[LOG] Edges from tetra 0 and KDTree 3484 with 0 edges in common.
[LOG] Computing n1_to_1 for num 344
[LOG] Computing n0_to_1 for num 944
[LOG] Computing n1_to_2 for num 824
[LOG] Saving tensor n0_to_1_592.pt
[LOG] Computing n3_to_3 (adjacency) for num 680
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 5717 Tetrahedra.
    [LOG] Generated 110 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.9
    [LOG] Max number of nodes per cluster is 135 and the number is 92
[LOG] Process 96: Calculating Neighbors
[LOG] Loading pickle file data_768.pickle
[LOG] Processing node features for num 768
[LOG] Processing edge features for num 768
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n4_to_4 (coadjacency) for num 680
[LOG] Computing n3_to_4 for num 536
[LOG] Computing n0_to_1 for num 680
[LOG] Global feature for num 536
[LOG] Global feature for num 536
[LOG] Saving tensor x_0_536.pt
[LOG] Computing n1_to_1 for num 424
[LOG] Processing tetra features for num 280
[LOG] Computing n2_to_4 for num 360
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 6890 Tetrahedra.
    [LOG] Generated 151 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.225165562913908
    [LOG] Max number of nodes per cluster is 158 and the number is 149
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing tetra features for num 640
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n0_to_1_916.pt
[LOG] Saving tensor x_1_720.pt
[LOG] Saving tensor n0_to_2_592.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing tetra features for num 768
[LOG] Saving tensor x_1_536.pt
[LOG] Saving tensor x_2_720.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n0_to_2_916.pt
[LOG] Saving tensor x_3_720.pt
[LOG] Saving tensor n0_to_3_592.pt
[LOG] Process 72: Created combinatorial complex for file data_576.hdf5
[LOG] Saving tensor x_2_536.pt
[LOG] Computing n0_to_2 for num 944
[LOG] Computing n1_to_3 for num 96
[LOG] Computing n3_to_4 for num 360
[LOG] Saving tensor n0_to_3_916.pt
[LOG] Process 59: Created combinatorial complex for file data_472.hdf5
[LOG] Global feature for num 360
[LOG] Global feature for num 360
[LOG] Saving tensor x_0_360.pt
[LOG] Process 114: Calculating Neighbors
[LOG] Loading pickle file data_902.pickle
[LOG] Processing node features for num 902
[LOG] Computing n0_to_2 for num 512
[LOG] Computing n1_to_4 for num 96
[LOG] Processing cluster features for num 280
[LOG] Process 18: Created combinatorial complex for file data_144.hdf5
[LOG] Processing edge features for num 902
[LOG] Computing n2_to_3 for num 96
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_2 for num 680
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing cluster features for num 640
[LOG] Processing cluster features for num 280
[LOG] Computing n3_to_3 (adjacency) for num 112
[LOG] Processing cluster features for num 768
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n4_to_4 (coadjacency) for num 112
[LOG] Computing n0_to_1 for num 112
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_4 for num 96
[LOG] Processing tetra features for num 902
[LOG] Processing adjacency and incidence matrices for num 280
[LOG] Computing n0_to_0 for num 280
[LOG] Computing n1_to_1 for num 792
[LOG] Processing cluster features for num 640
[LOG] Processing cluster features for num 768
[LOG] Computing n1_to_3 for num 464
[LOG] Computing n1_to_4 for num 464
[LOG] Saving tensor x_4_720.pt
[LOG] Computing n2_to_3 for num 464
[LOG] Computing n3_to_4 for num 96
[LOG] Processing adjacency and incidence matrices for num 768
[LOG] Computing n0_to_0 for num 768
[LOG] Global feature for num 96
[LOG] Processing adjacency and incidence matrices for num 640
[LOG] Computing n0_to_0 for num 640
[LOG] Global feature for num 96
[LOG] Saving tensor x_0_96.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 94: Calculating Neighbors
[LOG] Loading pickle file data_752.pickle
[LOG] Processing node features for num 752
[LOG] Processing cluster features for num 902
[LOG] Computing n0_to_3 for num 400
[LOG] Computing n0_to_2 for num 112
[LOG] Processing edge features for num 752
[LOG] Computing n1_to_3 for num 744
[LOG] Computing n2_to_4 for num 464
[LOG] Computing n0_to_4 for num 400
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_4 for num 744
[LOG] Processing cluster features for num 902
[LOG] Computing n1_to_2 for num 400
[LOG] Computing n2_to_3 for num 744
[LOG] We will select 3150 edges and 6890 tetra
[LOG] Edges from tetra 0 and KDTree 3150 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n3_to_4 for num 464
[LOG] Global feature for num 464
[LOG] Removed 3 subset clusters.
[LOG] Processing tetra features for num 752
[LOG] Processing adjacency and incidence matrices for num 902
[LOG] Computing n0_to_0 for num 902
[LOG] Global feature for num 464
[LOG] Saving tensor x_0_464.pt
[LOG] Saving tensor n0_to_4_592.pt
[LOG] Saving tensor x_3_536.pt
[LOG] Saving tensor n0_to_0_720.pt
[LOG] Saving tensor x_1_360.pt
[LOG] Saving tensor x_1_96.pt
[LOG] Saving tensor x_1_464.pt
[LOG] Saving tensor n0_to_4_916.pt
[LOG] Saving tensor x_2_360.pt
[LOG] Saving tensor x_4_536.pt
[LOG] Saving tensor x_2_96.pt
[LOG] Saving tensor n1_to_2_592.pt
[LOG] Saving tensor x_2_464.pt
[LOG] Saving tensor n1_to_1_720.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_1 for num 280
[LOG] Process 30: Created combinatorial complex for file data_240.hdf5
[LOG] Computing n2_to_4 for num 744
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_3 for num 656
[LOG] Computing n2_to_2 (adjacency) for num 256
[LOG] Processing cluster features for num 752
[LOG] Computing n1_to_4 for num 656
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n1_to_2_916.pt
[LOG] Saving tensor x_3_96.pt
[LOG] Computing n3_to_4 for num 744
[LOG] Saving tensor n0_to_0_536.pt
[LOG] Saving tensor x_3_464.pt
[LOG] Saving tensor x_4_96.pt
[LOG] Saving tensor n1_to_3_592.pt
[LOG] Saving tensor n0_to_0_96.pt
[LOG] Saving tensor x_4_464.pt
[LOG] Global feature for num 744
[LOG] Global feature for num 744
[LOG] Saving tensor n1_to_3_916.pt
[LOG] Saving tensor x_0_744.pt
[LOG] Saving tensor n2_to_2_720.pt
[LOG] Saving tensor x_3_360.pt
[LOG] Saving tensor n0_to_0_464.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n1_to_1_536.pt
[LOG] Saving tensor x_4_360.pt
[LOG] Saving tensor n1_to_4_916.pt
[LOG] Saving tensor n1_to_4_592.pt
[LOG] Computing n2_to_3 for num 656
[LOG] Saving tensor n1_to_1_96.pt
[LOG] Saving tensor n0_to_0_360.pt
[LOG] Saving tensor x_1_744.pt
[LOG] Saving tensor n3_to_3_720.pt
[LOG] Saving tensor n1_to_1_464.pt
[LOG] Processing cluster features for num 752
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 17: Created combinatorial complex for file data_136.hdf5
[LOG] Computing n2_to_2 (adjacency) for num 520
[LOG] Computing n1_to_3 for num 824
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_4 for num 656
[LOG] Process 19: Created combinatorial complex for file data_152.hdf5
[LOG] Computing n1_to_4 for num 824
[LOG] Removed 2 subset clusters.
[LOG] Processing adjacency and incidence matrices for num 752
[LOG] Computing n0_to_0 for num 752
[LOG] GENERATED TETRA
[LOG] Computing n2_to_2 (adjacency) for num 881
[LOG] Computing n1_to_1 for num 640
[LOG] Computing n2_to_3 for num 824
[LOG] Computing n2_to_2 (adjacency) for num 760
[LOG] Computing n1_to_1 for num 768
[LOG] Saving tensor n2_to_2_96.pt
[LOG] Saving tensor n2_to_3_916.pt
[LOG] Saving tensor x_2_744.pt
[LOG] Saving tensor n2_to_2_536.pt
[LOG] Computing n3_to_3 (adjacency) for num 853
[LOG] Saving tensor x_3_744.pt
[LOG] Saving tensor n2_to_3_592.pt
[LOG] Saving tensor n4_to_4_720.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n1_to_1_360.pt
[LOG] Saving tensor n3_to_3_96.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n4_to_4 (coadjacency) for num 853
[LOG] Computing n0_to_1 for num 853
[LOG] Removed 0 subset clusters.
[LOG] Removed 0 subset clusters.
[LOG] Computing n3_to_4 for num 656
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_3 for num 944
[LOG] Global feature for num 656
[LOG] Global feature for num 656
[LOG] Saving tensor x_0_656.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] We will select 1943 edges and 6815 tetra
[LOG] Edges from tetra 0 and KDTree 1943 with 0 edges in common.
[LOG] Computing n2_to_4 for num 824
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_4 for num 944
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 56: Calculating Neighbors
[LOG] Loading pickle file data_448.pickle
[LOG] Processing node features for num 448
[LOG] Computing n1_to_2 for num 944
[LOG] Computing n1_to_1 for num 902
[LOG] Processing edge features for num 448
[LOG] Saving tensor x_4_744.pt
[LOG] Process 115: Calculating Neighbors
[LOG] Loading pickle file data_909.pickle
[LOG] Processing node features for num 909
[LOG] Saving tensor n2_to_2_464.pt
[LOG] Saving tensor n2_to_4_916.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor n0_to_0_744.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor n3_to_3_536.pt
[LOG] Calculating for cell ranks 1 and 2

    [LOG] We Currently have 7456 Tetrahedra.
    [LOG] Generated 169 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.568047337278106
    [LOG] Max number of nodes per cluster is 126 and the number is 110
[LOG] Saving tensor n2_to_4_592.pt
[LOG] Saving tensor n4_to_4_96.pt
[LOG] Saving tensor n0_to_1_720.pt
[LOG] Saving tensor n2_to_2_360.pt
[LOG] Saving tensor x_1_656.pt
[LOG] Saving tensor n3_to_3_464.pt
[LOG] We will select 4890 edges and 5717 tetra
[LOG] Edges from tetra 0 and KDTree 4890 with 0 edges in common.
[LOG] Computing n0_to_3 for num 512
[LOG] Saving tensor n0_to_1_96.pt
[LOG] Saving tensor n4_to_4_536.pt
[LOG] Processing edge features for num 909
[LOG] Saving tensor n3_to_4_916.pt
[LOG] Computing n3_to_4 for num 824
[LOG] Saving tensor n1_to_1_744.pt
[LOG] Saving tensor n3_to_4_592.pt
[LOG] Saving tensor n0_to_2_720.pt
[LOG] Global feature for num 824
[LOG] Global feature for num 824
[LOG] Saving tensor x_0_824.pt
[LOG] Computing n0_to_3 for num 680
[LOG] Saving tensor x_2_656.pt
[LOG] Saving tensor n4_to_4_464.pt
[LOG] Saving tensor n0_to_1_536.pt
[LOG] Saving tensor x_3_656.pt
[LOG] Saving tensor n0_to_2_96.pt
[LOG] Saving tensor n0_to_1_464.pt
[LOG] Saving tensor global_feature_916.pt
[LOG] Saving tensor n2_to_2_744.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_2 for num 853
[LOG] Computing n0_to_4 for num 512
[LOG] Process 59: Calculating Neighbors
[LOG] Loading pickle file data_472.pickle
[LOG] Processing node features for num 472
[LOG] Computing n0_to_4 for num 680
[LOG] Processing tetra features for num 448
[LOG] Saving tensor n3_to_3_360.pt
[LOG] Processing edge features for num 472
[LOG] Processing tetra features for num 909
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_2 for num 512
[LOG] Computing n3_to_3 (adjacency) for num 312
[LOG] Computing n1_to_2 for num 680
[LOG] Computing n4_to_4 (coadjacency) for num 312
[LOG] Computing n0_to_1 for num 312
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing tetra features for num 472
[LOG] Saving tensor n0_to_2_536.pt
[LOG] Processing cluster features for num 448
[LOG] Processing cluster features for num 909
[LOG] Computing n0_to_2 for num 312
[LOG] Process 47: Calculating Neighbors
[LOG] Loading pickle file data_376.pickle
[LOG] Processing node features for num 376
[LOG] Computing n2_to_2 (adjacency) for num 424
[LOG] Computing n1_to_3 for num 979
[LOG] Processing cluster features for num 448
[LOG] Processing edge features for num 376
[LOG] Processing cluster features for num 909
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 472
[LOG] Computing n1_to_4 for num 979
[LOG] Saving tensor x_1_824.pt
[LOG] Saving tensor global_feature_592.pt
[LOG] Process 74: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_3_96.pt
[LOG] Saving tensor n0_to_3_720.pt
[LOG] Process 116: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_2_464.pt
[LOG] Saving tensor x_2_824.pt
[LOG] Saving tensor n0_to_3_536.pt
[LOG] Saving tensor n0_to_4_96.pt
[LOG] Saving tensor n4_to_4_360.pt
[LOG] Processing adjacency and incidence matrices for num 448
[LOG] Computing n0_to_0 for num 448
[LOG] Saving tensor n3_to_3_744.pt
[LOG] Computing n0_to_3 for num 112
[LOG] Saving tensor n0_to_1_360.pt
[LOG] Saving tensor n0_to_3_464.pt
[LOG] Saving tensor x_3_824.pt
[LOG] Processing adjacency and incidence matrices for num 909
[LOG] Computing n0_to_0 for num 909
[LOG] Saving tensor n0_to_4_536.pt
[LOG] Saving tensor x_4_824.pt
[LOG] Saving tensor n4_to_4_744.pt
[LOG] Saving tensor n1_to_2_96.pt
[LOG] Saving tensor n0_to_0_824.pt
[LOG] Saving tensor n0_to_4_720.pt
[LOG] Saving tensor n0_to_2_360.pt
[LOG] Saving tensor n0_to_4_464.pt
[LOG] Saving tensor n1_to_2_536.pt
[LOG] Saving tensor n0_to_1_744.pt
[LOG] Saving tensor n1_to_3_96.pt
[LOG] Saving tensor n1_to_2_464.pt
[LOG] Saving tensor n1_to_1_824.pt
[LOG] Saving tensor n1_to_2_720.pt
[LOG] Computing n2_to_3 for num 979
[LOG] Saving tensor n0_to_2_744.pt
[LOG] Saving tensor n1_to_4_96.pt
[LOG] Processing tetra features for num 376
[LOG] Processing cluster features for num 472
[LOG] Saving tensor n1_to_3_464.pt
[LOG] Saving tensor n2_to_2_824.pt
[LOG] Saving tensor n0_to_3_360.pt
[LOG] Saving tensor n0_to_3_744.pt
[LOG] Saving tensor n2_to_3_96.pt
[LOG] Saving tensor n1_to_3_720.pt
[LOG] Computing n0_to_4 for num 112
[LOG] Saving tensor n1_to_4_464.pt
[LOG] Process 3: Created combinatorial complex for file data_24.hdf5
[LOG] Saving tensor n3_to_3_824.pt
[LOG] Saving tensor n0_to_4_744.pt
[LOG] Saving tensor x_4_656.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 19: Calculating Neighbors
[LOG] Loading pickle file data_152.pickle
[LOG] Processing node features for num 152
[LOG] Saving tensor n1_to_3_536.pt
[LOG] GENERATED TETRA
[LOG] Computing n1_to_2 for num 112
[LOG] Computing n1_to_3 for num 400
[LOG] Computing n1_to_1 for num 752
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing edge features for num 152
[LOG] Processing adjacency and incidence matrices for num 472
[LOG] Computing n0_to_0 for num 472
[LOG] Computing n1_to_4 for num 400
[LOG] Computing n2_to_3 for num 400
[LOG] Computing n2_to_4 for num 979
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 376
[LOG] Processing tetra features for num 152
[LOG] Saving tensor n0_to_4_360.pt
[LOG] Saving tensor n2_to_4_96.pt
[LOG] Process 72: Calculating Neighbors
[LOG] Loading pickle file data_576.pickle
[LOG] Processing node features for num 576
[LOG] Saving tensor n4_to_4_824.pt
[LOG] Saving tensor n1_to_4_720.pt
[LOG] Saving tensor n2_to_3_464.pt
[LOG] Saving tensor n0_to_0_656.pt
[LOG] Saving tensor n1_to_2_744.pt
[LOG] Saving tensor n1_to_2_360.pt
[LOG] Computing n1_to_1 for num 909
[LOG] Saving tensor n3_to_4_96.pt
[LOG] Saving tensor n1_to_4_536.pt
[LOG] Saving tensor n0_to_1_824.pt
[LOG] Saving tensor n1_to_3_744.pt
[LOG] Saving tensor n1_to_1_656.pt
[LOG] Saving tensor n2_to_3_720.pt
[LOG] Saving tensor n2_to_4_464.pt
[LOG] Processing edge features for num 576
[LOG] Processing cluster features for num 376
[LOG] Computing n2_to_4 for num 400
[LOG] Computing n3_to_4 for num 979
[LOG] Removed 5 subset clusters.

    [LOG] We Currently have 7378 Tetrahedra.
    [LOG] Generated 178 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.47191011235955
    [LOG] Max number of nodes per cluster is 71 and the number is 169
[LOG] Global feature for num 979
[LOG] Global feature for num 979
[LOG] Saving tensor x_0_979.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_1 for num 448
[LOG] Processing adjacency and incidence matrices for num 376
[LOG] Computing n0_to_0 for num 376
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing tetra features for num 576
[LOG] Process 117: Created combinatorial complex for file data_923.hdf5
[LOG] Processing cluster features for num 152
[LOG] Saving tensor n1_to_3_360.pt
[LOG] Saving tensor global_feature_96.pt
[LOG] Saving tensor n2_to_3_536.pt
[LOG] Saving tensor n0_to_2_824.pt
[LOG] Saving tensor n2_to_2_656.pt
[LOG] Saving tensor n0_to_3_824.pt
[LOG] Computing n3_to_4 for num 400
[LOG] Saving tensor n1_to_4_744.pt
[LOG] Saving tensor n2_to_4_720.pt
[LOG] Global feature for num 400
[LOG] Saving tensor n0_to_4_824.pt
[LOG] Saving tensor n2_to_4_536.pt
[LOG] Process 12: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Global feature for num 400
[LOG] Saving tensor x_0_400.pt
[LOG] Saving tensor x_1_979.pt
[LOG] Saving tensor n1_to_4_360.pt
[LOG] Saving tensor n2_to_3_744.pt
[LOG] Computing n1_to_1 for num 472
[LOG] Process 123: Created combinatorial complex for file data_965.hdf5
[LOG] Saving tensor n1_to_2_824.pt
[LOG] Saving tensor n3_to_4_464.pt
[LOG] Saving tensor n3_to_3_656.pt
[LOG] Processing cluster features for num 152
[LOG] Process 83: Created combinatorial complex for file data_664.hdf5
[LOG] Process 18: Calculating Neighbors
[LOG] Loading pickle file data_144.pickle
[LOG] Processing node features for num 144
[LOG] Saving tensor n3_to_4_720.pt
[LOG] Processing edge features for num 144
[LOG] Processing cluster features for num 576
[LOG] Processing adjacency and incidence matrices for num 152
[LOG] Computing n0_to_0 for num 152
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 7788 Tetrahedra.
    [LOG] Generated 179 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.860335195530727
    [LOG] Max number of nodes per cluster is 63 and the number is 177
[LOG] Computing n2_to_2 (adjacency) for num 344
[LOG] Saving tensor x_2_979.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 7801 Tetrahedra.
    [LOG] Generated 186 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.602150537634408
    [LOG] Max number of nodes per cluster is 57 and the number is 181
[LOG] Processing cluster features for num 576
[LOG] Saving tensor x_1_400.pt
[LOG] Saving tensor n3_to_4_536.pt
[LOG] Saving tensor n2_to_4_744.pt
[LOG] Saving tensor n2_to_3_360.pt
[LOG] Saving tensor n1_to_3_824.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n4_to_4_656.pt
[LOG] Processing tetra features for num 144
[LOG] Saving tensor global_feature_536.pt
[LOG] Saving tensor x_2_400.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor x_3_979.pt
[LOG] Saving tensor x_3_400.pt
[LOG] Saving tensor n1_to_4_824.pt
[LOG] Saving tensor n2_to_4_360.pt
[LOG] Saving tensor n3_to_4_744.pt
[LOG] Saving tensor global_feature_720.pt
[LOG] Process 67: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor x_4_979.pt
[LOG] Saving tensor global_feature_464.pt
[LOG] Saving tensor n0_to_1_656.pt
[LOG] Saving tensor n2_to_3_824.pt
[LOG] Process 90: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n3_to_4_360.pt
[LOG] Saving tensor global_feature_744.pt
[LOG] Saving tensor n2_to_4_824.pt
[LOG] Saving tensor n0_to_2_656.pt
[LOG] Saving tensor global_feature_360.pt
[LOG] Process 45: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor x_4_400.pt
[LOG] Saving tensor n0_to_0_400.pt
[LOG] Processing adjacency and incidence matrices for num 576
[LOG] Computing n0_to_0 for num 576
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 8137 Tetrahedra.
    [LOG] Generated 192 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.713541666666666
    [LOG] Max number of nodes per cluster is 97 and the number is 169
[LOG] Saving tensor n0_to_3_656.pt
[LOG] Saving tensor n0_to_4_656.pt
[LOG] Process 106: Created combinatorial complex for file data_846.hdf5
[LOG] Saving tensor n1_to_2_656.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 58: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n1_to_1_400.pt
[LOG] Saving tensor n0_to_0_979.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 93: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n1_to_3_656.pt
[LOG] Saving tensor n3_to_4_824.pt
[LOG] Saving tensor n1_to_1_979.pt
[LOG] Saving tensor n1_to_4_656.pt
[LOG] Saving tensor n2_to_3_656.pt
[LOG] Saving tensor global_feature_824.pt
[LOG] Saving tensor n2_to_2_979.pt
[LOG] Process 103: Calculating Cross-Cell-Invariants
[LOG] Computing n3_to_3 (adjacency) for num 520
[LOG] Saving tensor n2_to_2_400.pt
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_1 for num 376
[LOG] Computing n4_to_4 (coadjacency) for num 520
[LOG] Saving tensor n2_to_4_656.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n3_to_3_979.pt
[LOG] Computing n0_to_1 for num 520
[LOG] Process 30: Calculating Neighbors
[LOG] Loading pickle file data_240.pickle
[LOG] Processing node features for num 240
[LOG] Saving tensor n3_to_4_656.pt
[LOG] Saving tensor n3_to_3_400.pt
[LOG] Saving tensor n4_to_4_979.pt
[LOG] Computing n3_to_3 (adjacency) for num 881
[LOG] Process 44: Created combinatorial complex for file data_352.hdf5
[LOG] Saving tensor global_feature_656.pt
[LOG] Saving tensor n0_to_1_979.pt
[LOG] Process 82: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n4_to_4_400.pt
[LOG] Saving tensor n0_to_2_979.pt
[LOG] Removed 1 subset clusters.
[LOG] Processing cluster features for num 144
[LOG] Computing n4_to_4 (coadjacency) for num 881
[LOG] Processing edge features for num 240
[LOG] Saving tensor n0_to_1_400.pt
[LOG] Saving tensor n0_to_3_979.pt
[LOG] Computing n0_to_1 for num 881
[LOG] Saving tensor n0_to_2_400.pt
[LOG] Saving tensor n0_to_4_979.pt
[LOG] Saving tensor n0_to_3_400.pt
[LOG] Saving tensor n1_to_2_979.pt
[LOG] Computing n1_to_3 for num 944
[LOG] Saving tensor n0_to_4_400.pt
[LOG] Saving tensor n1_to_3_979.pt
[LOG] Saving tensor n1_to_2_400.pt
[LOG] Saving tensor n1_to_4_979.pt
[LOG] Computing n1_to_1 for num 152
[LOG] Saving tensor n1_to_3_400.pt
[LOG] Computing n0_to_3 for num 853
[LOG] Saving tensor n2_to_3_979.pt
[LOG] Saving tensor n1_to_4_400.pt
[LOG] Process 3: Calculating Neighbors
[LOG] Loading pickle file data_24.pickle
[LOG] Processing node features for num 24
[LOG] Computing n1_to_3 for num 680
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n2_to_3_400.pt
[LOG] Saving tensor n2_to_4_979.pt
[LOG] Computing n1_to_4 for num 944
[LOG] Saving tensor n2_to_4_400.pt
[LOG] Saving tensor n3_to_4_979.pt
[LOG] Saving tensor n3_to_4_400.pt
[LOG] Processing cluster features for num 144
[LOG] Saving tensor global_feature_979.pt
[LOG] Process 125: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing edge features for num 24
[LOG] Saving tensor global_feature_400.pt
[LOG] Computing n0_to_4 for num 853
[LOG] Process 50: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_4 for num 680
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_3 for num 944
[LOG] Process 17: Calculating Neighbors
[LOG] Loading pickle file data_136.pickle
[LOG] Processing node features for num 136
[LOG] Computing n3_to_3 (adjacency) for num 760
[LOG] Computing n2_to_3 for num 680
[LOG] Processing adjacency and incidence matrices for num 144
[LOG] Computing n0_to_0 for num 144
[LOG] Processing edge features for num 136
[LOG] Computing n4_to_4 (coadjacency) for num 760
[LOG] Computing n1_to_2 for num 853
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_1 for num 760
[LOG] Processing tetra features for num 240
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_2 for num 520
[LOG] Process 117: Calculating Neighbors
[LOG] Processing tetra features for num 24
[LOG] Loading pickle file data_923.pickle
[LOG] Processing node features for num 923
[LOG] Removed 1 subset clusters.
[LOG] Computing n0_to_2 for num 881
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 8226 Tetrahedra.
    [LOG] Generated 153 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.392156862745098
    [LOG] Max number of nodes per cluster is 102 and the number is 134
[LOG] Processing edge features for num 923
[LOG] Computing n2_to_4 for num 944
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 256
[LOG] Processing tetra features for num 136
[LOG] Removed 1 subset clusters.
[LOG] We will select 2211 edges and 7456 tetra
[LOG] Computing n4_to_4 (coadjacency) for num 256
[LOG] Edges from tetra 0 and KDTree 2211 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] Computing n1_to_1 for num 576
[LOG] Computing n2_to_4 for num 680
[LOG] Computing n0_to_1 for num 256
[LOG] Processing cluster features for num 240
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 7443 Tetrahedra.
    [LOG] Generated 160 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.44375
    [LOG] Max number of nodes per cluster is 67 and the number is 40
[LOG] Computing n0_to_3 for num 312
[LOG] Processing tetra features for num 923
[LOG] Computing n0_to_2 for num 760
[LOG] Computing n3_to_4 for num 944
[LOG] Processing cluster features for num 24
[LOG] Global feature for num 944
[LOG] Computing n0_to_4 for num 312
[LOG] Global feature for num 944
[LOG] Saving tensor x_0_944.pt
[LOG] Saving tensor x_1_944.pt
[LOG] Saving tensor x_2_944.pt
[LOG] Saving tensor x_3_944.pt
[LOG] Computing n3_to_4 for num 680
[LOG] Processing cluster features for num 240
[LOG] Saving tensor x_4_944.pt
[LOG] Global feature for num 680
[LOG] Saving tensor n0_to_0_944.pt
[LOG] Global feature for num 680
[LOG] Saving tensor x_0_680.pt
[LOG] Saving tensor n1_to_1_944.pt
[LOG] Processing cluster features for num 136
[LOG] Saving tensor x_1_680.pt
[LOG] Saving tensor n2_to_2_944.pt
[LOG] Saving tensor x_2_680.pt
[LOG] Saving tensor x_3_680.pt
[LOG] Process 123: Calculating Neighbors
[LOG] Loading pickle file data_965.pickle
[LOG] Processing node features for num 965
[LOG] Saving tensor n3_to_3_944.pt
[LOG] Saving tensor n4_to_4_944.pt
[LOG] Saving tensor x_4_680.pt
[LOG] Saving tensor n0_to_0_680.pt
[LOG] Computing n1_to_2 for num 312
[LOG] Saving tensor n1_to_1_680.pt
[LOG] Saving tensor n0_to_1_944.pt
[LOG] Saving tensor n0_to_2_944.pt
[LOG] Saving tensor n2_to_2_680.pt
[LOG] Saving tensor n0_to_3_944.pt
[LOG] Saving tensor n3_to_3_680.pt
[LOG] Saving tensor n0_to_4_944.pt
[LOG] Saving tensor n1_to_2_944.pt
[LOG] Saving tensor n4_to_4_680.pt
[LOG] Processing edge features for num 965
[LOG] Processing cluster features for num 24
[LOG] Saving tensor n1_to_3_944.pt
[LOG] Saving tensor n0_to_1_680.pt
[LOG] Saving tensor n1_to_4_944.pt
[LOG] Saving tensor n0_to_2_680.pt
[LOG] Saving tensor n2_to_3_944.pt
[LOG] Saving tensor n0_to_3_680.pt
[LOG] Processing adjacency and incidence matrices for num 240
[LOG] Computing n0_to_0 for num 240
[LOG] Saving tensor n2_to_4_944.pt
[LOG] Saving tensor n0_to_4_680.pt
[LOG] We will select 2562 edges and 7801 tetra
[LOG] Edges from tetra 0 and KDTree 2562 with 0 edges in common.
[LOG] Saving tensor n3_to_4_944.pt
[LOG] Saving tensor n1_to_2_680.pt
[LOG] Processing cluster features for num 136
[LOG] Saving tensor global_feature_944.pt
[LOG] Saving tensor n1_to_3_680.pt
[LOG] Process 120: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n1_to_4_680.pt
[LOG] Saving tensor n2_to_3_680.pt
[LOG] Processing cluster features for num 923
[LOG] Computing n1_to_3 for num 112
[LOG] Computing n0_to_2 for num 256
[LOG] Processing adjacency and incidence matrices for num 24
[LOG] Computing n0_to_0 for num 24
[LOG] Processing adjacency and incidence matrices for num 136
[LOG] Computing n0_to_0 for num 136
[LOG] Computing n1_to_4 for num 112
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 923
[LOG] Computing n3_to_3 (adjacency) for num 424
[LOG] Computing n2_to_3 for num 112
[LOG] We will select 3714 edges and 8137 tetra
[LOG] Edges from tetra 0 and KDTree 3714 with 0 edges in common.
[LOG] Removed 2 subset clusters.
[LOG] Computing n4_to_4 (coadjacency) for num 424
[LOG] Processing tetra features for num 965
[LOG] Computing n0_to_1 for num 424
[LOG] Saving tensor n2_to_4_680.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing adjacency and incidence matrices for num 923
[LOG] Saving tensor n3_to_4_680.pt
[LOG] Computing n0_to_0 for num 923
[LOG] Process 44: Calculating Neighbors
[LOG] Process 92: Created combinatorial complex for file data_736.hdf5
[LOG] Loading pickle file data_352.pickle
[LOG] Processing node features for num 352
[LOG] Saving tensor global_feature_680.pt
[LOG] Computing n1_to_1 for num 144
[LOG] Process 85: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing edge features for num 352
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 7856 Tetrahedra.
    [LOG] Generated 194 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.536082474226804
    [LOG] Max number of nodes per cluster is 133 and the number is 191
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_4 for num 112
[LOG] Computing n2_to_2 (adjacency) for num 909
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing cluster features for num 965
[LOG] Processing tetra features for num 352
[LOG] Process 101: Created combinatorial complex for file data_808.hdf5
[LOG] Computing n0_to_2 for num 424
[LOG] Computing n1_to_3 for num 512
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_4 for num 112
[LOG] Global feature for num 112
[LOG] Computing n1_to_4 for num 512
[LOG] Global feature for num 112
[LOG] Saving tensor x_0_112.pt
[LOG] Processing cluster features for num 965
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor x_1_112.pt
[LOG] Saving tensor x_2_112.pt
[LOG] Computing n1_to_1 for num 24
[LOG] Saving tensor x_3_112.pt
[LOG] Saving tensor x_4_112.pt
[LOG] Saving tensor n0_to_0_112.pt
[LOG] We will select 2998 edges and 7378 tetra
[LOG] Saving tensor n1_to_1_112.pt
[LOG] Edges from tetra 0 and KDTree 2998 with 0 edges in common.
[LOG] Computing n1_to_1 for num 136
[LOG] Saving tensor n2_to_2_112.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n3_to_3_112.pt
[LOG] Computing n2_to_3 for num 512
[LOG] Saving tensor n4_to_4_112.pt
[LOG] Saving tensor n0_to_1_112.pt
[LOG] Saving tensor n0_to_2_112.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n0_to_3_112.pt
[LOG] Processing cluster features for num 352
[LOG] Processing adjacency and incidence matrices for num 965
[LOG] Computing n0_to_0 for num 965
[LOG] Saving tensor n0_to_4_112.pt
[LOG] Saving tensor n1_to_2_112.pt
[LOG] Saving tensor n1_to_3_112.pt
[LOG] Saving tensor n1_to_4_112.pt
[LOG] Saving tensor n2_to_3_112.pt
[LOG] Saving tensor n2_to_4_112.pt
[LOG] Saving tensor n3_to_4_112.pt
[LOG] Saving tensor global_feature_112.pt
[LOG] Process 14: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 102: Created combinatorial complex for file data_816.hdf5
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing cluster features for num 352
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_4 for num 512
[LOG] Computing n2_to_2 (adjacency) for num 200
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_1 for num 923
[LOG] Process 63: Created combinatorial complex for file data_504.hdf5
[LOG] Processing adjacency and incidence matrices for num 352
[LOG] Computing n0_to_0 for num 352
[LOG] We will select 2731 edges and 7788 tetra
[LOG] Edges from tetra 0 and KDTree 2731 with 0 edges in common.
[LOG] Computing n1_to_3 for num 312
[LOG] Computing n2_to_2 (adjacency) for num 280
[LOG] Computing n1_to_4 for num 312
[LOG] Computing n2_to_3 for num 312
[LOG] Computing n1_to_1 for num 240
[LOG] Process 83: Calculating Neighbors
[LOG] Loading pickle file data_664.pickle
[LOG] Processing node features for num 664
[LOG] Process 29: Created combinatorial complex for file data_232.hdf5
[LOG] Computing n3_to_4 for num 512
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 8002 Tetrahedra.
    [LOG] Generated 162 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.839506172839506
    [LOG] Max number of nodes per cluster is 62 and the number is 160
[LOG] Processing edge features for num 664
[LOG] Global feature for num 512
[LOG] Global feature for num 512
[LOG] Saving tensor x_0_512.pt
[LOG] Saving tensor x_1_512.pt
[LOG] Saving tensor x_2_512.pt
[LOG] Saving tensor x_3_512.pt
[LOG] Process 106: Calculating Neighbors
[LOG] Loading pickle file data_846.pickle
[LOG] Processing node features for num 846
[LOG] Saving tensor x_4_512.pt
[LOG] Saving tensor n0_to_0_512.pt
[LOG] Saving tensor n1_to_1_512.pt
[LOG] Saving tensor n2_to_2_512.pt
[LOG] Saving tensor n3_to_3_512.pt
[LOG] Saving tensor n4_to_4_512.pt
[LOG] Processing edge features for num 846
[LOG] Process 92: Calculating Neighbors
[LOG] Loading pickle file data_736.pickle
[LOG] Processing node features for num 736
[LOG] Saving tensor n0_to_1_512.pt
[LOG] Computing n0_to_3 for num 520
[LOG] Computing n0_to_3 for num 881
[LOG] Saving tensor n0_to_2_512.pt
[LOG] Saving tensor n0_to_3_512.pt
[LOG] Saving tensor n0_to_4_512.pt
[LOG] Saving tensor n1_to_2_512.pt
[LOG] Saving tensor n1_to_3_512.pt
[LOG] Processing edge features for num 736
[LOG] Saving tensor n1_to_4_512.pt
[LOG] Saving tensor n2_to_3_512.pt
[LOG] Saving tensor n2_to_4_512.pt
[LOG] Computing n0_to_4 for num 881
[LOG] Saving tensor n3_to_4_512.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_4 for num 520
[LOG] Computing n2_to_4 for num 312
[LOG] Computing n1_to_3 for num 853
[LOG] Saving tensor global_feature_512.pt
[LOG] Process 64: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 101: Calculating Neighbors
[LOG] Loading pickle file data_808.pickle
[LOG] Processing node features for num 808
[LOG] We will select 2947 edges and 7856 tetra
[LOG] Edges from tetra 0 and KDTree 2947 with 0 edges in common.
[LOG] Processing tetra features for num 664
[LOG] Processing edge features for num 808
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_4 for num 853
[LOG] Computing n1_to_2 for num 520
[LOG] Computing n1_to_2 for num 881
[LOG] Processing tetra features for num 846
[LOG] We will select 4251 edges and 8226 tetra
[LOG] Edges from tetra 0 and KDTree 4251 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 40: Created combinatorial complex for file data_320.hdf5
[LOG] Computing n3_to_3 (adjacency) for num 344
[LOG] Computing n2_to_3 for num 853
[LOG] Computing n4_to_4 (coadjacency) for num 344
[LOG] Processing tetra features for num 736
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_1 for num 344
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing tetra features for num 808
[LOG] Computing n2_to_2 (adjacency) for num 448
[LOG] Computing n0_to_3 for num 760
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_4 for num 760
[LOG] Processing cluster features for num 664
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 846
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_1 for num 352
[LOG] We will select 4469 edges and 7443 tetra
[LOG] Edges from tetra 0 and KDTree 4469 with 0 edges in common.
[LOG] Computing n1_to_2 for num 760
[LOG] Computing n2_to_2 (adjacency) for num 472
[LOG] Processing cluster features for num 736
[LOG] Processing cluster features for num 664
[LOG] Process 102: Calculating Neighbors
[LOG] Loading pickle file data_816.pickle
[LOG] Processing node features for num 816
[LOG] Processing cluster features for num 846
[LOG] Processing cluster features for num 808
[LOG] Processing edge features for num 816
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing adjacency and incidence matrices for num 664
[LOG] Processing cluster features for num 736
[LOG] Computing n0_to_0 for num 664
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing adjacency and incidence matrices for num 846
[LOG] Computing n0_to_0 for num 846
[LOG] Processing cluster features for num 808
[LOG] Process 88: Created combinatorial complex for file data_704.hdf5
[LOG] Processing tetra features for num 816
[LOG] Computing n2_to_2 (adjacency) for num 152
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_2 for num 344
[LOG] Processing adjacency and incidence matrices for num 736
[LOG] Computing n0_to_0 for num 736
[LOG] Processing adjacency and incidence matrices for num 808
[LOG] Computing n0_to_0 for num 808
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 5 subset clusters.

    [LOG] We Currently have 8429 Tetrahedra.
    [LOG] Generated 174 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.620689655172413
    [LOG] Max number of nodes per cluster is 133 and the number is 153
[LOG] Computing n1_to_1 for num 965
[LOG] Process 11: Created combinatorial complex for file data_88.hdf5
[LOG] Process 29: Calculating Neighbors
[LOG] Loading pickle file data_232.pickle
[LOG] Processing node features for num 232
[LOG] Computing n0_to_3 for num 256
[LOG] Processing edge features for num 232
[LOG] Process 63: Calculating Neighbors
[LOG] Loading pickle file data_504.pickle
[LOG] Processing node features for num 504
[LOG] Processing cluster features for num 816
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_4 for num 256
[LOG] Processing edge features for num 504
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing cluster features for num 816
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_2 for num 256
[LOG] Processing tetra features for num 232
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing adjacency and incidence matrices for num 816
[LOG] Computing n0_to_0 for num 816
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 40: Calculating Neighbors
[LOG] Loading pickle file data_320.pickle
[LOG] Processing node features for num 320
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing tetra features for num 504
[LOG] Processing edge features for num 320
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_1 for num 846
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 3 subset clusters.
[LOG] Computing n1_to_1 for num 808
[LOG] Computing n2_to_2 (adjacency) for num 376
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_2 (adjacency) for num 902
[LOG] Processing cluster features for num 232
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 2 subset clusters.
[LOG] Processing tetra features for num 320
[LOG] Removed 0 subset clusters.
[LOG] Computing n3_to_4 for num 312
[LOG] Computing n2_to_2 (adjacency) for num 768
[LOG] Computing n2_to_2 (adjacency) for num 640
[LOG] Global feature for num 312
[LOG] Global feature for num 312
[LOG] Saving tensor x_0_312.pt
[LOG] Saving tensor x_1_312.pt
[LOG] Saving tensor x_2_312.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor x_3_312.pt
[LOG] Saving tensor x_4_312.pt
[LOG] Saving tensor n0_to_0_312.pt
[LOG] Processing cluster features for num 232
[LOG] Processing cluster features for num 504
[LOG] Saving tensor n1_to_1_312.pt
[LOG] Computing n1_to_1 for num 736
[LOG] Computing n3_to_3 (adjacency) for num 200
[LOG] Processing adjacency and incidence matrices for num 232
[LOG] Computing n4_to_4 (coadjacency) for num 200
[LOG] Computing n0_to_0 for num 232
[LOG] Computing n0_to_1 for num 200
[LOG] Processing cluster features for num 504
[LOG] Computing n2_to_4 for num 853
[LOG] Computing n1_to_1 for num 816
[LOG] Processing cluster features for num 320
[LOG] Computing n1_to_1 for num 664
[LOG] Removed 2 subset clusters.
[LOG] Removed 4 subset clusters.

    [LOG] We Currently have 8769 Tetrahedra.
    [LOG] Generated 192 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.307291666666666
    [LOG] Max number of nodes per cluster is 110 and the number is 186
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 88: Calculating Neighbors
[LOG] We will select 3560 edges and 8429 tetra
[LOG] Edges from tetra 0 and KDTree 3560 with 0 edges in common.
[LOG] Loading pickle file data_704.pickle
[LOG] Processing node features for num 704
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 8593 Tetrahedra.
    [LOG] Generated 165 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.951515151515151
    [LOG] Max number of nodes per cluster is 237 and the number is 158
[LOG] Computing n3_to_3 (adjacency) for num 909
[LOG] Removed 2 subset clusters.
[LOG] Processing edge features for num 704
[LOG] Computing n4_to_4 (coadjacency) for num 909
[LOG] Processing adjacency and incidence matrices for num 504
[LOG] Computing n0_to_0 for num 504
[LOG] Computing n0_to_1 for num 909
[LOG] Processing cluster features for num 320
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n2_to_2_312.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] We will select 4017 edges and 8002 tetra
[LOG] Edges from tetra 0 and KDTree 4017 with 0 edges in common.
[LOG] Computing n3_to_4 for num 853
[LOG] Saving tensor n3_to_3_312.pt
[LOG] Process 11: Calculating Neighbors
[LOG] Loading pickle file data_88.pickle
[LOG] Processing node features for num 88
[LOG] Saving tensor n4_to_4_312.pt
[LOG] Global feature for num 853
[LOG] Global feature for num 853
[LOG] Saving tensor n0_to_1_312.pt
[LOG] Saving tensor x_0_853.pt
[LOG] Saving tensor x_1_853.pt
[LOG] Saving tensor n0_to_2_312.pt
[LOG] Saving tensor x_2_853.pt
[LOG] Saving tensor x_3_853.pt
[LOG] Processing adjacency and incidence matrices for num 320
[LOG] Computing n0_to_0 for num 320
[LOG] Processing edge features for num 88
[LOG] Computing n2_to_2 (adjacency) for num 576
[LOG] Saving tensor x_4_853.pt
[LOG] Saving tensor n0_to_0_853.pt
[LOG] Saving tensor n0_to_3_312.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n0_to_4_312.pt
[LOG] Saving tensor n1_to_1_853.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 3 subset clusters.
[LOG] Saving tensor n1_to_2_312.pt

    [LOG] We Currently have 8340 Tetrahedra.
    [LOG] Generated 142 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.915492957746478
    [LOG] Max number of nodes per cluster is 101 and the number is 124
[LOG] Saving tensor n2_to_2_853.pt
[LOG] Saving tensor n1_to_3_312.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n1_to_4_312.pt
[LOG] Saving tensor n3_to_3_853.pt
[LOG] Processing tetra features for num 704
[LOG] Computing n1_to_3 for num 881
[LOG] Saving tensor n2_to_3_312.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n4_to_4_853.pt
[LOG] Saving tensor n2_to_4_312.pt
[LOG] Saving tensor n0_to_1_853.pt
[LOG] Saving tensor n3_to_4_312.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor global_feature_312.pt
[LOG] Saving tensor n0_to_2_853.pt
[LOG] Process 39: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_3_853.pt
[LOG] Computing n1_to_3 for num 520
[LOG] Computing n1_to_4 for num 881
[LOG] Saving tensor n0_to_4_853.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n1_to_2_853.pt
[LOG] Saving tensor n1_to_3_853.pt
[LOG] Computing n0_to_2 for num 909
[LOG] Saving tensor n1_to_4_853.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_4 for num 520
[LOG] Saving tensor n2_to_3_853.pt
[LOG] Processing tetra features for num 88
[LOG] Computing n2_to_3 for num 881
[LOG] Saving tensor n2_to_4_853.pt
[LOG] Computing n3_to_3 (adjacency) for num 280
[LOG] Saving tensor n3_to_4_853.pt
[LOG] Saving tensor global_feature_853.pt
[LOG] Process 107: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n4_to_4 (coadjacency) for num 280
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_3 for num 520
[LOG] Computing n0_to_1 for num 280
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_3 for num 760
[LOG] Computing n1_to_4 for num 760
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 9075 Tetrahedra.
    [LOG] Generated 202 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.965346534653467
    [LOG] Max number of nodes per cluster is 88 and the number is 200
[LOG] Computing n1_to_1 for num 232
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing cluster features for num 704
[LOG] Computing n0_to_3 for num 424
[LOG] Computing n0_to_2 for num 200
[LOG] Computing n2_to_3 for num 760
[LOG] Computing n2_to_4 for num 881
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_4 for num 520
[LOG] Computing n0_to_4 for num 424
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 88
[LOG] Processing cluster features for num 704
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 8083 Tetrahedra.
    [LOG] Generated 145 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.586206896551722
    [LOG] Max number of nodes per cluster is 244 and the number is 143
[LOG] Computing n1_to_2 for num 424
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Processing cluster features for num 88
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_4 for num 881
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] We will select 6895 edges and 8593 tetra
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Edges from tetra 0 and KDTree 6895 with 0 edges in common.
[LOG] Global feature for num 881
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Global feature for num 881
[LOG] Saving tensor x_0_881.pt
[LOG] Computing n3_to_4 for num 520
[LOG] Processing adjacency and incidence matrices for num 704
[LOG] Computing n0_to_0 for num 704
[LOG] Saving tensor x_1_881.pt
[LOG] Saving tensor x_2_881.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Global feature for num 520
[LOG] Saving tensor x_3_881.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Global feature for num 520
[LOG] Saving tensor x_0_520.pt
[LOG] Saving tensor x_4_881.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n0_to_0_881.pt
[LOG] Saving tensor x_1_520.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n1_to_1_881.pt
[LOG] Saving tensor x_2_520.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n1_to_1 for num 320
[LOG] Saving tensor x_3_520.pt
[LOG] Saving tensor n2_to_2_881.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor x_4_520.pt
[LOG] Saving tensor n0_to_0_520.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n0_to_2 for num 280
[LOG] Saving tensor n3_to_3_881.pt
[LOG] Saving tensor n1_to_1_520.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n2_to_2_520.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n4_to_4_881.pt
[LOG] We will select 4913 edges and 8340 tetra
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Edges from tetra 0 and KDTree 4913 with 0 edges in common.
[LOG] Saving tensor n0_to_1_881.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n3_to_3_520.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n0_to_2_881.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n4_to_4_520.pt
[LOG] Saving tensor n0_to_3_881.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n0_to_1_520.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n0_to_4_881.pt
[LOG] Saving tensor n0_to_2_520.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n1_to_2_881.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n0_to_3_520.pt
[LOG] Saving tensor n1_to_3_881.pt
[LOG] Saving tensor n0_to_4_520.pt
[LOG] Saving tensor n1_to_4_881.pt
[LOG] Processing adjacency and incidence matrices for num 88
[LOG] Computing n0_to_0 for num 88
[LOG] Saving tensor n1_to_2_520.pt
[LOG] Saving tensor n2_to_3_881.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n1_to_3_520.pt
[LOG] Computing n0_to_3 for num 344
[LOG] Process 77: Created combinatorial complex for file data_616.hdf5
[LOG] Saving tensor n2_to_4_881.pt
[LOG] Computing n3_to_3 (adjacency) for num 448
[LOG] Saving tensor n1_to_4_520.pt
[LOG] Saving tensor n3_to_4_881.pt
[LOG] Saving tensor n2_to_3_520.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n4_to_4 (coadjacency) for num 448
[LOG] Saving tensor global_feature_881.pt
[LOG] Process 111: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n2_to_4_520.pt
[LOG] Computing n0_to_1 for num 448
[LOG] Saving tensor n3_to_4_520.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor global_feature_520.pt
[LOG] Process 65: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_4 for num 344
[LOG] Process 68: Created combinatorial complex for file data_544.hdf5
[LOG] Computing n1_to_1 for num 504
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_2 for num 344
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 34: Created combinatorial complex for file data_272.hdf5
[LOG] Process 49: Created combinatorial complex for file data_392.hdf5
[LOG] Calculating for cell ranks 1 and 3
[LOG] We will select 5145 edges and 8083 tetra
[LOG] Edges from tetra 0 and KDTree 5145 with 0 edges in common.
[LOG] Computing n3_to_3 (adjacency) for num 768
[LOG] Computing n4_to_4 (coadjacency) for num 768
[LOG] Computing n0_to_1 for num 768
[LOG] Process 33: Created combinatorial complex for file data_264.hdf5
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_2 for num 448
[LOG] Computing n2_to_2 (adjacency) for num 24
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 10513 Tetrahedra.
    [LOG] Generated 208 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.153846153846153
    [LOG] Max number of nodes per cluster is 102 and the number is 193
[LOG] Computing n2_to_2 (adjacency) for num 136
[LOG] Calculating for cell ranks 1 and 1
[LOG] We will select 4078 edges and 9075 tetra
[LOG] Edges from tetra 0 and KDTree 4078 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_3 for num 256
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_3 (adjacency) for num 472
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n4_to_4 (coadjacency) for num 472
[LOG] Computing n0_to_1 for num 472
[LOG] Computing n1_to_1 for num 88
[LOG] Computing n1_to_4 for num 256
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_2 (adjacency) for num 752
[LOG] Computing n2_to_3 for num 256
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_4 for num 760
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 77: Calculating Neighbors
[LOG] Loading pickle file data_616.pickle
[LOG] Processing node features for num 616
[LOG] We will select 5094 edges and 8769 tetra
[LOG] Edges from tetra 0 and KDTree 5094 with 0 edges in common.
[LOG] Computing n1_to_1 for num 704
[LOG] Computing n3_to_3 (adjacency) for num 152
[LOG] Processing edge features for num 616
[LOG] Computing n4_to_4 (coadjacency) for num 152
[LOG] Computing n0_to_1 for num 152
[LOG] Computing n3_to_4 for num 760
[LOG] Global feature for num 760
[LOG] Computing n2_to_2 (adjacency) for num 144
[LOG] Global feature for num 760
[LOG] Saving tensor x_0_760.pt
[LOG] Saving tensor x_1_760.pt
[LOG] Saving tensor x_2_760.pt
[LOG] Computing n2_to_4 for num 256
[LOG] Saving tensor x_3_760.pt
[LOG] Saving tensor x_4_760.pt
[LOG] Saving tensor n0_to_0_760.pt
[LOG] Saving tensor n1_to_1_760.pt
[LOG] Saving tensor n2_to_2_760.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n3_to_3_760.pt
[LOG] Saving tensor n4_to_4_760.pt
[LOG] Saving tensor n0_to_1_760.pt
[LOG] Computing n0_to_2 for num 472
[LOG] Saving tensor n0_to_2_760.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n0_to_3_760.pt
[LOG] Saving tensor n0_to_4_760.pt
[LOG] Computing n0_to_3 for num 200
[LOG] Computing n2_to_2 (adjacency) for num 792
[LOG] Process 68: Calculating Neighbors
[LOG] Loading pickle file data_544.pickle
[LOG] Processing node features for num 544
[LOG] Saving tensor n1_to_2_760.pt
[LOG] Saving tensor n1_to_3_760.pt
[LOG] Saving tensor n1_to_4_760.pt
[LOG] Processing tetra features for num 616
[LOG] Saving tensor n2_to_3_760.pt
[LOG] Removed 2 subset clusters.
[LOG] Saving tensor n2_to_4_760.pt
[LOG] Saving tensor n3_to_4_760.pt
[LOG] Computing n0_to_2 for num 768
[LOG] Saving tensor global_feature_760.pt
[LOG] Processing edge features for num 544
[LOG] Process 95: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_4 for num 200
[LOG] Computing n3_to_3 (adjacency) for num 640
[LOG] Computing n4_to_4 (coadjacency) for num 640
[LOG] Computing n3_to_3 (adjacency) for num 376
[LOG] Computing n0_to_1 for num 640
[LOG] Computing n4_to_4 (coadjacency) for num 376
[LOG] Computing n0_to_1 for num 376
[LOG] Computing n1_to_2 for num 200
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_4 for num 256
[LOG] Global feature for num 256
[LOG] Global feature for num 256
[LOG] Saving tensor x_0_256.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_2 for num 152
[LOG] Saving tensor x_1_256.pt
[LOG] Saving tensor x_2_256.pt
[LOG] Saving tensor x_3_256.pt
[LOG] Saving tensor x_4_256.pt
[LOG] Saving tensor n0_to_0_256.pt
[LOG] Saving tensor n1_to_1_256.pt
[LOG] Saving tensor n2_to_2_256.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 34: Calculating Neighbors
[LOG] Loading pickle file data_272.pickle
[LOG] Processing node features for num 272
[LOG] Saving tensor n3_to_3_256.pt
[LOG] Processing tetra features for num 544
[LOG] Saving tensor n4_to_4_256.pt
[LOG] Process 33: Calculating Neighbors
[LOG] Loading pickle file data_264.pickle
[LOG] Processing node features for num 264
[LOG] Saving tensor n0_to_1_256.pt
[LOG] Processing cluster features for num 616
[LOG] Saving tensor n0_to_2_256.pt
[LOG] Saving tensor n0_to_3_256.pt
[LOG] Computing n0_to_3 for num 909
[LOG] Saving tensor n0_to_4_256.pt
[LOG] Saving tensor n1_to_2_256.pt
[LOG] Processing edge features for num 272
[LOG] Saving tensor n1_to_3_256.pt
[LOG] Saving tensor n1_to_4_256.pt
[LOG] Processing edge features for num 264
[LOG] Saving tensor n2_to_3_256.pt
[LOG] Computing n3_to_3 (adjacency) for num 902
[LOG] Saving tensor n2_to_4_256.pt
[LOG] Saving tensor n3_to_4_256.pt
[LOG] Computing n4_to_4 (coadjacency) for num 902
[LOG] Saving tensor global_feature_256.pt
[LOG] Process 32: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_1 for num 902
[LOG] Computing n0_to_4 for num 909
[LOG] Process 49: Calculating Neighbors
[LOG] Loading pickle file data_392.pickle
[LOG] Processing node features for num 392
[LOG] Processing cluster features for num 616
[LOG] Processing edge features for num 392
[LOG] Computing n1_to_3 for num 424
[LOG] We will select 4830 edges and 10513 tetra
[LOG] Edges from tetra 0 and KDTree 4830 with 0 edges in common.
[LOG] Computing n1_to_2 for num 909
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing tetra features for num 272
[LOG] Processing tetra features for num 264
[LOG] Computing n1_to_4 for num 424
[LOG] Computing n2_to_2 (adjacency) for num 808
[LOG] Processing adjacency and incidence matrices for num 616
[LOG] Computing n0_to_0 for num 616
[LOG] Processing cluster features for num 544
[LOG] Process 98: Created combinatorial complex for file data_784.hdf5
[LOG] Computing n2_to_3 for num 424
[LOG] Computing n0_to_3 for num 280
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_2 (adjacency) for num 923
[LOG] Computing n2_to_2 (adjacency) for num 816
[LOG] Computing n0_to_2 for num 376
[LOG] Computing n2_to_2 (adjacency) for num 352
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing tetra features for num 392
[LOG] Computing n0_to_4 for num 280
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing cluster features for num 544
[LOG] Computing n1_to_2 for num 280
[LOG] Processing cluster features for num 264
[LOG] Computing n3_to_3 (adjacency) for num 576
[LOG] Computing n4_to_4 (coadjacency) for num 576
[LOG] Computing n0_to_1 for num 576
[LOG] Computing n0_to_2 for num 640
[LOG] Processing cluster features for num 272
[LOG] Computing n2_to_4 for num 424
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing adjacency and incidence matrices for num 544
[LOG] Computing n0_to_0 for num 544
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing cluster features for num 264
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 9363 Tetrahedra.
    [LOG] Generated 160 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.8125
    [LOG] Max number of nodes per cluster is 233 and the number is 158
[LOG] Processing cluster features for num 392
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 272
[LOG] Computing n0_to_2 for num 902
[LOG] Processing adjacency and incidence matrices for num 264
[LOG] Computing n0_to_0 for num 264
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_4 for num 424
[LOG] Global feature for num 424
[LOG] Global feature for num 424
[LOG] Saving tensor x_0_424.pt
[LOG] Saving tensor x_1_424.pt
[LOG] Processing cluster features for num 392
[LOG] Saving tensor x_2_424.pt
[LOG] Saving tensor x_3_424.pt
[LOG] Saving tensor x_4_424.pt
[LOG] Saving tensor n0_to_0_424.pt
[LOG] Processing adjacency and incidence matrices for num 272
[LOG] Computing n0_to_0 for num 272
[LOG] Saving tensor n1_to_1_424.pt
[LOG] Saving tensor n2_to_2_424.pt
[LOG] Saving tensor n3_to_3_424.pt
[LOG] Saving tensor n4_to_4_424.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n0_to_1_424.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n0_to_2_424.pt
[LOG] Saving tensor n0_to_3_424.pt
[LOG] Saving tensor n0_to_4_424.pt
[LOG] Saving tensor n1_to_2_424.pt
[LOG] Saving tensor n1_to_3_424.pt
[LOG] Saving tensor n1_to_4_424.pt
[LOG] Saving tensor n2_to_3_424.pt
[LOG] Saving tensor n2_to_4_424.pt
[LOG] Saving tensor n3_to_4_424.pt
[LOG] Saving tensor global_feature_424.pt
[LOG] Process 53: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing adjacency and incidence matrices for num 392
[LOG] Computing n0_to_0 for num 392
[LOG] Computing n0_to_3 for num 448
[LOG] Computing n0_to_2 for num 576
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_4 for num 448
[LOG] Computing n3_to_3 (adjacency) for num 792
[LOG] Computing n4_to_4 (coadjacency) for num 792
[LOG] Computing n0_to_1 for num 792
[LOG] Computing n1_to_2 for num 448
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 9517 Tetrahedra.
    [LOG] Generated 204 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.740196078431373
    [LOG] Max number of nodes per cluster is 74 and the number is 197
[LOG] Computing n1_to_1 for num 616
[LOG] Computing n2_to_2 (adjacency) for num 846
[LOG] Computing n0_to_3 for num 768
[LOG] Removed 6 subset clusters.

    [LOG] We Currently have 10274 Tetrahedra.
    [LOG] Generated 217 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.327188940092165
    [LOG] Max number of nodes per cluster is 57 and the number is 98
[LOG] Process 98: Calculating Neighbors
[LOG] Loading pickle file data_784.pickle
[LOG] Processing node features for num 784
[LOG] Computing n0_to_4 for num 768
[LOG] Process 6: Created combinatorial complex for file data_48.hdf5
[LOG] Processing edge features for num 784
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] We will select 8425 edges and 9363 tetra
[LOG] Edges from tetra 0 and KDTree 8425 with 0 edges in common.
[LOG] Computing n1_to_2 for num 768
[LOG] Computing n3_to_3 (adjacency) for num 136
[LOG] Computing n4_to_4 (coadjacency) for num 136
[LOG] Computing n0_to_1 for num 136
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_3 for num 344
[LOG] Processing tetra features for num 784
[LOG] Computing n1_to_4 for num 344
[LOG] Computing n1_to_1 for num 264
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_3 for num 344
[LOG] Computing n3_to_3 (adjacency) for num 144
[LOG] Computing n3_to_3 (adjacency) for num 752
[LOG] Computing n4_to_4 (coadjacency) for num 144
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_1 for num 144
[LOG] Computing n4_to_4 (coadjacency) for num 752
[LOG] Computing n0_to_1 for num 752
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 9: Created combinatorial complex for file data_72.hdf5
[LOG] Computing n1_to_1 for num 272
[LOG] Processing cluster features for num 784
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_3 for num 909
[LOG] Computing n2_to_4 for num 344
[LOG] Computing n2_to_2 (adjacency) for num 232
[LOG] Computing n1_to_4 for num 909
[LOG] Computing n0_to_2 for num 136
[LOG] Processing cluster features for num 784
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_3 for num 909
[LOG] Computing n1_to_1 for num 544
[LOG] Computing n3_to_3 (adjacency) for num 24
[LOG] Computing n4_to_4 (coadjacency) for num 24
[LOG] Computing n0_to_1 for num 24
[LOG] Processing adjacency and incidence matrices for num 784
[LOG] Computing n0_to_0 for num 784
[LOG] Computing n3_to_4 for num 344
[LOG] Global feature for num 344
[LOG] Calculating for cell ranks 2 and 4
[LOG] Global feature for num 344
[LOG] Saving tensor x_0_344.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor x_1_344.pt
[LOG] Saving tensor x_2_344.pt
[LOG] Saving tensor x_3_344.pt
[LOG] Saving tensor x_4_344.pt
[LOG] Saving tensor n0_to_0_344.pt
[LOG] Saving tensor n1_to_1_344.pt
[LOG] We will select 4816 edges and 9517 tetra
[LOG] Edges from tetra 0 and KDTree 4816 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n2_to_2_344.pt
[LOG] Saving tensor n3_to_3_344.pt
[LOG] Saving tensor n4_to_4_344.pt
[LOG] Computing n0_to_2 for num 792
[LOG] Saving tensor n0_to_1_344.pt
[LOG] Saving tensor n0_to_2_344.pt
[LOG] Computing n2_to_4 for num 909
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n0_to_3_344.pt
[LOG] Computing n1_to_1 for num 392
[LOG] Saving tensor n0_to_4_344.pt
[LOG] Saving tensor n1_to_2_344.pt
[LOG] Saving tensor n1_to_3_344.pt
[LOG] Saving tensor n1_to_4_344.pt
[LOG] Saving tensor n2_to_3_344.pt
[LOG] Computing n2_to_2 (adjacency) for num 320
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_2 (adjacency) for num 736
[LOG] Saving tensor n2_to_4_344.pt
[LOG] Saving tensor n3_to_4_344.pt
[LOG] Saving tensor global_feature_344.pt
[LOG] Process 43: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 1 subset clusters.
[LOG] Computing n0_to_2 for num 144

    [LOG] We Currently have 9574 Tetrahedra.
    [LOG] Generated 226 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.544247787610619
    [LOG] Max number of nodes per cluster is 49 and the number is 174
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 84: Created combinatorial complex for file data_672.hdf5
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 6: Calculating Neighbors
[LOG] Loading pickle file data_48.pickle
[LOG] Processing node features for num 48
[LOG] Computing n0_to_3 for num 376
[LOG] Computing n3_to_4 for num 909
[LOG] Processing edge features for num 48
[LOG] Global feature for num 909
[LOG] Global feature for num 909
[LOG] Saving tensor x_0_909.pt
[LOG] Computing n0_to_2 for num 24
[LOG] Saving tensor x_1_909.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor x_2_909.pt
[LOG] Saving tensor x_3_909.pt
[LOG] Saving tensor x_4_909.pt
[LOG] Saving tensor n0_to_0_909.pt
[LOG] Saving tensor n1_to_1_909.pt
[LOG] Computing n0_to_2 for num 752
[LOG] Saving tensor n2_to_2_909.pt
[LOG] Computing n0_to_4 for num 376
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n3_to_3_909.pt
[LOG] Saving tensor n4_to_4_909.pt
[LOG] Saving tensor n0_to_1_909.pt
[LOG] Saving tensor n0_to_2_909.pt
[LOG] Saving tensor n0_to_3_909.pt
[LOG] Saving tensor n0_to_4_909.pt
[LOG] Saving tensor n1_to_2_909.pt
[LOG] Saving tensor n1_to_3_909.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 9726 Tetrahedra.
    [LOG] Generated 188 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.8031914893617
    [LOG] Max number of nodes per cluster is 113 and the number is 144
[LOG] Saving tensor n1_to_4_909.pt
[LOG] Saving tensor n2_to_3_909.pt
[LOG] Saving tensor n2_to_4_909.pt
[LOG] Saving tensor n3_to_4_909.pt
[LOG] Computing n1_to_2 for num 376
[LOG] Saving tensor global_feature_909.pt
[LOG] Process 115: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_3 for num 640
[LOG] Processing tetra features for num 48
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_4 for num 640
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 9: Calculating Neighbors
[LOG] Loading pickle file data_72.pickle
[LOG] Processing node features for num 72
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_2 for num 640
[LOG] Removed 1 subset clusters.
[LOG] Processing edge features for num 72
[LOG] Computing n1_to_1 for num 784
[LOG] Computing n0_to_3 for num 902
[LOG] Computing n0_to_3 for num 472
[LOG] Processing cluster features for num 48
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_3 for num 280
[LOG] Computing n3_to_3 (adjacency) for num 923
[LOG] Computing n0_to_3 for num 576
[LOG] Computing n0_to_4 for num 902
[LOG] Computing n4_to_4 (coadjacency) for num 923
[LOG] Computing n0_to_4 for num 472
[LOG] Computing n0_to_1 for num 923
[LOG] Computing n1_to_4 for num 280
[LOG] Computing n0_to_4 for num 576
[LOG] Processing tetra features for num 72
[LOG] Computing n1_to_2 for num 902
[LOG] Processing cluster features for num 48
[LOG] Computing n1_to_2 for num 472
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_3 for num 280
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_2 for num 576
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing adjacency and incidence matrices for num 48
[LOG] Computing n0_to_0 for num 48
[LOG] Computing n0_to_3 for num 152
[LOG] Computing n2_to_2 (adjacency) for num 240
[LOG] Calculating for cell ranks 1 and 2
[LOG] We will select 4283 edges and 10274 tetra
[LOG] Edges from tetra 0 and KDTree 4283 with 0 edges in common.
[LOG] Computing n0_to_4 for num 152
[LOG] We will select 3412 edges and 9574 tetra
[LOG] Edges from tetra 0 and KDTree 3412 with 0 edges in common.
[LOG] Processing cluster features for num 72
[LOG] Computing n2_to_4 for num 280
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_2 for num 152
[LOG] Computing n0_to_3 for num 792
[LOG] Process 84: Calculating Neighbors
[LOG] Loading pickle file data_672.pickle
[LOG] Processing node features for num 672
[LOG] Computing n0_to_4 for num 792
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n3_to_3 (adjacency) for num 808
[LOG] Processing edge features for num 672
[LOG] We will select 6889 edges and 9726 tetra
[LOG] Edges from tetra 0 and KDTree 6889 with 0 edges in common.
[LOG] Processing cluster features for num 72
[LOG] Computing n4_to_4 (coadjacency) for num 808
[LOG] Computing n0_to_1 for num 808
[LOG] Computing n1_to_2 for num 792
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_3 for num 200
[LOG] Computing n3_to_4 for num 280
[LOG] Global feature for num 280
[LOG] Global feature for num 280
[LOG] Saving tensor x_0_280.pt
[LOG] Saving tensor x_1_280.pt
[LOG] Saving tensor x_2_280.pt
[LOG] Saving tensor x_3_280.pt
[LOG] Saving tensor x_4_280.pt
[LOG] Saving tensor n0_to_0_280.pt
[LOG] Saving tensor n1_to_1_280.pt
[LOG] Computing n1_to_3 for num 448
[LOG] Saving tensor n2_to_2_280.pt
[LOG] Computing n0_to_2 for num 923
[LOG] Saving tensor n3_to_3_280.pt
[LOG] Saving tensor n4_to_4_280.pt
[LOG] Computing n1_to_4 for num 200
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n0_to_1_280.pt
[LOG] Processing adjacency and incidence matrices for num 72
[LOG] Computing n0_to_0 for num 72
[LOG] Saving tensor n0_to_2_280.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n0_to_3_280.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n0_to_4_280.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Processing tetra features for num 672
[LOG] Saving tensor n1_to_2_280.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n1_to_3_280.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n1_to_4_280.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n2_to_3_280.pt
[LOG] Computing n1_to_4 for num 448
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n2_to_4_280.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n3_to_4_280.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor global_feature_280.pt
[LOG] Process 35: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n2_to_3 for num 200
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n2_to_3 for num 448
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 88
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_3 for num 144
[LOG] Computing n3_to_3 (adjacency) for num 816
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n4_to_4 (coadjacency) for num 816
[LOG] Computing n0_to_1 for num 816
[LOG] Computing n0_to_4 for num 144
[LOG] Computing n0_to_3 for num 136
[LOG] Computing n2_to_4 for num 200
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 70: Created combinatorial complex for file data_560.hdf5
[LOG] Computing n0_to_2 for num 808
[LOG] Processing cluster features for num 672
[LOG] Computing n1_to_2 for num 144
[LOG] Computing n0_to_4 for num 136
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n2_to_4 for num 448
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n1_to_2 for num 136
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Processing cluster features for num 672
[LOG] Computing n3_to_4 for num 200
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 846
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Global feature for num 200
[LOG] Global feature for num 200
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor x_0_200.pt
[LOG] Computing n4_to_4 (coadjacency) for num 846
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor x_1_200.pt
[LOG] Saving tensor x_2_200.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor x_3_200.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Computing n0_to_1 for num 846
[LOG] Saving tensor x_4_200.pt
[LOG] Saving tensor n0_to_0_200.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n1_to_1_200.pt
[LOG] Saving tensor n2_to_2_200.pt
[LOG] Saving tensor n3_to_3_200.pt
[LOG] Saving tensor n4_to_4_200.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n0_to_1_200.pt
[LOG] Saving tensor n0_to_2_200.pt
[LOG] Saving tensor n0_to_3_200.pt
[LOG] Saving tensor n0_to_4_200.pt
[LOG] Saving tensor n1_to_2_200.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n1_to_3_200.pt
[LOG] Computing n2_to_2 (adjacency) for num 664
[LOG] Saving tensor n1_to_4_200.pt
[LOG] Processing adjacency and incidence matrices for num 672
[LOG] Computing n0_to_0 for num 672
[LOG] Saving tensor n2_to_3_200.pt
[LOG] Computing n0_to_3 for num 752
[LOG] Saving tensor n2_to_4_200.pt
[LOG] Computing n3_to_4 for num 448
[LOG] Saving tensor n3_to_4_200.pt
[LOG] Global feature for num 448
[LOG] Saving tensor global_feature_200.pt
[LOG] Global feature for num 448
[LOG] Process 25: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor x_0_448.pt
[LOG] Saving tensor x_1_448.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor x_2_448.pt
[LOG] Saving tensor x_3_448.pt
[LOG] Saving tensor x_4_448.pt
[LOG] Saving tensor n0_to_0_448.pt
[LOG] Computing n0_to_2 for num 816
[LOG] Saving tensor n1_to_1_448.pt
[LOG] Saving tensor n2_to_2_448.pt
[LOG] Computing n0_to_4 for num 752
[LOG] Process 60: Created combinatorial complex for file data_480.hdf5
[LOG] Saving tensor n3_to_3_448.pt
[LOG] Saving tensor n4_to_4_448.pt
[LOG] Saving tensor n0_to_1_448.pt
[LOG] Saving tensor n0_to_2_448.pt
[LOG] Saving tensor n0_to_3_448.pt
[LOG] Saving tensor n0_to_4_448.pt
[LOG] Saving tensor n1_to_2_448.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n1_to_3_448.pt
[LOG] Saving tensor n1_to_4_448.pt
[LOG] Saving tensor n2_to_3_448.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n2_to_4_448.pt
[LOG] Computing n1_to_2 for num 752
[LOG] Saving tensor n3_to_4_448.pt
[LOG] Saving tensor global_feature_448.pt
[LOG] Process 22: Created combinatorial complex for file data_176.hdf5
[LOG] Process 56: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n3_to_3 (adjacency) for num 240
[LOG] Computing n4_to_4 (coadjacency) for num 240
[LOG] Computing n0_to_1 for num 240
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_2 (adjacency) for num 504
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_1 for num 48
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_3 (adjacency) for num 352
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_2 for num 846
[LOG] Computing n4_to_4 (coadjacency) for num 352
[LOG] Computing n0_to_1 for num 352
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_3 for num 24
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 55: Created combinatorial complex for file data_440.hdf5
[LOG] Computing n0_to_4 for num 24
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 10758 Tetrahedra.
    [LOG] Generated 225 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.524444444444445
    [LOG] Max number of nodes per cluster is 150 and the number is 223
[LOG] Computing n1_to_2 for num 24
[LOG] Process 70: Calculating Neighbors
[LOG] Loading pickle file data_560.pickle
[LOG] Processing node features for num 560
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_2 (adjacency) for num 965
[LOG] Processing edge features for num 560
[LOG] Process 61: Created combinatorial complex for file data_488.hdf5
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_2 for num 352
[LOG] Processing tetra features for num 560
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_1 for num 672
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 1 subset clusters.
[LOG] Process 110: Created combinatorial complex for file data_874.hdf5
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_2 for num 240
[LOG] Computing n1_to_3 for num 376
[LOG] Process 60: Calculating Neighbors
[LOG] Loading pickle file data_480.pickle
[LOG] Processing node features for num 480
[LOG] Process 22: Calculating Neighbors
[LOG] Loading pickle file data_176.pickle
[LOG] Processing node features for num 176
[LOG] Computing n1_to_1 for num 72
[LOG] Processing edge features for num 480
[LOG] Processing edge features for num 176
[LOG] Computing n1_to_4 for num 376
[LOG] Computing n1_to_3 for num 472
[LOG] Processing cluster features for num 560
[LOG] Computing n1_to_3 for num 768
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_3 for num 376
[LOG] Computing n1_to_4 for num 472
[LOG] Computing n1_to_3 for num 152
[LOG] Computing n1_to_4 for num 152
[LOG] Computing n2_to_3 for num 472
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing tetra features for num 480
[LOG] Processing tetra features for num 176
[LOG] Processing cluster features for num 560
[LOG] Computing n0_to_3 for num 923
[LOG] Computing n1_to_4 for num 768
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_3 for num 152
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_3 (adjacency) for num 736
[LOG] Computing n0_to_4 for num 923
[LOG] Computing n4_to_4 (coadjacency) for num 736
[LOG] Computing n3_to_3 (adjacency) for num 232
[LOG] Computing n0_to_1 for num 736
[LOG] Computing n4_to_4 (coadjacency) for num 232
[LOG] Computing n0_to_1 for num 232
[LOG] Processing adjacency and incidence matrices for num 560
[LOG] Computing n0_to_0 for num 560
[LOG] Computing n2_to_3 for num 768
[LOG] Computing n2_to_4 for num 376
[LOG] Computing n1_to_2 for num 923
[LOG] Computing n2_to_4 for num 472
[LOG] Computing n2_to_4 for num 152
[LOG] Processing cluster features for num 480
[LOG] Process 81: Created combinatorial complex for file data_648.hdf5
[LOG] Processing cluster features for num 176
[LOG] We will select 5368 edges and 10758 tetra
[LOG] Edges from tetra 0 and KDTree 5368 with 0 edges in common.
[LOG] Computing n2_to_4 for num 768
[LOG] Computing n1_to_3 for num 576
[LOG] Calculating for cell ranks 3 and 3
[LOG] GENERATED TETRA
[LOG] Computing n1_to_4 for num 576
[LOG] Computing n3_to_4 for num 376
[LOG] Processing cluster features for num 480
[LOG] Process 55: Calculating Neighbors
[LOG] Global feature for num 376
[LOG] Loading pickle file data_440.pickle
[LOG] Processing node features for num 440
[LOG] Global feature for num 376
[LOG] Saving tensor x_0_376.pt
[LOG] Processing cluster features for num 176
[LOG] Saving tensor x_1_376.pt
[LOG] Saving tensor x_2_376.pt
[LOG] Saving tensor x_3_376.pt
[LOG] Saving tensor x_4_376.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n0_to_0_376.pt
[LOG] Computing n3_to_4 for num 472
[LOG] Saving tensor n1_to_1_376.pt
[LOG] Processing edge features for num 440
[LOG] Global feature for num 472
[LOG] Saving tensor n2_to_2_376.pt
[LOG] Global feature for num 472
[LOG] Saving tensor x_0_472.pt
[LOG] Computing n2_to_3 for num 576
[LOG] Saving tensor x_1_472.pt
[LOG] Saving tensor n3_to_3_376.pt
[LOG] Saving tensor x_2_472.pt
[LOG] Saving tensor x_3_472.pt
[LOG] Saving tensor n4_to_4_376.pt
[LOG] Saving tensor x_4_472.pt
[LOG] Saving tensor n0_to_0_472.pt
[LOG] Saving tensor n0_to_1_376.pt
[LOG] Process 61: Calculating Neighbors
[LOG] Loading pickle file data_488.pickle
[LOG] Processing node features for num 488
[LOG] Saving tensor n0_to_2_376.pt
[LOG] Saving tensor n1_to_1_472.pt
[LOG] Computing n3_to_4 for num 768
[LOG] Saving tensor n2_to_2_472.pt
[LOG] Saving tensor n0_to_3_376.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Global feature for num 768
[LOG] Global feature for num 768
[LOG] Saving tensor x_0_768.pt
[LOG] Saving tensor n0_to_4_376.pt
[LOG] Saving tensor n3_to_3_472.pt
[LOG] Saving tensor x_1_768.pt
[LOG] Saving tensor n1_to_2_376.pt
[LOG] Saving tensor n4_to_4_472.pt
[LOG] Saving tensor x_2_768.pt
[LOG] Computing n3_to_4 for num 152
[LOG] Saving tensor n0_to_1_472.pt
[LOG] Saving tensor n1_to_3_376.pt
[LOG] Saving tensor x_3_768.pt
[LOG] Saving tensor x_4_768.pt
[LOG] Saving tensor n0_to_0_768.pt
[LOG] Saving tensor n1_to_4_376.pt
[LOG] Processing edge features for num 488
[LOG] Global feature for num 152
[LOG] Saving tensor n0_to_2_472.pt
[LOG] Global feature for num 152
[LOG] Saving tensor x_0_152.pt
[LOG] Saving tensor n1_to_1_768.pt
[LOG] Saving tensor n2_to_3_376.pt
[LOG] Processing adjacency and incidence matrices for num 480
[LOG] Computing n0_to_0 for num 480
[LOG] Saving tensor n2_to_2_768.pt
[LOG] Saving tensor n0_to_3_472.pt
[LOG] Saving tensor x_1_152.pt
[LOG] Saving tensor n2_to_4_376.pt
[LOG] Saving tensor x_2_152.pt
[LOG] Processing adjacency and incidence matrices for num 176
[LOG] Computing n0_to_0 for num 176
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n3_to_4_376.pt
[LOG] Saving tensor x_3_152.pt
[LOG] Saving tensor global_feature_376.pt
[LOG] Saving tensor n3_to_3_768.pt
[LOG] Saving tensor x_4_152.pt
[LOG] Process 47: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_0_152.pt
[LOG] Saving tensor n4_to_4_768.pt
[LOG] Saving tensor n1_to_1_152.pt
[LOG] Saving tensor n0_to_1_768.pt
[LOG] Saving tensor n2_to_2_152.pt
[LOG] Saving tensor n0_to_2_768.pt
[LOG] Saving tensor n3_to_3_152.pt
[LOG] Saving tensor n4_to_4_152.pt
[LOG] Saving tensor n0_to_4_472.pt
[LOG] Saving tensor n0_to_3_768.pt
[LOG] Computing n0_to_3 for num 808
[LOG] Saving tensor n0_to_1_152.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n0_to_2_152.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n0_to_2 for num 232
[LOG] Saving tensor n1_to_2_472.pt
[LOG] Saving tensor n0_to_4_768.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n1_to_2_768.pt
[LOG] Saving tensor n1_to_3_472.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n1_to_4_472.pt
[LOG] Saving tensor n1_to_3_768.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n2_to_3_472.pt
[LOG] Saving tensor n1_to_4_768.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n2_to_4_472.pt
[LOG] Saving tensor n2_to_3_768.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n2_to_4_768.pt
[LOG] Computing n2_to_4 for num 576
[LOG] Saving tensor n3_to_4_472.pt
[LOG] Processing tetra features for num 440
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor global_feature_472.pt
[LOG] Saving tensor n3_to_4_768.pt
[LOG] Saving tensor n0_to_3_152.pt
[LOG] Process 59: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 240
[LOG] Saving tensor global_feature_768.pt
[LOG] Process 96: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_4 for num 808
[LOG] Saving tensor n0_to_4_152.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n1_to_2_152.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n1_to_3_152.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n1_to_4_152.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n0_to_2 for num 736
[LOG] Computing n2_to_2 (adjacency) for num 616
[LOG] Saving tensor n2_to_3_152.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n0_to_4 for num 240
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n2_to_4_152.pt
[LOG] Processing tetra features for num 488
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n3_to_4_152.pt
[LOG] Saving tensor global_feature_152.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 19: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n3_to_3 (adjacency) for num 320
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 664
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n4_to_4 (coadjacency) for num 664
[LOG] Computing n4_to_4 (coadjacency) for num 320
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_2 for num 808
[LOG] Computing n1_to_2 for num 240
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Computing n0_to_1 for num 664
[LOG] Computing n0_to_1 for num 320
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 110: Calculating Neighbors
[LOG] Loading pickle file data_874.pickle
[LOG] Processing node features for num 874
[LOG] Computing n3_to_4 for num 576
[LOG] Global feature for num 576
[LOG] Global feature for num 576
[LOG] Saving tensor x_0_576.pt
[LOG] Saving tensor x_1_576.pt
[LOG] Saving tensor x_2_576.pt
[LOG] Saving tensor x_3_576.pt
[LOG] Saving tensor x_4_576.pt
[LOG] Saving tensor n0_to_0_576.pt
[LOG] Computing n2_to_2 (adjacency) for num 264
[LOG] Saving tensor n1_to_1_576.pt
[LOG] Processing edge features for num 874
[LOG] Saving tensor n2_to_2_576.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_3 for num 816
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 440
[LOG] Saving tensor n3_to_3_576.pt
[LOG] Saving tensor n4_to_4_576.pt
[LOG] Saving tensor n0_to_1_576.pt
[LOG] Saving tensor n0_to_2_576.pt
[LOG] Processing cluster features for num 488
[LOG] Computing n0_to_4 for num 816
[LOG] Saving tensor n0_to_3_576.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 982 Tetrahedra.
    [LOG] Generated 25 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.44
    [LOG] Max number of nodes per cluster is 52 and the number is 11
[LOG] Saving tensor n0_to_4_576.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 122: Created combinatorial complex for file data_958.hdf5
[LOG] Saving tensor n1_to_2_576.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n1_to_3_576.pt
[LOG] Saving tensor n1_to_4_576.pt
[LOG] Process 109: Created combinatorial complex for file data_867.hdf5
[LOG] Saving tensor n2_to_3_576.pt
[LOG] Saving tensor n2_to_4_576.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor n3_to_4_576.pt
[LOG] Saving tensor global_feature_576.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 72: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] We will select 119 edges and 982 tetra
[LOG] Edges from tetra 0 and KDTree 182 with 0 edges in common.
[LOG] Computing n1_to_2 for num 816
[LOG] Processing cluster features for num 440
[LOG] Computing n0_to_3 for num 846
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing cluster features for num 488
[LOG] Processing tetra features for num 874
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_4 for num 846
[LOG] Computing n1_to_3 for num 640
[LOG] Computing n3_to_3 (adjacency) for num 88
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n4_to_4 (coadjacency) for num 88
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n0_to_1 for num 88
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n0_to_2 for num 320
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing adjacency and incidence matrices for num 440
[LOG] Computing n0_to_0 for num 440
[LOG] Computing n1_to_2 for num 846
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Processing adjacency and incidence matrices for num 488
[LOG] Computing n0_to_0 for num 488
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 915 Tetrahedra.
    [LOG] Generated 29 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.89655172413793
    [LOG] Max number of nodes per cluster is 37 and the number is 19
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n1_to_3 for num 902
[LOG] Computing n1_to_4 for num 640
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n1_to_1 for num 560
[LOG] We will select 81 edges and 915 tetra
[LOG] Edges from tetra 0 and KDTree 1463 with 0 edges in common.
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_4 for num 902
[LOG] Computing n2_to_3 for num 640
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_3 for num 136
[LOG] Process 81: Calculating Neighbors
[LOG] Loading pickle file data_648.pickle
[LOG] Processing node features for num 648
[LOG] Processing cluster features for num 874
[LOG] Computing n2_to_3 for num 902
[LOG] Computing n2_to_2 (adjacency) for num 704
[LOG] Processing edge features for num 648
[LOG] Computing n1_to_4 for num 136
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_2 for num 664
[LOG] Computing n2_to_3 for num 136
[LOG] Computing n2_to_4 for num 640
[LOG] Processing cluster features for num 874
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 23: Created combinatorial complex for file data_185.hdf5
[LOG] Removed 0 subset clusters.
[LOG] Computing n2_to_4 for num 902
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing tetra features for num 648
[LOG] Computing n2_to_2 (adjacency) for num 272
[LOG] Process 23: Calculating Neighbors
[LOG] Loading pickle file data_185.pickle
[LOG] Processing node features for num 185
[LOG] Computing n1_to_1 for num 176
[LOG] Processing edge features for num 185
[LOG] Processing adjacency and incidence matrices for num 874
[LOG] Computing n0_to_0 for num 874
[LOG] GENERATED TETRA
[LOG] Processing tetra features for num 185
[LOG] Removed 2 subset clusters.
[LOG] Process 42: Created combinatorial complex for file data_337.hdf5
[LOG] Computing n0_to_2 for num 88
[LOG] Computing n2_to_4 for num 136
[LOG] Processing cluster features for num 185
[LOG] Computing n1_to_1 for num 480
[LOG] Computing n3_to_4 for num 640
[LOG] Processing cluster features for num 185
[LOG] Global feature for num 640
[LOG] Global feature for num 640
[LOG] Saving tensor x_0_640.pt
[LOG] Processing adjacency and incidence matrices for num 185
[LOG] Computing n0_to_0 for num 185
[LOG] Saving tensor x_1_640.pt
[LOG] Saving tensor x_2_640.pt
[LOG] Saving tensor x_3_640.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor x_4_640.pt
[LOG] Saving tensor n0_to_0_640.pt
[LOG] Computing n1_to_1 for num 185
[LOG] Saving tensor n1_to_1_640.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor n2_to_2_640.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n3_to_3_640.pt
[LOG] Computing n3_to_4 for num 902
[LOG] Saving tensor n4_to_4_640.pt
[LOG] Saving tensor n0_to_1_640.pt
[LOG] Global feature for num 902
[LOG] Global feature for num 902
[LOG] Saving tensor x_0_902.pt
[LOG] Saving tensor n0_to_2_640.pt
[LOG] Process 42: Calculating Neighbors
[LOG] Loading pickle file data_337.pickle
[LOG] Processing node features for num 337
[LOG] Saving tensor x_1_902.pt
[LOG] Saving tensor x_2_902.pt
[LOG] Computing n2_to_2 (adjacency) for num 185
[LOG] Saving tensor x_3_902.pt
[LOG] Saving tensor x_4_902.pt
[LOG] Processing edge features for num 337
[LOG] Saving tensor n0_to_0_902.pt
[LOG] Saving tensor n0_to_3_640.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n1_to_1_902.pt
[LOG] Saving tensor n0_to_4_640.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n2_to_2_902.pt
[LOG] Saving tensor n1_to_2_640.pt
[LOG] Processing tetra features for num 337
[LOG] Saving tensor n1_to_3_640.pt
[LOG] Saving tensor n1_to_4_640.pt
[LOG] Computing n1_to_3 for num 144
[LOG] Saving tensor n3_to_3_902.pt
[LOG] Saving tensor n2_to_3_640.pt
[LOG] Processing cluster features for num 337
[LOG] Computing n3_to_3 (adjacency) for num 185
[LOG] Computing n4_to_4 (coadjacency) for num 185
[LOG] Computing n0_to_1 for num 185
[LOG] Processing cluster features for num 337
[LOG] Processing cluster features for num 648
[LOG] Computing n3_to_4 for num 136
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_2 for num 185
[LOG] Global feature for num 136
[LOG] Processing adjacency and incidence matrices for num 337
[LOG] Computing n0_to_0 for num 337
[LOG] Global feature for num 136
[LOG] Saving tensor x_0_136.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_4 for num 144
[LOG] Computing n1_to_1 for num 337
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_2 (adjacency) for num 337
[LOG] Computing n2_to_3 for num 144
[LOG] Processing cluster features for num 648
[LOG] Computing n0_to_3 for num 185
[LOG] Saving tensor n2_to_4_640.pt
[LOG] Computing n3_to_3 (adjacency) for num 965
[LOG] Computing n0_to_4 for num 185
[LOG] Saving tensor n3_to_4_640.pt
[LOG] Computing n1_to_2 for num 185
[LOG] Computing n3_to_3 (adjacency) for num 337
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n4_to_4 (coadjacency) for num 965
[LOG] Computing n4_to_4 (coadjacency) for num 337
[LOG] Computing n0_to_1 for num 337
[LOG] Computing n0_to_3 for num 352
[LOG] Computing n0_to_1 for num 965
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 109: Calculating Neighbors
[LOG] Loading pickle file data_867.pickle
[LOG] Processing node features for num 867
[LOG] Computing n0_to_2 for num 337
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_3 for num 185
[LOG] Computing n1_to_4 for num 185
[LOG] Computing n2_to_3 for num 185
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor x_1_136.pt
[LOG] Processing edge features for num 867
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 122: Calculating Neighbors
[LOG] Loading pickle file data_958.pickle
[LOG] Processing node features for num 958
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor global_feature_640.pt
[LOG] Saving tensor n4_to_4_902.pt
[LOG] Computing n2_to_4 for num 185
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_4 for num 144
[LOG] Computing n3_to_4 for num 185
[LOG] Global feature for num 185
[LOG] Global feature for num 185
[LOG] Saving tensor x_0_185.pt
[LOG] Computing n0_to_4 for num 352
[LOG] Process 41: Created combinatorial complex for file data_328.hdf5
[LOG] Processing adjacency and incidence matrices for num 648
[LOG] Computing n0_to_0 for num 648
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor x_2_136.pt
[LOG] Computing n1_to_3 for num 24
[LOG] Processing edge features for num 958
[LOG] Process 80: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] Saving tensor n0_to_1_902.pt
[LOG] Saving tensor x_1_185.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_4 for num 24
[LOG] Saving tensor x_3_136.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Computing n1_to_2 for num 352
[LOG] Saving tensor x_2_185.pt
[LOG] Saving tensor x_3_185.pt
[LOG] Saving tensor x_4_136.pt
[LOG] Computing n2_to_2 (adjacency) for num 784
[LOG] Saving tensor n0_to_2_902.pt
[LOG] Saving tensor n0_to_0_136.pt
[LOG] Saving tensor x_4_185.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n3_to_4 for num 144
[LOG] Saving tensor n0_to_0_185.pt
[LOG] Global feature for num 144
[LOG] Saving tensor n1_to_1_136.pt
[LOG] Saving tensor n1_to_1_185.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Global feature for num 144
[LOG] Saving tensor x_0_144.pt
[LOG] Saving tensor n0_to_3_902.pt
[LOG] Saving tensor n0_to_4_902.pt
[LOG] Saving tensor n2_to_2_185.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n2_to_2_136.pt
[LOG] Saving tensor n1_to_2_902.pt
[LOG] Saving tensor x_1_144.pt
[LOG] Saving tensor x_2_144.pt
[LOG] Saving tensor n1_to_3_902.pt
[LOG] Saving tensor n3_to_3_136.pt
[LOG] Processing tetra features for num 867
[LOG] Saving tensor x_3_144.pt
[LOG] Saving tensor n1_to_4_902.pt
[LOG] Saving tensor x_4_144.pt
[LOG] Saving tensor n4_to_4_136.pt
[LOG] Saving tensor n0_to_0_144.pt
[LOG] Saving tensor n2_to_3_902.pt
[LOG] Saving tensor n0_to_1_136.pt
[LOG] Saving tensor n1_to_1_144.pt
[LOG] Saving tensor n2_to_4_902.pt
[LOG] Computing n2_to_3 for num 24
[LOG] Saving tensor n2_to_2_144.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n0_to_2_136.pt
[LOG] Saving tensor n3_to_4_902.pt
[LOG] Saving tensor n0_to_3_136.pt
[LOG] Saving tensor global_feature_902.pt
[LOG] Process 114: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n0_to_4_136.pt
[LOG] Saving tensor n1_to_2_136.pt
[LOG] Saving tensor n3_to_3_185.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_3 for num 337
[LOG] Saving tensor n4_to_4_185.pt
[LOG] Processing tetra features for num 958
[LOG] Computing n0_to_4 for num 337
[LOG] Computing n1_to_1 for num 488
[LOG] Computing n1_to_2 for num 337
[LOG] Removed 3 subset clusters.
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n1_to_3_136.pt
[LOG] Saving tensor n0_to_1_185.pt
[LOG] Computing n1_to_3 for num 337
[LOG] Computing n1_to_4 for num 337
[LOG] Computing n2_to_3 for num 337
[LOG] Saving tensor n0_to_2_185.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n1_to_4_136.pt
[LOG] Computing n2_to_4 for num 337
[LOG] Computing n3_to_4 for num 337
[LOG] Global feature for num 337
[LOG] Global feature for num 337
[LOG] Saving tensor x_0_337.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n0_to_3_185.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n3_to_3_144.pt
[LOG] Saving tensor x_1_337.pt
[LOG] Saving tensor n0_to_4_185.pt
[LOG] Saving tensor n4_to_4_144.pt
[LOG] Saving tensor x_2_337.pt
[LOG] Saving tensor n2_to_3_136.pt
[LOG] Saving tensor x_3_337.pt
[LOG] Saving tensor n1_to_2_185.pt
[LOG] Saving tensor n2_to_4_136.pt
[LOG] Saving tensor n0_to_1_144.pt
[LOG] Saving tensor x_4_337.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n1_to_3_185.pt
[LOG] Saving tensor n0_to_0_337.pt
[LOG] Saving tensor n0_to_2_144.pt
[LOG] Saving tensor n3_to_4_136.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1065 Tetrahedra.
    [LOG] Generated 33 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.0
    [LOG] Max number of nodes per cluster is 26 and the number is 25
[LOG] Saving tensor global_feature_136.pt
[LOG] Saving tensor n1_to_4_185.pt
[LOG] Saving tensor n0_to_3_144.pt
[LOG] Saving tensor n1_to_1_337.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Process 17: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n2_to_3_185.pt
[LOG] Saving tensor n2_to_2_337.pt

    [LOG] We Currently have 1336 Tetrahedra.
    [LOG] Generated 37 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.18918918918919
    [LOG] Max number of nodes per cluster is 43 and the number is 35
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n0_to_4_144.pt
[LOG] Processing cluster features for num 867
[LOG] Saving tensor n2_to_4_185.pt
[LOG] Computing n2_to_4 for num 24
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n3_to_3_337.pt
[LOG] Saving tensor n1_to_2_144.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n4_to_4_337.pt
[LOG] We will select 217 edges and 1065 tetra
[LOG] Edges from tetra 0 and KDTree 340 with 0 edges in common.
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n0_to_1_337.pt
[LOG] Saving tensor n1_to_3_144.pt
[LOG] Saving tensor n3_to_4_185.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor global_feature_185.pt
[LOG] Saving tensor n0_to_2_337.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n1_to_4_144.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n2_to_3_144.pt
[LOG] Process 23: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_3_337.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n2_to_4_144.pt
[LOG] Saving tensor n0_to_4_337.pt
[LOG] Saving tensor n3_to_4_144.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n1_to_2_337.pt
[LOG] Saving tensor global_feature_144.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n1_to_3_337.pt
[LOG] Saving tensor n1_to_4_337.pt
[LOG] Saving tensor n2_to_3_337.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] We will select 106 edges and 1336 tetra
[LOG] Edges from tetra 0 and KDTree 1592 with 0 edges in common.
[LOG] Process 18: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing cluster features for num 958
[LOG] Saving tensor n2_to_4_337.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n3_to_4_337.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor global_feature_337.pt
[LOG] Process 42: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing cluster features for num 867
[LOG] Computing n1_to_1 for num 440
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing cluster features for num 958
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 504
[LOG] Computing n0_to_3 for num 736
[LOG] Computing n4_to_4 (coadjacency) for num 504
[LOG] Processing adjacency and incidence matrices for num 867
[LOG] Computing n0_to_0 for num 867
[LOG] Computing n3_to_4 for num 24
[LOG] Computing n0_to_1 for num 504
[LOG] Global feature for num 24
[LOG] Calculating for cell ranks 2 and 4
[LOG] Global feature for num 24
[LOG] Saving tensor x_0_24.pt
[LOG] Saving tensor x_1_24.pt
[LOG] Saving tensor x_2_24.pt
[LOG] Saving tensor x_3_24.pt
[LOG] Saving tensor x_4_24.pt
[LOG] Saving tensor n0_to_0_24.pt
[LOG] Computing n0_to_4 for num 736
[LOG] Saving tensor n1_to_1_24.pt
[LOG] Saving tensor n2_to_2_24.pt
[LOG] Saving tensor n3_to_3_24.pt
[LOG] Processing adjacency and incidence matrices for num 958
[LOG] Computing n0_to_0 for num 958
[LOG] Computing n0_to_3 for num 232
[LOG] Saving tensor n4_to_4_24.pt
[LOG] Saving tensor n0_to_1_24.pt
[LOG] Process 121: Created combinatorial complex for file data_951.hdf5
[LOG] Saving tensor n0_to_2_24.pt
[LOG] Computing n0_to_2 for num 965
[LOG] Saving tensor n0_to_3_24.pt
[LOG] Saving tensor n0_to_4_24.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n1_to_2_24.pt
[LOG] Computing n1_to_2 for num 736
[LOG] Saving tensor n1_to_3_24.pt
[LOG] Computing n1_to_3 for num 808
[LOG] Saving tensor n1_to_4_24.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n2_to_3_24.pt
[LOG] Computing n0_to_3 for num 664
[LOG] Saving tensor n2_to_4_24.pt
[LOG] Saving tensor n3_to_4_24.pt
[LOG] Saving tensor global_feature_24.pt
[LOG] Computing n0_to_4 for num 232
[LOG] Process 3: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_4 for num 664
[LOG] Computing n1_to_4 for num 808
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_2 for num 232
[LOG] Computing n1_to_2 for num 664
[LOG] Computing n2_to_3 for num 808
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_3 for num 816
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 2 subset clusters.
[LOG] Computing n1_to_4 for num 816
[LOG] Removed 3 subset clusters.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_3 for num 816
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_3 for num 752
[LOG] Process 48: Created combinatorial complex for file data_385.hdf5
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 28: Created combinatorial complex for file data_225.hdf5
[LOG] Process 41: Calculating Neighbors
[LOG] Loading pickle file data_328.pickle
[LOG] Processing node features for num 328
[LOG] Computing n2_to_4 for num 808
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 48: Calculating Neighbors
[LOG] Loading pickle file data_385.pickle
[LOG] Processing node features for num 385
[LOG] Computing n1_to_4 for num 752
[LOG] Processing edge features for num 328
[LOG] Processing edge features for num 385
[LOG] Computing n1_to_3 for num 792
[LOG] Process 126: Created combinatorial complex for file data_986.hdf5
[LOG] Processing tetra features for num 385
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_1 for num 874
[LOG] Process 28: Calculating Neighbors
[LOG] Loading pickle file data_225.pickle
[LOG] Processing node features for num 225
[LOG] Processing edge features for num 225
[LOG] Processing cluster features for num 385
[LOG] Processing tetra features for num 225
[LOG] Processing cluster features for num 385
[LOG] Computing n1_to_3 for num 923
[LOG] Computing n2_to_4 for num 816
[LOG] Processing adjacency and incidence matrices for num 385
[LOG] Computing n0_to_0 for num 385
[LOG] Processing cluster features for num 225
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing cluster features for num 225
[LOG] Computing n2_to_3 for num 752
[LOG] Computing n1_to_1 for num 385
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing adjacency and incidence matrices for num 225
[LOG] Computing n0_to_0 for num 225
[LOG] Process 36: Created combinatorial complex for file data_288.hdf5
[LOG] Computing n1_to_1 for num 225
[LOG] Computing n1_to_4 for num 792
[LOG] Computing n0_to_2 for num 504
[LOG] Computing n1_to_4 for num 923
[LOG] Computing n0_to_3 for num 320
[LOG] Computing n2_to_2 (adjacency) for num 385
[LOG] Processing tetra features for num 328
[LOG] Computing n2_to_2 (adjacency) for num 225
[LOG] Computing n0_to_4 for num 320
[LOG] Computing n3_to_4 for num 808
[LOG] Computing n2_to_3 for num 923
[LOG] Global feature for num 808
[LOG] Global feature for num 808
[LOG] Saving tensor x_0_808.pt
[LOG] Saving tensor x_1_808.pt
[LOG] Saving tensor x_2_808.pt
[LOG] Saving tensor x_3_808.pt
[LOG] Saving tensor x_4_808.pt
[LOG] Computing n3_to_3 (adjacency) for num 225
[LOG] Saving tensor n0_to_0_808.pt
[LOG] Computing n3_to_3 (adjacency) for num 385
[LOG] Computing n4_to_4 (coadjacency) for num 225
[LOG] Saving tensor n1_to_1_808.pt
[LOG] Computing n0_to_1 for num 225
[LOG] Computing n4_to_4 (coadjacency) for num 385
[LOG] Computing n2_to_4 for num 752
[LOG] Saving tensor n2_to_2_808.pt
[LOG] Computing n0_to_1 for num 385
[LOG] Saving tensor n3_to_3_808.pt
[LOG] Computing n0_to_2 for num 225
[LOG] Saving tensor n4_to_4_808.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n0_to_1_808.pt
[LOG] Computing n0_to_3 for num 88
[LOG] Computing n0_to_2 for num 385
[LOG] Saving tensor n0_to_2_808.pt
[LOG] Computing n2_to_3 for num 792
[LOG] Saving tensor n0_to_3_808.pt
[LOG] Process 4: Created combinatorial complex for file data_32.hdf5
[LOG] Computing n1_to_2 for num 320
[LOG] Saving tensor n0_to_4_808.pt
[LOG] Saving tensor n1_to_2_808.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n1_to_3_808.pt
[LOG] Saving tensor n1_to_4_808.pt
[LOG] Computing n3_to_4 for num 816
[LOG] Saving tensor n2_to_3_808.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Global feature for num 816
[LOG] Global feature for num 816
[LOG] Saving tensor x_0_816.pt
[LOG] Saving tensor n2_to_4_808.pt
[LOG] Saving tensor x_1_816.pt
[LOG] Saving tensor x_2_816.pt
[LOG] Saving tensor n3_to_4_808.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor global_feature_808.pt
[LOG] Saving tensor x_3_816.pt
[LOG] Computing n0_to_4 for num 88
[LOG] Process 101: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor x_4_816.pt
[LOG] Computing n2_to_2 (adjacency) for num 392
[LOG] Saving tensor n0_to_0_816.pt
[LOG] Computing n0_to_3 for num 225
[LOG] Saving tensor n1_to_1_816.pt
[LOG] Computing n3_to_3 (adjacency) for num 704
[LOG] Computing n2_to_4 for num 792
[LOG] Computing n0_to_4 for num 225
[LOG] Computing n4_to_4 (coadjacency) for num 704
[LOG] Saving tensor n2_to_2_816.pt
[LOG] Computing n1_to_2 for num 225
[LOG] Computing n2_to_4 for num 923
[LOG] Computing n0_to_1 for num 704
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_1 for num 648
[LOG] Computing n1_to_2 for num 88
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_4 for num 752
[LOG] Saving tensor n3_to_3_816.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Global feature for num 752
[LOG] Saving tensor n4_to_4_816.pt
[LOG] Global feature for num 752
[LOG] Saving tensor x_0_752.pt
[LOG] Processing cluster features for num 328
[LOG] Saving tensor n0_to_1_816.pt
[LOG] Saving tensor x_1_752.pt
[LOG] Saving tensor x_2_752.pt
[LOG] Saving tensor n0_to_2_816.pt
[LOG] Saving tensor x_3_752.pt
[LOG] Saving tensor n0_to_3_816.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor x_4_752.pt
[LOG] Computing n1_to_3 for num 225
[LOG] Saving tensor n0_to_4_816.pt
[LOG] Computing n1_to_4 for num 225
[LOG] Computing n2_to_3 for num 225
[LOG] Saving tensor n0_to_0_752.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n1_to_2_816.pt
[LOG] Computing n3_to_4 for num 792
[LOG] Computing n2_to_4 for num 225
[LOG] Global feature for num 792
[LOG] Saving tensor n1_to_3_816.pt
[LOG] Global feature for num 792
[LOG] Saving tensor x_0_792.pt
[LOG] Saving tensor n1_to_1_752.pt
[LOG] Computing n0_to_3 for num 385
[LOG] Computing n3_to_4 for num 225
[LOG] Saving tensor n1_to_4_816.pt
[LOG] Global feature for num 225
[LOG] Global feature for num 225
[LOG] Saving tensor x_0_225.pt
[LOG] Saving tensor n2_to_2_752.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_4 for num 385
[LOG] Saving tensor n2_to_3_816.pt
[LOG] Saving tensor x_1_792.pt
[LOG] Computing n1_to_2 for num 385
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor x_2_792.pt
[LOG] Saving tensor x_1_225.pt
[LOG] Saving tensor n2_to_4_816.pt
[LOG] Saving tensor x_3_792.pt
[LOG] Saving tensor x_2_225.pt
[LOG] Saving tensor n3_to_4_816.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n3_to_3_752.pt
[LOG] Processing cluster features for num 328
[LOG] Computing n3_to_4 for num 923
[LOG] Computing n1_to_3 for num 385
[LOG] Global feature for num 923
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_4 for num 385
[LOG] Global feature for num 923
[LOG] Saving tensor x_0_923.pt
[LOG] Computing n2_to_3 for num 385
[LOG] Computing n1_to_3 for num 846
[LOG] Computing n3_to_3 (adjacency) for num 616
[LOG] Computing n2_to_4 for num 385
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n4_to_4 (coadjacency) for num 616
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n3_to_4 for num 385
[LOG] Computing n0_to_1 for num 616
[LOG] Global feature for num 385
[LOG] Global feature for num 385
[LOG] Saving tensor x_0_385.pt
[LOG] Computing n1_to_4 for num 846
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 121: Calculating Neighbors
[LOG] Loading pickle file data_951.pickle
[LOG] Processing node features for num 951
[LOG] Processing adjacency and incidence matrices for num 328
[LOG] Computing n0_to_0 for num 328
[LOG] Saving tensor global_feature_816.pt
[LOG] Saving tensor x_3_225.pt
[LOG] Saving tensor n4_to_4_752.pt
[LOG] Process 102: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor x_1_923.pt
[LOG] Saving tensor x_4_792.pt
[LOG] Saving tensor x_2_923.pt
[LOG] Saving tensor x_1_385.pt
[LOG] Saving tensor n0_to_1_752.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n0_to_0_792.pt
[LOG] Saving tensor x_3_923.pt
[LOG] Saving tensor x_4_225.pt
[LOG] Saving tensor x_4_923.pt
[LOG] Saving tensor x_2_385.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n0_to_0_225.pt
[LOG] Saving tensor n0_to_0_923.pt
[LOG] Saving tensor n0_to_2_752.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n1_to_1_792.pt
[LOG] Computing n2_to_3 for num 846
[LOG] Saving tensor x_3_385.pt
[LOG] Processing edge features for num 951
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n0_to_3_752.pt
[LOG] Saving tensor n1_to_1_225.pt
[LOG] Saving tensor x_4_385.pt
[LOG] Saving tensor n0_to_0_385.pt
[LOG] Saving tensor n1_to_1_923.pt
[LOG] Saving tensor n2_to_2_792.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n2_to_2_225.pt
[LOG] Saving tensor n0_to_4_752.pt
[LOG] Saving tensor n1_to_1_385.pt
[LOG] Saving tensor n2_to_2_923.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n1_to_2_752.pt
[LOG] Saving tensor n2_to_2_385.pt
[LOG] Saving tensor n3_to_3_225.pt
[LOG] Saving tensor n3_to_3_792.pt
[LOG] Saving tensor n4_to_4_225.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n1_to_3_752.pt
[LOG] Saving tensor n4_to_4_792.pt
[LOG] Saving tensor n3_to_3_385.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor n1_to_4_752.pt
[LOG] Saving tensor n3_to_3_923.pt
[LOG] Saving tensor n0_to_1_225.pt
[LOG] Saving tensor n0_to_1_792.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n4_to_4_385.pt
[LOG] Saving tensor n0_to_2_792.pt
[LOG] Saving tensor n0_to_1_385.pt
[LOG] Saving tensor n2_to_3_752.pt
[LOG] Saving tensor n0_to_2_225.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n0_to_2_385.pt
[LOG] Computing n1_to_1 for num 867
[LOG] Saving tensor n0_to_3_792.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n2_to_4_752.pt
[LOG] Saving tensor n0_to_3_225.pt
[LOG] Saving tensor n0_to_4_792.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n0_to_3_385.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n0_to_4_385.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n1_to_2_792.pt
[LOG] Saving tensor n3_to_4_752.pt
[LOG] Saving tensor n0_to_4_225.pt
[LOG] Removed 2 subset clusters.
[LOG] Saving tensor n1_to_2_385.pt
[LOG] Saving tensor global_feature_752.pt
[LOG] Saving tensor n1_to_2_225.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n1_to_3_385.pt
[LOG] Process 94: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n4_to_4_923.pt
[LOG] Saving tensor n1_to_3_792.pt
[LOG] Saving tensor n1_to_4_792.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n1_to_4_385.pt
[LOG] Saving tensor n2_to_3_385.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n0_to_1_923.pt
[LOG] Saving tensor n2_to_3_792.pt
[LOG] Saving tensor n2_to_4_385.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n2_to_4_792.pt
[LOG] Saving tensor n0_to_2_923.pt
[LOG] Saving tensor n3_to_4_385.pt
[LOG] Saving tensor n3_to_4_792.pt
[LOG] Saving tensor global_feature_385.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n0_to_3_923.pt
[LOG] Process 48: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor global_feature_792.pt
[LOG] Saving tensor n1_to_3_225.pt
[LOG] Computing n3_to_3 (adjacency) for num 264
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n0_to_4_923.pt
[LOG] Process 99: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n4_to_4 (coadjacency) for num 264
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n1_to_4_225.pt
[LOG] Saving tensor n1_to_2_923.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n2_to_4 for num 846
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n0_to_1 for num 264
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n2_to_3_225.pt
[LOG] Saving tensor n1_to_3_923.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n2_to_4_225.pt
[LOG] Saving tensor n1_to_4_923.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n2_to_3_923.pt
[LOG] Saving tensor n3_to_4_225.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 544
[LOG] Saving tensor global_feature_225.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Processing tetra features for num 951
[LOG] Saving tensor n2_to_4_923.pt
[LOG] Saving tensor n3_to_4_923.pt
[LOG] Saving tensor global_feature_923.pt
[LOG] Process 117: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 28: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 126: Calculating Neighbors
[LOG] Loading pickle file data_986.pickle
[LOG] Processing node features for num 986
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing edge features for num 986
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_1 for num 958
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_4 for num 846
[LOG] Global feature for num 846
[LOG] Global feature for num 846
[LOG] Saving tensor x_0_846.pt
[LOG] Process 127: Created combinatorial complex for file data_993.hdf5
[LOG] Saving tensor x_1_846.pt
[LOG] Saving tensor x_2_846.pt
[LOG] Saving tensor x_3_846.pt
[LOG] Saving tensor x_4_846.pt
[LOG] Saving tensor n0_to_0_846.pt
[LOG] Saving tensor n1_to_1_846.pt
[LOG] Saving tensor n2_to_2_846.pt
[LOG] Process 36: Calculating Neighbors
[LOG] Loading pickle file data_288.pickle
[LOG] Processing node features for num 288
[LOG] Computing n0_to_2 for num 704
[LOG] Saving tensor n3_to_3_846.pt
[LOG] Saving tensor n4_to_4_846.pt
[LOG] Processing edge features for num 288
[LOG] Saving tensor n0_to_1_846.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n0_to_2_846.pt
[LOG] Saving tensor n0_to_3_846.pt
[LOG] Saving tensor n0_to_4_846.pt
[LOG] Saving tensor n1_to_2_846.pt
[LOG] Processing tetra features for num 986
[LOG] Saving tensor n1_to_3_846.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n1_to_4_846.pt
[LOG] Computing n0_to_2 for num 616
[LOG] Saving tensor n2_to_3_846.pt
[LOG] Processing cluster features for num 951
[LOG] Saving tensor n2_to_4_846.pt
[LOG] Saving tensor n3_to_4_846.pt
[LOG] Saving tensor global_feature_846.pt
[LOG] Process 106: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing cluster features for num 951
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing tetra features for num 288
[LOG] Computing n0_to_3 for num 965
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_4 for num 965
[LOG] Process 4: Calculating Neighbors
[LOG] Loading pickle file data_32.pickle
[LOG] Processing node features for num 32
[LOG] Processing cluster features for num 986
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing adjacency and incidence matrices for num 951
[LOG] Computing n0_to_0 for num 951
[LOG] Computing n0_to_2 for num 264
[LOG] Processing edge features for num 32
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 1 subset clusters.
[LOG] Computing n1_to_2 for num 965
[LOG] Computing n1_to_3 for num 352
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing cluster features for num 986
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_4 for num 352
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing cluster features for num 288
[LOG] Computing n2_to_2 (adjacency) for num 672
[LOG] Computing n2_to_3 for num 352
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing adjacency and incidence matrices for num 986
[LOG] Computing n0_to_0 for num 986
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Processing tetra features for num 32
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Processing cluster features for num 288
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n1_to_3 for num 240
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 288
[LOG] Computing n0_to_0 for num 288
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_4 for num 240
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_4 for num 352
[LOG] Processing cluster features for num 32
[LOG] Process 71: Created combinatorial complex for file data_568.hdf5
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 66: Created combinatorial complex for file data_528.hdf5
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_3 for num 240
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing cluster features for num 32
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_3 for num 232
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_4 for num 240
[LOG] GENERATED TETRA
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_4 for num 232
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_4 for num 352
[LOG] Process 127: Calculating Neighbors
[LOG] Loading pickle file data_993.pickle
[LOG] Processing node features for num 993
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Global feature for num 352
[LOG] Processing adjacency and incidence matrices for num 32
[LOG] Computing n0_to_0 for num 32
[LOG] Global feature for num 352
[LOG] Saving tensor x_0_352.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor x_1_352.pt
[LOG] Saving tensor x_2_352.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor x_3_352.pt
[LOG] Saving tensor x_4_352.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n0_to_0_352.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing edge features for num 993
[LOG] Saving tensor n1_to_1_352.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n3_to_4 for num 240
[LOG] Saving tensor n2_to_2_352.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Global feature for num 240
[LOG] Global feature for num 240
[LOG] Saving tensor x_0_240.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n2_to_3 for num 232
[LOG] Saving tensor n3_to_3_352.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor x_1_240.pt
[LOG] Saving tensor n4_to_4_352.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor x_2_240.pt
[LOG] Saving tensor n0_to_1_352.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor x_3_240.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor x_4_240.pt
[LOG] Saving tensor n0_to_2_352.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n0_to_0_240.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_3 for num 504
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n1_to_1_240.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n2_to_2_240.pt
[LOG] Saving tensor n0_to_3_352.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n0_to_4_352.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n1_to_2_352.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_4 for num 504
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n1_to_3_352.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n1_to_4_352.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n3_to_3_240.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1056 Tetrahedra.
    [LOG] Generated 29 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.655172413793103
    [LOG] Max number of nodes per cluster is 37 and the number is 27
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n2_to_3_352.pt
[LOG] Processing tetra features for num 993
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n4_to_4_240.pt
[LOG] Saving tensor n2_to_4_352.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n3_to_4_352.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n0_to_1_240.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] We will select 422 edges and 1056 tetra
[LOG] Edges from tetra 0 and KDTree 422 with 0 edges in common.
[LOG] Removed 3 subset clusters.
[LOG] Computing n1_to_2 for num 504
[LOG] Computing n1_to_1 for num 328
[LOG] Saving tensor global_feature_352.pt
[LOG] Saving tensor n0_to_2_240.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 44: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_4 for num 232
[LOG] Computing n1_to_3 for num 736
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n0_to_3_240.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n0_to_4_240.pt
[LOG] Saving tensor n1_to_2_240.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n1_to_3_240.pt
[LOG] Saving tensor n1_to_4_240.pt
[LOG] Computing n1_to_4 for num 736
[LOG] Saving tensor n2_to_3_240.pt
[LOG] Saving tensor n2_to_4_240.pt
[LOG] Saving tensor n3_to_4_240.pt
[LOG] Saving tensor global_feature_240.pt
[LOG] Process 30: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_3 for num 320
[LOG] Computing n2_to_2 (adjacency) for num 48
[LOG] Process 87: Created combinatorial complex for file data_696.hdf5
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing cluster features for num 993
[LOG] Computing n2_to_3 for num 736
[LOG] Computing n1_to_4 for num 320
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_3 for num 704
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_4 for num 704
[LOG] Computing n2_to_3 for num 320
[LOG] Removed 0 subset clusters.
[LOG] Computing n3_to_4 for num 232
[LOG] Calculating for cell ranks 1 and 2
[LOG] Global feature for num 232
[LOG] Global feature for num 232
[LOG] Saving tensor x_0_232.pt
[LOG] Computing n3_to_3 (adjacency) for num 784
[LOG] Saving tensor x_1_232.pt
[LOG] Saving tensor x_2_232.pt
[LOG] Saving tensor x_3_232.pt
[LOG] Saving tensor x_4_232.pt
[LOG] Saving tensor n0_to_0_232.pt
[LOG] Computing n4_to_4 (coadjacency) for num 784
[LOG] Saving tensor n1_to_1_232.pt
[LOG] Saving tensor n2_to_2_232.pt
[LOG] Processing cluster features for num 993
[LOG] Computing n0_to_1 for num 784
[LOG] Computing n1_to_2 for num 704
[LOG] Saving tensor n3_to_3_232.pt
[LOG] Saving tensor n4_to_4_232.pt
[LOG] Saving tensor n0_to_1_232.pt
[LOG] Saving tensor n0_to_2_232.pt
[LOG] Process 71: Calculating Neighbors
[LOG] Loading pickle file data_568.pickle
[LOG] Processing node features for num 568
[LOG] Saving tensor n0_to_3_232.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n0_to_4_232.pt
[LOG] Saving tensor n1_to_2_232.pt
[LOG] Saving tensor n1_to_3_232.pt
[LOG] Process 37: Created combinatorial complex for file data_297.hdf5
[LOG] Computing n2_to_4 for num 736
[LOG] Saving tensor n1_to_4_232.pt
[LOG] Processing edge features for num 568
[LOG] Saving tensor n2_to_3_232.pt
[LOG] Saving tensor n2_to_4_232.pt
[LOG] Saving tensor n3_to_4_232.pt
[LOG] Saving tensor global_feature_232.pt
[LOG] Process 29: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing adjacency and incidence matrices for num 993
[LOG] Computing n0_to_0 for num 993
[LOG] Process 37: Calculating Neighbors
[LOG] Loading pickle file data_297.pickle
[LOG] Processing node features for num 297
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing edge features for num 297
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing tetra features for num 297
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 66: Calculating Neighbors
[LOG] Loading pickle file data_528.pickle
[LOG] Processing node features for num 528
[LOG] Processing cluster features for num 297
[LOG] Computing n2_to_4 for num 320
[LOG] Processing cluster features for num 297
[LOG] Processing tetra features for num 568
[LOG] Processing edge features for num 528
[LOG] Processing adjacency and incidence matrices for num 297
[LOG] Computing n0_to_0 for num 297
[LOG] Computing n3_to_3 (adjacency) for num 272
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n4_to_4 (coadjacency) for num 272
[LOG] Computing n3_to_4 for num 736
[LOG] Global feature for num 736
[LOG] Computing n0_to_1 for num 272
[LOG] Global feature for num 736
[LOG] Saving tensor x_0_736.pt
[LOG] Saving tensor x_1_736.pt
[LOG] Saving tensor x_2_736.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_3 for num 616
[LOG] Saving tensor x_3_736.pt
[LOG] Computing n1_to_1 for num 297
[LOG] Saving tensor x_4_736.pt
[LOG] Saving tensor n0_to_0_736.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n1_to_1_736.pt
[LOG] Saving tensor n2_to_2_736.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_1 for num 986
[LOG] Computing n0_to_4 for num 616
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n3_to_3_736.pt
[LOG] Saving tensor n4_to_4_736.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_3 for num 88
[LOG] Saving tensor n0_to_1_736.pt
[LOG] Computing n1_to_1 for num 951
[LOG] Saving tensor n0_to_2_736.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n0_to_3_736.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n0_to_4_736.pt
[LOG] Computing n2_to_2 (adjacency) for num 297
[LOG] Computing n1_to_2 for num 616
[LOG] Processing tetra features for num 528
[LOG] Saving tensor n1_to_2_736.pt
[LOG] Saving tensor n1_to_3_736.pt
[LOG] Saving tensor n1_to_4_736.pt
[LOG] Computing n1_to_4 for num 88
[LOG] Computing n3_to_3 (adjacency) for num 297
[LOG] Computing n3_to_4 for num 320
[LOG] Saving tensor n2_to_3_736.pt
[LOG] Computing n4_to_4 (coadjacency) for num 297
[LOG] Processing cluster features for num 568
[LOG] Computing n0_to_1 for num 297
[LOG] Global feature for num 320
[LOG] Global feature for num 320
[LOG] Saving tensor x_0_320.pt
[LOG] Saving tensor n2_to_4_736.pt
[LOG] Saving tensor x_1_320.pt
[LOG] Saving tensor x_2_320.pt
[LOG] Saving tensor n3_to_4_736.pt
[LOG] Saving tensor x_3_320.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor global_feature_736.pt
[LOG] Saving tensor x_4_320.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_2 for num 297
[LOG] Process 92: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_0_320.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n1_to_1_320.pt
[LOG] Computing n2_to_3 for num 88
[LOG] Saving tensor n2_to_2_320.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_2 for num 784
[LOG] Saving tensor n3_to_3_320.pt
[LOG] Saving tensor n4_to_4_320.pt
[LOG] Saving tensor n0_to_1_320.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n0_to_2_320.pt
[LOG] Saving tensor n0_to_3_320.pt
[LOG] Processing cluster features for num 568
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n0_to_4_320.pt
[LOG] Saving tensor n1_to_2_320.pt
[LOG] Saving tensor n1_to_3_320.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n1_to_4_320.pt
[LOG] Computing n0_to_3 for num 264
[LOG] Saving tensor n2_to_3_320.pt
[LOG] Saving tensor n2_to_4_320.pt
[LOG] Saving tensor n3_to_4_320.pt
[LOG] Saving tensor global_feature_320.pt
[LOG] Process 40: Calculating Cross-Cell-Invariants
[LOG] Process 1: Created combinatorial complex for file data_8.hdf5
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_3 for num 297
[LOG] Processing cluster features for num 528
[LOG] Computing n0_to_4 for num 297
[LOG] Computing n0_to_4 for num 264
[LOG] Computing n1_to_2 for num 297
[LOG] Processing adjacency and incidence matrices for num 568
[LOG] Computing n0_to_0 for num 568
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_2 for num 264
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_4 for num 88
[LOG] Processing cluster features for num 528
[LOG] GENERATED TETRA
[LOG] Computing n1_to_3 for num 297
[LOG] Computing n1_to_4 for num 297
[LOG] Computing n2_to_3 for num 297
[LOG] Computing n0_to_2 for num 272
[LOG] Computing n1_to_3 for num 664
[LOG] Computing n2_to_4 for num 297
[LOG] Computing n3_to_4 for num 297
[LOG] Global feature for num 297
[LOG] Global feature for num 297
[LOG] Saving tensor x_0_297.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor x_1_297.pt
[LOG] Saving tensor x_2_297.pt
[LOG] Saving tensor x_3_297.pt
[LOG] Saving tensor x_4_297.pt
[LOG] Saving tensor n0_to_0_297.pt
[LOG] Saving tensor n1_to_1_297.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 87: Calculating Neighbors
[LOG] Loading pickle file data_696.pickle
[LOG] Processing node features for num 696
[LOG] Saving tensor n2_to_2_297.pt
[LOG] Computing n1_to_1 for num 288
[LOG] Saving tensor n3_to_3_297.pt
[LOG] Saving tensor n4_to_4_297.pt
[LOG] Saving tensor n0_to_1_297.pt
[LOG] Saving tensor n0_to_2_297.pt
[LOG] Saving tensor n0_to_3_297.pt
[LOG] Computing n3_to_3 (adjacency) for num 544
[LOG] Saving tensor n0_to_4_297.pt
[LOG] Saving tensor n1_to_2_297.pt
[LOG] Computing n4_to_4 (coadjacency) for num 544
[LOG] Saving tensor n1_to_3_297.pt
[LOG] Saving tensor n1_to_4_297.pt
[LOG] Process 27: Created combinatorial complex for file data_216.hdf5
[LOG] Processing edge features for num 696
[LOG] Computing n0_to_1 for num 544
[LOG] Saving tensor n2_to_3_297.pt
[LOG] Saving tensor n2_to_4_297.pt
[LOG] Saving tensor n3_to_4_297.pt
[LOG] Saving tensor global_feature_297.pt
[LOG] Process 37: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing adjacency and incidence matrices for num 528
[LOG] Computing n0_to_0 for num 528
[LOG] Computing n1_to_4 for num 664
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_4 for num 88
[LOG] Global feature for num 88
[LOG] Global feature for num 88
[LOG] Saving tensor x_0_88.pt
[LOG] Saving tensor x_1_88.pt
[LOG] Saving tensor x_2_88.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor x_3_88.pt
[LOG] Saving tensor x_4_88.pt
[LOG] Saving tensor n0_to_0_88.pt
[LOG] Saving tensor n1_to_1_88.pt
[LOG] Saving tensor n2_to_2_88.pt
[LOG] Saving tensor n3_to_3_88.pt
[LOG] Saving tensor n4_to_4_88.pt
[LOG] Computing n2_to_3 for num 664
[LOG] Saving tensor n0_to_1_88.pt
[LOG] Saving tensor n0_to_2_88.pt
[LOG] Saving tensor n0_to_3_88.pt
[LOG] Saving tensor n0_to_4_88.pt
[LOG] Saving tensor n1_to_2_88.pt
[LOG] Saving tensor n1_to_3_88.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n1_to_4_88.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n2_to_3_88.pt
[LOG] Saving tensor n2_to_4_88.pt
[LOG] Processing tetra features for num 696
[LOG] Saving tensor n3_to_4_88.pt
[LOG] Saving tensor global_feature_88.pt
[LOG] Process 11: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_4 for num 664
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Removed 5 subset clusters.
[LOG] Computing n3_to_3 (adjacency) for num 392
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n4_to_4 (coadjacency) for num 392
[LOG] Computing n0_to_1 for num 392
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing cluster features for num 696
[LOG] Computing n2_to_2 (adjacency) for num 176
[LOG] Computing n3_to_4 for num 664
[LOG] Global feature for num 664
[LOG] Global feature for num 664
[LOG] Saving tensor x_0_664.pt
[LOG] Saving tensor x_1_664.pt
[LOG] Saving tensor x_2_664.pt
[LOG] Saving tensor x_3_664.pt
[LOG] Saving tensor x_4_664.pt
[LOG] Saving tensor n0_to_0_664.pt
[LOG] Saving tensor n1_to_1_664.pt
[LOG] Saving tensor n2_to_2_664.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n3_to_3_664.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n4_to_4_664.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n0_to_1_664.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n0_to_2_664.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n0_to_3_664.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n0_to_4_664.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n1_to_2_664.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n1_to_3_664.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n1_to_4_664.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n2_to_3_664.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n2_to_4_664.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Processing cluster features for num 696
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n3_to_4_664.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor global_feature_664.pt
[LOG] Process 83: Calculating Cross-Cell-Invariants
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_3_to_3.pt

    [LOG] We Currently have 1167 Tetrahedra.
    [LOG] Generated 37 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.243243243243244
    [LOG] Max number of nodes per cluster is 95 and the number is 36
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] GENERATED TETRA
[LOG] We will select 182 edges and 1167 tetra
[LOG] Edges from tetra 0 and KDTree 1665 with 0 edges in common.
[LOG] Processing adjacency and incidence matrices for num 696
[LOG] Computing n0_to_0 for num 696
[LOG] Computing n2_to_2 (adjacency) for num 560
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_1 for num 32
[LOG] Computing n2_to_2 (adjacency) for num 480
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_2 for num 544
[LOG] Process 1: Calculating Neighbors
[LOG] Loading pickle file data_8.pickle
[LOG] Processing node features for num 8
[LOG] Processing edge features for num 8
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 0 subset clusters.
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 3

    [LOG] We Currently have 1064 Tetrahedra.
    [LOG] Generated 37 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.45945945945946
    [LOG] Max number of nodes per cluster is 70 and the number is 21
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 27: Calculating Neighbors
[LOG] Loading pickle file data_216.pickle
[LOG] Processing node features for num 216
[LOG] Computing n1_to_1 for num 568
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing edge features for num 216
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 112: Created combinatorial complex for file data_889.hdf5
[LOG] We will select 107 edges and 1064 tetra
[LOG] Edges from tetra 0 and KDTree 585 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_2 for num 392
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing tetra features for num 8
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_1 for num 993
[LOG] Processing tetra features for num 216
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing cluster features for num 8
[LOG] Process 31: Created combinatorial complex for file data_249.hdf5
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 31: Calculating Neighbors
[LOG] Loading pickle file data_249.pickle
[LOG] Processing node features for num 249
[LOG] Processing edge features for num 249
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing tetra features for num 249
[LOG] Processing cluster features for num 216
[LOG] Processing cluster features for num 249
[LOG] Processing cluster features for num 8
[LOG] Processing cluster features for num 249
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing adjacency and incidence matrices for num 249
[LOG] Computing n0_to_0 for num 249
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_1 for num 249
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_2 (adjacency) for num 249
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 216
[LOG] Process 57: Created combinatorial complex for file data_456.hdf5
[LOG] Process 112: Calculating Neighbors
[LOG] Loading pickle file data_889.pickle
[LOG] Processing node features for num 889
[LOG] Computing n3_to_3 (adjacency) for num 249
[LOG] Processing adjacency and incidence matrices for num 8
[LOG] Computing n0_to_0 for num 8
[LOG] Processing edge features for num 889
[LOG] Computing n4_to_4 (coadjacency) for num 249
[LOG] Computing n0_to_1 for num 249
[LOG] Processing tetra features for num 889
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_2 (adjacency) for num 72
[LOG] Computing n0_to_2 for num 249
[LOG] Processing cluster features for num 889
[LOG] Processing cluster features for num 889
[LOG] Processing adjacency and incidence matrices for num 889
[LOG] Computing n0_to_0 for num 889
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_2 (adjacency) for num 488
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing adjacency and incidence matrices for num 216
[LOG] Computing n0_to_0 for num 216
[LOG] Computing n1_to_1 for num 889
[LOG] Computing n1_to_1 for num 528
[LOG] Computing n2_to_2 (adjacency) for num 889
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_3 for num 249
[LOG] Computing n0_to_3 for num 784
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_4 for num 249
[LOG] Computing n1_to_2 for num 249
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_3 for num 249
[LOG] Computing n1_to_4 for num 249
[LOG] Computing n2_to_3 for num 249
[LOG] Computing n3_to_3 (adjacency) for num 889
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n4_to_4 (coadjacency) for num 889
[LOG] Computing n0_to_4 for num 784
[LOG] Computing n0_to_1 for num 889
[LOG] Computing n2_to_4 for num 249
[LOG] Computing n3_to_4 for num 249
[LOG] Global feature for num 249
[LOG] Global feature for num 249
[LOG] Saving tensor x_0_249.pt
[LOG] Saving tensor x_1_249.pt
[LOG] Saving tensor x_2_249.pt
[LOG] Saving tensor x_3_249.pt
[LOG] Saving tensor x_4_249.pt
[LOG] Saving tensor n0_to_0_249.pt
[LOG] Saving tensor n1_to_1_249.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n2_to_2_249.pt
[LOG] Computing n0_to_2 for num 889
[LOG] Saving tensor n3_to_3_249.pt
[LOG] Saving tensor n4_to_4_249.pt
[LOG] Saving tensor n0_to_1_249.pt
[LOG] Saving tensor n0_to_2_249.pt
[LOG] Saving tensor n0_to_3_249.pt
[LOG] Saving tensor n0_to_4_249.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n1_to_2_249.pt
[LOG] Saving tensor n1_to_3_249.pt
[LOG] Saving tensor n1_to_4_249.pt
[LOG] Saving tensor n2_to_3_249.pt
[LOG] Saving tensor n2_to_4_249.pt
[LOG] Saving tensor n3_to_4_249.pt
[LOG] Saving tensor global_feature_249.pt
[LOG] Process 31: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_2 for num 784
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_3 for num 504
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_4 for num 504
[LOG] Computing n0_to_3 for num 889
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_4 for num 889
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_2 for num 889
[LOG] Computing n2_to_3 for num 504
[LOG] Computing n3_to_3 (adjacency) for num 672
[LOG] Computing n1_to_1 for num 696
[LOG] Computing n4_to_4 (coadjacency) for num 672
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_1 for num 672
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_3 for num 889
[LOG] Computing n1_to_4 for num 889
[LOG] Computing n2_to_3 for num 889
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_3 for num 965
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_4 for num 889
[LOG] Computing n0_to_3 for num 272
[LOG] Computing n3_to_4 for num 889
[LOG] Global feature for num 889
[LOG] Global feature for num 889
[LOG] Saving tensor x_0_889.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor x_1_889.pt
[LOG] Saving tensor x_2_889.pt
[LOG] Saving tensor x_3_889.pt
[LOG] Saving tensor x_4_889.pt
[LOG] Saving tensor n0_to_0_889.pt
[LOG] Saving tensor n1_to_1_889.pt
[LOG] Saving tensor n2_to_2_889.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n3_to_3_889.pt
[LOG] Saving tensor n4_to_4_889.pt
[LOG] Saving tensor n0_to_1_889.pt
[LOG] Saving tensor n0_to_2_889.pt
[LOG] Computing n0_to_4 for num 272
[LOG] Saving tensor n0_to_3_889.pt
[LOG] Saving tensor n0_to_4_889.pt
[LOG] Saving tensor n1_to_2_889.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_4 for num 965
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n1_to_3_889.pt
[LOG] Saving tensor n1_to_4_889.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n2_to_3_889.pt
[LOG] Saving tensor n2_to_4_889.pt
[LOG] Saving tensor n3_to_4_889.pt
[LOG] Saving tensor global_feature_889.pt
[LOG] Process 112: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n2_to_4 for num 504
[LOG] Computing n1_to_2 for num 272
[LOG] Computing n0_to_3 for num 544
[LOG] Computing n0_to_4 for num 544
[LOG] Computing n2_to_3 for num 965
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_3 for num 616
[LOG] Computing n1_to_2 for num 544
[LOG] Computing n3_to_3 (adjacency) for num 48
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n4_to_4 (coadjacency) for num 48
[LOG] Computing n0_to_1 for num 48
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 57: Calculating Neighbors
[LOG] Loading pickle file data_456.pickle
[LOG] Processing node features for num 456
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_4 for num 616
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing edge features for num 456
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_4 for num 504
[LOG] Global feature for num 504
[LOG] Global feature for num 504
[LOG] Saving tensor x_0_504.pt
[LOG] Saving tensor x_1_504.pt
[LOG] Computing n2_to_4 for num 965
[LOG] Computing n2_to_3 for num 616
[LOG] Saving tensor x_2_504.pt
[LOG] Saving tensor x_3_504.pt
[LOG] Saving tensor x_4_504.pt
[LOG] Saving tensor n0_to_0_504.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n1_to_1_504.pt
[LOG] Saving tensor n2_to_2_504.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n3_to_3_504.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n4_to_4_504.pt
[LOG] Saving tensor n0_to_1_504.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n1_to_3 for num 264
[LOG] Saving tensor n0_to_2_504.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n0_to_3_504.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n0_to_4_504.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n1_to_2_504.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Processing tetra features for num 456
[LOG] Saving tensor n1_to_3_504.pt
[LOG] Computing n0_to_2 for num 672
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n1_to_4_504.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_4 for num 264
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n2_to_3_504.pt
[LOG] Computing n3_to_4 for num 965
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n2_to_4_504.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Global feature for num 965
[LOG] Global feature for num 965
[LOG] Saving tensor x_0_965.pt
[LOG] Saving tensor n3_to_4_504.pt
[LOG] Saving tensor x_1_965.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1372 Tetrahedra.
    [LOG] Generated 48 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.645833333333334
    [LOG] Max number of nodes per cluster is 37 and the number is 34
[LOG] Saving tensor global_feature_504.pt
[LOG] Saving tensor x_2_965.pt
[LOG] Process 63: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n2_to_4 for num 616
[LOG] Saving tensor x_3_965.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor x_4_965.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n0_to_0_965.pt
[LOG] Computing n2_to_3 for num 264
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n1_to_1_965.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] We will select 245 edges and 1372 tetra
[LOG] Edges from tetra 0 and KDTree 1014 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n2_to_2_965.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n3_to_3_965.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n4_to_4_965.pt
[LOG] Saving tensor n0_to_1_965.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n0_to_2_965.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Processing cluster features for num 456
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n0_to_3_965.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n0_to_4_965.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n1_to_2_965.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n1_to_3_965.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n3_to_4 for num 616
[LOG] Saving tensor n1_to_4_965.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n2_to_3_965.pt
[LOG] Global feature for num 616
[LOG] Global feature for num 616
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor x_0_616.pt
[LOG] Saving tensor n2_to_4_965.pt
[LOG] Saving tensor x_1_616.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor x_2_616.pt
[LOG] Saving tensor n3_to_4_965.pt
[LOG] Saving tensor global_feature_965.pt
[LOG] Saving tensor x_3_616.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor x_4_616.pt
[LOG] Process 123: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_0_616.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n1_to_1_616.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n2_to_2_616.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_4 for num 264
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n0_to_3 for num 392
[LOG] Saving tensor n3_to_3_616.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing cluster features for num 456
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n4_to_4_616.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n0_to_1_616.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n0_to_2_616.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n0_to_3_616.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n0_to_4_616.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n0_to_4 for num 392
[LOG] Saving tensor n1_to_2_616.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n1_to_3_616.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n1_to_4_616.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n0_to_2 for num 48
[LOG] Computing n1_to_2 for num 392
[LOG] Saving tensor n2_to_3_616.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 456
[LOG] Computing n0_to_0 for num 456
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n2_to_4_616.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n3_to_4_616.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor global_feature_616.pt
[LOG] Process 77: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Process 118: Created combinatorial complex for file data_931.hdf5
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n3_to_4 for num 264
[LOG] Global feature for num 264
[LOG] Global feature for num 264
[LOG] Saving tensor x_0_264.pt
[LOG] Saving tensor x_1_264.pt
[LOG] Computing n1_to_3 for num 704
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor x_2_264.pt
[LOG] Saving tensor x_3_264.pt
[LOG] Saving tensor x_4_264.pt
[LOG] Saving tensor n0_to_0_264.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n1_to_1_264.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n2_to_2_264.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n3_to_3_264.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n4_to_4_264.pt
[LOG] Saving tensor n0_to_1_264.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n0_to_2_264.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n0_to_3_264.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n0_to_4_264.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n1_to_2_264.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Computing n1_to_4 for num 704
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n1_to_3_264.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n1_to_4_264.pt
[LOG] Saving tensor n2_to_3_264.pt
[LOG] Saving tensor n2_to_4_264.pt
[LOG] Saving tensor n3_to_4_264.pt
[LOG] Saving tensor global_feature_264.pt
[LOG] Process 33: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_3 for num 704
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_4 for num 704
[LOG] Computing n2_to_2 (adjacency) for num 440
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_3 (adjacency) for num 72
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n4_to_4 (coadjacency) for num 72
[LOG] Computing n0_to_1 for num 72
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_4 for num 704
[LOG] Global feature for num 704
[LOG] Process 118: Calculating Neighbors
[LOG] Loading pickle file data_931.pickle
[LOG] Processing node features for num 931
[LOG] Global feature for num 704
[LOG] Saving tensor x_0_704.pt
[LOG] Processing edge features for num 931
[LOG] Processing tetra features for num 931
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing cluster features for num 931
[LOG] Computing n1_to_1 for num 216
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 931
[LOG] Processing adjacency and incidence matrices for num 931
[LOG] Computing n0_to_0 for num 931
[LOG] Saving tensor x_1_704.pt
[LOG] Saving tensor x_2_704.pt
[LOG] Computing n1_to_1 for num 931
[LOG] Saving tensor x_3_704.pt
[LOG] Saving tensor x_4_704.pt
[LOG] Saving tensor n0_to_0_704.pt
[LOG] Saving tensor n1_to_1_704.pt
[LOG] Saving tensor n2_to_2_704.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n3_to_3_704.pt
[LOG] Computing n2_to_2 (adjacency) for num 931
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_3 (adjacency) for num 931
[LOG] Computing n4_to_4 (coadjacency) for num 931
[LOG] Computing n0_to_1 for num 931
[LOG] Computing n0_to_2 for num 931
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_1 for num 8
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_3 for num 931
[LOG] Computing n3_to_3 (adjacency) for num 560
[LOG] Computing n4_to_4 (coadjacency) for num 560
[LOG] Computing n0_to_4 for num 931
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 977 Tetrahedra.
    [LOG] Generated 33 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.757575757575758
    [LOG] Max number of nodes per cluster is 22 and the number is 8
[LOG] Computing n0_to_1 for num 560
[LOG] Computing n1_to_2 for num 931
[LOG] We will select 164 edges and 977 tetra
[LOG] Edges from tetra 0 and KDTree 373 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_3 for num 931
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_4 for num 931
[LOG] Computing n2_to_3 for num 931
[LOG] Computing n2_to_4 for num 931
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n3_to_4 for num 931
[LOG] Global feature for num 931
[LOG] Global feature for num 931
[LOG] Saving tensor x_0_931.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_2 (adjacency) for num 867
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n3_to_3 (adjacency) for num 176
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n4_to_4 (coadjacency) for num 176
[LOG] Computing n0_to_1 for num 176
[LOG] Computing n0_to_2 for num 72
[LOG] Calculating for cell ranks 4 and 4
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1353 Tetrahedra.
    [LOG] Generated 30 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 19.066666666666666
    [LOG] Max number of nodes per cluster is 104 and the number is 28
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] We will select 201 edges and 1353 tetra
[LOG] Edges from tetra 0 and KDTree 2228 with 0 edges in common.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_3 for num 784
[LOG] Computing n3_to_3 (adjacency) for num 480
[LOG] Computing n4_to_4 (coadjacency) for num 480
[LOG] Computing n0_to_1 for num 480
[LOG] Process 100: Created combinatorial complex for file data_801.hdf5
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n4_to_4_704.pt
[LOG] Computing n1_to_4 for num 784
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n0_to_1_704.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor x_1_931.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n0_to_2_704.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor x_2_931.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor x_3_931.pt
[LOG] Saving tensor n0_to_3_704.pt
[LOG] Saving tensor x_4_931.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n0_to_0_931.pt
[LOG] Saving tensor n0_to_4_704.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n1_to_1_931.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n1_to_2_704.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n2_to_2_931.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n1_to_3_704.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n1_to_4_704.pt
[LOG] Saving tensor n3_to_3_931.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n4_to_4_931.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n2_to_3_704.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n2_to_4_704.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n0_to_1_931.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n0_to_2_931.pt
[LOG] Saving tensor n3_to_4_704.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor global_feature_704.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n0_to_3_931.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Process 100: Calculating Neighbors
[LOG] Loading pickle file data_801.pickle
[LOG] Processing node features for num 801
[LOG] Processing edge features for num 801
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_3 for num 784
[LOG] Processing tetra features for num 801
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing cluster features for num 801
[LOG] Processing cluster features for num 801
[LOG] Computing n0_to_3 for num 672
[LOG] Processing adjacency and incidence matrices for num 801
[LOG] Computing n0_to_0 for num 801
[LOG] Computing n1_to_1 for num 801
[LOG] Process 88: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n0_to_4_931.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n1_to_2_931.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n2_to_2 (adjacency) for num 801
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n1_to_3_931.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_4 for num 672
[LOG] Saving tensor n1_to_4_931.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n2_to_3_931.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n2_to_4_931.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n3_to_4_931.pt
[LOG] Computing n3_to_3 (adjacency) for num 801
[LOG] Saving tensor global_feature_931.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n4_to_4 (coadjacency) for num 801
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Process 118: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_1 for num 801
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n0_to_3 for num 48
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Computing n0_to_2 for num 801
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n0_to_2 for num 560
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_2 for num 672
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_4 for num 48
[LOG] Computing n0_to_3 for num 801
[LOG] Computing n0_to_4 for num 801
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_2 for num 801
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_1 for num 456
[LOG] Computing n2_to_2 (adjacency) for num 874
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_4 for num 784
[LOG] Computing n1_to_3 for num 801
[LOG] Computing n1_to_4 for num 801
[LOG] Computing n1_to_2 for num 48
[LOG] Computing n2_to_3 for num 801
[LOG] Computing n2_to_4 for num 801
[LOG] Computing n3_to_4 for num 801
[LOG] Global feature for num 801
[LOG] Global feature for num 801
[LOG] Saving tensor x_0_801.pt
[LOG] Saving tensor x_1_801.pt
[LOG] Saving tensor x_2_801.pt
[LOG] Saving tensor x_3_801.pt
[LOG] Saving tensor x_4_801.pt
[LOG] Saving tensor n0_to_0_801.pt
[LOG] Saving tensor n1_to_1_801.pt
[LOG] Saving tensor n2_to_2_801.pt
[LOG] Saving tensor n3_to_3_801.pt
[LOG] Saving tensor n4_to_4_801.pt
[LOG] Saving tensor n0_to_1_801.pt
[LOG] Saving tensor n0_to_2_801.pt
[LOG] Saving tensor n0_to_3_801.pt
[LOG] Saving tensor n0_to_4_801.pt
[LOG] Saving tensor n1_to_2_801.pt
[LOG] Saving tensor n1_to_3_801.pt
[LOG] Saving tensor n1_to_4_801.pt
[LOG] Saving tensor n2_to_3_801.pt
[LOG] Saving tensor n2_to_4_801.pt
[LOG] Saving tensor n3_to_4_801.pt
[LOG] Saving tensor global_feature_801.pt
[LOG] Process 100: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_2 (adjacency) for num 958
[LOG] Computing n0_to_2 for num 176
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_2 (adjacency) for num 648
[LOG] Computing n1_to_3 for num 272
[LOG] Computing n3_to_4 for num 784
[LOG] Global feature for num 784
[LOG] Computing n1_to_4 for num 272
[LOG] Calculating for cell ranks 1 and 1
[LOG] Global feature for num 784
[LOG] Saving tensor x_0_784.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor x_1_784.pt
[LOG] Saving tensor x_2_784.pt
[LOG] Removed 0 subset clusters.
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2060 Tetrahedra.
    [LOG] Generated 63 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.285714285714286
    [LOG] Max number of nodes per cluster is 40 and the number is 61
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_2 for num 480
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_3 for num 272
[LOG] Saving tensor x_3_784.pt
[LOG] Saving tensor x_4_784.pt
[LOG] Saving tensor n0_to_0_784.pt
[LOG] Saving tensor n1_to_1_784.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n2_to_2_784.pt
[LOG] Process 10: Created combinatorial complex for file data_81.hdf5
[LOG] We will select 165 edges and 2060 tetra
[LOG] Edges from tetra 0 and KDTree 2244 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n3_to_3_784.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n4_to_4_784.pt
[LOG] Saving tensor n0_to_1_784.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n0_to_2_784.pt
[LOG] Saving tensor n0_to_3_784.pt
[LOG] Saving tensor n0_to_4_784.pt
[LOG] Saving tensor n1_to_2_784.pt
[LOG] Saving tensor n1_to_3_784.pt
[LOG] Saving tensor n1_to_4_784.pt
[LOG] Saving tensor n2_to_3_784.pt
[LOG] Saving tensor n2_to_4_784.pt
[LOG] Saving tensor n3_to_4_784.pt
[LOG] Saving tensor global_feature_784.pt
[LOG] Process 98: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 10: Calculating Neighbors
[LOG] Loading pickle file data_81.pickle
[LOG] Processing node features for num 81
[LOG] Processing edge features for num 81
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing tetra features for num 81
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing cluster features for num 81
[LOG] Processing cluster features for num 81
[LOG] Processing adjacency and incidence matrices for num 81
[LOG] Computing n0_to_0 for num 81
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_1 for num 81
[LOG] Computing n2_to_4 for num 272
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 488
[LOG] Computing n2_to_2 (adjacency) for num 81
[LOG] Computing n4_to_4 (coadjacency) for num 488
[LOG] Computing n0_to_1 for num 488
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n0_to_3 for num 72
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 81
[LOG] Computing n4_to_4 (coadjacency) for num 81
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n0_to_1 for num 81
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n0_to_4 for num 72
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_2 for num 81
[LOG] Computing n1_to_2 for num 72
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 963 Tetrahedra.
    [LOG] Generated 31 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.225806451612904
    [LOG] Max number of nodes per cluster is 24 and the number is 14
[LOG] Computing n3_to_4 for num 272
[LOG] Global feature for num 272
[LOG] Global feature for num 272
[LOG] Saving tensor x_0_272.pt
[LOG] We will select 151 edges and 963 tetra
[LOG] Edges from tetra 0 and KDTree 151 with 0 edges in common.
[LOG] Saving tensor x_1_272.pt
[LOG] Saving tensor x_2_272.pt
[LOG] Saving tensor x_3_272.pt
[LOG] Saving tensor x_4_272.pt
[LOG] Saving tensor n0_to_0_272.pt
[LOG] Saving tensor n1_to_1_272.pt
[LOG] Saving tensor n2_to_2_272.pt
[LOG] Saving tensor n3_to_3_272.pt
[LOG] Saving tensor n4_to_4_272.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n0_to_1_272.pt
[LOG] Saving tensor n0_to_2_272.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n0_to_3_272.pt
[LOG] Saving tensor n0_to_4_272.pt
[LOG] Saving tensor n1_to_2_272.pt
[LOG] Saving tensor n1_to_3_272.pt
[LOG] Saving tensor n1_to_4_272.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n2_to_3_272.pt
[LOG] Saving tensor n2_to_4_272.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n3_to_4_272.pt
[LOG] Saving tensor global_feature_272.pt
[LOG] Process 34: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_3 for num 81
[LOG] Computing n0_to_4 for num 81
[LOG] Computing n1_to_2 for num 81
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_3 for num 81
[LOG] Computing n1_to_4 for num 81
[LOG] Computing n2_to_3 for num 81
[LOG] Computing n2_to_4 for num 81
[LOG] Removed 2 subset clusters.
[LOG] Computing n3_to_4 for num 81
[LOG] Global feature for num 81
[LOG] Global feature for num 81
[LOG] Saving tensor x_0_81.pt
[LOG] Saving tensor x_1_81.pt
[LOG] Saving tensor x_2_81.pt
[LOG] Saving tensor x_3_81.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor x_4_81.pt
[LOG] Process 21: Created combinatorial complex for file data_169.hdf5
[LOG] Saving tensor n0_to_0_81.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n1_to_1_81.pt
[LOG] Saving tensor n2_to_2_81.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n3_to_3_81.pt
[LOG] Process 21: Calculating Neighbors
[LOG] Loading pickle file data_169.pickle
[LOG] Processing node features for num 169
[LOG] Saving tensor n4_to_4_81.pt
[LOG] Processing edge features for num 169
[LOG] Saving tensor n0_to_1_81.pt
[LOG] Saving tensor n0_to_2_81.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n0_to_3_81.pt
[LOG] Processing tetra features for num 169
[LOG] Saving tensor n0_to_4_81.pt
[LOG] Saving tensor n1_to_2_81.pt
[LOG] Saving tensor n1_to_3_81.pt
[LOG] Computing n0_to_2 for num 488
[LOG] Saving tensor n1_to_4_81.pt
[LOG] Process 51: Created combinatorial complex for file data_409.hdf5
[LOG] Saving tensor n2_to_3_81.pt
[LOG] Saving tensor n2_to_4_81.pt
[LOG] Saving tensor n3_to_4_81.pt
[LOG] Processing cluster features for num 169
[LOG] Saving tensor global_feature_81.pt
[LOG] Processing cluster features for num 169
[LOG] Processing adjacency and incidence matrices for num 169
[LOG] Computing n0_to_0 for num 169
[LOG] Computing n1_to_1 for num 169
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_2 (adjacency) for num 169
[LOG] Process 10: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n3_to_3 (adjacency) for num 169
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n4_to_4 (coadjacency) for num 169
[LOG] Computing n0_to_1 for num 169
[LOG] Computing n0_to_2 for num 169
[LOG] Process 51: Calculating Neighbors
[LOG] Loading pickle file data_409.pickle
[LOG] Processing node features for num 409
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing edge features for num 409
[LOG] Processing tetra features for num 409
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_3 for num 169
[LOG] Computing n0_to_4 for num 169
[LOG] Computing n1_to_2 for num 169
[LOG] Processing cluster features for num 409
[LOG] Processing cluster features for num 409
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_3 for num 169
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_4 for num 169
[LOG] Computing n2_to_3 for num 169
[LOG] Processing adjacency and incidence matrices for num 409
[LOG] Computing n0_to_0 for num 409
[LOG] Computing n2_to_4 for num 169
[LOG] Computing n3_to_4 for num 169
[LOG] Global feature for num 169
[LOG] Global feature for num 169
[LOG] Saving tensor x_0_169.pt
[LOG] Saving tensor x_1_169.pt
[LOG] Saving tensor x_2_169.pt
[LOG] Saving tensor x_3_169.pt
[LOG] Saving tensor x_4_169.pt
[LOG] Computing n1_to_1 for num 409
[LOG] Computing n1_to_3 for num 544
[LOG] Computing n2_to_2 (adjacency) for num 409
[LOG] Saving tensor n0_to_0_169.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n1_to_1_169.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n2_to_2_169.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n3_to_3_169.pt
[LOG] Saving tensor n4_to_4_169.pt
[LOG] Saving tensor n0_to_1_169.pt
[LOG] Saving tensor n0_to_2_169.pt
[LOG] Saving tensor n0_to_3_169.pt
[LOG] Saving tensor n0_to_4_169.pt
[LOG] Saving tensor n1_to_2_169.pt
[LOG] Computing n1_to_4 for num 544
[LOG] Saving tensor n1_to_3_169.pt
[LOG] Saving tensor n1_to_4_169.pt
[LOG] Saving tensor n2_to_3_169.pt
[LOG] Saving tensor n2_to_4_169.pt
[LOG] Saving tensor n3_to_4_169.pt
[LOG] Saving tensor global_feature_169.pt
[LOG] Process 21: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] GENERATED TETRA
[LOG] Computing n2_to_3 for num 544
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n3_to_3 (adjacency) for num 409
[LOG] Computing n4_to_4 (coadjacency) for num 409
[LOG] Computing n0_to_3 for num 560
[LOG] Computing n0_to_1 for num 409
[LOG] Computing n1_to_3 for num 392
[LOG] Computing n0_to_2 for num 409
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_4 for num 560
[LOG] Computing n2_to_4 for num 544
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_4 for num 392
[LOG] Computing n1_to_2 for num 560
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_3 for num 392
[LOG] Computing n3_to_4 for num 544
[LOG] Global feature for num 544
[LOG] Global feature for num 544
[LOG] Saving tensor x_0_544.pt
[LOG] Saving tensor x_1_544.pt
[LOG] Saving tensor x_2_544.pt
[LOG] Saving tensor x_3_544.pt
[LOG] Saving tensor x_4_544.pt
[LOG] Saving tensor n0_to_0_544.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor n1_to_1_544.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 2

    [LOG] We Currently have 1577 Tetrahedra.
    [LOG] Generated 41 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.658536585365853
    [LOG] Max number of nodes per cluster is 40 and the number is 9
[LOG] Saving tensor n2_to_2_544.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n3_to_3_544.pt
[LOG] Saving tensor n4_to_4_544.pt
[LOG] Saving tensor n0_to_1_544.pt
[LOG] Saving tensor n0_to_2_544.pt
[LOG] We will select 279 edges and 1577 tetra
[LOG] Edges from tetra 0 and KDTree 630 with 0 edges in common.
[LOG] Saving tensor n0_to_3_544.pt
[LOG] Saving tensor n0_to_4_544.pt
[LOG] Saving tensor n1_to_2_544.pt
[LOG] Saving tensor n1_to_3_544.pt
[LOG] Saving tensor n1_to_4_544.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n2_to_3_544.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n2_to_4_544.pt
[LOG] Saving tensor n3_to_4_544.pt
[LOG] Saving tensor global_feature_544.pt
[LOG] Process 68: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_4 for num 392
[LOG] Computing n0_to_3 for num 409
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_4 for num 409
[LOG] Computing n1_to_2 for num 409
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_3 for num 176
[LOG] Computing n1_to_3 for num 409
[LOG] Computing n1_to_4 for num 409
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_3 for num 409
[LOG] Computing n0_to_4 for num 176
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_4 for num 409
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n3_to_4 for num 409
[LOG] Calculating for cell ranks 0 and 1
[LOG] Global feature for num 409
[LOG] Global feature for num 409
[LOG] Saving tensor x_0_409.pt
[LOG] Saving tensor x_1_409.pt
[LOG] Saving tensor x_2_409.pt
[LOG] Saving tensor x_3_409.pt
[LOG] Saving tensor x_4_409.pt
[LOG] Saving tensor n0_to_0_409.pt
[LOG] Saving tensor n1_to_1_409.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n2_to_2_409.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n3_to_3_409.pt
[LOG] Computing n1_to_2 for num 176
[LOG] Saving tensor n4_to_4_409.pt
[LOG] Saving tensor n0_to_1_409.pt
[LOG] Computing n3_to_4 for num 392
[LOG] Global feature for num 392
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Global feature for num 392
[LOG] Saving tensor x_0_392.pt
[LOG] Saving tensor n0_to_2_409.pt
[LOG] Saving tensor x_1_392.pt
[LOG] Saving tensor n0_to_3_409.pt
[LOG] Saving tensor x_2_392.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor x_3_392.pt
[LOG] Saving tensor n0_to_4_409.pt
[LOG] Saving tensor x_4_392.pt
[LOG] Saving tensor n1_to_2_409.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n0_to_0_392.pt
[LOG] Saving tensor n1_to_3_409.pt
[LOG] Saving tensor n1_to_1_392.pt
[LOG] Saving tensor n1_to_4_409.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_3 for num 480
[LOG] Saving tensor n2_to_3_409.pt
[LOG] Saving tensor n2_to_2_392.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n2_to_4_409.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n3_to_4_409.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor global_feature_409.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Process 51: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n3_to_3_392.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n4_to_4_392.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n0_to_1_392.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n0_to_2_392.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n0_to_3_392.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1524 Tetrahedra.
    [LOG] Generated 51 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.784313725490197
    [LOG] Max number of nodes per cluster is 83 and the number is 38
[LOG] Saving tensor n0_to_4_392.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n1_to_2_392.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n1_to_3_392.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n0_to_4 for num 480
[LOG] Saving tensor n1_to_4_392.pt
[LOG] Saving tensor n2_to_3_392.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n2_to_4_392.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n3_to_4_392.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor global_feature_392.pt
[LOG] Process 49: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 986
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Process 108: Created combinatorial complex for file data_861.hdf5
[LOG] We will select 249 edges and 1524 tetra
[LOG] Edges from tetra 0 and KDTree 1102 with 0 edges in common.
[LOG] Computing n1_to_2 for num 480
[LOG] Computing n3_to_3 (adjacency) for num 440
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n4_to_4 (coadjacency) for num 440
[LOG] Computing n0_to_1 for num 440
[LOG] Process 108: Calculating Neighbors
[LOG] Loading pickle file data_861.pickle
[LOG] Processing node features for num 861
[LOG] Processing edge features for num 861
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing tetra features for num 861
[LOG] Processing cluster features for num 861
[LOG] Processing cluster features for num 861
[LOG] Processing adjacency and incidence matrices for num 861
[LOG] Computing n0_to_0 for num 861
[LOG] Computing n1_to_1 for num 861
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_2 (adjacency) for num 568
[LOG] Computing n2_to_2 (adjacency) for num 861
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n3_to_3 (adjacency) for num 861
[LOG] Computing n4_to_4 (coadjacency) for num 861
[LOG] Computing n0_to_1 for num 861
[LOG] Process 76: Created combinatorial complex for file data_609.hdf5
[LOG] Computing n0_to_2 for num 861
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 76: Calculating Neighbors
[LOG] Loading pickle file data_609.pickle
[LOG] Processing node features for num 609
[LOG] Processing edge features for num 609
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing tetra features for num 609
[LOG] Computing n1_to_3 for num 672
[LOG] Processing cluster features for num 609
[LOG] Processing cluster features for num 609
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_3 for num 861
[LOG] Processing adjacency and incidence matrices for num 609
[LOG] Computing n0_to_0 for num 609
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_4 for num 861
[LOG] Computing n1_to_2 for num 861
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_4 for num 672
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_1 for num 609
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_2 (adjacency) for num 328
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_3 for num 861
[LOG] Computing n1_to_4 for num 861
[LOG] Computing n2_to_3 for num 861
[LOG] Computing n2_to_3 for num 672
[LOG] Computing n2_to_2 (adjacency) for num 609
[LOG] Computing n2_to_4 for num 861
[LOG] Computing n3_to_4 for num 861
[LOG] Calculating for cell ranks 0 and 4
[LOG] Global feature for num 861
[LOG] Global feature for num 861
[LOG] Saving tensor x_0_861.pt
[LOG] Saving tensor x_1_861.pt
[LOG] Saving tensor x_2_861.pt
[LOG] Saving tensor x_3_861.pt
[LOG] Saving tensor x_4_861.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_3 (adjacency) for num 609
[LOG] Computing n4_to_4 (coadjacency) for num 609
[LOG] Computing n0_to_1 for num 609
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n0_to_0_861.pt
[LOG] Saving tensor n1_to_1_861.pt
[LOG] Saving tensor n2_to_2_861.pt
[LOG] Saving tensor n3_to_3_861.pt
[LOG] Saving tensor n4_to_4_861.pt
[LOG] Saving tensor n0_to_1_861.pt
[LOG] Saving tensor n0_to_2_861.pt
[LOG] Saving tensor n0_to_3_861.pt
[LOG] Saving tensor n0_to_4_861.pt
[LOG] Saving tensor n1_to_2_861.pt
[LOG] Computing n0_to_2 for num 609
[LOG] Saving tensor n1_to_3_861.pt
[LOG] Saving tensor n1_to_4_861.pt
[LOG] Saving tensor n2_to_3_861.pt
[LOG] Saving tensor n2_to_4_861.pt
[LOG] Saving tensor n3_to_4_861.pt
[LOG] Saving tensor global_feature_861.pt
[LOG] Process 108: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_3 (adjacency) for num 648
[LOG] Computing n0_to_3 for num 488
[LOG] Computing n4_to_4 (coadjacency) for num 648
[LOG] Computing n0_to_1 for num 648
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_2 for num 440
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_4 for num 672
[LOG] Computing n0_to_4 for num 488
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n1_to_2 for num 488
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_3 for num 609
[LOG] GENERATED TETRA
[LOG] Computing n0_to_4 for num 609
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_2 for num 609
[LOG] Computing n3_to_3 (adjacency) for num 867
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n4_to_4 (coadjacency) for num 867
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_4 for num 672
[LOG] Computing n0_to_1 for num 867
[LOG] Global feature for num 672
[LOG] Global feature for num 672
[LOG] Saving tensor x_0_672.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor x_1_672.pt
[LOG] Saving tensor x_2_672.pt
[LOG] Saving tensor x_3_672.pt
[LOG] Saving tensor x_4_672.pt
[LOG] Saving tensor n0_to_0_672.pt
[LOG] Saving tensor n1_to_1_672.pt
[LOG] Saving tensor n2_to_2_672.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Computing n1_to_3 for num 609
[LOG] Computing n1_to_4 for num 609
[LOG] Computing n2_to_3 for num 609
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n3_to_3_672.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n2_to_4 for num 609
[LOG] Saving tensor n4_to_4_672.pt
[LOG] Saving tensor n0_to_1_672.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n3_to_4 for num 609
[LOG] Computing n3_to_3 (adjacency) for num 958
[LOG] Global feature for num 609
[LOG] Global feature for num 609
[LOG] Saving tensor x_0_609.pt
[LOG] Saving tensor x_1_609.pt
[LOG] Saving tensor x_2_609.pt
[LOG] Saving tensor x_3_609.pt
[LOG] Saving tensor x_4_609.pt
[LOG] Saving tensor n0_to_0_609.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n0_to_2_672.pt
[LOG] Saving tensor n1_to_1_609.pt
[LOG] Computing n4_to_4 (coadjacency) for num 958
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n2_to_2_609.pt
[LOG] Saving tensor n0_to_3_672.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n3_to_3_609.pt
[LOG] Computing n0_to_1 for num 958
[LOG] Saving tensor n0_to_4_672.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 951
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n4_to_4_609.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n3_to_3 (adjacency) for num 874
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n4_to_4 (coadjacency) for num 874
[LOG] Computing n0_to_1 for num 874
[LOG] Saving tensor n1_to_2_672.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n0_to_1_609.pt
[LOG] Computing n1_to_3 for num 48
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n1_to_3_672.pt
[LOG] Computing n1_to_4 for num 48
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 940 Tetrahedra.
    [LOG] Generated 22 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.727272727272727
    [LOG] Max number of nodes per cluster is 68 and the number is 21
[LOG] Saving tensor n0_to_2_609.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] We will select 96 edges and 940 tetra
[LOG] Edges from tetra 0 and KDTree 1074 with 0 edges in common.
[LOG] Computing n2_to_3 for num 48
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n1_to_4_672.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1401 Tetrahedra.
    [LOG] Generated 43 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.697674418604652
    [LOG] Max number of nodes per cluster is 74 and the number is 13
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n0_to_3_609.pt
[LOG] We will select 753 edges and 1401 tetra
[LOG] Edges from tetra 0 and KDTree 1958 with 0 edges in common.
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n2_to_3_672.pt
[LOG] Saving tensor n0_to_4_609.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n2_to_4_672.pt
[LOG] Saving tensor n1_to_2_609.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n1_to_3_609.pt
[LOG] Saving tensor n3_to_4_672.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_2 for num 648
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n1_to_4_609.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n2_to_3_609.pt
[LOG] Saving tensor global_feature_672.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n2_to_4_609.pt
[LOG] Process 84: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n3_to_4_609.pt
[LOG] Process 97: Created combinatorial complex for file data_777.hdf5
[LOG] Saving tensor global_feature_609.pt
[LOG] Process 76: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n2_to_4 for num 48
[LOG] Computing n2_to_2 (adjacency) for num 288
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 97: Calculating Neighbors
[LOG] Loading pickle file data_777.pickle
[LOG] Processing node features for num 777
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing edge features for num 777
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing tetra features for num 777
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing cluster features for num 777
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Processing cluster features for num 777
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] GENERATED TETRA
[LOG] Processing adjacency and incidence matrices for num 777
[LOG] Computing n0_to_0 for num 777
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n0_to_2 for num 867
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_1 for num 777
[LOG] Computing n2_to_2 (adjacency) for num 777
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n3_to_3 (adjacency) for num 777
[LOG] Removed 0 subset clusters.
[LOG] Computing n4_to_4 (coadjacency) for num 777
[LOG] Computing n0_to_1 for num 777
[LOG] Computing n0_to_2 for num 777
[LOG] Computing n3_to_4 for num 48
[LOG] Global feature for num 48
[LOG] Global feature for num 48
[LOG] Saving tensor x_0_48.pt
[LOG] Saving tensor x_1_48.pt
[LOG] Saving tensor x_2_48.pt
[LOG] Saving tensor x_3_48.pt
[LOG] Saving tensor x_4_48.pt
[LOG] Saving tensor n0_to_0_48.pt
[LOG] Computing n0_to_3 for num 777
[LOG] Computing n0_to_4 for num 777
[LOG] Process 26: Created combinatorial complex for file data_209.hdf5
[LOG] Computing n1_to_2 for num 777
[LOG] Computing n1_to_3 for num 777
[LOG] Computing n1_to_4 for num 777
[LOG] Computing n2_to_3 for num 777
[LOG] Computing n2_to_4 for num 777
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_4 for num 777
[LOG] Global feature for num 777
[LOG] Global feature for num 777
[LOG] Saving tensor x_0_777.pt
[LOG] Saving tensor n1_to_1_48.pt
[LOG] Computing n0_to_2 for num 958
[LOG] Saving tensor x_1_777.pt
[LOG] Saving tensor x_2_777.pt
[LOG] Saving tensor x_3_777.pt
[LOG] Saving tensor x_4_777.pt
[LOG] Saving tensor n2_to_2_48.pt
[LOG] Saving tensor n0_to_0_777.pt
[LOG] Saving tensor n1_to_1_777.pt
[LOG] Saving tensor n2_to_2_777.pt
[LOG] Saving tensor n3_to_3_777.pt
[LOG] Saving tensor n4_to_4_777.pt
[LOG] Saving tensor n0_to_1_777.pt
[LOG] Saving tensor n0_to_2_777.pt
[LOG] Saving tensor n0_to_3_777.pt
[LOG] Saving tensor n0_to_4_777.pt
[LOG] Saving tensor n1_to_2_777.pt
[LOG] Saving tensor n1_to_3_777.pt
[LOG] Saving tensor n1_to_4_777.pt
[LOG] Saving tensor n2_to_3_777.pt
[LOG] Saving tensor n2_to_4_777.pt
[LOG] Saving tensor n3_to_4_777.pt
[LOG] Saving tensor global_feature_777.pt
[LOG] Process 97: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n3_to_3_48.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n4_to_4_48.pt
[LOG] Saving tensor n0_to_1_48.pt
[LOG] Saving tensor n0_to_2_48.pt
[LOG] Saving tensor n0_to_3_48.pt
[LOG] Saving tensor n0_to_4_48.pt
[LOG] Saving tensor n1_to_2_48.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n1_to_3_48.pt
[LOG] Saving tensor n1_to_4_48.pt
[LOG] Process 26: Calculating Neighbors
[LOG] Loading pickle file data_209.pickle
[LOG] Processing node features for num 209
[LOG] Saving tensor n2_to_3_48.pt
[LOG] Saving tensor n2_to_4_48.pt
[LOG] Saving tensor n3_to_4_48.pt
[LOG] Processing edge features for num 209
[LOG] Saving tensor global_feature_48.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing tetra features for num 209
[LOG] Processing cluster features for num 209
[LOG] Processing cluster features for num 209
[LOG] Computing n0_to_2 for num 874
[LOG] Process 6: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing adjacency and incidence matrices for num 209
[LOG] Computing n0_to_0 for num 209
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1298 Tetrahedra.
    [LOG] Generated 54 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.87037037037037
    [LOG] Max number of nodes per cluster is 55 and the number is 50
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_1 for num 209
[LOG] Calculating for cell ranks 0 and 2
[LOG] We will select 616 edges and 1298 tetra
[LOG] Edges from tetra 0 and KDTree 1715 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n2_to_2 (adjacency) for num 209
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 964 Tetrahedra.
    [LOG] Generated 30 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.733333333333333
    [LOG] Max number of nodes per cluster is 35 and the number is 29
[LOG] Computing n3_to_3 (adjacency) for num 209
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Computing n4_to_4 (coadjacency) for num 209
[LOG] Computing n0_to_1 for num 209
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] We will select 100 edges and 964 tetra
[LOG] Edges from tetra 0 and KDTree 100 with 0 edges in common.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n0_to_2 for num 209
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n0_to_3 for num 440
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n0_to_4 for num 440
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 89: Created combinatorial complex for file data_713.hdf5
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Computing n1_to_2 for num 440
[LOG] Computing n1_to_3 for num 72
[LOG] Computing n0_to_3 for num 209
[LOG] Computing n0_to_4 for num 209
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 104: Created combinatorial complex for file data_833.hdf5
[LOG] Computing n1_to_2 for num 209
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Process 89: Calculating Neighbors
[LOG] Loading pickle file data_713.pickle
[LOG] Processing node features for num 713
[LOG] Processing edge features for num 713
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_3 for num 560
[LOG] Processing tetra features for num 713
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_4 for num 72
[LOG] Processing cluster features for num 713
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 713
[LOG] Processing adjacency and incidence matrices for num 713
[LOG] Computing n0_to_0 for num 713
[LOG] Computing n1_to_1 for num 713
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_2 (adjacency) for num 713
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_3 (adjacency) for num 713
[LOG] Computing n4_to_4 (coadjacency) for num 713
[LOG] Computing n0_to_1 for num 713
[LOG] Computing n0_to_2 for num 713
[LOG] Computing n1_to_4 for num 560
[LOG] Process 104: Calculating Neighbors
[LOG] Loading pickle file data_833.pickle
[LOG] Processing node features for num 833
[LOG] Processing edge features for num 833
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_3 for num 209
[LOG] Computing n2_to_3 for num 72
[LOG] Processing tetra features for num 833
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n1_to_4 for num 209
[LOG] Computing n2_to_3 for num 209
[LOG] Computing n0_to_3 for num 713
[LOG] Computing n0_to_4 for num 713
[LOG] Processing cluster features for num 833
[LOG] Computing n1_to_2 for num 713
[LOG] Computing n2_to_4 for num 209
[LOG] Processing cluster features for num 833
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_3 for num 713
[LOG] Computing n3_to_4 for num 209
[LOG] Global feature for num 209
[LOG] Computing n1_to_4 for num 713
[LOG] Global feature for num 209
[LOG] Saving tensor x_0_209.pt
[LOG] Computing n2_to_3 for num 713
[LOG] Processing adjacency and incidence matrices for num 833
[LOG] Computing n0_to_0 for num 833
[LOG] Computing n2_to_4 for num 713
[LOG] Computing n3_to_4 for num 713
[LOG] Global feature for num 713
[LOG] Global feature for num 713
[LOG] Saving tensor x_0_713.pt
[LOG] Computing n2_to_3 for num 560
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n2_to_4 for num 72
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_1 for num 833
[LOG] Saving tensor x_1_209.pt
[LOG] Saving tensor x_1_713.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Computing n1_to_3 for num 176
[LOG] Saving tensor x_2_209.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_2 (adjacency) for num 696
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_3 for num 648
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_2 (adjacency) for num 528
[LOG] Computing n3_to_4 for num 72
[LOG] Global feature for num 72
[LOG] Global feature for num 72
[LOG] Saving tensor x_0_72.pt
[LOG] Saving tensor x_2_713.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n1_to_4 for num 176
[LOG] Computing n0_to_4 for num 648
[LOG] Computing n2_to_4 for num 560
[LOG] Computing n2_to_2 (adjacency) for num 833
[LOG] Saving tensor x_3_209.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor x_1_72.pt
[LOG] Saving tensor x_3_713.pt
[LOG] Saving tensor x_4_209.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n1_to_2 for num 648
[LOG] Saving tensor x_2_72.pt
[LOG] Saving tensor n0_to_0_209.pt
[LOG] Saving tensor x_4_713.pt
[LOG] Saving tensor n0_to_0_713.pt
[LOG] Saving tensor n1_to_1_209.pt
[LOG] Saving tensor x_3_72.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n2_to_3 for num 176
[LOG] Saving tensor x_4_72.pt
[LOG] Saving tensor n1_to_1_713.pt
[LOG] Saving tensor n2_to_2_209.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n0_to_0_72.pt
[LOG] Saving tensor n2_to_2_713.pt
[LOG] Computing n3_to_3 (adjacency) for num 833
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n4_to_4 (coadjacency) for num 833
[LOG] Saving tensor n3_to_3_209.pt
[LOG] Computing n0_to_1 for num 833
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n4_to_4_209.pt
[LOG] Saving tensor n1_to_1_72.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n3_to_3_713.pt
[LOG] Saving tensor n0_to_1_209.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n2_to_2_72.pt
[LOG] Computing n1_to_3 for num 480
[LOG] Saving tensor n4_to_4_713.pt
[LOG] Saving tensor n0_to_2_209.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n0_to_1_713.pt
[LOG] Saving tensor n0_to_3_209.pt
[LOG] Saving tensor n0_to_2_713.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n0_to_4_209.pt
[LOG] Saving tensor n0_to_3_713.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_2 for num 833
[LOG] Saving tensor n3_to_3_72.pt
[LOG] Saving tensor n1_to_2_209.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_4 for num 480
[LOG] Saving tensor n0_to_4_713.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n4_to_4_72.pt
[LOG] Saving tensor n1_to_3_209.pt
[LOG] Saving tensor n1_to_2_713.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n0_to_1_72.pt
[LOG] Saving tensor n1_to_4_209.pt
[LOG] Saving tensor n1_to_3_713.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n0_to_2_72.pt
[LOG] Saving tensor n2_to_3_209.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n1_to_4_713.pt
[LOG] Saving tensor n2_to_4_209.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n2_to_3_713.pt
[LOG] Saving tensor n0_to_3_72.pt
[LOG] Saving tensor n3_to_4_209.pt
[LOG] Saving tensor n2_to_4_713.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_4 for num 560
[LOG] Global feature for num 560
[LOG] Global feature for num 560
[LOG] Saving tensor x_0_560.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor global_feature_209.pt
[LOG] Saving tensor n3_to_4_713.pt
[LOG] Saving tensor n0_to_4_72.pt
[LOG] Process 26: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor global_feature_713.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor x_1_560.pt
[LOG] Saving tensor n1_to_2_72.pt
[LOG] Process 89: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n2_to_3 for num 480
[LOG] Computing n2_to_4 for num 176
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor x_2_560.pt
[LOG] Saving tensor n1_to_3_72.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor x_3_560.pt
[LOG] Saving tensor n1_to_4_72.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor x_4_560.pt
[LOG] Saving tensor n2_to_3_72.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n0_to_0_560.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n2_to_4_72.pt
[LOG] Saving tensor n1_to_1_560.pt
[LOG] Saving tensor n3_to_4_72.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n2_to_2_560.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor global_feature_72.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Process 9: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n3_to_3_560.pt
[LOG] Computing n0_to_3 for num 833
[LOG] Saving tensor n4_to_4_560.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_4 for num 833
[LOG] Saving tensor n0_to_1_560.pt
[LOG] Saving tensor n0_to_2_560.pt
[LOG] Saving tensor n0_to_3_560.pt
[LOG] Saving tensor n0_to_4_560.pt
[LOG] Saving tensor n1_to_2_560.pt
[LOG] Computing n1_to_2 for num 833
[LOG] Saving tensor n1_to_3_560.pt
[LOG] Saving tensor n1_to_4_560.pt
[LOG] Saving tensor n2_to_3_560.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n2_to_4_560.pt
[LOG] Saving tensor n3_to_4_560.pt
[LOG] Saving tensor global_feature_560.pt
[LOG] Process 70: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_4 for num 480
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_4 for num 176
[LOG] Computing n0_to_3 for num 867
[LOG] Computing n0_to_3 for num 958
[LOG] Global feature for num 176
[LOG] Calculating for cell ranks 2 and 2
[LOG] Global feature for num 176
[LOG] Saving tensor x_0_176.pt
[LOG] Computing n1_to_3 for num 833
[LOG] Computing n1_to_4 for num 833
[LOG] Computing n0_to_4 for num 958
[LOG] Computing n2_to_3 for num 833
[LOG] Computing n0_to_4 for num 867
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_4 for num 833
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor x_1_176.pt
[LOG] Saving tensor x_2_176.pt
[LOG] Computing n3_to_4 for num 833
[LOG] Saving tensor x_3_176.pt
[LOG] Global feature for num 833
[LOG] Global feature for num 833
[LOG] Saving tensor x_0_833.pt
[LOG] Saving tensor x_4_176.pt
[LOG] Saving tensor x_1_833.pt
[LOG] Saving tensor x_2_833.pt
[LOG] Saving tensor n0_to_0_176.pt
[LOG] Saving tensor x_3_833.pt
[LOG] Saving tensor x_4_833.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n0_to_0_833.pt
[LOG] Saving tensor n1_to_1_176.pt
[LOG] Saving tensor n1_to_1_833.pt
[LOG] Saving tensor n2_to_2_833.pt
[LOG] Saving tensor n2_to_2_176.pt
[LOG] Saving tensor n3_to_3_833.pt
[LOG] Saving tensor n4_to_4_833.pt
[LOG] Saving tensor n0_to_1_833.pt
[LOG] Saving tensor n0_to_2_833.pt
[LOG] Computing n1_to_2 for num 958
[LOG] Saving tensor n0_to_3_833.pt
[LOG] Saving tensor n0_to_4_833.pt
[LOG] Computing n1_to_2 for num 867
[LOG] Saving tensor n1_to_2_833.pt
[LOG] Saving tensor n3_to_3_176.pt
[LOG] Saving tensor n1_to_3_833.pt
[LOG] Saving tensor n4_to_4_176.pt
[LOG] Saving tensor n1_to_4_833.pt
[LOG] Saving tensor n0_to_1_176.pt
[LOG] Saving tensor n2_to_3_833.pt
[LOG] Saving tensor n2_to_4_833.pt
[LOG] Saving tensor n0_to_2_176.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n3_to_4_833.pt
[LOG] Saving tensor global_feature_833.pt
[LOG] Saving tensor n0_to_3_176.pt
[LOG] Process 104: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_4_176.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n1_to_2_176.pt
[LOG] Saving tensor n1_to_3_176.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n1_to_4_176.pt
[LOG] Saving tensor n2_to_3_176.pt
[LOG] Saving tensor n2_to_4_176.pt
[LOG] Saving tensor n3_to_4_176.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1065 Tetrahedra.
    [LOG] Generated 27 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.407407407407407
    [LOG] Max number of nodes per cluster is 71 and the number is 7
[LOG] Saving tensor global_feature_176.pt
[LOG] Process 22: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] We will select 217 edges and 1065 tetra
[LOG] Edges from tetra 0 and KDTree 906 with 0 edges in common.
[LOG] Computing n3_to_4 for num 480
[LOG] Calculating for cell ranks 0 and 4
[LOG] Global feature for num 480
[LOG] Global feature for num 480
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor x_0_480.pt
[LOG] Saving tensor x_1_480.pt
[LOG] Saving tensor x_2_480.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor x_3_480.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor x_4_480.pt
[LOG] Saving tensor n0_to_0_480.pt
[LOG] Saving tensor n1_to_1_480.pt
[LOG] Computing n0_to_3 for num 874
[LOG] Saving tensor n2_to_2_480.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_2 (adjacency) for num 993
[LOG] Computing n3_to_3 (adjacency) for num 328
[LOG] Computing n4_to_4 (coadjacency) for num 328
[LOG] Saving tensor n3_to_3_480.pt
[LOG] Computing n0_to_1 for num 328
[LOG] Saving tensor n4_to_4_480.pt
[LOG] Saving tensor n0_to_1_480.pt
[LOG] Saving tensor n0_to_2_480.pt
[LOG] Saving tensor n0_to_3_480.pt
[LOG] Saving tensor n0_to_4_480.pt
[LOG] Computing n0_to_4 for num 874
[LOG] Saving tensor n1_to_2_480.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n1_to_3_480.pt
[LOG] Saving tensor n1_to_4_480.pt
[LOG] Saving tensor n2_to_3_480.pt
[LOG] Saving tensor n2_to_4_480.pt
[LOG] Saving tensor n3_to_4_480.pt
[LOG] Saving tensor global_feature_480.pt
[LOG] Process 60: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1730 Tetrahedra.
    [LOG] Generated 45 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.688888888888888
    [LOG] Max number of nodes per cluster is 32 and the number is 23
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_2 for num 874
[LOG] Calculating for cell ranks 0 and 4
[LOG] We will select 262 edges and 1730 tetra
[LOG] Edges from tetra 0 and KDTree 262 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 28: Created combinatorial complex for file data_226.hdf5
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 28: Calculating Neighbors
[LOG] Loading pickle file data_226.pickle
[LOG] Processing node features for num 226
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing edge features for num 226
[LOG] Processing tetra features for num 226
[LOG] Processing cluster features for num 226
[LOG] Processing cluster features for num 226
[LOG] Processing adjacency and incidence matrices for num 226
[LOG] Computing n0_to_0 for num 226
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_1 for num 226
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_2 (adjacency) for num 226
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 226
[LOG] Computing n4_to_4 (coadjacency) for num 226
[LOG] Computing n0_to_1 for num 226
[LOG] Computing n0_to_2 for num 226
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_3 for num 488
[LOG] Computing n0_to_3 for num 226
[LOG] Computing n0_to_4 for num 226
[LOG] Computing n1_to_2 for num 226
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_3 for num 226
[LOG] Computing n1_to_4 for num 226
[LOG] Computing n2_to_3 for num 226
[LOG] Computing n2_to_4 for num 226
[LOG] Computing n3_to_4 for num 226
[LOG] Global feature for num 226
[LOG] Global feature for num 226
[LOG] Saving tensor x_0_226.pt
[LOG] Saving tensor x_1_226.pt
[LOG] Saving tensor x_2_226.pt
[LOG] Saving tensor x_3_226.pt
[LOG] Saving tensor x_4_226.pt
[LOG] Saving tensor n0_to_0_226.pt
[LOG] Saving tensor n1_to_1_226.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n2_to_2_226.pt
[LOG] Saving tensor n3_to_3_226.pt
[LOG] Saving tensor n4_to_4_226.pt
[LOG] Computing n3_to_3 (adjacency) for num 951
[LOG] Saving tensor n0_to_1_226.pt
[LOG] Saving tensor n0_to_2_226.pt
[LOG] Computing n1_to_4 for num 488
[LOG] Saving tensor n0_to_3_226.pt
[LOG] Saving tensor n0_to_4_226.pt
[LOG] Computing n4_to_4 (coadjacency) for num 951
[LOG] Saving tensor n1_to_2_226.pt
[LOG] Saving tensor n1_to_3_226.pt
[LOG] Saving tensor n1_to_4_226.pt
[LOG] Saving tensor n2_to_3_226.pt
[LOG] Computing n0_to_1 for num 951
[LOG] Saving tensor n2_to_4_226.pt
[LOG] Saving tensor n3_to_4_226.pt
[LOG] Saving tensor global_feature_226.pt
[LOG] Process 28: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n3_to_3 (adjacency) for num 986
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n4_to_4 (coadjacency) for num 986
[LOG] Computing n0_to_1 for num 986
[LOG] Process 0: Created combinatorial complex for file data_1.hdf5
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_3 for num 488
[LOG] Process 0: Calculating Neighbors
[LOG] Loading pickle file data_1.pickle
[LOG] Processing node features for num 1
[LOG] Processing edge features for num 1
[LOG] Processing tetra features for num 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing cluster features for num 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing cluster features for num 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Processing adjacency and incidence matrices for num 1
[LOG] Computing n0_to_0 for num 1
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n1_to_1 for num 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 1
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_3 (adjacency) for num 1
[LOG] Computing n4_to_4 (coadjacency) for num 1
[LOG] Computing n0_to_1 for num 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_2 for num 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_3 (adjacency) for num 568
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n4_to_4 (coadjacency) for num 568
[LOG] Computing n0_to_1 for num 568
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_2 for num 328
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_3 for num 1
[LOG] Computing n0_to_4 for num 1
[LOG] Computing n1_to_2 for num 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_3 for num 1
[LOG] Computing n1_to_4 for num 1
[LOG] Computing n2_to_3 for num 1
[LOG] Computing n2_to_4 for num 1
[LOG] Computing n3_to_4 for num 1
[LOG] Global feature for num 1
[LOG] Global feature for num 1
[LOG] Saving tensor x_0_1.pt
[LOG] Saving tensor x_1_1.pt
[LOG] Saving tensor x_2_1.pt
[LOG] Saving tensor x_3_1.pt
[LOG] Saving tensor x_4_1.pt
[LOG] Saving tensor n0_to_0_1.pt
[LOG] Saving tensor n1_to_1_1.pt
[LOG] Saving tensor n2_to_2_1.pt
[LOG] Saving tensor n3_to_3_1.pt
[LOG] Saving tensor n4_to_4_1.pt
[LOG] Saving tensor n0_to_1_1.pt
[LOG] Saving tensor n0_to_2_1.pt
[LOG] Saving tensor n0_to_3_1.pt
[LOG] Saving tensor n0_to_4_1.pt
[LOG] Saving tensor n1_to_2_1.pt
[LOG] Saving tensor n1_to_3_1.pt
[LOG] Saving tensor n1_to_4_1.pt
[LOG] Saving tensor n2_to_3_1.pt
[LOG] Saving tensor n2_to_4_1.pt
[LOG] Saving tensor n3_to_4_1.pt
[LOG] Saving tensor global_feature_1.pt
[LOG] Process 0: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_4 for num 488
[LOG] Computing n2_to_2 (adjacency) for num 32
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_2 for num 986
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_4 for num 488
[LOG] Calculating for cell ranks 1 and 4
[LOG] Global feature for num 488
[LOG] Global feature for num 488
[LOG] Saving tensor x_0_488.pt
[LOG] Saving tensor x_1_488.pt
[LOG] Saving tensor x_2_488.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor x_3_488.pt
[LOG] Saving tensor x_4_488.pt
[LOG] Saving tensor n0_to_0_488.pt
[LOG] Saving tensor n1_to_1_488.pt
[LOG] Saving tensor n2_to_2_488.pt
[LOG] Computing n3_to_3 (adjacency) for num 288
[LOG] Computing n4_to_4 (coadjacency) for num 288
[LOG] Computing n0_to_1 for num 288
[LOG] Saving tensor n3_to_3_488.pt
[LOG] Saving tensor n4_to_4_488.pt
[LOG] Saving tensor n0_to_1_488.pt
[LOG] Saving tensor n0_to_2_488.pt
[LOG] Saving tensor n0_to_3_488.pt
[LOG] Saving tensor n0_to_4_488.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n1_to_2_488.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n1_to_3_488.pt
[LOG] Saving tensor n1_to_4_488.pt
[LOG] Saving tensor n2_to_3_488.pt
[LOG] Computing n0_to_2 for num 951
[LOG] Saving tensor n2_to_4_488.pt
[LOG] Saving tensor n3_to_4_488.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor global_feature_488.pt
[LOG] Process 61: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_2 for num 568
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1464 Tetrahedra.
    [LOG] Generated 50 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.26
    [LOG] Max number of nodes per cluster is 57 and the number is 10
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] We will select 586 edges and 1464 tetra
[LOG] Edges from tetra 0 and KDTree 586 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 4 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1761 Tetrahedra.
    [LOG] Generated 61 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.918032786885245
    [LOG] Max number of nodes per cluster is 169 and the number is 55
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Process 78: Created combinatorial complex for file data_625.hdf5
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] We will select 371 edges and 1761 tetra
[LOG] Edges from tetra 0 and KDTree 3525 with 0 edges in common.
[LOG] Process 78: Calculating Neighbors
[LOG] Loading pickle file data_625.pickle
[LOG] Processing node features for num 625
[LOG] Processing edge features for num 625
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing tetra features for num 625
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing cluster features for num 625
[LOG] Processing cluster features for num 625
[LOG] Processing adjacency and incidence matrices for num 625
[LOG] Computing n0_to_0 for num 625
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2319 Tetrahedra.
    [LOG] Generated 50 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.1
    [LOG] Max number of nodes per cluster is 36 and the number is 48
[LOG] Computing n1_to_1 for num 625
[LOG] We will select 372 edges and 2319 tetra
[LOG] Edges from tetra 0 and KDTree 395 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_2 for num 288
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_2 (adjacency) for num 625
[LOG] Removed 0 subset clusters.
[LOG] Computing n3_to_3 (adjacency) for num 625
[LOG] Computing n4_to_4 (coadjacency) for num 625
[LOG] Computing n0_to_1 for num 625
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_2 for num 625
[LOG] Process 38: Created combinatorial complex for file data_305.hdf5
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 38: Calculating Neighbors
[LOG] Loading pickle file data_305.pickle
[LOG] Processing node features for num 305
[LOG] Processing edge features for num 305
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing tetra features for num 305
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Processing cluster features for num 305
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Processing cluster features for num 305
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n0_to_3 for num 625
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n0_to_4 for num 625
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Processing adjacency and incidence matrices for num 305
[LOG] Computing n0_to_0 for num 305
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n1_to_2 for num 625
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_1 for num 305
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_3 for num 328
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_3 for num 625
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_4 for num 625
[LOG] Computing n0_to_4 for num 328
[LOG] Computing n2_to_3 for num 625
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_4 for num 625
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_2 (adjacency) for num 305
[LOG] Computing n3_to_4 for num 625
[LOG] Global feature for num 625
[LOG] Global feature for num 625
[LOG] Saving tensor x_0_625.pt
[LOG] Saving tensor x_1_625.pt
[LOG] Saving tensor x_2_625.pt
[LOG] Saving tensor x_3_625.pt
[LOG] Saving tensor x_4_625.pt
[LOG] Saving tensor n0_to_0_625.pt
[LOG] Saving tensor n1_to_1_625.pt
[LOG] Saving tensor n2_to_2_625.pt
[LOG] Saving tensor n3_to_3_625.pt
[LOG] Saving tensor n4_to_4_625.pt
[LOG] Saving tensor n0_to_1_625.pt
[LOG] Saving tensor n0_to_2_625.pt
[LOG] Saving tensor n0_to_3_625.pt
[LOG] Saving tensor n0_to_4_625.pt
[LOG] Saving tensor n1_to_2_625.pt
[LOG] Saving tensor n1_to_3_625.pt
[LOG] Saving tensor n1_to_4_625.pt
[LOG] Saving tensor n2_to_3_625.pt
[LOG] Saving tensor n2_to_4_625.pt
[LOG] Saving tensor n3_to_4_625.pt
[LOG] Saving tensor global_feature_625.pt
[LOG] Process 78: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_2 for num 328
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 91: Created combinatorial complex for file data_729.hdf5
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Process 91: Calculating Neighbors
[LOG] Loading pickle file data_729.pickle
[LOG] Processing node features for num 729
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n3_to_3 (adjacency) for num 305
[LOG] Processing edge features for num 729
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n4_to_4 (coadjacency) for num 305
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n0_to_1 for num 305
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Processing tetra features for num 729
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing cluster features for num 729
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing cluster features for num 729
[LOG] Computing n0_to_2 for num 305
[LOG] Processing adjacency and incidence matrices for num 729
[LOG] Computing n0_to_0 for num 729
[LOG] Computing n1_to_1 for num 729
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_2 (adjacency) for num 729
[LOG] Computing n0_to_3 for num 951
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n0_to_4 for num 951
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Computing n1_to_2 for num 951
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n3_to_3 (adjacency) for num 729
[LOG] Computing n4_to_4 (coadjacency) for num 729
[LOG] Computing n0_to_1 for num 729
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_2 for num 729
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 963 Tetrahedra.
    [LOG] Generated 25 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.16
    [LOG] Max number of nodes per cluster is 40 and the number is 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] We will select 151 edges and 963 tetra
[LOG] Edges from tetra 0 and KDTree 480 with 0 edges in common.
[LOG] Computing n0_to_3 for num 305
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_3 for num 440
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_4 for num 305
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_2 for num 305
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_3 for num 986
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_3 (adjacency) for num 528
[LOG] Computing n1_to_4 for num 440
[LOG] Computing n4_to_4 (coadjacency) for num 528
[LOG] Computing n0_to_1 for num 528
[LOG] Computing n0_to_4 for num 986
[LOG] Computing n1_to_3 for num 305
[LOG] Removed 0 subset clusters.
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1272 Tetrahedra.
    [LOG] Generated 45 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.533333333333333
    [LOG] Max number of nodes per cluster is 38 and the number is 10
[LOG] Computing n1_to_4 for num 305
[LOG] Computing n2_to_3 for num 305
[LOG] Computing n0_to_3 for num 729
[LOG] Computing n2_to_4 for num 305
[LOG] Computing n0_to_4 for num 729
[LOG] Computing n1_to_2 for num 729
[LOG] We will select 271 edges and 1272 tetra
[LOG] Edges from tetra 0 and KDTree 271 with 0 edges in common.
[LOG] Process 21: Created combinatorial complex for file data_170.hdf5
[LOG] Computing n3_to_4 for num 305
[LOG] Global feature for num 305
[LOG] Global feature for num 305
[LOG] Saving tensor x_0_305.pt
[LOG] Saving tensor x_1_305.pt
[LOG] Computing n1_to_2 for num 986
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor x_2_305.pt
[LOG] Saving tensor x_3_305.pt
[LOG] Saving tensor x_4_305.pt
[LOG] Saving tensor n0_to_0_305.pt
[LOG] Saving tensor n1_to_1_305.pt
[LOG] Saving tensor n2_to_2_305.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_3 for num 440
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n3_to_3_305.pt
[LOG] Computing n1_to_3 for num 729
[LOG] Computing n1_to_4 for num 729
[LOG] Computing n2_to_3 for num 729
[LOG] Computing n2_to_2 (adjacency) for num 456
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_4 for num 729
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n3_to_4 for num 729
[LOG] Global feature for num 729
[LOG] Global feature for num 729
[LOG] Saving tensor x_0_729.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_4 for num 440
[LOG] Saving tensor x_1_729.pt
[LOG] Saving tensor x_2_729.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor x_3_729.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n4_to_4_305.pt
[LOG] Process 21: Calculating Neighbors
[LOG] Loading pickle file data_170.pickle
[LOG] Processing node features for num 170
[LOG] Processing edge features for num 170
[LOG] Saving tensor n0_to_1_305.pt
[LOG] Saving tensor x_4_729.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Processing tetra features for num 170
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n0_to_0_729.pt
[LOG] Saving tensor n1_to_1_729.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n0_to_2_305.pt
[LOG] Saving tensor n2_to_2_729.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n3_to_3_729.pt
[LOG] Saving tensor n0_to_3_305.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n0_to_4_305.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n4_to_4_729.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Processing cluster features for num 170
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n1_to_2_305.pt
[LOG] Saving tensor n0_to_1_729.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n0_to_2_729.pt
[LOG] Saving tensor n1_to_3_305.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n0_to_3_729.pt
[LOG] Saving tensor n1_to_4_305.pt
[LOG] Saving tensor n0_to_4_729.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n2_to_3_305.pt
[LOG] Saving tensor n1_to_2_729.pt
[LOG] Processing cluster features for num 170
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing adjacency and incidence matrices for num 170
[LOG] Computing n0_to_0 for num 170
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n1_to_3_729.pt
[LOG] Computing n1_to_1 for num 170
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n1_to_4_729.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n2_to_4_305.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n2_to_3_729.pt
[LOG] Saving tensor n3_to_4_305.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n2_to_4_729.pt
[LOG] Saving tensor global_feature_305.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Process 38: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n3_to_4_729.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor global_feature_729.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Process 91: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Process 7: Created combinatorial complex for file data_57.hdf5
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n2_to_2 (adjacency) for num 170
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n3_to_4 for num 440
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 170
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n4_to_4 (coadjacency) for num 170
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n0_to_1 for num 170
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Global feature for num 440
[LOG] Global feature for num 440
[LOG] Saving tensor x_0_440.pt
[LOG] Computing n1_to_3 for num 648
[LOG] Computing n0_to_2 for num 170
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 7: Calculating Neighbors
[LOG] Loading pickle file data_57.pickle
[LOG] Processing node features for num 57
[LOG] Processing edge features for num 57
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing tetra features for num 57
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_3 for num 867
[LOG] Processing cluster features for num 57
[LOG] Processing cluster features for num 57
[LOG] Processing adjacency and incidence matrices for num 57
[LOG] Computing n0_to_0 for num 57
[LOG] Computing n1_to_1 for num 57
[LOG] Computing n1_to_4 for num 648
[LOG] Computing n0_to_3 for num 170
[LOG] Computing n0_to_4 for num 170
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n1_to_2 for num 170
[LOG] Computing n2_to_2 (adjacency) for num 57
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_4 for num 867
[LOG] Computing n3_to_3 (adjacency) for num 57
[LOG] Computing n4_to_4 (coadjacency) for num 57
[LOG] Computing n3_to_3 (adjacency) for num 696
[LOG] Computing n0_to_1 for num 57
[LOG] Computing n1_to_3 for num 170
[LOG] Computing n1_to_4 for num 170
[LOG] Computing n2_to_3 for num 170
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n0_to_2 for num 57
[LOG] Computing n2_to_4 for num 170
[LOG] Computing n4_to_4 (coadjacency) for num 696
[LOG] Computing n0_to_1 for num 696
[LOG] Computing n0_to_3 for num 568
[LOG] Computing n3_to_4 for num 170
[LOG] Global feature for num 170
[LOG] Global feature for num 170
[LOG] Saving tensor x_0_170.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor x_1_440.pt
[LOG] Saving tensor x_2_440.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n2_to_3 for num 648
[LOG] Computing n2_to_3 for num 867
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_3 for num 57
[LOG] Computing n0_to_4 for num 57
[LOG] Computing n1_to_2 for num 57
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_4 for num 568
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n1_to_3 for num 57
[LOG] Computing n0_to_3 for num 288
[LOG] Computing n1_to_4 for num 57
[LOG] Computing n2_to_3 for num 57
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n2_to_4 for num 57
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_4 for num 57
[LOG] Global feature for num 57
[LOG] Global feature for num 57
[LOG] Saving tensor x_0_57.pt
[LOG] Computing n1_to_2 for num 568
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_3 for num 958
[LOG] Computing n0_to_4 for num 288
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor x_1_170.pt
[LOG] Saving tensor x_3_440.pt
[LOG] Saving tensor x_2_170.pt
[LOG] Saving tensor x_1_57.pt
[LOG] Saving tensor x_4_440.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_4 for num 648
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_2 for num 288
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor x_3_170.pt
[LOG] Computing n2_to_2 (adjacency) for num 216
[LOG] Saving tensor x_2_57.pt
[LOG] Saving tensor n0_to_0_440.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Computing n2_to_4 for num 867
[LOG] Saving tensor x_4_170.pt
[LOG] Saving tensor n0_to_0_170.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor x_3_57.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n1_to_1_170.pt
[LOG] Computing n1_to_4 for num 958
[LOG] Saving tensor n1_to_1_440.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor x_4_57.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n0_to_0_57.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n2_to_2_170.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n2_to_2_440.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n0_to_2 for num 528
[LOG] Saving tensor n3_to_3_170.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n1_to_1_57.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n4_to_4_170.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n0_to_1_170.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n0_to_2_170.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n3_to_3_440.pt
[LOG] Saving tensor n2_to_2_57.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n4_to_4_440.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n2_to_3 for num 958
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n3_to_3_57.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n0_to_1_440.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n4_to_4_57.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n0_to_2_440.pt
[LOG] Saving tensor n0_to_3_170.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n0_to_1_57.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n0_to_4_170.pt
[LOG] Saving tensor n0_to_3_440.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n0_to_2_57.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n3_to_3 (adjacency) for num 32
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n4_to_4 (coadjacency) for num 32
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n1_to_2_170.pt
[LOG] Saving tensor n0_to_4_440.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n0_to_3_57.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_1 for num 32
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n1_to_3_170.pt
[LOG] Saving tensor n1_to_2_440.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n0_to_4_57.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n1_to_4_170.pt
[LOG] Computing n2_to_4 for num 958
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n1_to_3_440.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n1_to_2_57.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n2_to_3_170.pt
[LOG] Saving tensor n1_to_4_440.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n1_to_3_57.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n3_to_4 for num 648
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n2_to_4_170.pt
[LOG] Global feature for num 648
[LOG] Global feature for num 648
[LOG] Saving tensor x_0_648.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n1_to_4_57.pt
[LOG] Saving tensor n2_to_3_440.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor x_1_648.pt
[LOG] Saving tensor n3_to_4_170.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor global_feature_170.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n2_to_3_57.pt
[LOG] Saving tensor n2_to_4_440.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor x_2_648.pt
[LOG] Saving tensor n3_to_4_440.pt
[LOG] Process 21: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n2_to_4_57.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor x_3_648.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor x_4_648.pt
[LOG] Computing n1_to_3 for num 874
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n0_to_0_648.pt
[LOG] Saving tensor n3_to_4_57.pt
[LOG] Saving tensor global_feature_440.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor global_feature_57.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Process 55: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n1_to_1_648.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Process 7: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n2_to_2_648.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n3_to_3_648.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n3_to_4 for num 867
[LOG] Saving tensor n4_to_4_648.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Global feature for num 867
[LOG] Global feature for num 867
[LOG] Saving tensor x_0_867.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor x_1_867.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor x_2_867.pt
[LOG] Saving tensor x_3_867.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n0_to_1_648.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_4 for num 874
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor x_4_867.pt
[LOG] Saving tensor n0_to_2_648.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n0_to_0_867.pt
[LOG] Saving tensor n0_to_3_648.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n1_to_1_867.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n0_to_4_648.pt
[LOG] Saving tensor n2_to_2_867.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n1_to_2_648.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n1_to_3_648.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n1_to_4_648.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n2_to_3_648.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n2_to_4_648.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n3_to_4_648.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor global_feature_648.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Process 81: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n3_to_3_867.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n4_to_4_867.pt
[LOG] Computing n2_to_3 for num 874
[LOG] Saving tensor n0_to_1_867.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n0_to_2_867.pt
[LOG] Saving tensor n0_to_3_867.pt
[LOG] Computing n0_to_2 for num 696
[LOG] Saving tensor n0_to_4_867.pt
[LOG] Saving tensor n1_to_2_867.pt
[LOG] Saving tensor n1_to_3_867.pt
[LOG] Saving tensor n1_to_4_867.pt
[LOG] Saving tensor n2_to_3_867.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1918 Tetrahedra.
    [LOG] Generated 57 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.087719298245615
    [LOG] Max number of nodes per cluster is 48 and the number is 28
[LOG] Saving tensor n2_to_4_867.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n3_to_4_867.pt
[LOG] Saving tensor global_feature_867.pt
[LOG] Process 109: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] We will select 467 edges and 1918 tetra
[LOG] Edges from tetra 0 and KDTree 467 with 0 edges in common.
[LOG] Computing n3_to_3 (adjacency) for num 993
[LOG] Computing n4_to_4 (coadjacency) for num 993
[LOG] Computing n0_to_1 for num 993
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_4 for num 874
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_4 for num 958
[LOG] Global feature for num 958
[LOG] Global feature for num 958
[LOG] Saving tensor x_0_958.pt
[LOG] Saving tensor x_1_958.pt
[LOG] Saving tensor x_2_958.pt
[LOG] Saving tensor x_3_958.pt
[LOG] Saving tensor x_4_958.pt
[LOG] Saving tensor n0_to_0_958.pt
[LOG] Saving tensor n1_to_1_958.pt
[LOG] Saving tensor n2_to_2_958.pt
[LOG] Saving tensor n3_to_3_958.pt
[LOG] Saving tensor n4_to_4_958.pt
[LOG] Saving tensor n0_to_1_958.pt
[LOG] Saving tensor n0_to_2_958.pt
[LOG] Saving tensor n0_to_3_958.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n0_to_4_958.pt
[LOG] Saving tensor n1_to_2_958.pt
[LOG] Saving tensor n1_to_3_958.pt
[LOG] Saving tensor n1_to_4_958.pt
[LOG] Saving tensor n2_to_3_958.pt
[LOG] Saving tensor n2_to_4_958.pt
[LOG] Saving tensor n3_to_4_958.pt
[LOG] Saving tensor global_feature_958.pt
[LOG] Process 122: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 4 subset clusters.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 69: Created combinatorial complex for file data_553.hdf5
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 69: Calculating Neighbors
[LOG] Loading pickle file data_553.pickle
[LOG] Processing node features for num 553
[LOG] Processing edge features for num 553
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_2 for num 32
[LOG] Processing tetra features for num 553
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing cluster features for num 553
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing cluster features for num 553
[LOG] GENERATED TETRA
[LOG] Computing n3_to_4 for num 874
[LOG] Processing adjacency and incidence matrices for num 553
[LOG] Computing n0_to_0 for num 553
[LOG] Global feature for num 874
[LOG] Global feature for num 874
[LOG] Saving tensor x_0_874.pt
[LOG] Saving tensor x_1_874.pt
[LOG] Saving tensor x_2_874.pt
[LOG] Saving tensor x_3_874.pt
[LOG] Saving tensor x_4_874.pt
[LOG] Saving tensor n0_to_0_874.pt
[LOG] Saving tensor n1_to_1_874.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n2_to_2_874.pt
[LOG] Computing n1_to_1 for num 553
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 977 Tetrahedra.
    [LOG] Generated 33 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.424242424242426
    [LOG] Max number of nodes per cluster is 68 and the number is 29
[LOG] Saving tensor n3_to_3_874.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n4_to_4_874.pt
[LOG] Saving tensor n0_to_1_874.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n0_to_2_874.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n0_to_3_874.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n0_to_4_874.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] We will select 164 edges and 977 tetra
[LOG] Edges from tetra 0 and KDTree 4274 with 0 edges in common.
[LOG] Saving tensor n1_to_2_874.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n1_to_3_874.pt
[LOG] Saving tensor n1_to_4_874.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n2_to_3_874.pt
[LOG] Saving tensor n2_to_4_874.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n3_to_4_874.pt
[LOG] Saving tensor global_feature_874.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Process 110: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 553
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_3_to_3.pt

    [LOG] We Currently have 1713 Tetrahedra.
    [LOG] Generated 44 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.840909090909092
    [LOG] Max number of nodes per cluster is 55 and the number is 9
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] We will select 270 edges and 1713 tetra
[LOG] Edges from tetra 0 and KDTree 270 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Computing n3_to_3 (adjacency) for num 553
[LOG] Computing n4_to_4 (coadjacency) for num 553
[LOG] Computing n0_to_1 for num 553
[LOG] Calculating for cell ranks 0 and 3
[LOG] GENERATED TETRA
[LOG] Computing n0_to_2 for num 553
[LOG] Process 100: Created combinatorial complex for file data_802.hdf5
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 100: Calculating Neighbors
[LOG] Loading pickle file data_802.pickle
[LOG] Processing node features for num 802
[LOG] Processing edge features for num 802
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing tetra features for num 802
[LOG] Processing cluster features for num 802
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing cluster features for num 802
[LOG] Processing adjacency and incidence matrices for num 802
[LOG] Computing n0_to_0 for num 802
[LOG] Computing n0_to_3 for num 553
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_4 for num 553
[LOG] Computing n1_to_2 for num 553
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_1 for num 802
[LOG] Computing n0_to_2 for num 993
[LOG] Computing n2_to_2 (adjacency) for num 802
[LOG] Computing n3_to_3 (adjacency) for num 802
[LOG] Computing n4_to_4 (coadjacency) for num 802
[LOG] Computing n0_to_1 for num 802
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_2 for num 802
[LOG] Computing n1_to_3 for num 553
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_4 for num 553
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_3 for num 553
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2257 Tetrahedra.
    [LOG] Generated 69 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.376811594202898
    [LOG] Max number of nodes per cluster is 37 and the number is 60
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_4 for num 553
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_4 for num 553
[LOG] Global feature for num 553
[LOG] Global feature for num 553
[LOG] Saving tensor x_0_553.pt
[LOG] Saving tensor x_1_553.pt
[LOG] Saving tensor x_2_553.pt
[LOG] Saving tensor x_3_553.pt
[LOG] Saving tensor x_4_553.pt
[LOG] Saving tensor n0_to_0_553.pt
[LOG] Saving tensor n1_to_1_553.pt
[LOG] Saving tensor n2_to_2_553.pt
[LOG] Saving tensor n3_to_3_553.pt
[LOG] Saving tensor n4_to_4_553.pt
[LOG] Saving tensor n0_to_1_553.pt
[LOG] Saving tensor n0_to_2_553.pt
[LOG] Saving tensor n0_to_3_553.pt
[LOG] Saving tensor n0_to_4_553.pt
[LOG] Saving tensor n1_to_2_553.pt
[LOG] Saving tensor n1_to_3_553.pt
[LOG] Saving tensor n1_to_4_553.pt
[LOG] We will select 669 edges and 2257 tetra
[LOG] Edges from tetra 0 and KDTree 712 with 0 edges in common.
[LOG] Saving tensor n2_to_3_553.pt
[LOG] Saving tensor n2_to_4_553.pt
[LOG] Saving tensor n3_to_4_553.pt
[LOG] Saving tensor global_feature_553.pt
[LOG] Process 69: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 79: Created combinatorial complex for file data_633.hdf5
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_3 for num 802
[LOG] Computing n0_to_4 for num 802
[LOG] Computing n1_to_2 for num 802
[LOG] GENERATED TETRA
[LOG] Process 79: Calculating Neighbors
[LOG] Loading pickle file data_633.pickle
[LOG] Processing node features for num 633
[LOG] Processing edge features for num 633
[LOG] Processing tetra features for num 633
[LOG] Computing n1_to_3 for num 802
[LOG] Computing n1_to_4 for num 802
[LOG] Computing n2_to_3 for num 802
[LOG] Computing n2_to_4 for num 802
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing cluster features for num 633
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_4 for num 802
[LOG] Global feature for num 802
[LOG] Global feature for num 802
[LOG] Saving tensor x_0_802.pt
[LOG] Saving tensor x_1_802.pt
[LOG] Saving tensor x_2_802.pt
[LOG] Saving tensor x_3_802.pt
[LOG] Saving tensor x_4_802.pt
[LOG] Processing cluster features for num 633
[LOG] Saving tensor n0_to_0_802.pt
[LOG] Saving tensor n1_to_1_802.pt
[LOG] Saving tensor n2_to_2_802.pt
[LOG] Saving tensor n3_to_3_802.pt
[LOG] Saving tensor n4_to_4_802.pt
[LOG] Processing adjacency and incidence matrices for num 633
[LOG] Computing n0_to_0 for num 633
[LOG] Saving tensor n0_to_1_802.pt
[LOG] Saving tensor n0_to_2_802.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n0_to_3_802.pt
[LOG] Saving tensor n0_to_4_802.pt
[LOG] Saving tensor n1_to_2_802.pt
[LOG] Saving tensor n1_to_3_802.pt
[LOG] Saving tensor n1_to_4_802.pt
[LOG] Saving tensor n2_to_3_802.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_1 for num 633
[LOG] Saving tensor n2_to_4_802.pt
[LOG] Saving tensor n3_to_4_802.pt
[LOG] Saving tensor global_feature_802.pt
[LOG] Process 100: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n2_to_2 (adjacency) for num 633
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 633
[LOG] Computing n4_to_4 (coadjacency) for num 633
[LOG] Computing n0_to_1 for num 633
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_2 for num 633
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Removed 2 subset clusters.
[LOG] Computing n0_to_3 for num 633
[LOG] Computing n0_to_4 for num 633
[LOG] Computing n1_to_2 for num 633
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_3 for num 633
[LOG] Computing n1_to_4 for num 633
[LOG] Computing n2_to_3 for num 633
[LOG] Computing n2_to_4 for num 633
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n3_to_4 for num 633
[LOG] Global feature for num 633
[LOG] Process 73: Created combinatorial complex for file data_585.hdf5
[LOG] Global feature for num 633
[LOG] Saving tensor x_0_633.pt
[LOG] Saving tensor x_1_633.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1056 Tetrahedra.
    [LOG] Generated 50 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.3
    [LOG] Max number of nodes per cluster is 20 and the number is 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2513 Tetrahedra.
    [LOG] Generated 75 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.84
    [LOG] Max number of nodes per cluster is 73 and the number is 49
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor x_2_633.pt
[LOG] Saving tensor x_3_633.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor x_4_633.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 3
[LOG] We will select 448 edges and 2513 tetra
[LOG] Edges from tetra 0 and KDTree 1579 with 0 edges in common.
[LOG] Saving tensor n0_to_0_633.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n1_to_1_633.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_3 for num 528
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n2_to_2_633.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_4 for num 528
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n3_to_3_633.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_2 for num 528
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n4_to_4_633.pt
[LOG] We will select 422 edges and 1056 tetra
[LOG] Edges from tetra 0 and KDTree 1587 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Process 73: Calculating Neighbors
[LOG] Loading pickle file data_585.pickle
[LOG] Processing node features for num 585
[LOG] Processing edge features for num 585
[LOG] Processing tetra features for num 585
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n0_to_1_633.pt
[LOG] Processing cluster features for num 585
[LOG] Processing cluster features for num 585
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 0 subset clusters.
[LOG] Processing adjacency and incidence matrices for num 585
[LOG] Computing n0_to_0 for num 585
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n0_to_2_633.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n0_to_3_633.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n0_to_4_633.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n1_to_2_633.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.
[LOG] Computing n1_to_1 for num 585
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1769 Tetrahedra.
    [LOG] Generated 67 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.522388059701493
    [LOG] Max number of nodes per cluster is 40 and the number is 15
[LOG] Saving tensor n1_to_3_633.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Process 52: Created combinatorial complex for file data_417.hdf5
[LOG] Process 37: Created combinatorial complex for file data_298.hdf5
[LOG] We will select 1333 edges and 1769 tetra
[LOG] Edges from tetra 0 and KDTree 1333 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] Saving tensor n1_to_4_633.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n2_to_3_633.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n2_to_4_633.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n3_to_4_633.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor global_feature_633.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Process 79: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 37: Calculating Neighbors
[LOG] Loading pickle file data_298.pickle
[LOG] Processing node features for num 298
[LOG] Processing edge features for num 298
[LOG] Processing tetra features for num 298
[LOG] Processing cluster features for num 298
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing cluster features for num 298
[LOG] Processing adjacency and incidence matrices for num 298
[LOG] Computing n0_to_0 for num 298
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 982 Tetrahedra.
    [LOG] Generated 27 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.518518518518519
    [LOG] Max number of nodes per cluster is 50 and the number is 1
[LOG] Process 52: Calculating Neighbors
[LOG] Loading pickle file data_417.pickle
[LOG] Processing node features for num 417
[LOG] Computing n2_to_2 (adjacency) for num 585
[LOG] Processing edge features for num 417
[LOG] We will select 119 edges and 982 tetra
[LOG] Edges from tetra 0 and KDTree 239 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_1 for num 298
[LOG] Processing tetra features for num 417
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1360 Tetrahedra.
    [LOG] Generated 36 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 18.13888888888889
    [LOG] Max number of nodes per cluster is 87 and the number is 32
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing cluster features for num 417
[LOG] Calculating for cell ranks 3 and 3
[LOG] We will select 1539 edges and 1360 tetra
[LOG] Edges from tetra 0 and KDTree 3343 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing cluster features for num 417
[LOG] Computing n2_to_2 (adjacency) for num 298
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2313 Tetrahedra.
    [LOG] Generated 72 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.583333333333334
    [LOG] Max number of nodes per cluster is 32 and the number is 3
[LOG] Processing adjacency and incidence matrices for num 417
[LOG] Computing n0_to_0 for num 417
[LOG] Computing n3_to_3 (adjacency) for num 298
[LOG] Computing n4_to_4 (coadjacency) for num 298
[LOG] Computing n0_to_1 for num 298
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_3 for num 696
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_2 for num 298
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_3 (adjacency) for num 585
[LOG] Computing n4_to_4 (coadjacency) for num 585
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_1 for num 585
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Removed 1 subset clusters.
[LOG] Computing n1_to_1 for num 417
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_2 for num 585
[LOG] Computing n0_to_4 for num 696
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 23: Created combinatorial complex for file data_186.hdf5
[LOG] Computing n2_to_2 (adjacency) for num 8
[LOG] Computing n0_to_3 for num 298
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n0_to_4 for num 298
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n1_to_2 for num 298
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n1_to_2 for num 696
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n0_to_3 for num 32
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Process 23: Calculating Neighbors
[LOG] Loading pickle file data_186.pickle
[LOG] Processing node features for num 186
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Processing edge features for num 186
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Processing tetra features for num 186
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Processing cluster features for num 186
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n1_to_3 for num 298
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Processing cluster features for num 186
[LOG] Computing n1_to_4 for num 298
[LOG] Computing n2_to_2 (adjacency) for num 417
[LOG] Processing adjacency and incidence matrices for num 186
[LOG] Computing n0_to_0 for num 186
[LOG] Computing n2_to_3 for num 298
[LOG] Computing n1_to_1 for num 186
[LOG] Computing n2_to_4 for num 298
[LOG] Computing n0_to_4 for num 32
[LOG] Computing n3_to_4 for num 298
[LOG] Global feature for num 298
[LOG] Global feature for num 298
[LOG] Saving tensor x_0_298.pt
[LOG] Computing n2_to_2 (adjacency) for num 186
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor x_1_298.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor x_2_298.pt
[LOG] Process 15: Created combinatorial complex for file data_121.hdf5
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor x_3_298.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor x_4_298.pt
[LOG] Saving tensor n0_to_0_298.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n1_to_1_298.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Computing n3_to_3 (adjacency) for num 186
[LOG] Saving tensor n2_to_2_298.pt
[LOG] Computing n4_to_4 (coadjacency) for num 186
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_1 for num 186
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_2 for num 186
[LOG] Computing n1_to_2 for num 32
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_3 for num 585
[LOG] Computing n0_to_4 for num 585
[LOG] Computing n1_to_2 for num 585
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_3 for num 186
[LOG] Computing n0_to_4 for num 186
[LOG] We will select 156 edges and 2313 tetra
[LOG] Edges from tetra 0 and KDTree 1333 with 0 edges in common.
[LOG] Computing n1_to_2 for num 186
[LOG] Process 15: Calculating Neighbors
[LOG] Loading pickle file data_121.pickle
[LOG] Processing node features for num 121
[LOG] Process 5: Created combinatorial complex for file data_41.hdf5
[LOG] Processing edge features for num 121
[LOG] Computing n1_to_3 for num 186
[LOG] Computing n1_to_4 for num 186
[LOG] Computing n2_to_3 for num 186
[LOG] Computing n2_to_4 for num 186
[LOG] Computing n3_to_4 for num 186
[LOG] Global feature for num 186
[LOG] Global feature for num 186
[LOG] Saving tensor x_0_186.pt
[LOG] Processing tetra features for num 121
[LOG] Saving tensor x_1_186.pt
[LOG] Saving tensor n3_to_3_298.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor x_2_186.pt
[LOG] Saving tensor x_3_186.pt
[LOG] Saving tensor x_4_186.pt
[LOG] Saving tensor n0_to_0_186.pt
[LOG] Saving tensor n4_to_4_298.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n1_to_1_186.pt
[LOG] Saving tensor n0_to_1_298.pt
[LOG] Saving tensor n2_to_2_186.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n0_to_2_298.pt
[LOG] Saving tensor n3_to_3_186.pt
[LOG] Processing cluster features for num 121
[LOG] Saving tensor n4_to_4_186.pt
[LOG] Saving tensor n0_to_3_298.pt
[LOG] Saving tensor n0_to_1_186.pt
[LOG] Saving tensor n0_to_4_298.pt
[LOG] Saving tensor n0_to_2_186.pt
[LOG] Saving tensor n1_to_2_298.pt
[LOG] Saving tensor n0_to_3_186.pt
[LOG] Saving tensor n1_to_3_298.pt
[LOG] Saving tensor n0_to_4_186.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n1_to_4_298.pt
[LOG] Saving tensor n1_to_2_186.pt
[LOG] Saving tensor n2_to_3_298.pt
[LOG] Processing cluster features for num 121
[LOG] Saving tensor n1_to_3_186.pt
[LOG] Saving tensor n2_to_4_298.pt
[LOG] Saving tensor n1_to_4_186.pt
[LOG] Saving tensor n3_to_4_298.pt
[LOG] Saving tensor n2_to_3_186.pt
[LOG] Saving tensor global_feature_298.pt
[LOG] Process 37: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n2_to_4_186.pt
[LOG] Saving tensor n3_to_4_186.pt
[LOG] Saving tensor global_feature_186.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 23: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 5: Calculating Neighbors
[LOG] Loading pickle file data_41.pickle
[LOG] Processing node features for num 41
[LOG] Processing adjacency and incidence matrices for num 121
[LOG] Computing n0_to_0 for num 121
[LOG] Processing edge features for num 41
[LOG] Computing n3_to_3 (adjacency) for num 417
[LOG] Computing n4_to_4 (coadjacency) for num 417
[LOG] Computing n0_to_1 for num 417
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing tetra features for num 41
[LOG] GENERATED TETRA
[LOG] Processing cluster features for num 41
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 41
[LOG] Computing n0_to_2 for num 417
[LOG] Processing adjacency and incidence matrices for num 41
[LOG] Computing n0_to_0 for num 41
[LOG] Computing n1_to_1 for num 121
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_3 for num 585
[LOG] Computing n1_to_4 for num 585
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_3 for num 585
[LOG] Computing n2_to_4 for num 585
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_4 for num 585
[LOG] Global feature for num 585
[LOG] Global feature for num 585
[LOG] Saving tensor x_0_585.pt
[LOG] Saving tensor x_1_585.pt
[LOG] Saving tensor x_2_585.pt
[LOG] Saving tensor x_3_585.pt
[LOG] Saving tensor x_4_585.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n0_to_0_585.pt
[LOG] Saving tensor n1_to_1_585.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n2_to_2_585.pt
[LOG] Computing n1_to_1 for num 41
[LOG] Saving tensor n3_to_3_585.pt
[LOG] Saving tensor n4_to_4_585.pt
[LOG] Saving tensor n0_to_1_585.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 75: Created combinatorial complex for file data_601.hdf5
[LOG] Saving tensor n0_to_2_585.pt
[LOG] Saving tensor n0_to_3_585.pt
[LOG] Saving tensor n0_to_4_585.pt
[LOG] Saving tensor n1_to_2_585.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n1_to_3_585.pt
[LOG] Saving tensor n1_to_4_585.pt
[LOG] Saving tensor n2_to_3_585.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_3 for num 986
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n2_to_4_585.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Process 75: Calculating Neighbors
[LOG] Loading pickle file data_601.pickle
[LOG] Processing node features for num 601
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n3_to_4_585.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Processing edge features for num 601
[LOG] Saving tensor global_feature_585.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing tetra features for num 601
[LOG] Computing n2_to_2 (adjacency) for num 121
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 601
[LOG] Process 73: Calculating Cross-Cell-Invariants
[LOG] Processing cluster features for num 601
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing adjacency and incidence matrices for num 601
[LOG] Computing n0_to_0 for num 601
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n1_to_4 for num 986
[LOG] Computing n1_to_1 for num 601
[LOG] Computing n0_to_3 for num 417
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_3 (adjacency) for num 121
[LOG] Computing n4_to_4 (coadjacency) for num 121
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n0_to_1 for num 121
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n0_to_4 for num 417
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 915 Tetrahedra.
    [LOG] Generated 29 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.206896551724139
    [LOG] Max number of nodes per cluster is 52 and the number is 15[LOG] Computing n1_to_2 for num 417

[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 601
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] We will select 81 edges and 915 tetra
[LOG] Edges from tetra 0 and KDTree 2602 with 0 edges in common.
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n2_to_3 for num 986
[LOG] Computing n0_to_2 for num 121
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 41
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Computing n1_to_3 for num 328
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_3 (adjacency) for num 41
[LOG] Computing n1_to_3 for num 417
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n4_to_4 (coadjacency) for num 41
[LOG] Computing n0_to_1 for num 41
[LOG] Computing n1_to_4 for num 417
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_3 for num 417
[LOG] Process 42: Created combinatorial complex for file data_338.hdf5
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 601
[LOG] Computing n2_to_4 for num 417
[LOG] Computing n4_to_4 (coadjacency) for num 601
[LOG] Computing n0_to_1 for num 601
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_2 for num 601
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_4 for num 417
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Global feature for num 417
[LOG] Global feature for num 417
[LOG] Saving tensor x_0_417.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor x_1_417.pt
[LOG] Computing n1_to_3 for num 568
[LOG] Computing n1_to_4 for num 328
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n0_to_3 for num 121
[LOG] Process 42: Calculating Neighbors
[LOG] Loading pickle file data_338.pickle
[LOG] Processing node features for num 338
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing edge features for num 338
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_4 for num 121
[LOG] Processing tetra features for num 338
[LOG] Computing n1_to_2 for num 121
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_4 for num 986
[LOG] Processing cluster features for num 338
[LOG] Processing cluster features for num 338
[LOG] Computing n3_to_3 (adjacency) for num 456
[LOG] Processing adjacency and incidence matrices for num 338
[LOG] Computing n0_to_0 for num 338
[LOG] Computing n0_to_3 for num 993
[LOG] Computing n4_to_4 (coadjacency) for num 456
[LOG] Saving tensor x_2_417.pt
[LOG] Saving tensor x_3_417.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Computing n0_to_1 for num 456
[LOG] Saving tensor x_4_417.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n0_to_0_417.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n1_to_1 for num 338
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n1_to_1_417.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_3 (adjacency) for num 216
[LOG] Saving tensor n2_to_2_417.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Computing n1_to_4 for num 568
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n2_to_2 (adjacency) for num 338
[LOG] Saving tensor n3_to_3_417.pt
[LOG] Computing n4_to_4 (coadjacency) for num 216
[LOG] Computing n2_to_3 for num 328
[LOG] Computing n0_to_1 for num 216
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n0_to_4 for num 993
[LOG] Computing n0_to_2 for num 41
[LOG] Computing n3_to_3 (adjacency) for num 338
[LOG] Computing n4_to_4 (coadjacency) for num 338
[LOG] Computing n0_to_1 for num 338
[LOG] Computing n0_to_2 for num 338
[LOG] Saving tensor n4_to_4_417.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n0_to_1_417.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n0_to_2_417.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_3 for num 951
[LOG] Computing n1_to_2 for num 993
[LOG] Computing n2_to_3 for num 568
[LOG] Saving tensor n0_to_3_417.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n0_to_4_417.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n1_to_2_417.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n1_to_3_417.pt
[LOG] Saving tensor n1_to_4_417.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] GENERATED TETRA
[LOG] Computing n0_to_3 for num 601
[LOG] Computing n2_to_4 for num 328
[LOG] Computing n0_to_3 for num 338
[LOG] Saving tensor n2_to_3_417.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n2_to_4_417.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n0_to_4 for num 338
[LOG] Saving tensor n3_to_4_417.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor global_feature_417.pt
[LOG] Computing n0_to_4 for num 601
[LOG] Process 52: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n1_to_2 for num 338
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n3_to_4 for num 986
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Global feature for num 986
[LOG] Global feature for num 986
[LOG] Saving tensor x_0_986.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n1_to_3 for num 338
[LOG] Computing n1_to_2 for num 601
[LOG] Computing n1_to_4 for num 338
[LOG] Computing n2_to_3 for num 338
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor x_1_986.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n2_to_4 for num 338
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor x_2_986.pt
[LOG] Computing n1_to_4 for num 951
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor x_3_986.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor x_4_986.pt
[LOG] Computing n3_to_4 for num 338
[LOG] Saving tensor n0_to_0_986.pt
[LOG] Global feature for num 338
[LOG] Global feature for num 338
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor x_0_338.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_3 for num 601
[LOG] Computing n1_to_4 for num 601
[LOG] Computing n2_to_3 for num 601
[LOG] Computing n1_to_3 for num 121
[LOG] Saving tensor x_1_338.pt
[LOG] Saving tensor x_2_338.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n0_to_3 for num 41
[LOG] Saving tensor x_3_338.pt
[LOG] Saving tensor n1_to_1_986.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor x_4_338.pt
[LOG] Saving tensor n0_to_0_338.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n1_to_4 for num 121
[LOG] Saving tensor n2_to_2_986.pt
[LOG] Computing n2_to_4 for num 601
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n1_to_1_338.pt
[LOG] Saving tensor n2_to_2_338.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n0_to_4 for num 41
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n3_to_3_338.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n4_to_4_338.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n0_to_1_338.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n0_to_2_338.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n2_to_3 for num 121
[LOG] Computing n1_to_2 for num 41
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n0_to_3_338.pt
[LOG] Saving tensor n3_to_3_986.pt
[LOG] Computing n3_to_4 for num 601
[LOG] Global feature for num 601
[LOG] Saving tensor n0_to_4_338.pt
[LOG] Global feature for num 601
[LOG] Saving tensor x_0_601.pt
[LOG] Saving tensor n4_to_4_986.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor x_1_601.pt
[LOG] Saving tensor n1_to_2_338.pt
[LOG] Saving tensor n0_to_1_986.pt
[LOG] Saving tensor x_2_601.pt
[LOG] Saving tensor x_3_601.pt
[LOG] Saving tensor x_4_601.pt
[LOG] Saving tensor n0_to_2_986.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n0_to_0_601.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n1_to_1_601.pt
[LOG] Computing n2_to_4 for num 121
[LOG] Saving tensor n0_to_3_986.pt
[LOG] Saving tensor n2_to_2_601.pt
[LOG] Computing n2_to_3 for num 951
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n1_to_3_338.pt
[LOG] Saving tensor n1_to_4_338.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n0_to_4_986.pt
[LOG] Saving tensor n3_to_3_601.pt
[LOG] Saving tensor n2_to_3_338.pt
[LOG] Computing n3_to_4 for num 121
[LOG] Global feature for num 121
[LOG] Global feature for num 121
[LOG] Saving tensor x_0_121.pt
[LOG] Computing n3_to_4 for num 328
[LOG] Global feature for num 328
[LOG] Global feature for num 328
[LOG] Saving tensor x_0_328.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_4 for num 568
[LOG] Saving tensor n4_to_4_601.pt
[LOG] Saving tensor n1_to_2_986.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n2_to_4_338.pt
[LOG] Saving tensor x_1_121.pt
[LOG] Saving tensor n0_to_1_601.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor x_1_328.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n1_to_3_986.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n3_to_4_338.pt
[LOG] Saving tensor x_2_121.pt
[LOG] Saving tensor n0_to_2_601.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor x_2_328.pt
[LOG] Saving tensor global_feature_338.pt
[LOG] Saving tensor x_3_121.pt
[LOG] Saving tensor n1_to_4_986.pt
[LOG] Process 42: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_3_601.pt
[LOG] Saving tensor x_4_121.pt
[LOG] Saving tensor x_3_328.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n2_to_3_986.pt
[LOG] Saving tensor n0_to_0_121.pt
[LOG] Saving tensor n0_to_4_601.pt
[LOG] Saving tensor x_4_328.pt
[LOG] Saving tensor n2_to_4_986.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n1_to_2_601.pt
[LOG] Saving tensor n0_to_0_328.pt
[LOG] Saving tensor n1_to_1_121.pt
[LOG] Saving tensor n3_to_4_986.pt
[LOG] Saving tensor n1_to_3_601.pt
[LOG] Saving tensor n2_to_2_121.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor global_feature_986.pt
[LOG] Saving tensor n1_to_1_328.pt
[LOG] Saving tensor n1_to_4_601.pt
[LOG] Process 126: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n3_to_3_121.pt
[LOG] Saving tensor n2_to_3_601.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n4_to_4_121.pt
[LOG] Saving tensor n2_to_2_328.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n0_to_1_121.pt
[LOG] Saving tensor n2_to_4_601.pt
[LOG] Saving tensor n3_to_4_601.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n0_to_2_121.pt
[LOG] Saving tensor global_feature_601.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n0_to_3_121.pt
[LOG] Process 75: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n0_to_4_121.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n1_to_2_121.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n1_to_3_121.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n1_to_4_121.pt
[LOG] Saving tensor n3_to_3_328.pt
[LOG] Saving tensor n2_to_3_121.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n4_to_4_328.pt
[LOG] Saving tensor n2_to_4_121.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n0_to_1_328.pt
[LOG] Saving tensor n3_to_4_121.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor global_feature_121.pt
[LOG] Saving tensor n0_to_2_328.pt
[LOG] Computing n2_to_4 for num 951
[LOG] Process 15: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n0_to_3_328.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n0_to_4_328.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n1_to_2_328.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n1_to_3_328.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n1_to_4_328.pt
[LOG] Saving tensor n2_to_3_328.pt
[LOG] Saving tensor n2_to_4_328.pt
[LOG] Saving tensor n3_to_4_328.pt
[LOG] Saving tensor global_feature_328.pt
[LOG] Process 41: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2471 Tetrahedra.
    [LOG] Generated 53 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 19.339622641509433
    [LOG] Max number of nodes per cluster is 85 and the number is 33
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_3 for num 41
[LOG] Computing n1_to_4 for num 41
[LOG] Computing n2_to_3 for num 41
[LOG] Computing n2_to_4 for num 41
[LOG] We will select 497 edges and 2471 tetra
[LOG] Edges from tetra 0 and KDTree 1684 with 0 edges in common.
[LOG] Computing n3_to_4 for num 41
[LOG] Global feature for num 41
[LOG] Global feature for num 41
[LOG] Saving tensor x_0_41.pt
[LOG] Saving tensor x_1_41.pt
[LOG] Saving tensor x_2_41.pt
[LOG] Saving tensor x_3_41.pt
[LOG] Saving tensor x_4_41.pt
[LOG] Saving tensor n0_to_0_41.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_4 for num 951
[LOG] Saving tensor n1_to_1_41.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Global feature for num 951
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_4 for num 568
[LOG] Global feature for num 951
[LOG] Saving tensor x_0_951.pt
[LOG] Saving tensor n2_to_2_41.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Global feature for num 568
[LOG] Saving tensor x_1_951.pt
[LOG] Global feature for num 568
[LOG] Saving tensor x_0_568.pt
[LOG] Saving tensor n3_to_3_41.pt
[LOG] Saving tensor x_2_951.pt
[LOG] Saving tensor n4_to_4_41.pt
[LOG] Saving tensor x_3_951.pt
[LOG] Saving tensor x_1_568.pt
[LOG] Saving tensor x_4_951.pt
[LOG] Saving tensor n0_to_1_41.pt
[LOG] Saving tensor x_2_568.pt
[LOG] Saving tensor n0_to_0_951.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n0_to_2_41.pt
[LOG] Saving tensor x_3_568.pt
[LOG] Saving tensor x_4_568.pt
[LOG] Saving tensor n0_to_0_568.pt
[LOG] Saving tensor n0_to_3_41.pt
[LOG] Saving tensor n1_to_1_951.pt
[LOG] Saving tensor n0_to_4_41.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n1_to_1_568.pt
[LOG] Saving tensor n2_to_2_951.pt
[LOG] Saving tensor n1_to_2_41.pt
[LOG] Saving tensor n1_to_3_41.pt
[LOG] Saving tensor n2_to_2_568.pt
[LOG] Saving tensor n1_to_4_41.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n2_to_3_41.pt
[LOG] Saving tensor n2_to_4_41.pt
[LOG] Saving tensor n3_to_3_568.pt
[LOG] Saving tensor n3_to_4_41.pt
[LOG] Saving tensor global_feature_41.pt
[LOG] Saving tensor n4_to_4_568.pt
[LOG] Process 5: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_1_568.pt
[LOG] Saving tensor n0_to_2_568.pt
[LOG] Saving tensor n0_to_3_568.pt
[LOG] Saving tensor n0_to_4_568.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n1_to_2_568.pt
[LOG] Saving tensor n1_to_3_568.pt
[LOG] Saving tensor n1_to_4_568.pt
[LOG] Saving tensor n2_to_3_568.pt
[LOG] Saving tensor n2_to_4_568.pt
[LOG] Saving tensor n3_to_4_568.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor global_feature_568.pt
[LOG] Process 71: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n3_to_3_951.pt
[LOG] Saving tensor n4_to_4_951.pt
[LOG] Saving tensor n0_to_1_951.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 2408 Tetrahedra.
    [LOG] Generated 67 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.492537313432836
    [LOG] Max number of nodes per cluster is 70 and the number is 11
[LOG] Saving tensor n0_to_2_951.pt
[LOG] Saving tensor n0_to_3_951.pt
[LOG] Saving tensor n0_to_4_951.pt
[LOG] Saving tensor n1_to_2_951.pt
[LOG] Saving tensor n1_to_3_951.pt
[LOG] Saving tensor n1_to_4_951.pt
[LOG] Saving tensor n2_to_3_951.pt
[LOG] Saving tensor n2_to_4_951.pt
[LOG] Saving tensor n3_to_4_951.pt
[LOG] Saving tensor global_feature_951.pt
[LOG] Process 121: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] GENERATED TETRA
[LOG] We will select 215 edges and 2408 tetra
[LOG] Edges from tetra 0 and KDTree 1602 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 124: Created combinatorial complex for file data_973.hdf5
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1804 Tetrahedra.
    [LOG] Generated 56 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.946428571428571
    [LOG] Max number of nodes per cluster is 36 and the number is 43
[LOG] Computing n0_to_2 for num 456
[LOG] We will select 583 edges and 1804 tetra
[LOG] Edges from tetra 0 and KDTree 840 with 0 edges in common.
[LOG] Process 124: Calculating Neighbors
[LOG] Loading pickle file data_973.pickle
[LOG] Processing node features for num 973
[LOG] Processing edge features for num 973
[LOG] Processing tetra features for num 973
[LOG] Processing cluster features for num 973
[LOG] Processing cluster features for num 973
[LOG] Processing adjacency and incidence matrices for num 973
[LOG] Computing n0_to_0 for num 973
[LOG] Computing n0_to_2 for num 216
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_1 for num 973
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_2 (adjacency) for num 973
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_3 for num 288
[LOG] Calculating for cell ranks 0 and 3
[LOG] Removed 3 subset clusters.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 46: Created combinatorial complex for file data_369.hdf5
[LOG] Computing n3_to_3 (adjacency) for num 973
[LOG] Computing n4_to_4 (coadjacency) for num 973
[LOG] Computing n0_to_1 for num 973
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_4 for num 288
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 46: Calculating Neighbors
[LOG] Loading pickle file data_369.pickle
[LOG] Processing node features for num 369
[LOG] Processing edge features for num 369
[LOG] Processing tetra features for num 369
[LOG] Computing n0_to_2 for num 973
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 105: Created combinatorial complex for file data_840.hdf5
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing cluster features for num 369
[LOG] Processing cluster features for num 369
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing adjacency and incidence matrices for num 369
[LOG] Computing n0_to_0 for num 369
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_1 for num 369
[LOG] Process 105: Calculating Neighbors
[LOG] Loading pickle file data_840.pickle
[LOG] Processing node features for num 840
[LOG] Processing edge features for num 840
[LOG] GENERATED TETRA
[LOG] Computing n2_to_3 for num 288
[LOG] Processing tetra features for num 840
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 840
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Processing cluster features for num 840
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Processing adjacency and incidence matrices for num 840
[LOG] Computing n0_to_0 for num 840
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n1_to_1 for num 840
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n2_to_2 (adjacency) for num 369
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 840
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_3 (adjacency) for num 369
[LOG] Computing n4_to_4 (coadjacency) for num 369
[LOG] Computing n0_to_1 for num 369
[LOG] Computing n0_to_2 for num 369
[LOG] Calculating for cell ranks 3 and 3
[LOG] GENERATED TETRA
[LOG] Computing n2_to_4 for num 288
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1998 Tetrahedra.
    [LOG] Generated 59 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.440677966101696
    [LOG] Max number of nodes per cluster is 71 and the number is 58
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_3 for num 973
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_4 for num 973
[LOG] Computing n3_to_3 (adjacency) for num 840
[LOG] Computing n4_to_4 (coadjacency) for num 840
[LOG] Computing n0_to_3 for num 369
[LOG] Computing n0_to_1 for num 840
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_2 for num 973
[LOG] Computing n0_to_4 for num 369
[LOG] We will select 284 edges and 1998 tetra
[LOG] Edges from tetra 0 and KDTree 804 with 0 edges in common.
[LOG] Computing n0_to_2 for num 840
[LOG] Computing n1_to_2 for num 369
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_4 for num 288
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Global feature for num 288
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Global feature for num 288
[LOG] Saving tensor x_0_288.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor x_1_288.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n1_to_3 for num 369
[LOG] Saving tensor x_2_288.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor x_3_288.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor x_4_288.pt
[LOG] Saving tensor n0_to_0_288.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n1_to_4 for num 369
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n1_to_1_288.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n2_to_2_288.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n2_to_3 for num 369
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n1_to_3 for num 973
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n2_to_4 for num 369
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n1_to_4 for num 973
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n2_to_3 for num 973
[LOG] Saving tensor n3_to_3_288.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n4_to_4_288.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n0_to_1_288.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n3_to_4 for num 369
[LOG] Saving tensor n0_to_2_288.pt
[LOG] Global feature for num 369
[LOG] Global feature for num 369
[LOG] Saving tensor x_0_369.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n0_to_3_288.pt
[LOG] Saving tensor x_1_369.pt
[LOG] Saving tensor x_2_369.pt
[LOG] Saving tensor x_3_369.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n0_to_4_288.pt
[LOG] Saving tensor x_4_369.pt
[LOG] Saving tensor n1_to_2_288.pt
[LOG] Saving tensor n0_to_0_369.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n1_to_1_369.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n1_to_3_288.pt
[LOG] Computing n0_to_3 for num 840
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n2_to_2_369.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n1_to_4_288.pt
[LOG] Computing n2_to_4 for num 973
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n3_to_3_369.pt
[LOG] Saving tensor n2_to_3_288.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n4_to_4_369.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n2_to_4_288.pt
[LOG] Saving tensor n0_to_1_369.pt
[LOG] Saving tensor n3_to_4_288.pt
[LOG] Computing n0_to_4 for num 840
[LOG] Saving tensor n0_to_2_369.pt
[LOG] Saving tensor global_feature_288.pt
[LOG] Process 36: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_3_369.pt
[LOG] Saving tensor n0_to_4_369.pt
[LOG] Saving tensor n1_to_2_369.pt
[LOG] Saving tensor n1_to_3_369.pt
[LOG] Computing n1_to_2 for num 840
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n1_to_4_369.pt
[LOG] Saving tensor n2_to_3_369.pt
[LOG] Saving tensor n2_to_4_369.pt
[LOG] Computing n3_to_4 for num 973
[LOG] Global feature for num 973
[LOG] Saving tensor n3_to_4_369.pt
[LOG] Global feature for num 973
[LOG] Saving tensor x_0_973.pt
[LOG] Saving tensor global_feature_369.pt
[LOG] Saving tensor x_1_973.pt
[LOG] Process 46: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor x_2_973.pt
[LOG] Saving tensor x_3_973.pt
[LOG] Saving tensor x_4_973.pt
[LOG] Saving tensor n0_to_0_973.pt
[LOG] Saving tensor n1_to_1_973.pt
[LOG] Saving tensor n2_to_2_973.pt
[LOG] Saving tensor n3_to_3_973.pt
[LOG] Saving tensor n4_to_4_973.pt
[LOG] Saving tensor n0_to_1_973.pt
[LOG] Saving tensor n0_to_2_973.pt
[LOG] Saving tensor n0_to_3_973.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n0_to_4_973.pt
[LOG] Saving tensor n1_to_2_973.pt
[LOG] Saving tensor n1_to_3_973.pt
[LOG] Saving tensor n1_to_4_973.pt
[LOG] Saving tensor n2_to_3_973.pt
[LOG] Saving tensor n2_to_4_973.pt
[LOG] Saving tensor n3_to_4_973.pt
[LOG] Saving tensor global_feature_973.pt
[LOG] Process 124: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_3 for num 840
[LOG] Computing n1_to_4 for num 840
[LOG] Computing n2_to_3 for num 840
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_4 for num 840
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_4 for num 840
[LOG] Global feature for num 840
[LOG] Global feature for num 840
[LOG] Saving tensor x_0_840.pt
[LOG] Saving tensor x_1_840.pt
[LOG] Saving tensor x_2_840.pt
[LOG] Saving tensor x_3_840.pt
[LOG] Saving tensor x_4_840.pt
[LOG] Saving tensor n0_to_0_840.pt
[LOG] Saving tensor n1_to_1_840.pt
[LOG] Saving tensor n2_to_2_840.pt
[LOG] Saving tensor n3_to_3_840.pt
[LOG] Saving tensor n4_to_4_840.pt
[LOG] Process 20: Created combinatorial complex for file data_161.hdf5
[LOG] Saving tensor n0_to_1_840.pt
[LOG] Saving tensor n0_to_2_840.pt
[LOG] Saving tensor n0_to_3_840.pt
[LOG] Saving tensor n0_to_4_840.pt
[LOG] Saving tensor n1_to_2_840.pt
[LOG] Saving tensor n1_to_3_840.pt
[LOG] Saving tensor n1_to_4_840.pt
[LOG] Saving tensor n2_to_3_840.pt
[LOG] Saving tensor n2_to_4_840.pt
[LOG] Saving tensor n3_to_4_840.pt
[LOG] Saving tensor global_feature_840.pt
[LOG] Process 105: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Process 20: Calculating Neighbors
[LOG] Loading pickle file data_161.pickle
[LOG] Processing node features for num 161
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Processing edge features for num 161
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Processing tetra features for num 161
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Processing cluster features for num 161
[LOG] Processing cluster features for num 161
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 161
[LOG] Computing n0_to_0 for num 161
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n1_to_1 for num 161
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_2 (adjacency) for num 161
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 2934 Tetrahedra.
    [LOG] Generated 61 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.770491803278688
    [LOG] Max number of nodes per cluster is 106 and the number is 59
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 4
[LOG] We will select 1136 edges and 2934 tetra
[LOG] Edges from tetra 0 and KDTree 1394 with 0 edges in common.
[LOG] Computing n3_to_3 (adjacency) for num 161
[LOG] Computing n4_to_4 (coadjacency) for num 161
[LOG] Computing n0_to_1 for num 161
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_2 for num 161
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1602 Tetrahedra.
    [LOG] Generated 55 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.272727272727273
    [LOG] Max number of nodes per cluster is 27 and the number is 29
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 964 Tetrahedra.
    [LOG] Generated 43 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.604651162790697
    [LOG] Max number of nodes per cluster is 60 and the number is 11
[LOG] GENERATED TETRA
[LOG] We will select 261 edges and 1602 tetra
[LOG] Edges from tetra 0 and KDTree 261 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 2
[LOG] We will select 100 edges and 964 tetra
[LOG] Edges from tetra 0 and KDTree 1373 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 2
[LOG] GENERATED TETRA
[LOG] Computing n3_to_3 (adjacency) for num 8
[LOG] Computing n4_to_4 (coadjacency) for num 8
[LOG] Computing n0_to_1 for num 8
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_3 for num 161
[LOG] Computing n0_to_4 for num 161
[LOG] Removed 0 subset clusters.
[LOG] Computing n1_to_2 for num 161
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 89: Created combinatorial complex for file data_714.hdf5
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_3 for num 161
[LOG] Computing n1_to_4 for num 161
[LOG] Process 89: Calculating Neighbors
[LOG] Loading pickle file data_714.pickle
[LOG] Processing node features for num 714
[LOG] Computing n2_to_3 for num 161
[LOG] Processing edge features for num 714
[LOG] Processing tetra features for num 714
[LOG] Computing n2_to_4 for num 161
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing cluster features for num 714
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_4 for num 161
[LOG] Global feature for num 161
[LOG] Processing cluster features for num 714
[LOG] Global feature for num 161
[LOG] Saving tensor x_0_161.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1370 Tetrahedra.
    [LOG] Generated 43 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.558139534883722
    [LOG] Max number of nodes per cluster is 81 and the number is 25
[LOG] Saving tensor x_1_161.pt
[LOG] Saving tensor x_2_161.pt
[LOG] Saving tensor x_3_161.pt
[LOG] Saving tensor x_4_161.pt
[LOG] Saving tensor n0_to_0_161.pt
[LOG] Processing adjacency and incidence matrices for num 714
[LOG] Computing n0_to_0 for num 714
[LOG] Saving tensor n1_to_1_161.pt
[LOG] Saving tensor n2_to_2_161.pt
[LOG] Saving tensor n3_to_3_161.pt
[LOG] Saving tensor n4_to_4_161.pt
[LOG] Saving tensor n0_to_1_161.pt
[LOG] Saving tensor n0_to_2_161.pt
[LOG] Saving tensor n0_to_3_161.pt
[LOG] Saving tensor n0_to_4_161.pt
[LOG] Saving tensor n1_to_2_161.pt
[LOG] Saving tensor n1_to_3_161.pt
[LOG] Saving tensor n1_to_4_161.pt
[LOG] Saving tensor n2_to_3_161.pt
[LOG] Saving tensor n2_to_4_161.pt
[LOG] Computing n1_to_1 for num 714
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n3_to_4_161.pt
[LOG] Saving tensor global_feature_161.pt
[LOG] Process 20: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] We will select 213 edges and 1370 tetra
[LOG] Edges from tetra 0 and KDTree 4396 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_2 (adjacency) for num 714
[LOG] Removed 1 subset clusters.
[LOG] Computing n3_to_3 (adjacency) for num 714
[LOG] Computing n4_to_4 (coadjacency) for num 714
[LOG] Computing n0_to_1 for num 714
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_2 for num 714
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 119: Created combinatorial complex for file data_938.hdf5
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 0 subset clusters.
[LOG] Process 119: Calculating Neighbors
[LOG] Loading pickle file data_938.pickle
[LOG] Processing node features for num 938
[LOG] Processing edge features for num 938
[LOG] Removed 1 subset clusters.
[LOG] Processing tetra features for num 938
[LOG] Computing n0_to_3 for num 714
[LOG] Computing n0_to_4 for num 714
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing cluster features for num 938
[LOG] Processing cluster features for num 938
[LOG] Computing n1_to_2 for num 714
[LOG] Process 8: Created combinatorial complex for file data_65.hdf5
[LOG] Processing adjacency and incidence matrices for num 938
[LOG] Computing n0_to_0 for num 938
[LOG] Computing n1_to_3 for num 714
[LOG] Computing n1_to_4 for num 714
[LOG] Computing n2_to_3 for num 714
[LOG] Computing n1_to_1 for num 938
[LOG] Computing n2_to_4 for num 714
[LOG] Computing n3_to_4 for num 714
[LOG] Global feature for num 714
[LOG] Global feature for num 714
[LOG] Saving tensor x_0_714.pt
[LOG] Saving tensor x_1_714.pt
[LOG] Saving tensor x_2_714.pt
[LOG] Saving tensor x_3_714.pt
[LOG] Saving tensor x_4_714.pt
[LOG] Saving tensor n0_to_0_714.pt
[LOG] Saving tensor n1_to_1_714.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n2_to_2_714.pt
[LOG] Saving tensor n3_to_3_714.pt
[LOG] Saving tensor n4_to_4_714.pt
[LOG] Saving tensor n0_to_1_714.pt
[LOG] Saving tensor n0_to_2_714.pt
[LOG] Saving tensor n0_to_3_714.pt
[LOG] Saving tensor n0_to_4_714.pt
[LOG] Process 8: Calculating Neighbors
[LOG] Loading pickle file data_65.pickle
[LOG] Processing node features for num 65
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n1_to_2_714.pt
[LOG] Saving tensor n1_to_3_714.pt
[LOG] Processing edge features for num 65
[LOG] Saving tensor n1_to_4_714.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n2_to_3_714.pt
[LOG] Processing tetra features for num 65
[LOG] Computing n2_to_2 (adjacency) for num 938
[LOG] Saving tensor n2_to_4_714.pt
[LOG] Computing n0_to_3 for num 216
[LOG] Saving tensor n3_to_4_714.pt
[LOG] Processing cluster features for num 65
[LOG] Saving tensor global_feature_714.pt
[LOG] Process 89: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing cluster features for num 65
[LOG] Process 67: Created combinatorial complex for file data_537.hdf5
[LOG] Processing adjacency and incidence matrices for num 65
[LOG] Computing n0_to_0 for num 65
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_4 for num 216
[LOG] Computing n3_to_3 (adjacency) for num 938
[LOG] Computing n4_to_4 (coadjacency) for num 938
[LOG] Computing n0_to_1 for num 938
[LOG] Computing n0_to_2 for num 938
[LOG] Computing n1_to_1 for num 65
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3484 Tetrahedra.
    [LOG] Generated 92 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.619565217391305
    [LOG] Max number of nodes per cluster is 68 and the number is 90
[LOG] Computing n1_to_2 for num 216
[LOG] Computing n2_to_2 (adjacency) for num 65
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 67: Calculating Neighbors
[LOG] Loading pickle file data_537.pickle
[LOG] Processing node features for num 537
[LOG] Processing edge features for num 537
[LOG] Computing n0_to_3 for num 938
[LOG] Processing tetra features for num 537
[LOG] Computing n0_to_4 for num 938
[LOG] Computing n1_to_2 for num 938
[LOG] Computing n3_to_3 (adjacency) for num 65
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2353 Tetrahedra.
    [LOG] Generated 57 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.0
    [LOG] Max number of nodes per cluster is 90 and the number is 55
[LOG] Computing n4_to_4 (coadjacency) for num 65
[LOG] Computing n0_to_1 for num 65
[LOG] Calculating for cell ranks 1 and 1
[LOG] We will select 377 edges and 3484 tetra
[LOG] Edges from tetra 0 and KDTree 2456 with 0 edges in common.
[LOG] Processing cluster features for num 537
[LOG] Processing cluster features for num 537
[LOG] Computing n0_to_2 for num 65
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_3 for num 938
[LOG] Processing adjacency and incidence matrices for num 537
[LOG] Computing n0_to_0 for num 537
[LOG] Computing n1_to_4 for num 938
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_3 for num 938
[LOG] We will select 1194 edges and 2353 tetra
[LOG] Edges from tetra 0 and KDTree 2158 with 0 edges in common.
[LOG] Computing n2_to_4 for num 938
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_4 for num 938
[LOG] Global feature for num 938
[LOG] Global feature for num 938
[LOG] Saving tensor x_0_938.pt
[LOG] Saving tensor x_1_938.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor x_2_938.pt
[LOG] Saving tensor x_3_938.pt
[LOG] Saving tensor x_4_938.pt
[LOG] Saving tensor n0_to_0_938.pt
[LOG] Saving tensor n1_to_1_938.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n2_to_2_938.pt
[LOG] Saving tensor n3_to_3_938.pt
[LOG] Saving tensor n4_to_4_938.pt
[LOG] Computing n1_to_1 for num 537
[LOG] Saving tensor n0_to_1_938.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n0_to_2_938.pt
[LOG] Saving tensor n0_to_3_938.pt
[LOG] Saving tensor n0_to_4_938.pt
[LOG] Saving tensor n1_to_2_938.pt
[LOG] Saving tensor n1_to_3_938.pt
[LOG] Computing n0_to_3 for num 456
[LOG] Saving tensor n1_to_4_938.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n2_to_3_938.pt
[LOG] Saving tensor n2_to_4_938.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n3_to_4_938.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor global_feature_938.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Process 119: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n0_to_4 for num 456
[LOG] Calculating for cell ranks 1 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_3 for num 65
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_4 for num 65
[LOG] Computing n1_to_2 for num 456
[LOG] Computing n1_to_2 for num 65
[LOG] Computing n1_to_3 for num 65
[LOG] Computing n1_to_4 for num 65
[LOG] Computing n2_to_3 for num 65
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_4 for num 65
[LOG] Computing n3_to_4 for num 65
[LOG] Global feature for num 65
[LOG] Global feature for num 65
[LOG] Saving tensor x_0_65.pt
[LOG] Saving tensor x_1_65.pt
[LOG] Saving tensor x_2_65.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor x_3_65.pt
[LOG] Saving tensor x_4_65.pt
[LOG] Saving tensor n0_to_0_65.pt
[LOG] Saving tensor n1_to_1_65.pt
[LOG] Saving tensor n2_to_2_65.pt
[LOG] Saving tensor n3_to_3_65.pt
[LOG] Saving tensor n4_to_4_65.pt
[LOG] Saving tensor n0_to_1_65.pt
[LOG] Saving tensor n0_to_2_65.pt
[LOG] Saving tensor n0_to_3_65.pt
[LOG] Saving tensor n0_to_4_65.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n1_to_2_65.pt
[LOG] Saving tensor n1_to_3_65.pt
[LOG] Saving tensor n1_to_4_65.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n2_to_3_65.pt
[LOG] Saving tensor n2_to_4_65.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n3_to_4_65.pt
[LOG] Saving tensor global_feature_65.pt
[LOG] Process 8: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2864 Tetrahedra.
    [LOG] Generated 71 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.577464788732394
    [LOG] Max number of nodes per cluster is 33 and the number is 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Removed 0 subset clusters.
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n2_to_2 (adjacency) for num 537
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n1_to_3 for num 528
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] We will select 520 edges and 2864 tetra
[LOG] Edges from tetra 0 and KDTree 520 with 0 edges in common.
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 113: Created combinatorial complex for file data_896.hdf5
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n1_to_4 for num 528
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Process 116: Created combinatorial complex for file data_917.hdf5
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Process 113: Calculating Neighbors
[LOG] Loading pickle file data_896.pickle
[LOG] Processing node features for num 896
[LOG] Processing edge features for num 896
[LOG] Computing n3_to_3 (adjacency) for num 537
[LOG] Computing n4_to_4 (coadjacency) for num 537
[LOG] Computing n0_to_1 for num 537
[LOG] Processing tetra features for num 896
[LOG] Process 116: Calculating Neighbors
[LOG] Loading pickle file data_917.pickle
[LOG] Processing node features for num 917
[LOG] Processing edge features for num 917
[LOG] Computing n2_to_3 for num 528
[LOG] Processing cluster features for num 896
[LOG] Processing tetra features for num 917
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing cluster features for num 896
[LOG] Processing adjacency and incidence matrices for num 896
[LOG] Computing n0_to_0 for num 896
[LOG] Computing n0_to_2 for num 537
[LOG] Processing cluster features for num 917
[LOG] Computing n0_to_2 for num 8
[LOG] Processing cluster features for num 917
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing adjacency and incidence matrices for num 917
[LOG] Computing n0_to_0 for num 917
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_1 for num 917
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_1 for num 896
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_4 for num 528
[LOG] GENERATED TETRA
[LOG] Computing n0_to_3 for num 537
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_2 (adjacency) for num 917
[LOG] Computing n0_to_4 for num 537
[LOG] Computing n1_to_2 for num 537
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 120: Created combinatorial complex for file data_945.hdf5
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_3 for num 696
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_4 for num 528
[LOG] Calculating for cell ranks 0 and 4
[LOG] Global feature for num 528
[LOG] Global feature for num 528
[LOG] Saving tensor x_0_528.pt
[LOG] Saving tensor x_1_528.pt
[LOG] Saving tensor x_2_528.pt
[LOG] Saving tensor x_3_528.pt
[LOG] Saving tensor x_4_528.pt
[LOG] Saving tensor n0_to_0_528.pt
[LOG] Saving tensor n1_to_1_528.pt
[LOG] Saving tensor n2_to_2_528.pt
[LOG] Computing n2_to_2 (adjacency) for num 896
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 120: Calculating Neighbors
[LOG] Loading pickle file data_945.pickle
[LOG] Processing node features for num 945
[LOG] Saving tensor n3_to_3_528.pt
[LOG] Saving tensor n4_to_4_528.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n0_to_1_528.pt
[LOG] Processing edge features for num 945
[LOG] Saving tensor n0_to_2_528.pt
[LOG] Saving tensor n0_to_3_528.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_4 for num 696
[LOG] Saving tensor n0_to_4_528.pt
[LOG] Saving tensor n1_to_2_528.pt
[LOG] Saving tensor n1_to_3_528.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n1_to_4_528.pt
[LOG] Saving tensor n2_to_3_528.pt
[LOG] Saving tensor n2_to_4_528.pt
[LOG] Saving tensor n3_to_4_528.pt
[LOG] Processing tetra features for num 945
[LOG] Saving tensor global_feature_528.pt
[LOG] Process 66: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 917
[LOG] Computing n4_to_4 (coadjacency) for num 917
[LOG] Computing n0_to_1 for num 917
[LOG] Processing cluster features for num 945
[LOG] Processing cluster features for num 945
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Processing adjacency and incidence matrices for num 945
[LOG] Computing n0_to_0 for num 945
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n0_to_2 for num 917
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n1_to_1 for num 945
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_3 for num 537
[LOG] Computing n3_to_3 (adjacency) for num 896
[LOG] Computing n4_to_4 (coadjacency) for num 896
[LOG] Computing n0_to_1 for num 896
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_4 for num 537
[LOG] Computing n2_to_3 for num 696
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_3 for num 537
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3075 Tetrahedra.
    [LOG] Generated 86 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.011627906976743
    [LOG] Max number of nodes per cluster is 49 and the number is 84
[LOG] Computing n2_to_4 for num 537
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n3_to_4 for num 537
[LOG] Global feature for num 537
[LOG] Global feature for num 537
[LOG] Saving tensor x_0_537.pt
[LOG] Saving tensor x_1_537.pt
[LOG] Saving tensor x_2_537.pt
[LOG] Saving tensor x_3_537.pt
[LOG] Saving tensor x_4_537.pt
[LOG] Saving tensor n0_to_0_537.pt
[LOG] Saving tensor n1_to_1_537.pt
[LOG] Saving tensor n2_to_2_537.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n3_to_3_537.pt
[LOG] We will select 899 edges and 3075 tetra
[LOG] Edges from tetra 0 and KDTree 1683 with 0 edges in common.
[LOG] Saving tensor n4_to_4_537.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n0_to_1_537.pt
[LOG] Saving tensor n0_to_2_537.pt
[LOG] Saving tensor n0_to_3_537.pt
[LOG] Saving tensor n0_to_4_537.pt
[LOG] Saving tensor n1_to_2_537.pt
[LOG] Saving tensor n1_to_3_537.pt
[LOG] Saving tensor n1_to_4_537.pt
[LOG] Saving tensor n2_to_3_537.pt
[LOG] Saving tensor n2_to_4_537.pt
[LOG] Saving tensor n3_to_4_537.pt
[LOG] Saving tensor global_feature_537.pt
[LOG] Process 67: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_2 for num 896
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_2 (adjacency) for num 945
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_4 for num 696
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n3_to_3 (adjacency) for num 945
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n4_to_4 (coadjacency) for num 945
[LOG] Computing n0_to_1 for num 945
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_2 for num 945
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_3 for num 917
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_4 for num 917
[LOG] Computing n0_to_3 for num 896
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_2 for num 917
[LOG] Computing n0_to_4 for num 896
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n1_to_2 for num 896
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n3_to_4 for num 696
[LOG] Calculating for cell ranks 1 and 1
[LOG] Global feature for num 696
[LOG] Global feature for num 696
[LOG] Saving tensor x_0_696.pt
[LOG] Saving tensor x_1_696.pt
[LOG] Saving tensor x_2_696.pt
[LOG] Saving tensor x_3_696.pt
[LOG] Saving tensor x_4_696.pt
[LOG] Saving tensor n0_to_0_696.pt
[LOG] Saving tensor n1_to_1_696.pt
[LOG] Saving tensor n2_to_2_696.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n3_to_3_696.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n4_to_4_696.pt
[LOG] Saving tensor n0_to_1_696.pt
[LOG] Saving tensor n0_to_2_696.pt
[LOG] Saving tensor n0_to_3_696.pt
[LOG] Saving tensor n0_to_4_696.pt
[LOG] Saving tensor n1_to_2_696.pt
[LOG] Computing n1_to_3 for num 917
[LOG] Saving tensor n1_to_3_696.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n1_to_4_696.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_4 for num 917
[LOG] Saving tensor n2_to_3_696.pt
[LOG] Saving tensor n2_to_4_696.pt
[LOG] Computing n2_to_3 for num 917
[LOG] Saving tensor n3_to_4_696.pt
[LOG] Computing n0_to_3 for num 945
[LOG] Saving tensor global_feature_696.pt
[LOG] Process 87: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_4 for num 945
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_2 for num 945
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_4 for num 917
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Removed 3 subset clusters.
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n3_to_4 for num 917
[LOG] Global feature for num 917
[LOG] Global feature for num 917
[LOG] Saving tensor x_0_917.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor x_1_917.pt
[LOG] Saving tensor x_2_917.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor x_3_917.pt
[LOG] Saving tensor x_4_917.pt
[LOG] Saving tensor n0_to_0_917.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n1_to_1_917.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n2_to_2_917.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n3_to_3_917.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n4_to_4_917.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n0_to_1_917.pt
[LOG] Saving tensor n0_to_2_917.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n0_to_3_917.pt
[LOG] Saving tensor n0_to_4_917.pt
[LOG] Saving tensor n1_to_2_917.pt
[LOG] Saving tensor n1_to_3_917.pt
[LOG] Saving tensor n1_to_4_917.pt
[LOG] Saving tensor n2_to_3_917.pt
[LOG] Saving tensor n2_to_4_917.pt
[LOG] Saving tensor n3_to_4_917.pt
[LOG] Saving tensor global_feature_917.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Process 116: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_3 for num 945
[LOG] Computing n1_to_4 for num 945
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_3 for num 945
[LOG] Process 82: Created combinatorial complex for file data_657.hdf5
[LOG] Computing n1_to_3 for num 896
[LOG] Computing n1_to_4 for num 896
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_4 for num 945
[LOG] Computing n2_to_3 for num 896
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_4 for num 896
[LOG] Computing n3_to_4 for num 945
[LOG] Calculating for cell ranks 1 and 2
[LOG] Global feature for num 945
[LOG] Global feature for num 945
[LOG] Saving tensor x_0_945.pt
[LOG] Saving tensor x_1_945.pt
[LOG] Saving tensor x_2_945.pt
[LOG] Saving tensor x_3_945.pt
[LOG] Saving tensor x_4_945.pt
[LOG] Saving tensor n0_to_0_945.pt
[LOG] Saving tensor n1_to_1_945.pt
[LOG] Computing n3_to_4 for num 896
[LOG] Saving tensor n2_to_2_945.pt
[LOG] Global feature for num 896
[LOG] Global feature for num 896
[LOG] Saving tensor x_0_896.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor x_1_896.pt
[LOG] Saving tensor x_2_896.pt
[LOG] Saving tensor n3_to_3_945.pt
[LOG] Saving tensor x_3_896.pt
[LOG] Saving tensor n4_to_4_945.pt
[LOG] Saving tensor x_4_896.pt
[LOG] Saving tensor n0_to_0_896.pt
[LOG] Saving tensor n0_to_1_945.pt
[LOG] Saving tensor n1_to_1_896.pt
[LOG] Saving tensor n0_to_2_945.pt
[LOG] Saving tensor n2_to_2_896.pt
[LOG] Saving tensor n0_to_3_945.pt
[LOG] Saving tensor n0_to_4_945.pt
[LOG] Saving tensor n1_to_2_945.pt
[LOG] Saving tensor n1_to_3_945.pt
[LOG] Saving tensor n3_to_3_896.pt
[LOG] Saving tensor n1_to_4_945.pt
[LOG] Saving tensor n4_to_4_896.pt
[LOG] Saving tensor n2_to_3_945.pt
[LOG] Saving tensor n0_to_1_896.pt
[LOG] Saving tensor n0_to_2_896.pt
[LOG] Saving tensor n2_to_4_945.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n3_to_4_945.pt
[LOG] Saving tensor n0_to_3_896.pt
[LOG] Saving tensor n0_to_4_896.pt
[LOG] Saving tensor global_feature_945.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Process 120: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n1_to_2_896.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n1_to_3_896.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n1_to_4_896.pt
[LOG] Process 82: Calculating Neighbors
[LOG] Loading pickle file data_657.pickle
[LOG] Processing node features for num 657
[LOG] Saving tensor n2_to_3_896.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Processing edge features for num 657
[LOG] Saving tensor n2_to_4_896.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n3_to_4_896.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor global_feature_896.pt
[LOG] Process 113: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Processing tetra features for num 657
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing cluster features for num 657
[LOG] Processing cluster features for num 657
[LOG] Processing adjacency and incidence matrices for num 657
[LOG] Computing n0_to_0 for num 657
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_1 for num 657
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_3 for num 32
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_3 for num 8
[LOG] Computing n1_to_4 for num 32
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1272 Tetrahedra.
    [LOG] Generated 40 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.5
    [LOG] Max number of nodes per cluster is 40 and the number is 33
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] We will select 271 edges and 1272 tetra
[LOG] Edges from tetra 0 and KDTree 376 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_4 for num 8
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_2 (adjacency) for num 657
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_2 for num 8
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1064 Tetrahedra.
    [LOG] Generated 40 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.975
    [LOG] Max number of nodes per cluster is 83 and the number is 17
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] We will select 107 edges and 1064 tetra
[LOG] Edges from tetra 0 and KDTree 619 with 0 edges in common.
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n2_to_3 for num 32
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_3 for num 993
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 31: Created combinatorial complex for file data_250.hdf5
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n3_to_3 (adjacency) for num 657
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n4_to_4 (coadjacency) for num 657
[LOG] Computing n0_to_1 for num 657
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n1_to_4 for num 993
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n2_to_4 for num 32
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Process 31: Calculating Neighbors
[LOG] Loading pickle file data_250.pickle
[LOG] Processing node features for num 250
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing edge features for num 250
[LOG] Processing tetra features for num 250
[LOG] Processing cluster features for num 250
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_2 for num 657
[LOG] Processing cluster features for num 250
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing adjacency and incidence matrices for num 250
[LOG] Computing n0_to_0 for num 250
[LOG] Computing n1_to_1 for num 250
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_2 (adjacency) for num 250
[LOG] Computing n3_to_3 (adjacency) for num 250
[LOG] Computing n4_to_4 (coadjacency) for num 250
[LOG] Computing n0_to_1 for num 250
[LOG] Computing n0_to_2 for num 250
[LOG] Computing n2_to_3 for num 993
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 3 subset clusters.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_4 for num 32
[LOG] Global feature for num 32
[LOG] Global feature for num 32
[LOG] Saving tensor x_0_32.pt
[LOG] Saving tensor x_1_32.pt
[LOG] Computing n0_to_3 for num 250
[LOG] Saving tensor x_2_32.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor x_3_32.pt
[LOG] Saving tensor x_4_32.pt
[LOG] Saving tensor n0_to_0_32.pt
[LOG] Computing n0_to_4 for num 250
[LOG] Saving tensor n1_to_1_32.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n2_to_2_32.pt
[LOG] Computing n1_to_2 for num 250
[LOG] Process 7: Created combinatorial complex for file data_58.hdf5
[LOG] Computing n1_to_3 for num 250
[LOG] Computing n1_to_4 for num 250
[LOG] Computing n2_to_3 for num 250
[LOG] Computing n2_to_4 for num 250
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_4 for num 250
[LOG] Global feature for num 250
[LOG] Global feature for num 250
[LOG] Saving tensor x_0_250.pt
[LOG] Saving tensor x_1_250.pt
[LOG] Saving tensor x_2_250.pt
[LOG] Process 7: Calculating Neighbors
[LOG] Loading pickle file data_58.pickle
[LOG] Processing node features for num 58
[LOG] Processing edge features for num 58
[LOG] Saving tensor x_3_250.pt
[LOG] Saving tensor x_4_250.pt
[LOG] Saving tensor n0_to_0_250.pt
[LOG] Processing tetra features for num 58
[LOG] Saving tensor n1_to_1_250.pt
[LOG] Saving tensor n2_to_2_250.pt
[LOG] Saving tensor n3_to_3_250.pt
[LOG] Saving tensor n4_to_4_250.pt
[LOG] Saving tensor n0_to_1_250.pt
[LOG] Saving tensor n0_to_2_250.pt
[LOG] Saving tensor n0_to_3_250.pt
[LOG] Saving tensor n0_to_4_250.pt
[LOG] Saving tensor n1_to_2_250.pt
[LOG] Processing cluster features for num 58
[LOG] Saving tensor n1_to_3_250.pt
[LOG] Saving tensor n1_to_4_250.pt
[LOG] Processing cluster features for num 58
[LOG] Saving tensor n2_to_3_250.pt
[LOG] Saving tensor n2_to_4_250.pt
[LOG] Saving tensor n3_to_4_250.pt
[LOG] Saving tensor global_feature_250.pt
[LOG] Processing adjacency and incidence matrices for num 58
[LOG] Computing n0_to_0 for num 58
[LOG] Process 31: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n3_to_3_32.pt
[LOG] Saving tensor n4_to_4_32.pt
[LOG] Saving tensor n0_to_1_32.pt
[LOG] Saving tensor n0_to_2_32.pt
[LOG] Saving tensor n0_to_3_32.pt
[LOG] Saving tensor n0_to_4_32.pt
[LOG] Computing n1_to_1 for num 58
[LOG] Saving tensor n1_to_2_32.pt
[LOG] Saving tensor n1_to_3_32.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_3 for num 657
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_4 for num 657
[LOG] Computing n1_to_2 for num 657
[LOG] Computing n2_to_2 (adjacency) for num 58
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n1_to_4_32.pt
[LOG] Saving tensor n2_to_3_32.pt
[LOG] Computing n2_to_4 for num 993
[LOG] Saving tensor n2_to_4_32.pt
[LOG] Saving tensor n3_to_4_32.pt
[LOG] Saving tensor global_feature_32.pt
[LOG] Process 4: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n3_to_3 (adjacency) for num 58
[LOG] Computing n4_to_4 (coadjacency) for num 58
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_1 for num 58
[LOG] Computing n0_to_2 for num 58
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_3 for num 58
[LOG] Computing n0_to_4 for num 58
[LOG] Computing n1_to_2 for num 58
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_3 for num 58
[LOG] Computing n1_to_4 for num 58
[LOG] Computing n2_to_3 for num 58
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_4 for num 58
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n3_to_4 for num 58
[LOG] Global feature for num 58
[LOG] Global feature for num 58
[LOG] Saving tensor x_0_58.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor x_1_58.pt
[LOG] Saving tensor x_2_58.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor x_3_58.pt
[LOG] Saving tensor x_4_58.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n0_to_0_58.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n1_to_1_58.pt
[LOG] Saving tensor n2_to_2_58.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n3_to_3_58.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n4_to_4_58.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n0_to_1_58.pt
[LOG] Saving tensor n0_to_2_58.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n0_to_3_58.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n0_to_4_58.pt
[LOG] Saving tensor n1_to_2_58.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n1_to_3_58.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n1_to_4_58.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n2_to_3_58.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n2_to_4_58.pt
[LOG] Saving tensor n3_to_4_58.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor global_feature_58.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Process 7: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n3_to_4 for num 993
[LOG] Global feature for num 993
[LOG] Calculating for cell ranks 0 and 3
[LOG] Global feature for num 993
[LOG] Saving tensor x_0_993.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_3 for num 657
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor x_1_993.pt
[LOG] Computing n1_to_4 for num 657
[LOG] Saving tensor x_2_993.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor x_3_993.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor x_4_993.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n0_to_0_993.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n2_to_3 for num 657
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n1_to_1_993.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n2_to_2_993.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n2_to_4 for num 657
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n3_to_4 for num 657
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Global feature for num 657
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Global feature for num 657
[LOG] Saving tensor x_0_657.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor x_1_657.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor x_2_657.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor x_3_657.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor x_4_657.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1372 Tetrahedra.
    [LOG] Generated 45 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.088888888888889
    [LOG] Max number of nodes per cluster is 39 and the number is 29
[LOG] Saving tensor n3_to_3_993.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] We will select 245 edges and 1372 tetra
[LOG] Edges from tetra 0 and KDTree 897 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n0_to_0_657.pt
[LOG] Saving tensor n4_to_4_993.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n1_to_1_657.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n0_to_1_993.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n2_to_2_657.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n0_to_2_993.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n3_to_3_657.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n0_to_3_993.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n4_to_4_657.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n0_to_4_993.pt
[LOG] Saving tensor n0_to_1_657.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n1_to_2_993.pt
[LOG] Saving tensor n0_to_2_657.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n1_to_3_993.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n0_to_3_657.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n1_to_4_993.pt
[LOG] Saving tensor n0_to_4_657.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n2_to_3_993.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n1_to_2_657.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n2_to_4_993.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n1_to_3_657.pt
[LOG] Saving tensor n3_to_4_993.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n1_to_4_657.pt
[LOG] Saving tensor global_feature_993.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 127: Calculating Cross-Cell-Invariants
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n2_to_3_657.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n2_to_4_657.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n3_to_4_657.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor global_feature_657.pt
[LOG] Process 82: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Process 118: Created combinatorial complex for file data_932.hdf5
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Process 118: Calculating Neighbors
[LOG] Loading pickle file data_932.pickle
[LOG] Processing node features for num 932
[LOG] Processing edge features for num 932
[LOG] Processing tetra features for num 932
[LOG] Processing cluster features for num 932
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing cluster features for num 932
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing adjacency and incidence matrices for num 932
[LOG] Computing n0_to_0 for num 932
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_1 for num 932
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_2 (adjacency) for num 932
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n3_to_3 (adjacency) for num 932
[LOG] Computing n4_to_4 (coadjacency) for num 932
[LOG] Computing n0_to_1 for num 932
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n0_to_2 for num 932
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] GENERATED TETRA
[LOG] Computing n0_to_3 for num 932
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_4 for num 932
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n1_to_2 for num 932
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n1_to_3 for num 932
[LOG] Computing n1_to_4 for num 932
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_3 for num 932
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_4 for num 932
[LOG] Computing n3_to_4 for num 932
[LOG] Global feature for num 932
[LOG] Global feature for num 932
[LOG] Saving tensor x_0_932.pt
[LOG] Saving tensor x_1_932.pt
[LOG] Saving tensor x_2_932.pt
[LOG] Saving tensor x_3_932.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor x_4_932.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1797 Tetrahedra.
    [LOG] Generated 52 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.403846153846153
    [LOG] Max number of nodes per cluster is 76 and the number is 16
[LOG] Saving tensor n0_to_0_932.pt
[LOG] Saving tensor n1_to_1_932.pt
[LOG] Saving tensor n2_to_2_932.pt
[LOG] Saving tensor n3_to_3_932.pt
[LOG] Saving tensor n4_to_4_932.pt
[LOG] Saving tensor n0_to_1_932.pt
[LOG] Saving tensor n0_to_2_932.pt
[LOG] Saving tensor n0_to_3_932.pt
[LOG] Saving tensor n0_to_4_932.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n1_to_2_932.pt
[LOG] Saving tensor n1_to_3_932.pt
[LOG] Saving tensor n1_to_4_932.pt
[LOG] We will select 144 edges and 1797 tetra
[LOG] Edges from tetra 0 and KDTree 2446 with 0 edges in common.
[LOG] Saving tensor n2_to_3_932.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n2_to_4_932.pt
[LOG] Saving tensor n3_to_4_932.pt
[LOG] Saving tensor global_feature_932.pt
[LOG] Process 118: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] GENERATED TETRA
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 3255 Tetrahedra.
    [LOG] Generated 97 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.474226804123711
    [LOG] Max number of nodes per cluster is 41 and the number is 41
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1229 Tetrahedra.
    [LOG] Generated 36 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.944444444444445
    [LOG] Max number of nodes per cluster is 76 and the number is 35
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] We will select 139 edges and 1229 tetra
[LOG] Edges from tetra 0 and KDTree 139 with 0 edges in common.
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Process 13: Created combinatorial complex for file data_105.hdf5
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 13: Calculating Neighbors
[LOG] Loading pickle file data_105.pickle
[LOG] Processing node features for num 105
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing edge features for num 105
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Processing tetra features for num 105
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing cluster features for num 105
[LOG] Processing cluster features for num 105
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1966 Tetrahedra.
    [LOG] Generated 52 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.48076923076923
    [LOG] Max number of nodes per cluster is 39 and the number is 42
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing adjacency and incidence matrices for num 105
[LOG] Computing n0_to_0 for num 105
[LOG] Calculating for cell ranks 0 and 2
[LOG] GENERATED TETRA
[LOG] We will select 297 edges and 1966 tetra
[LOG] Edges from tetra 0 and KDTree 297 with 0 edges in common.
[LOG] Computing n1_to_1 for num 105
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_2 (adjacency) for num 105
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] We will select 609 edges and 3255 tetra
[LOG] Edges from tetra 0 and KDTree 735 with 0 edges in common.
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Process 103: Created combinatorial complex for file data_825.hdf5
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n3_to_3 (adjacency) for num 105
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n4_to_4 (coadjacency) for num 105
[LOG] Computing n0_to_1 for num 105
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3225 Tetrahedra.
    [LOG] Generated 82 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.902439024390244
    [LOG] Max number of nodes per cluster is 112 and the number is 81
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Process 103: Calculating Neighbors
[LOG] Loading pickle file data_825.pickle
[LOG] Processing node features for num 825
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Processing edge features for num 825
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Processing tetra features for num 825
[LOG] Computing n0_to_2 for num 105
[LOG] Processing cluster features for num 825
[LOG] Processing cluster features for num 825
[LOG] Processing adjacency and incidence matrices for num 825
[LOG] Computing n0_to_0 for num 825
[LOG] Computing n1_to_1 for num 825
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n2_to_2 (adjacency) for num 825
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] We will select 886 edges and 3225 tetra
[LOG] Edges from tetra 0 and KDTree 3324 with 0 edges in common.
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 825
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n4_to_4 (coadjacency) for num 825
[LOG] Computing n0_to_1 for num 825
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_2 for num 825
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_3 for num 825
[LOG] Computing n0_to_4 for num 825
[LOG] Computing n1_to_2 for num 825
[LOG] Computing n1_to_3 for num 825
[LOG] Computing n1_to_4 for num 825
[LOG] Computing n2_to_3 for num 825
[LOG] Computing n2_to_4 for num 825
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n3_to_4 for num 825
[LOG] Global feature for num 825
[LOG] Global feature for num 825
[LOG] Saving tensor x_0_825.pt
[LOG] Removed 3 subset clusters.
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1723 Tetrahedra.
    [LOG] Generated 53 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.09433962264151
    [LOG] Max number of nodes per cluster is 72 and the number is 18
[LOG] Calculating for cell ranks 0 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 1
[LOG] We will select 479 edges and 1723 tetra
[LOG] Edges from tetra 0 and KDTree 4191 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_3 for num 105
[LOG] Process 64: Created combinatorial complex for file data_513.hdf5
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1730 Tetrahedra.
    [LOG] Generated 55 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.6
    [LOG] Max number of nodes per cluster is 59 and the number is 3
[LOG] Computing n0_to_4 for num 105
[LOG] Computing n1_to_2 for num 105
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] We will select 262 edges and 1730 tetra
[LOG] Edges from tetra 0 and KDTree 2474 with 0 edges in common.
[LOG] Computing n1_to_3 for num 105
[LOG] Computing n1_to_4 for num 105
[LOG] Computing n2_to_3 for num 105
[LOG] Process 64: Calculating Neighbors
[LOG] Loading pickle file data_513.pickle
[LOG] Processing node features for num 513
[LOG] Processing edge features for num 513
[LOG] Computing n2_to_4 for num 105
[LOG] Processing tetra features for num 513
[LOG] Computing n3_to_4 for num 105
[LOG] Global feature for num 105
[LOG] Global feature for num 105
[LOG] Saving tensor x_0_105.pt
[LOG] Processing cluster features for num 513
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 3312 Tetrahedra.
    [LOG] Generated 73 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.136986301369863
    [LOG] Max number of nodes per cluster is 120 and the number is 71
[LOG] GENERATED TETRA
[LOG] Processing cluster features for num 513
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor x_1_825.pt
[LOG] Saving tensor x_1_105.pt
[LOG] Processing adjacency and incidence matrices for num 513
[LOG] Computing n0_to_0 for num 513
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor x_2_105.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor x_3_105.pt
[LOG] Saving tensor x_2_825.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor x_3_825.pt
[LOG] Saving tensor x_4_105.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Computing n1_to_1 for num 513
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.
[LOG] We will select 553 edges and 3312 tetra
[LOG] Edges from tetra 0 and KDTree 2194 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n2_to_2 (adjacency) for num 513
[LOG] Removed 0 subset clusters.
[LOG] Process 62: Created combinatorial complex for file data_497.hdf5
[LOG] Saving tensor x_4_825.pt
[LOG] Saving tensor n0_to_0_825.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n0_to_0_105.pt
[LOG] Saving tensor n1_to_1_825.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n1_to_1_105.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n2_to_2_825.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Removed 1 subset clusters.
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n2_to_2_105.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n3_to_3_825.pt
[LOG] Saving tensor n3_to_3_105.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Process 62: Calculating Neighbors
[LOG] Loading pickle file data_497.pickle
[LOG] Processing node features for num 497
[LOG] Computing n3_to_3 (adjacency) for num 513
[LOG] Saving tensor n4_to_4_825.pt
[LOG] Computing n4_to_4 (coadjacency) for num 513
[LOG] Processing edge features for num 497
[LOG] Computing n0_to_1 for num 513
[LOG] Saving tensor n4_to_4_105.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n0_to_1_825.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n0_to_2 for num 513
[LOG] Saving tensor n0_to_1_105.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Processing tetra features for num 497
[LOG] Saving tensor n0_to_2_825.pt
[LOG] Saving tensor n0_to_2_105.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Process 0: Created combinatorial complex for file data_2.hdf5
[LOG] Saving tensor n0_to_3_825.pt
[LOG] Processing cluster features for num 497
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n0_to_3_105.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n0_to_4_825.pt
[LOG] Saving tensor n0_to_4_105.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Process 93: Created combinatorial complex for file data_745.hdf5
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Processing cluster features for num 497
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n1_to_2_105.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n1_to_2_825.pt
[LOG] Saving tensor n1_to_3_105.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Processing adjacency and incidence matrices for num 497
[LOG] Computing n0_to_0 for num 497
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n1_to_3_825.pt
[LOG] Saving tensor n1_to_4_105.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n1_to_4_825.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Process 0: Calculating Neighbors
[LOG] Loading pickle file data_2.pickle
[LOG] Processing node features for num 2
[LOG] Saving tensor n2_to_3_105.pt
[LOG] Saving tensor n2_to_3_825.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Processing edge features for num 2
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n2_to_4_105.pt
[LOG] Processing tetra features for num 2
[LOG] Saving tensor n2_to_4_825.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n3_to_4_105.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n3_to_4_825.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor global_feature_825.pt
[LOG] Saving tensor global_feature_105.pt
[LOG] Process 103: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Process 13: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n0_to_3 for num 513
[LOG] Processing cluster features for num 2
[LOG] Computing n0_to_4 for num 513
[LOG] Computing n1_to_2 for num 513
[LOG] Processing cluster features for num 2
[LOG] Process 45: Created combinatorial complex for file data_361.hdf5
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Processing adjacency and incidence matrices for num 2
[LOG] Computing n0_to_0 for num 2
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Removed 5 subset clusters.

    [LOG] We Currently have 3615 Tetrahedra.
    [LOG] Generated 94 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.202127659574469
    [LOG] Max number of nodes per cluster is 52 and the number is 34
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Process 93: Calculating Neighbors
[LOG] Loading pickle file data_745.pickle
[LOG] Processing node features for num 745
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Processing edge features for num 745
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n1_to_1 for num 497
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n1_to_1 for num 2
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing tetra features for num 745
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_3 for num 513
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_4 for num 513
[LOG] Computing n2_to_3 for num 513
[LOG] Computing n2_to_4 for num 513
[LOG] We will select 680 edges and 3615 tetra
[LOG] Edges from tetra 0 and KDTree 680 with 0 edges in common.
[LOG] Processing cluster features for num 745
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_2 (adjacency) for num 2
[LOG] Computing n3_to_4 for num 513
[LOG] Process 45: Calculating Neighbors
[LOG] Loading pickle file data_361.pickle
[LOG] Processing node features for num 361
[LOG] Global feature for num 513
[LOG] Global feature for num 513
[LOG] Saving tensor x_0_513.pt
[LOG] Saving tensor x_1_513.pt
[LOG] Processing edge features for num 361
[LOG] Saving tensor x_2_513.pt
[LOG] Saving tensor x_3_513.pt
[LOG] Saving tensor x_4_513.pt
[LOG] Saving tensor n0_to_0_513.pt
[LOG] Saving tensor n1_to_1_513.pt
[LOG] Saving tensor n2_to_2_513.pt
[LOG] Processing cluster features for num 745
[LOG] Saving tensor n3_to_3_513.pt
[LOG] Saving tensor n4_to_4_513.pt
[LOG] Saving tensor n0_to_1_513.pt
[LOG] Saving tensor n0_to_2_513.pt
[LOG] Processing tetra features for num 361
[LOG] Saving tensor n0_to_3_513.pt
[LOG] Saving tensor n0_to_4_513.pt
[LOG] Saving tensor n1_to_2_513.pt
[LOG] Saving tensor n1_to_3_513.pt
[LOG] Saving tensor n1_to_4_513.pt
[LOG] Saving tensor n2_to_3_513.pt
[LOG] Saving tensor n2_to_4_513.pt
[LOG] Processing adjacency and incidence matrices for num 745
[LOG] Computing n0_to_0 for num 745
[LOG] Saving tensor n3_to_4_513.pt
[LOG] Saving tensor global_feature_513.pt
[LOG] Process 64: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_2 (adjacency) for num 497
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing cluster features for num 361
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_3 (adjacency) for num 2
[LOG] Processing cluster features for num 361
[LOG] Computing n4_to_4 (coadjacency) for num 2
[LOG] Computing n0_to_1 for num 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing adjacency and incidence matrices for num 361
[LOG] Computing n0_to_0 for num 361
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_2 for num 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.
[LOG] Computing n3_to_3 (adjacency) for num 497
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n4_to_4 (coadjacency) for num 497
[LOG] Computing n0_to_1 for num 497
[LOG] Computing n1_to_1 for num 361
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n1_to_1 for num 745
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_2 for num 497
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 90: Created combinatorial complex for file data_721.hdf5
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_3 for num 2
[LOG] Computing n0_to_4 for num 2
[LOG] Computing n2_to_2 (adjacency) for num 361
[LOG] Process 90: Calculating Neighbors
[LOG] Loading pickle file data_721.pickle
[LOG] Processing node features for num 721
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_2 for num 2
[LOG] Processing edge features for num 721
[LOG] Processing tetra features for num 721
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing cluster features for num 721
[LOG] Computing n1_to_3 for num 2
[LOG] Computing n1_to_4 for num 2
[LOG] Computing n2_to_3 for num 2
[LOG] Processing cluster features for num 721
[LOG] Computing n2_to_4 for num 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing adjacency and incidence matrices for num 721
[LOG] Computing n0_to_0 for num 721
[LOG] Computing n3_to_4 for num 2
[LOG] Global feature for num 2
[LOG] Global feature for num 2
[LOG] Saving tensor x_0_2.pt
[LOG] Saving tensor x_1_2.pt
[LOG] Saving tensor x_2_2.pt
[LOG] Saving tensor x_3_2.pt
[LOG] Saving tensor x_4_2.pt
[LOG] Saving tensor n0_to_0_2.pt
[LOG] Saving tensor n1_to_1_2.pt
[LOG] Saving tensor n2_to_2_2.pt
[LOG] Saving tensor n3_to_3_2.pt
[LOG] Saving tensor n4_to_4_2.pt
[LOG] Saving tensor n0_to_1_2.pt
[LOG] Saving tensor n0_to_2_2.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n0_to_3_2.pt
[LOG] Saving tensor n0_to_4_2.pt
[LOG] Saving tensor n1_to_2_2.pt
[LOG] Saving tensor n1_to_3_2.pt
[LOG] Saving tensor n1_to_4_2.pt
[LOG] Saving tensor n2_to_3_2.pt
[LOG] Saving tensor n2_to_4_2.pt
[LOG] Saving tensor n3_to_4_2.pt
[LOG] Computing n1_to_1 for num 721
[LOG] Saving tensor global_feature_2.pt
[LOG] Process 0: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n2_to_2 (adjacency) for num 745
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_3 for num 497
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_4 for num 497
[LOG] Computing n1_to_2 for num 497
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 361
[LOG] Computing n4_to_4 (coadjacency) for num 361
[LOG] Computing n0_to_1 for num 361
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_2 for num 361
[LOG] Computing n1_to_3 for num 497
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_4 for num 497
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_3 for num 497
[LOG] Computing n2_to_4 for num 497
[LOG] Computing n3_to_4 for num 497
[LOG] Global feature for num 497
[LOG] Global feature for num 497
[LOG] Saving tensor x_0_497.pt
[LOG] Computing n2_to_2 (adjacency) for num 721
[LOG] Saving tensor x_1_497.pt
[LOG] Saving tensor x_2_497.pt
[LOG] Saving tensor x_3_497.pt
[LOG] Saving tensor x_4_497.pt
[LOG] Saving tensor n0_to_0_497.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n1_to_1_497.pt
[LOG] Saving tensor n2_to_2_497.pt
[LOG] Saving tensor n3_to_3_497.pt
[LOG] Saving tensor n4_to_4_497.pt
[LOG] Saving tensor n0_to_1_497.pt
[LOG] Saving tensor n0_to_2_497.pt
[LOG] Saving tensor n0_to_3_497.pt
[LOG] Saving tensor n0_to_4_497.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n1_to_2_497.pt
[LOG] Saving tensor n1_to_3_497.pt
[LOG] Saving tensor n1_to_4_497.pt
[LOG] Saving tensor n2_to_3_497.pt
[LOG] Saving tensor n2_to_4_497.pt
[LOG] Saving tensor n3_to_4_497.pt
[LOG] Saving tensor global_feature_497.pt
[LOG] Process 62: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1056 Tetrahedra.
    [LOG] Generated 12 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 27.083333333333332
    [LOG] Max number of nodes per cluster is 124 and the number is 1
[LOG] Process 85: Created combinatorial complex for file data_681.hdf5
[LOG] We will select 422 edges and 1056 tetra
[LOG] Edges from tetra 0 and KDTree 8891 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 745
[LOG] Computing n4_to_4 (coadjacency) for num 745
[LOG] Computing n0_to_1 for num 745
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_3 for num 361
[LOG] Computing n0_to_4 for num 361
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 85: Calculating Neighbors
[LOG] Loading pickle file data_681.pickle
[LOG] Processing node features for num 681
[LOG] Processing edge features for num 681
[LOG] Computing n1_to_2 for num 361
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing tetra features for num 681
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_2 for num 745
[LOG] Processing cluster features for num 681
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing cluster features for num 681
[LOG] Computing n3_to_3 (adjacency) for num 721
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n4_to_4 (coadjacency) for num 721
[LOG] Computing n0_to_1 for num 721
[LOG] Processing adjacency and incidence matrices for num 681
[LOG] Computing n0_to_0 for num 681
[LOG] Process 37: Created combinatorial complex for file data_299.hdf5
[LOG] Computing n0_to_2 for num 721
[LOG] Computing n1_to_1 for num 681
[LOG] Process 37: Calculating Neighbors
[LOG] Loading pickle file data_299.pickle
[LOG] Processing node features for num 299
[LOG] Processing edge features for num 299
[LOG] Processing tetra features for num 299
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 299
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 299
[LOG] Processing adjacency and incidence matrices for num 299
[LOG] Computing n0_to_0 for num 299
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_1 for num 299
[LOG] Computing n1_to_3 for num 361
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_4 for num 361
[LOG] Computing n2_to_3 for num 361
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_4 for num 361
[LOG] Computing n2_to_2 (adjacency) for num 299
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n3_to_4 for num 361
[LOG] Global feature for num 361
[LOG] Global feature for num 361
[LOG] Saving tensor x_0_361.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor x_1_361.pt
[LOG] Saving tensor x_2_361.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor x_3_361.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor x_4_361.pt
[LOG] Computing n3_to_3 (adjacency) for num 299
[LOG] Computing n4_to_4 (coadjacency) for num 299
[LOG] Computing n0_to_1 for num 299
[LOG] Computing n0_to_2 for num 299
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n0_to_0_361.pt
[LOG] Saving tensor n1_to_1_361.pt
[LOG] Saving tensor n2_to_2_361.pt
[LOG] Saving tensor n3_to_3_361.pt
[LOG] Saving tensor n4_to_4_361.pt
[LOG] Saving tensor n0_to_1_361.pt
[LOG] Saving tensor n0_to_2_361.pt
[LOG] Saving tensor n0_to_3_361.pt
[LOG] Saving tensor n0_to_4_361.pt
[LOG] Saving tensor n1_to_2_361.pt
[LOG] Saving tensor n1_to_3_361.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 4
[LOG] GENERATED TETRA
[LOG] Computing n2_to_2 (adjacency) for num 681
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n1_to_4_361.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n2_to_3_361.pt
[LOG] Saving tensor n2_to_4_361.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2449 Tetrahedra.
    [LOG] Generated 57 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.368421052631579
    [LOG] Max number of nodes per cluster is 63 and the number is 54
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n3_to_4_361.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor global_feature_361.pt
[LOG] Process 45: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n0_to_3 for num 299
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n0_to_4 for num 299
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_2 for num 299
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] We will select 600 edges and 2449 tetra
[LOG] Edges from tetra 0 and KDTree 2906 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_3 for num 299
[LOG] Computing n1_to_4 for num 299
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_3 for num 299
[LOG] GENERATED TETRA
[LOG] Computing n2_to_4 for num 299
[LOG] Computing n3_to_4 for num 299
[LOG] Global feature for num 299
[LOG] Global feature for num 299
[LOG] Saving tensor x_0_299.pt
[LOG] Saving tensor x_1_299.pt
[LOG] Saving tensor x_2_299.pt
[LOG] Saving tensor x_3_299.pt
[LOG] Saving tensor x_4_299.pt
[LOG] Saving tensor n0_to_0_299.pt
[LOG] Saving tensor n1_to_1_299.pt
[LOG] Saving tensor n2_to_2_299.pt
[LOG] Saving tensor n3_to_3_299.pt
[LOG] Saving tensor n4_to_4_299.pt
[LOG] Computing n0_to_3 for num 721
[LOG] Saving tensor n0_to_1_299.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 963 Tetrahedra.
    [LOG] Generated 34 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.764705882352942
    [LOG] Max number of nodes per cluster is 46 and the number is 28
[LOG] Computing n0_to_4 for num 721
[LOG] Computing n1_to_2 for num 721
[LOG] We will select 151 edges and 963 tetra
[LOG] Edges from tetra 0 and KDTree 629 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_3 for num 456
[LOG] Computing n0_to_3 for num 745
[LOG] Computing n0_to_4 for num 745
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_2 for num 745
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 0 subset clusters.
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 982 Tetrahedra.
    [LOG] Generated 30 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.466666666666667
    [LOG] Max number of nodes per cluster is 27 and the number is 9
[LOG] Calculating for cell ranks 1 and 4
[LOG] We will select 119 edges and 982 tetra
[LOG] Edges from tetra 0 and KDTree 856 with 0 edges in common.
[LOG] Process 21: Created combinatorial complex for file data_171.hdf5
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n0_to_2_299.pt
[LOG] Saving tensor n0_to_3_299.pt
[LOG] Saving tensor n0_to_4_299.pt
[LOG] Saving tensor n1_to_2_299.pt
[LOG] Saving tensor n1_to_3_299.pt
[LOG] Computing n1_to_4 for num 456
[LOG] Saving tensor n1_to_4_299.pt
[LOG] Computing n3_to_3 (adjacency) for num 681
[LOG] Saving tensor n2_to_3_299.pt
[LOG] Saving tensor n2_to_4_299.pt
[LOG] Computing n4_to_4 (coadjacency) for num 681
[LOG] Saving tensor n3_to_4_299.pt
[LOG] Saving tensor global_feature_299.pt
[LOG] Process 37: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_1 for num 681
[LOG] Process 21: Calculating Neighbors
[LOG] Loading pickle file data_171.pickle
[LOG] Processing node features for num 171
[LOG] Processing edge features for num 171
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing tetra features for num 171
[LOG] Processing cluster features for num 171
[LOG] Processing cluster features for num 171
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing adjacency and incidence matrices for num 171
[LOG] Computing n0_to_0 for num 171
[LOG] Computing n1_to_3 for num 721
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_4 for num 721
[LOG] Computing n1_to_1 for num 171
[LOG] Computing n2_to_3 for num 721
[LOG] Computing n0_to_2 for num 681
[LOG] Removed 0 subset clusters.
[LOG] Removed 0 subset clusters.
[LOG] Computing n2_to_2 (adjacency) for num 171
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_4 for num 721
[LOG] Computing n3_to_3 (adjacency) for num 171
[LOG] Computing n4_to_4 (coadjacency) for num 171
[LOG] Computing n0_to_1 for num 171
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 23: Created combinatorial complex for file data_187.hdf5
[LOG] Computing n0_to_2 for num 171
[LOG] Computing n3_to_4 for num 721
[LOG] Global feature for num 721
[LOG] Global feature for num 721
[LOG] Saving tensor x_0_721.pt
[LOG] Saving tensor x_1_721.pt
[LOG] Saving tensor x_2_721.pt
[LOG] Saving tensor x_3_721.pt
[LOG] Saving tensor x_4_721.pt
[LOG] Saving tensor n0_to_0_721.pt
[LOG] Saving tensor n1_to_1_721.pt
[LOG] Saving tensor n2_to_2_721.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_3 for num 456
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 86: Created combinatorial complex for file data_689.hdf5
[LOG] Saving tensor n3_to_3_721.pt
[LOG] Saving tensor n4_to_4_721.pt
[LOG] Saving tensor n0_to_1_721.pt
[LOG] Saving tensor n0_to_2_721.pt
[LOG] Saving tensor n0_to_3_721.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n0_to_4_721.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n1_to_2_721.pt
[LOG] Computing n0_to_3 for num 171
[LOG] Saving tensor n1_to_3_721.pt
[LOG] Computing n0_to_4 for num 171
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n1_to_4_721.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n2_to_3_721.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n2_to_4_721.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n3_to_4_721.pt
[LOG] Computing n1_to_2 for num 171
[LOG] Saving tensor global_feature_721.pt
[LOG] Process 90: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n1_to_3 for num 171
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_4 for num 171
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n2_to_3 for num 171
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n2_to_4 for num 171
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n3_to_4 for num 171
[LOG] Global feature for num 171
[LOG] Computing n1_to_3 for num 745
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Global feature for num 171
[LOG] Saving tensor x_0_171.pt
[LOG] Saving tensor x_1_171.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor x_2_171.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor x_3_171.pt
[LOG] Saving tensor x_4_171.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n0_to_0_171.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n1_to_1_171.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n2_to_2_171.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n3_to_3_171.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Computing n1_to_4 for num 745
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n4_to_4_171.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n0_to_1_171.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n0_to_2_171.pt
[LOG] Saving tensor n0_to_3_171.pt
[LOG] Saving tensor n0_to_4_171.pt
[LOG] Saving tensor n1_to_2_171.pt
[LOG] Saving tensor n1_to_3_171.pt
[LOG] Saving tensor n1_to_4_171.pt
[LOG] Computing n2_to_3 for num 745
[LOG] Process 86: Calculating Neighbors
[LOG] Loading pickle file data_689.pickle
[LOG] Processing node features for num 689
[LOG] Saving tensor n2_to_3_171.pt
[LOG] Saving tensor n2_to_4_171.pt
[LOG] Saving tensor n3_to_4_171.pt
[LOG] Processing edge features for num 689
[LOG] Saving tensor global_feature_171.pt
[LOG] Process 21: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing tetra features for num 689
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n2_to_4 for num 745
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing cluster features for num 689
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Processing cluster features for num 689
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Computing n3_to_4 for num 745
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 689
[LOG] Computing n0_to_0 for num 689
[LOG] Global feature for num 745
[LOG] Global feature for num 745
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor x_0_745.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor x_1_745.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor x_2_745.pt
[LOG] Saving tensor x_3_745.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor x_4_745.pt
[LOG] Saving tensor n0_to_0_745.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n1_to_1_745.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n2_to_2_745.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n3_to_3_745.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n4_to_4_745.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n0_to_1_745.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3700 Tetrahedra.
    [LOG] Generated 98 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.153061224489797
    [LOG] Max number of nodes per cluster is 81 and the number is 83
[LOG] Saving tensor n0_to_2_745.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n0_to_3_745.pt
[LOG] Saving tensor n0_to_4_745.pt
[LOG] Saving tensor n1_to_2_745.pt
[LOG] Saving tensor n1_to_3_745.pt
[LOG] Saving tensor n1_to_4_745.pt
[LOG] Saving tensor n2_to_3_745.pt
[LOG] Saving tensor n2_to_4_745.pt
[LOG] Saving tensor n3_to_4_745.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor global_feature_745.pt
[LOG] Process 93: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_1 for num 689
[LOG] Process 23: Calculating Neighbors
[LOG] Loading pickle file data_187.pickle
[LOG] Processing node features for num 187
[LOG] GENERATED TETRA
[LOG] Computing n0_to_3 for num 681
[LOG] Processing edge features for num 187
[LOG] Processing tetra features for num 187
[LOG] Computing n0_to_4 for num 681
[LOG] Processing cluster features for num 187
[LOG] Computing n1_to_3 for num 216
[LOG] Processing cluster features for num 187
[LOG] Computing n2_to_4 for num 456
[LOG] Computing n1_to_2 for num 681
[LOG] Processing adjacency and incidence matrices for num 187
[LOG] Computing n0_to_0 for num 187
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] We will select 903 edges and 3700 tetra
[LOG] Edges from tetra 0 and KDTree 3191 with 0 edges in common.
[LOG] Computing n1_to_1 for num 187
[LOG] Computing n2_to_2 (adjacency) for num 187
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n3_to_3 (adjacency) for num 187
[LOG] Computing n4_to_4 (coadjacency) for num 187
[LOG] Computing n0_to_1 for num 187
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_2 for num 187
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_2 (adjacency) for num 689
[LOG] Computing n0_to_3 for num 187
[LOG] Computing n0_to_4 for num 187
[LOG] Computing n1_to_2 for num 187
[LOG] Computing n1_to_4 for num 216
[LOG] GENERATED TETRA
[LOG] Computing n1_to_3 for num 187
[LOG] Computing n1_to_4 for num 187
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_3 for num 187
[LOG] Computing n2_to_4 for num 187
[LOG] Computing n3_to_4 for num 187
[LOG] Global feature for num 187
[LOG] Global feature for num 187
[LOG] Saving tensor x_0_187.pt
[LOG] Saving tensor x_1_187.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor x_2_187.pt
[LOG] Saving tensor x_3_187.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor x_4_187.pt
[LOG] Saving tensor n0_to_0_187.pt
[LOG] Saving tensor n1_to_1_187.pt
[LOG] Saving tensor n2_to_2_187.pt
[LOG] Saving tensor n3_to_3_187.pt
[LOG] Saving tensor n4_to_4_187.pt
[LOG] Saving tensor n0_to_1_187.pt
[LOG] Saving tensor n0_to_2_187.pt
[LOG] Saving tensor n0_to_3_187.pt
[LOG] Saving tensor n0_to_4_187.pt
[LOG] Saving tensor n1_to_2_187.pt
[LOG] Saving tensor n1_to_3_187.pt
[LOG] Saving tensor n1_to_4_187.pt
[LOG] Saving tensor n2_to_3_187.pt
[LOG] Saving tensor n2_to_4_187.pt
[LOG] Saving tensor n3_to_4_187.pt
[LOG] Saving tensor global_feature_187.pt
[LOG] Process 23: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_4 for num 456
[LOG] Global feature for num 456
[LOG] Global feature for num 456
[LOG] Computing n1_to_3 for num 681
[LOG] Saving tensor x_0_456.pt
[LOG] Saving tensor x_1_456.pt
[LOG] Saving tensor x_2_456.pt
[LOG] Saving tensor x_3_456.pt
[LOG] Saving tensor x_4_456.pt
[LOG] Saving tensor n0_to_0_456.pt
[LOG] Computing n1_to_4 for num 681
[LOG] Saving tensor n1_to_1_456.pt
[LOG] Computing n3_to_3 (adjacency) for num 689
[LOG] Saving tensor n2_to_2_456.pt
[LOG] Computing n4_to_4 (coadjacency) for num 689
[LOG] Computing n0_to_1 for num 689
[LOG] Computing n2_to_3 for num 681
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_3 for num 216
[LOG] Computing n2_to_4 for num 681
[LOG] Saving tensor n3_to_3_456.pt
[LOG] Saving tensor n4_to_4_456.pt
[LOG] Computing n0_to_2 for num 689
[LOG] Saving tensor n0_to_1_456.pt
[LOG] Saving tensor n0_to_2_456.pt
[LOG] Saving tensor n0_to_3_456.pt
[LOG] Saving tensor n0_to_4_456.pt
[LOG] Saving tensor n1_to_2_456.pt
[LOG] Saving tensor n1_to_3_456.pt
[LOG] Saving tensor n1_to_4_456.pt
[LOG] Saving tensor n2_to_3_456.pt
[LOG] Saving tensor n2_to_4_456.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1065 Tetrahedra.
    [LOG] Generated 45 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.577777777777778
    [LOG] Max number of nodes per cluster is 38 and the number is 26
[LOG] Saving tensor n3_to_4_456.pt
[LOG] Computing n3_to_4 for num 681
[LOG] Saving tensor global_feature_456.pt
[LOG] Global feature for num 681
[LOG] Process 57: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Global feature for num 681
[LOG] Saving tensor x_0_681.pt
[LOG] Saving tensor x_1_681.pt
[LOG] Saving tensor x_2_681.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor x_3_681.pt
[LOG] Saving tensor x_4_681.pt
[LOG] Saving tensor n0_to_0_681.pt
[LOG] Saving tensor n1_to_1_681.pt
[LOG] Saving tensor n2_to_2_681.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1336 Tetrahedra.
    [LOG] Generated 23 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.73913043478261
    [LOG] Max number of nodes per cluster is 103 and the number is 21
[LOG] Saving tensor n3_to_3_681.pt
[LOG] Saving tensor n4_to_4_681.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n0_to_1_681.pt
[LOG] Saving tensor n0_to_2_681.pt
[LOG] Saving tensor n0_to_3_681.pt
[LOG] Saving tensor n0_to_4_681.pt
[LOG] Saving tensor n1_to_2_681.pt
[LOG] Saving tensor n1_to_3_681.pt
[LOG] We will select 217 edges and 1065 tetra
[LOG] Edges from tetra 0 and KDTree 984 with 0 edges in common.
[LOG] Saving tensor n1_to_4_681.pt
[LOG] We will select 106 edges and 1336 tetra
[LOG] Edges from tetra 0 and KDTree 1195 with 0 edges in common.
[LOG] Saving tensor n2_to_3_681.pt
[LOG] Saving tensor n2_to_4_681.pt
[LOG] Saving tensor n3_to_4_681.pt
[LOG] Saving tensor global_feature_681.pt
[LOG] Process 85: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] GENERATED TETRA
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2592 Tetrahedra.
    [LOG] Generated 81 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.246913580246913
    [LOG] Max number of nodes per cluster is 40 and the number is 11
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] We will select 463 edges and 2592 tetra
[LOG] Edges from tetra 0 and KDTree 2079 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Computing n2_to_4 for num 216
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1379 Tetrahedra.
    [LOG] Generated 37 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.135135135135135
    [LOG] Max number of nodes per cluster is 32 and the number is 19
[LOG] Calculating for cell ranks 1 and 1
[LOG] We will select 326 edges and 1379 tetra
[LOG] Edges from tetra 0 and KDTree 326 with 0 edges in common.
[LOG] Process 28: Created combinatorial complex for file data_227.hdf5
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2060 Tetrahedra.
    [LOG] Generated 46 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.826086956521738
    [LOG] Max number of nodes per cluster is 150 and the number is 41
[LOG] Process 28: Calculating Neighbors
[LOG] Loading pickle file data_227.pickle
[LOG] Processing node features for num 227
[LOG] We will select 165 edges and 2060 tetra
[LOG] Edges from tetra 0 and KDTree 3601 with 0 edges in common.
[LOG] Processing edge features for num 227
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing tetra features for num 227
[LOG] Process 14: Created combinatorial complex for file data_113.hdf5
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing cluster features for num 227
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing cluster features for num 227
[LOG] Processing adjacency and incidence matrices for num 227
[LOG] Computing n0_to_0 for num 227
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_1 for num 227
[LOG] Computing n0_to_3 for num 689
[LOG] Computing n2_to_2 (adjacency) for num 227
[LOG] Computing n0_to_4 for num 689
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_2 for num 689
[LOG] Computing n3_to_3 (adjacency) for num 227
[LOG] Computing n4_to_4 (coadjacency) for num 227
[LOG] Computing n0_to_1 for num 227
[LOG] Computing n3_to_4 for num 216
[LOG] Global feature for num 216
[LOG] Global feature for num 216
[LOG] Saving tensor x_0_216.pt
[LOG] Computing n0_to_2 for num 227
[LOG] Saving tensor x_1_216.pt
[LOG] Saving tensor x_2_216.pt
[LOG] Saving tensor x_3_216.pt
[LOG] Saving tensor x_4_216.pt
[LOG] Process 14: Calculating Neighbors
[LOG] Loading pickle file data_113.pickle
[LOG] Processing node features for num 113
[LOG] Saving tensor n0_to_0_216.pt
[LOG] Saving tensor n1_to_1_216.pt
[LOG] Processing edge features for num 113
[LOG] Saving tensor n2_to_2_216.pt
[LOG] Removed 0 subset clusters.
[LOG] Processing tetra features for num 113
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n3_to_3_216.pt
[LOG] Saving tensor n4_to_4_216.pt
[LOG] Saving tensor n0_to_1_216.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.
[LOG] Processing cluster features for num 113
[LOG] Calculating for cell ranks 1 and 1
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 113
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_3 for num 227
[LOG] Processing adjacency and incidence matrices for num 113
[LOG] Computing n0_to_0 for num 113
[LOG] Removed 0 subset clusters.
[LOG] Process 48: Created combinatorial complex for file data_386.hdf5
[LOG] Computing n0_to_4 for num 227
[LOG] Process 12: Created combinatorial complex for file data_97.hdf5
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_2 for num 227
[LOG] Process 54: Created combinatorial complex for file data_433.hdf5
[LOG] Computing n1_to_3 for num 689
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_4 for num 689
[LOG] Computing n1_to_3 for num 227
[LOG] Process 48: Calculating Neighbors
[LOG] Loading pickle file data_386.pickle
[LOG] Processing node features for num 386
[LOG] Computing n2_to_3 for num 689
[LOG] Processing edge features for num 386
[LOG] Computing n1_to_4 for num 227
[LOG] Computing n2_to_3 for num 227
[LOG] Processing tetra features for num 386
[LOG] Computing n2_to_4 for num 227
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n3_to_4 for num 227
[LOG] Global feature for num 227
[LOG] Global feature for num 227
[LOG] Saving tensor x_0_227.pt
[LOG] Saving tensor x_1_227.pt
[LOG] Processing cluster features for num 386
[LOG] Computing n2_to_4 for num 689
[LOG] Saving tensor x_2_227.pt
[LOG] Processing cluster features for num 386
[LOG] Processing adjacency and incidence matrices for num 386
[LOG] Computing n0_to_0 for num 386
[LOG] Process 51: Created combinatorial complex for file data_410.hdf5
[LOG] Computing n1_to_1 for num 386
[LOG] Computing n3_to_4 for num 689
[LOG] Global feature for num 689
[LOG] Calculating for cell ranks 4 and 4
[LOG] Global feature for num 689
[LOG] Saving tensor x_0_689.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor x_1_689.pt
[LOG] Saving tensor x_2_689.pt
[LOG] Process 12: Calculating Neighbors
[LOG] Loading pickle file data_97.pickle
[LOG] Processing node features for num 97
[LOG] Saving tensor x_3_689.pt
[LOG] Processing edge features for num 97
[LOG] Computing n2_to_2 (adjacency) for num 386
[LOG] Process 54: Calculating Neighbors
[LOG] Loading pickle file data_433.pickle
[LOG] Processing node features for num 433
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing tetra features for num 97
[LOG] Processing edge features for num 433
[LOG] Processing cluster features for num 97
[LOG] Processing tetra features for num 433
[LOG] Processing cluster features for num 97
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing adjacency and incidence matrices for num 97
[LOG] Computing n0_to_0 for num 97
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor x_3_227.pt
[LOG] Saving tensor n0_to_2_216.pt
[LOG] Process 51: Calculating Neighbors
[LOG] Loading pickle file data_410.pickle
[LOG] Processing node features for num 410
[LOG] Saving tensor x_4_689.pt
[LOG] Saving tensor x_4_227.pt
[LOG] Processing edge features for num 410
[LOG] Computing n1_to_1 for num 97
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing tetra features for num 410
[LOG] Computing n1_to_1 for num 113
[LOG] Processing cluster features for num 433
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n3_to_3 (adjacency) for num 386
[LOG] Computing n4_to_4 (coadjacency) for num 386
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_1 for num 386
[LOG] Computing n0_to_2 for num 386
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 433
[LOG] Processing cluster features for num 410
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Processing adjacency and incidence matrices for num 433
[LOG] Computing n0_to_0 for num 433
[LOG] Processing cluster features for num 410
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing adjacency and incidence matrices for num 410
[LOG] Computing n0_to_0 for num 410
[LOG] Computing n2_to_2 (adjacency) for num 97
[LOG] Saving tensor n0_to_0_689.pt
[LOG] Saving tensor n0_to_0_227.pt
[LOG] Saving tensor n0_to_3_216.pt
[LOG] Saving tensor n1_to_1_689.pt
[LOG] Saving tensor n1_to_1_227.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n0_to_4_216.pt
[LOG] Saving tensor n2_to_2_689.pt
[LOG] Saving tensor n2_to_2_227.pt
[LOG] Saving tensor n1_to_2_216.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n3_to_3_227.pt
[LOG] Computing n1_to_1 for num 410
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n4_to_4_227.pt
[LOG] Saving tensor n1_to_3_216.pt
[LOG] Saving tensor n0_to_1_227.pt
[LOG] Saving tensor n3_to_3_689.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n1_to_4_216.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n0_to_2_227.pt
[LOG] Saving tensor n2_to_3_216.pt
[LOG] Saving tensor n4_to_4_689.pt
[LOG] Saving tensor n0_to_3_227.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n0_to_4_227.pt
[LOG] Saving tensor n0_to_1_689.pt
[LOG] Saving tensor n2_to_4_216.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n1_to_2_227.pt
[LOG] Saving tensor n3_to_4_216.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n0_to_2_689.pt
[LOG] Saving tensor n1_to_3_227.pt
[LOG] Saving tensor global_feature_216.pt
[LOG] Saving tensor n1_to_4_227.pt
[LOG] Process 27: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n0_to_3_689.pt
[LOG] Saving tensor n2_to_3_227.pt
[LOG] Computing n0_to_3 for num 386
[LOG] Computing n3_to_3 (adjacency) for num 97
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n2_to_4_227.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n0_to_4 for num 386
[LOG] Computing n4_to_4 (coadjacency) for num 97
[LOG] Computing n0_to_1 for num 97
[LOG] Saving tensor n0_to_4_689.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n3_to_4_227.pt
[LOG] Computing n1_to_2 for num 386
[LOG] Saving tensor global_feature_227.pt
[LOG] Saving tensor n1_to_2_689.pt
[LOG] Process 28: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n1_to_3_689.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n1_to_4_689.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n2_to_3_689.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n0_to_2 for num 97
[LOG] Saving tensor n2_to_4_689.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n3_to_4_689.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n1_to_1 for num 433
[LOG] Computing n2_to_2 (adjacency) for num 410
[LOG] Saving tensor global_feature_689.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n1_to_3 for num 386
[LOG] Process 86: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_4 for num 386
[LOG] Computing n2_to_3 for num 386
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n2_to_4 for num 386
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n3_to_4 for num 386
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Global feature for num 386
[LOG] Global feature for num 386
[LOG] Saving tensor x_0_386.pt
[LOG] Saving tensor x_1_386.pt
[LOG] Saving tensor x_2_386.pt
[LOG] Saving tensor x_3_386.pt
[LOG] Saving tensor x_4_386.pt
[LOG] Saving tensor n0_to_0_386.pt
[LOG] Saving tensor n1_to_1_386.pt
[LOG] Saving tensor n2_to_2_386.pt
[LOG] Saving tensor n3_to_3_386.pt
[LOG] Saving tensor n4_to_4_386.pt
[LOG] Saving tensor n0_to_1_386.pt
[LOG] Saving tensor n0_to_2_386.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n0_to_3_386.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n0_to_4_386.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n1_to_2_386.pt
[LOG] Saving tensor n1_to_3_386.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n1_to_4_386.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n2_to_3_386.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n2_to_4_386.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n3_to_4_386.pt
[LOG] Saving tensor global_feature_386.pt
[LOG] Computing n0_to_3 for num 97
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Process 48: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_4 for num 97
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n1_to_2 for num 97
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n1_to_3 for num 97
[LOG] Computing n1_to_4 for num 97
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n2_to_3 for num 97
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n2_to_4 for num 97
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n3_to_4 for num 97
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Global feature for num 97
[LOG] Global feature for num 97
[LOG] Saving tensor x_0_97.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor x_1_97.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor x_2_97.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor x_3_97.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 433
[LOG] Saving tensor x_4_97.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n0_to_0_97.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 410
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n1_to_1_97.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n4_to_4 (coadjacency) for num 410
[LOG] Computing n0_to_1 for num 410
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_2 for num 410
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n2_to_2_97.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n3_to_3_97.pt
[LOG] Saving tensor n4_to_4_97.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n0_to_1_97.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n0_to_2_97.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n0_to_3_97.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n0_to_4_97.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_2 (adjacency) for num 113
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n1_to_2_97.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n1_to_3_97.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n1_to_4_97.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Computing n3_to_3 (adjacency) for num 433
[LOG] Saving tensor n2_to_3_97.pt
[LOG] Computing n4_to_4 (coadjacency) for num 433
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n0_to_1 for num 433
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n2_to_4_97.pt
[LOG] Saving tensor n3_to_4_97.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor global_feature_97.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Process 12: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n0_to_3 for num 410
[LOG] Computing n0_to_2 for num 433
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n0_to_4 for num 410
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_2 for num 410
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n1_to_3 for num 410
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_4 for num 410
[LOG] Computing n2_to_3 for num 410
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n2_to_4 for num 410
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_4 for num 410
[LOG] Global feature for num 410
[LOG] Global feature for num 410
[LOG] Saving tensor x_0_410.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor x_1_410.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor x_2_410.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 4261 Tetrahedra.
    [LOG] Generated 109 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.073394495412844
    [LOG] Max number of nodes per cluster is 56 and the number is 107
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3474 Tetrahedra.
    [LOG] Generated 75 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.373333333333335
    [LOG] Max number of nodes per cluster is 91 and the number is 71
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] We will select 903 edges and 4261 tetra
[LOG] Edges from tetra 0 and KDTree 3527 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] We will select 837 edges and 3474 tetra
[LOG] Edges from tetra 0 and KDTree 3662 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor x_3_410.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor x_4_410.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n0_to_0_410.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n1_to_1_410.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n2_to_2_410.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 113
[LOG] Computing n4_to_4 (coadjacency) for num 113
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n0_to_1 for num 113
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n3_to_3_410.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n4_to_4_410.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n0_to_1_410.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n0_to_2_410.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n0_to_3_410.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n0_to_4_410.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n1_to_2_410.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n1_to_3_410.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n1_to_4_410.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n2_to_3_410.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n2_to_4_410.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n3_to_4_410.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor global_feature_410.pt
[LOG] Process 51: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_2 for num 113
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_3 for num 433
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_4 for num 433
[LOG] Computing n1_to_2 for num 433
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_3 for num 433
[LOG] Computing n1_to_4 for num 433
[LOG] Computing n2_to_3 for num 433
[LOG] GENERATED TETRA
[LOG] Computing n2_to_4 for num 433
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_4 for num 433
[LOG] Global feature for num 433
[LOG] Global feature for num 433
[LOG] Saving tensor x_0_433.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1577 Tetrahedra.
    [LOG] Generated 50 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.68
    [LOG] Max number of nodes per cluster is 42 and the number is 2
[LOG] Saving tensor x_1_433.pt
[LOG] Saving tensor x_2_433.pt
[LOG] Saving tensor x_3_433.pt
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 3 and 3
[LOG] We will select 279 edges and 1577 tetra
[LOG] Edges from tetra 0 and KDTree 841 with 0 edges in common.
[LOG] Saving tensor x_4_433.pt
[LOG] Saving tensor n0_to_0_433.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n1_to_1_433.pt
[LOG] Saving tensor n2_to_2_433.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n3_to_3_433.pt
[LOG] Saving tensor n4_to_4_433.pt
[LOG] Saving tensor n0_to_1_433.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n0_to_2_433.pt
[LOG] Saving tensor n0_to_3_433.pt
[LOG] Saving tensor n0_to_4_433.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n1_to_2_433.pt
[LOG] Saving tensor n1_to_3_433.pt
[LOG] Saving tensor n1_to_4_433.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n2_to_3_433.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n2_to_4_433.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n3_to_4_433.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Process 50: Created combinatorial complex for file data_401.hdf5
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] GENERATED TETRA
[LOG] Saving tensor global_feature_433.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Process 54: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 53: Created combinatorial complex for file data_425.hdf5
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Process 108: Created combinatorial complex for file data_862.hdf5
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Process 50: Calculating Neighbors
[LOG] Loading pickle file data_401.pickle
[LOG] Processing node features for num 401
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2096 Tetrahedra.
    [LOG] Generated 44 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.272727272727273
    [LOG] Max number of nodes per cluster is 39 and the number is 40
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Processing edge features for num 401
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Process 108: Calculating Neighbors
[LOG] Loading pickle file data_862.pickle
[LOG] Processing node features for num 862
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Processing edge features for num 862
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Processing tetra features for num 862
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Processing tetra features for num 401
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] We will select 282 edges and 2096 tetra
[LOG] Edges from tetra 0 and KDTree 282 with 0 edges in common.
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Processing cluster features for num 862
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 862
[LOG] Processing adjacency and incidence matrices for num 862
[LOG] Computing n0_to_0 for num 862
[LOG] Processing cluster features for num 401
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_1 for num 862
[LOG] Processing cluster features for num 401
[LOG] GENERATED TETRA
[LOG] Process 53: Calculating Neighbors
[LOG] Loading pickle file data_425.pickle
[LOG] Processing node features for num 425
[LOG] Processing edge features for num 425
[LOG] Processing adjacency and incidence matrices for num 401
[LOG] Computing n0_to_0 for num 401
[LOG] Computing n0_to_3 for num 113
[LOG] Processing tetra features for num 425
[LOG] Computing n0_to_4 for num 113
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_2 (adjacency) for num 862
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_2 for num 113
[LOG] Processing cluster features for num 425
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_3 (adjacency) for num 862
[LOG] Computing n4_to_4 (coadjacency) for num 862
[LOG] Computing n0_to_1 for num 862
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing cluster features for num 425
[LOG] Computing n0_to_2 for num 862
[LOG] Computing n1_to_1 for num 401
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1464 Tetrahedra.
    [LOG] Generated 37 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 19.135135135135137
    [LOG] Max number of nodes per cluster is 101 and the number is 32
[LOG] Processing adjacency and incidence matrices for num 425
[LOG] Computing n0_to_0 for num 425
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 1618 Tetrahedra.
    [LOG] Generated 44 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.15909090909091
    [LOG] Max number of nodes per cluster is 60 and the number is 17
[LOG] Calculating for cell ranks 2 and 2
[LOG] We will select 586 edges and 1464 tetra
[LOG] Edges from tetra 0 and KDTree 1765 with 0 edges in common.
[LOG] We will select 456 edges and 1618 tetra
[LOG] Edges from tetra 0 and KDTree 456 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3094 Tetrahedra.
    [LOG] Generated 82 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.353658536585368
    [LOG] Max number of nodes per cluster is 72 and the number is 33
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n0_to_3 for num 862
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_4 for num 862
[LOG] Computing n1_to_2 for num 862
[LOG] Computing n1_to_1 for num 425
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_3 for num 862
[LOG] Computing n1_to_4 for num 862
[LOG] Computing n2_to_3 for num 862
[LOG] We will select 740 edges and 3094 tetra
[LOG] Edges from tetra 0 and KDTree 3684 with 0 edges in common.
[LOG] Process 91: Created combinatorial complex for file data_730.hdf5
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_4 for num 862
[LOG] Computing n3_to_4 for num 862
[LOG] Global feature for num 862
[LOG] Calculating for cell ranks 0 and 3
[LOG] Global feature for num 862
[LOG] Saving tensor x_0_862.pt
[LOG] Saving tensor x_1_862.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor x_2_862.pt
[LOG] Saving tensor x_3_862.pt
[LOG] Saving tensor x_4_862.pt
[LOG] Saving tensor n0_to_0_862.pt
[LOG] Saving tensor n1_to_1_862.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n2_to_2_862.pt
[LOG] Saving tensor n3_to_3_862.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n4_to_4_862.pt
[LOG] Saving tensor n0_to_1_862.pt
[LOG] Saving tensor n0_to_2_862.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n0_to_3_862.pt
[LOG] Saving tensor n0_to_4_862.pt
[LOG] Saving tensor n1_to_2_862.pt
[LOG] Saving tensor n1_to_3_862.pt
[LOG] Saving tensor n1_to_4_862.pt
[LOG] Process 91: Calculating Neighbors
[LOG] Loading pickle file data_730.pickle
[LOG] Processing node features for num 730
[LOG] Process 78: Created combinatorial complex for file data_626.hdf5
[LOG] Saving tensor n2_to_3_862.pt
[LOG] Processing edge features for num 730
[LOG] Saving tensor n2_to_4_862.pt
[LOG] Saving tensor n3_to_4_862.pt
[LOG] Saving tensor global_feature_862.pt
[LOG] Process 108: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing tetra features for num 730
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing cluster features for num 730
[LOG] Computing n1_to_3 for num 113
[LOG] Computing n2_to_2 (adjacency) for num 401
[LOG] Processing cluster features for num 730
[LOG] Computing n1_to_4 for num 113
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 78: Calculating Neighbors
[LOG] Loading pickle file data_626.pickle
[LOG] Processing node features for num 626
[LOG] Processing adjacency and incidence matrices for num 730
[LOG] Computing n0_to_0 for num 730
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing edge features for num 626
[LOG] Computing n2_to_3 for num 113
[LOG] Computing n1_to_1 for num 730
[LOG] Processing tetra features for num 626
[LOG] Removed 1 subset clusters.
[LOG] Processing cluster features for num 626
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing cluster features for num 626
[LOG] Processing adjacency and incidence matrices for num 626
[LOG] Computing n0_to_0 for num 626
[LOG] Computing n2_to_4 for num 113
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n2_to_2 (adjacency) for num 730
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_4 for num 113
[LOG] Global feature for num 113
[LOG] Global feature for num 113
[LOG] Saving tensor x_0_113.pt
[LOG] Saving tensor x_1_113.pt
[LOG] Saving tensor x_2_113.pt
[LOG] Saving tensor x_3_113.pt
[LOG] Saving tensor x_4_113.pt
[LOG] Saving tensor n0_to_0_113.pt
[LOG] Saving tensor n1_to_1_113.pt
[LOG] Computing n1_to_1 for num 626
[LOG] Saving tensor n2_to_2_113.pt
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 2111 Tetrahedra.
    [LOG] Generated 57 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.228070175438596
    [LOG] Max number of nodes per cluster is 53 and the number is 48
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n3_to_3_113.pt
[LOG] Saving tensor n4_to_4_113.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n0_to_1_113.pt
[LOG] Process 24: Created combinatorial complex for file data_193.hdf5
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n0_to_2_113.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n0_to_3_113.pt
[LOG] Saving tensor n0_to_4_113.pt
[LOG] Saving tensor n1_to_2_113.pt
[LOG] Computing n3_to_3 (adjacency) for num 730
[LOG] Computing n4_to_4 (coadjacency) for num 730
[LOG] Saving tensor n1_to_3_113.pt
[LOG] Computing n0_to_1 for num 730
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n1_to_4_113.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1315 Tetrahedra.
    [LOG] Generated 42 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.547619047619047
    [LOG] Max number of nodes per cluster is 28 and the number is 25
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n2_to_3_113.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n2_to_4_113.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n3_to_4_113.pt
[LOG] Computing n0_to_2 for num 730
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor global_feature_113.pt
[LOG] Process 14: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] We will select 91 edges and 1315 tetra
[LOG] Edges from tetra 0 and KDTree 91 with 0 edges in common.
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n2_to_2 (adjacency) for num 626
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 626
[LOG] Computing n4_to_4 (coadjacency) for num 626
[LOG] Computing n0_to_1 for num 626
[LOG] Computing n2_to_2 (adjacency) for num 425
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_3 for num 730
[LOG] Computing n0_to_4 for num 730
[LOG] Computing n1_to_2 for num 730
[LOG] Computing n0_to_2 for num 626
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_3 (adjacency) for num 401
[LOG] Computing n4_to_4 (coadjacency) for num 401
[LOG] Computing n0_to_1 for num 401
[LOG] Process 74: Created combinatorial complex for file data_593.hdf5
[LOG] Computing n1_to_3 for num 730
[LOG] Computing n1_to_4 for num 730
[LOG] Computing n2_to_3 for num 730
[LOG] Computing n2_to_4 for num 730
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_4 for num 730
[LOG] Global feature for num 730
[LOG] Global feature for num 730
[LOG] Saving tensor x_0_730.pt
[LOG] Saving tensor x_1_730.pt
[LOG] Saving tensor x_2_730.pt
[LOG] Saving tensor x_3_730.pt
[LOG] Saving tensor x_4_730.pt
[LOG] Saving tensor n0_to_0_730.pt
[LOG] We will select 516 edges and 2111 tetra
[LOG] Edges from tetra 0 and KDTree 2722 with 0 edges in common.
[LOG] Saving tensor n1_to_1_730.pt
[LOG] Saving tensor n2_to_2_730.pt
[LOG] Saving tensor n3_to_3_730.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n4_to_4_730.pt
[LOG] Saving tensor n0_to_1_730.pt
[LOG] Saving tensor n0_to_2_730.pt
[LOG] Saving tensor n0_to_3_730.pt
[LOG] Process 24: Calculating Neighbors
[LOG] Loading pickle file data_193.pickle
[LOG] Processing node features for num 193
[LOG] Saving tensor n0_to_4_730.pt
[LOG] Processing edge features for num 193
[LOG] Saving tensor n1_to_2_730.pt
[LOG] Saving tensor n1_to_3_730.pt
[LOG] Saving tensor n1_to_4_730.pt
[LOG] Saving tensor n2_to_3_730.pt
[LOG] Saving tensor n2_to_4_730.pt
[LOG] Saving tensor n3_to_4_730.pt
[LOG] Saving tensor global_feature_730.pt
[LOG] Process 91: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing tetra features for num 193
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing cluster features for num 193
[LOG] Processing cluster features for num 193
[LOG] Processing adjacency and incidence matrices for num 193
[LOG] Computing n0_to_0 for num 193
[LOG] Computing n0_to_2 for num 401
[LOG] Process 74: Calculating Neighbors
[LOG] Loading pickle file data_593.pickle
[LOG] Processing node features for num 593
[LOG] Computing n0_to_3 for num 626
[LOG] Computing n1_to_1 for num 193
[LOG] Processing edge features for num 593
[LOG] Computing n0_to_4 for num 626
[LOG] Process 69: Created combinatorial complex for file data_554.hdf5
[LOG] Computing n1_to_2 for num 626
[LOG] Processing tetra features for num 593
[LOG] Process 69: Calculating Neighbors
[LOG] Loading pickle file data_554.pickle
[LOG] Processing node features for num 554
[LOG] Processing edge features for num 554
[LOG] Processing tetra features for num 554
[LOG] Processing cluster features for num 593
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing cluster features for num 554
[LOG] Processing cluster features for num 554
[LOG] Processing adjacency and incidence matrices for num 554
[LOG] Computing n0_to_0 for num 554
[LOG] Processing cluster features for num 593
[LOG] Computing n1_to_1 for num 554
[LOG] Computing n2_to_2 (adjacency) for num 193
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing adjacency and incidence matrices for num 593
[LOG] Computing n0_to_0 for num 593
[LOG] Computing n2_to_2 (adjacency) for num 554
[LOG] Computing n1_to_3 for num 626
[LOG] Computing n1_to_4 for num 626
[LOG] Computing n2_to_3 for num 626
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_4 for num 626
[LOG] Computing n3_to_3 (adjacency) for num 554
[LOG] Computing n4_to_4 (coadjacency) for num 554
[LOG] Computing n0_to_1 for num 554
[LOG] Computing n0_to_2 for num 554
[LOG] Computing n3_to_4 for num 626
[LOG] Global feature for num 626
[LOG] Global feature for num 626
[LOG] Saving tensor x_0_626.pt
[LOG] Saving tensor x_1_626.pt
[LOG] Saving tensor x_2_626.pt
[LOG] Saving tensor x_3_626.pt
[LOG] Saving tensor x_4_626.pt
[LOG] Saving tensor n0_to_0_626.pt
[LOG] Saving tensor n1_to_1_626.pt
[LOG] Saving tensor n2_to_2_626.pt
[LOG] Computing n3_to_3 (adjacency) for num 193
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n4_to_4 (coadjacency) for num 193
[LOG] Saving tensor n3_to_3_626.pt
[LOG] Computing n0_to_1 for num 193
[LOG] Saving tensor n4_to_4_626.pt
[LOG] Saving tensor n0_to_1_626.pt
[LOG] Saving tensor n0_to_2_626.pt
[LOG] Saving tensor n0_to_3_626.pt
[LOG] Saving tensor n0_to_4_626.pt
[LOG] Saving tensor n1_to_2_626.pt
[LOG] Saving tensor n1_to_3_626.pt
[LOG] Saving tensor n1_to_4_626.pt
[LOG] Computing n0_to_2 for num 193
[LOG] Saving tensor n2_to_3_626.pt
[LOG] Saving tensor n2_to_4_626.pt
[LOG] Saving tensor n3_to_4_626.pt
[LOG] Saving tensor global_feature_626.pt
[LOG] Process 78: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 554
[LOG] Computing n0_to_4 for num 554
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_2 for num 554
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3918 Tetrahedra.
    [LOG] Generated 101 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.514851485148515
    [LOG] Max number of nodes per cluster is 55 and the number is 99
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_3 for num 554
[LOG] Computing n1_to_4 for num 554
[LOG] Computing n2_to_3 for num 554
[LOG] Computing n2_to_4 for num 554
[LOG] Computing n3_to_4 for num 554
[LOG] Computing n1_to_1 for num 593
[LOG] Global feature for num 554
[LOG] Global feature for num 554
[LOG] Saving tensor x_0_554.pt
[LOG] Saving tensor x_1_554.pt
[LOG] Saving tensor x_2_554.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor x_3_554.pt
[LOG] Saving tensor x_4_554.pt
[LOG] Computing n0_to_3 for num 193
[LOG] Saving tensor n0_to_0_554.pt
[LOG] Saving tensor n1_to_1_554.pt
[LOG] Computing n0_to_4 for num 193
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n2_to_2_554.pt
[LOG] Computing n1_to_2 for num 193
[LOG] Saving tensor n3_to_3_554.pt
[LOG] Saving tensor n4_to_4_554.pt
[LOG] Saving tensor n0_to_1_554.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n0_to_2_554.pt
[LOG] Saving tensor n0_to_3_554.pt
[LOG] Saving tensor n0_to_4_554.pt
[LOG] Saving tensor n1_to_2_554.pt
[LOG] Saving tensor n1_to_3_554.pt
[LOG] Saving tensor n1_to_4_554.pt
[LOG] We will select 891 edges and 3918 tetra
[LOG] Saving tensor n2_to_3_554.pt
[LOG] Edges from tetra 0 and KDTree 1219 with 0 edges in common.
[LOG] Saving tensor n2_to_4_554.pt
[LOG] Saving tensor n3_to_4_554.pt
[LOG] Saving tensor global_feature_554.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 69: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 3 subset clusters.
[LOG] Computing n3_to_3 (adjacency) for num 425
[LOG] Computing n4_to_4 (coadjacency) for num 425
[LOG] Computing n0_to_1 for num 425
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n1_to_3 for num 193
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n1_to_4 for num 193
[LOG] Computing n2_to_3 for num 193
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n2_to_4 for num 193
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n3_to_4 for num 193
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Global feature for num 193
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Global feature for num 193
[LOG] Saving tensor x_0_193.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor x_1_193.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor x_2_193.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor x_3_193.pt
[LOG] Saving tensor x_4_193.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n0_to_0_193.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n1_to_1_193.pt
[LOG] Saving tensor n2_to_2_193.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n3_to_3_193.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n4_to_4_193.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Process 58: Created combinatorial complex for file data_465.hdf5
[LOG] Saving tensor n0_to_1_193.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n0_to_2_193.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n0_to_3_193.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n0_to_4_193.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n1_to_2_193.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n1_to_3_193.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n1_to_4_193.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_2 for num 425
[LOG] Saving tensor n2_to_3_193.pt
[LOG] Saving tensor n2_to_4_193.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n3_to_4_193.pt
[LOG] Saving tensor global_feature_193.pt
[LOG] Process 24: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 58: Calculating Neighbors
[LOG] Loading pickle file data_465.pickle
[LOG] Processing node features for num 465
[LOG] Computing n2_to_2 (adjacency) for num 593
[LOG] Processing edge features for num 465
[LOG] Processing tetra features for num 465
[LOG] Processing cluster features for num 465
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing cluster features for num 465
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing adjacency and incidence matrices for num 465
[LOG] Computing n0_to_0 for num 465
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_1 for num 465
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_3 for num 401
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_4 for num 401
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_2 for num 401
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_3 for num 8
[LOG] Computing n2_to_2 (adjacency) for num 465
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 593
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 465
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n4_to_4 (coadjacency) for num 593
[LOG] Computing n4_to_4 (coadjacency) for num 465
[LOG] Computing n0_to_1 for num 593
[LOG] Computing n0_to_1 for num 465
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n0_to_2 for num 465
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_4 for num 8
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_2 for num 593
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_3 for num 465
[LOG] Computing n0_to_4 for num 465
[LOG] Computing n1_to_2 for num 465
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_3 for num 401
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1602 Tetrahedra.
    [LOG] Generated 46 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.130434782608695
    [LOG] Max number of nodes per cluster is 56 and the number is 44
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_4 for num 401
[LOG] GENERATED TETRA
[LOG] Computing n2_to_3 for num 401
[LOG] Calculating for cell ranks 2 and 4
[LOG] We will select 261 edges and 1602 tetra
[LOG] Edges from tetra 0 and KDTree 930 with 0 edges in common.
[LOG] Computing n2_to_4 for num 401
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 107: Created combinatorial complex for file data_854.hdf5
[LOG] Computing n3_to_4 for num 401
[LOG] Global feature for num 401
[LOG] Global feature for num 401
[LOG] Saving tensor x_0_401.pt
[LOG] Computing n2_to_3 for num 8
[LOG] Saving tensor x_1_401.pt
[LOG] Saving tensor x_2_401.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor x_3_401.pt
[LOG] Saving tensor x_4_401.pt
[LOG] Saving tensor n0_to_0_401.pt
[LOG] Saving tensor n1_to_1_401.pt
[LOG] Saving tensor n2_to_2_401.pt
[LOG] Computing n1_to_3 for num 465
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_4 for num 465
[LOG] Computing n2_to_3 for num 465
[LOG] Saving tensor n3_to_3_401.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n4_to_4_401.pt
[LOG] Saving tensor n0_to_1_401.pt
[LOG] Saving tensor n0_to_2_401.pt
[LOG] Computing n2_to_4 for num 465
[LOG] Saving tensor n0_to_3_401.pt
[LOG] Saving tensor n0_to_4_401.pt
[LOG] Saving tensor n1_to_2_401.pt
[LOG] Saving tensor n1_to_3_401.pt
[LOG] Saving tensor n1_to_4_401.pt
[LOG] Computing n3_to_4 for num 465
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n2_to_3_401.pt
[LOG] Global feature for num 465
[LOG] Global feature for num 465
[LOG] Saving tensor x_0_465.pt
[LOG] Saving tensor n2_to_4_401.pt
[LOG] Saving tensor x_1_465.pt
[LOG] Saving tensor n3_to_4_401.pt
[LOG] Saving tensor x_2_465.pt
[LOG] Saving tensor x_3_465.pt
[LOG] Saving tensor global_feature_401.pt
[LOG] Process 50: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor x_4_465.pt
[LOG] Saving tensor n0_to_0_465.pt
[LOG] Saving tensor n1_to_1_465.pt
[LOG] Saving tensor n2_to_2_465.pt
[LOG] Saving tensor n3_to_3_465.pt
[LOG] Saving tensor n4_to_4_465.pt
[LOG] Saving tensor n0_to_1_465.pt
[LOG] Saving tensor n0_to_2_465.pt
[LOG] Saving tensor n0_to_3_465.pt
[LOG] Saving tensor n0_to_4_465.pt
[LOG] Saving tensor n1_to_2_465.pt
[LOG] Saving tensor n1_to_3_465.pt
[LOG] Saving tensor n1_to_4_465.pt
[LOG] Saving tensor n2_to_3_465.pt
[LOG] Saving tensor n2_to_4_465.pt
[LOG] Saving tensor n3_to_4_465.pt
[LOG] Saving tensor global_feature_465.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 107: Calculating Neighbors
[LOG] Loading pickle file data_854.pickle
[LOG] Processing node features for num 854
[LOG] Processing edge features for num 854
[LOG] Calculating for cell ranks 0 and 3
[LOG] Removed 1 subset clusters.
[LOG] Processing tetra features for num 854
[LOG] Process 58: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_4 for num 8
[LOG] Processing cluster features for num 854
[LOG] Process 119: Created combinatorial complex for file data_939.hdf5
[LOG] Calculating for cell ranks 1 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 854
[LOG] Processing adjacency and incidence matrices for num 854
[LOG] Computing n0_to_0 for num 854
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 119: Calculating Neighbors
[LOG] Loading pickle file data_939.pickle
[LOG] Processing node features for num 939
[LOG] Processing edge features for num 939
[LOG] Processing tetra features for num 939
[LOG] Processing cluster features for num 939
[LOG] Processing cluster features for num 939
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing adjacency and incidence matrices for num 939
[LOG] Computing n0_to_0 for num 939
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_1 for num 939
[LOG] Computing n1_to_1 for num 854
[LOG] Calculating for cell ranks 1 and 1
[LOG] GENERATED TETRA
[LOG] Computing n2_to_2 (adjacency) for num 939
[LOG] Computing n3_to_4 for num 8
[LOG] Global feature for num 8
[LOG] Global feature for num 8
[LOG] Saving tensor x_0_8.pt
[LOG] Saving tensor x_1_8.pt
[LOG] Saving tensor x_2_8.pt
[LOG] Saving tensor x_3_8.pt
[LOG] Saving tensor x_4_8.pt
[LOG] Saving tensor n0_to_0_8.pt
[LOG] Saving tensor n1_to_1_8.pt
[LOG] Saving tensor n2_to_2_8.pt
[LOG] Computing n3_to_3 (adjacency) for num 939
[LOG] Computing n4_to_4 (coadjacency) for num 939
[LOG] Computing n0_to_1 for num 939
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_2 for num 939
[LOG] Computing n0_to_3 for num 593
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_4 for num 593
[LOG] Saving tensor n3_to_3_8.pt
[LOG] Saving tensor n4_to_4_8.pt
[LOG] Saving tensor n0_to_1_8.pt
[LOG] Saving tensor n0_to_2_8.pt
[LOG] Saving tensor n0_to_3_8.pt
[LOG] Saving tensor n0_to_4_8.pt
[LOG] Saving tensor n1_to_2_8.pt
[LOG] Saving tensor n1_to_3_8.pt
[LOG] Saving tensor n1_to_4_8.pt
[LOG] Computing n1_to_2 for num 593
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1713 Tetrahedra.
    [LOG] Generated 45 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.177777777777777
    [LOG] Max number of nodes per cluster is 39 and the number is 43
[LOG] Saving tensor n2_to_3_8.pt
[LOG] Saving tensor n2_to_4_8.pt
[LOG] Saving tensor n3_to_4_8.pt
[LOG] Saving tensor global_feature_8.pt
[LOG] Process 1: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 425
[LOG] We will select 270 edges and 1713 tetra
[LOG] Edges from tetra 0 and KDTree 392 with 0 edges in common.
[LOG] Computing n0_to_4 for num 425
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 940 Tetrahedra.
    [LOG] Generated 31 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.06451612903226
    [LOG] Max number of nodes per cluster is 61 and the number is 9
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_3 for num 939
[LOG] Computing n0_to_4 for num 939
[LOG] We will select 96 edges and 940 tetra
[LOG] Edges from tetra 0 and KDTree 2196 with 0 edges in common.
[LOG] Computing n1_to_2 for num 425
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_2 for num 939
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_3 for num 939
[LOG] Computing n1_to_4 for num 939
[LOG] Computing n2_to_3 for num 939
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_4 for num 939
[LOG] Computing n3_to_4 for num 939
[LOG] Global feature for num 939
[LOG] Removed 0 subset clusters.
[LOG] Global feature for num 939
[LOG] Saving tensor x_0_939.pt
[LOG] Saving tensor x_1_939.pt
[LOG] Saving tensor x_2_939.pt
[LOG] Saving tensor x_3_939.pt
[LOG] Saving tensor x_4_939.pt
[LOG] Saving tensor n0_to_0_939.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n1_to_1_939.pt
[LOG] Saving tensor n2_to_2_939.pt
[LOG] Saving tensor n3_to_3_939.pt
[LOG] Saving tensor n4_to_4_939.pt
[LOG] Saving tensor n0_to_1_939.pt
[LOG] Saving tensor n0_to_2_939.pt
[LOG] Saving tensor n0_to_3_939.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n0_to_4_939.pt
[LOG] Saving tensor n1_to_2_939.pt
[LOG] Saving tensor n1_to_3_939.pt
[LOG] Saving tensor n1_to_4_939.pt
[LOG] Saving tensor n2_to_3_939.pt
[LOG] Saving tensor n2_to_4_939.pt
[LOG] Saving tensor n3_to_4_939.pt
[LOG] Saving tensor global_feature_939.pt
[LOG] Process 119: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n2_to_2 (adjacency) for num 854
[LOG] Process 97: Created combinatorial complex for file data_778.hdf5
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 97: Calculating Neighbors
[LOG] Loading pickle file data_778.pickle
[LOG] Processing node features for num 778
[LOG] Processing edge features for num 778
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing tetra features for num 778
[LOG] Processing cluster features for num 778
[LOG] Computing n1_to_3 for num 593
[LOG] Processing cluster features for num 778
[LOG] Removed 0 subset clusters.
[LOG] Processing adjacency and incidence matrices for num 778
[LOG] Computing n0_to_0 for num 778
[LOG] Computing n1_to_4 for num 593
[LOG] Computing n2_to_3 for num 593
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_1 for num 778
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_2 (adjacency) for num 778
[LOG] Computing n2_to_4 for num 593
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_3 (adjacency) for num 778
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n4_to_4 (coadjacency) for num 778
[LOG] Computing n0_to_1 for num 778
[LOG] Process 79: Created combinatorial complex for file data_634.hdf5
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_2 for num 778
[LOG] Computing n3_to_4 for num 593
[LOG] Global feature for num 593
[LOG] Global feature for num 593
[LOG] Saving tensor x_0_593.pt
[LOG] Saving tensor x_1_593.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor x_2_593.pt
[LOG] Saving tensor x_3_593.pt
[LOG] Saving tensor x_4_593.pt
[LOG] Saving tensor n0_to_0_593.pt
[LOG] Saving tensor n1_to_1_593.pt
[LOG] Saving tensor n2_to_2_593.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n3_to_3_593.pt
[LOG] Saving tensor n4_to_4_593.pt
[LOG] Saving tensor n0_to_1_593.pt
[LOG] Saving tensor n0_to_2_593.pt
[LOG] Saving tensor n0_to_3_593.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n0_to_4_593.pt
[LOG] Saving tensor n1_to_2_593.pt
[LOG] Saving tensor n1_to_3_593.pt
[LOG] Saving tensor n1_to_4_593.pt
[LOG] Process 79: Calculating Neighbors
[LOG] Loading pickle file data_634.pickle
[LOG] Processing node features for num 634
[LOG] Saving tensor n2_to_3_593.pt
[LOG] Processing edge features for num 634
[LOG] Saving tensor n2_to_4_593.pt
[LOG] Saving tensor n3_to_4_593.pt
[LOG] Saving tensor global_feature_593.pt
[LOG] Process 74: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing tetra features for num 634
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 2

    [LOG] We Currently have 1298 Tetrahedra.
    [LOG] Generated 30 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.966666666666667
    [LOG] Max number of nodes per cluster is 134 and the number is 17[LOG] Saving tensor euclidean_0_to_0.pt

[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Processing cluster features for num 634
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Processing cluster features for num 634
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 634
[LOG] Computing n0_to_0 for num 634
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] We will select 616 edges and 1298 tetra
[LOG] Edges from tetra 0 and KDTree 4392 with 0 edges in common.
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n1_to_1 for num 634
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n0_to_3 for num 778
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_4 for num 778
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_2 for num 778
[LOG] Computing n1_to_3 for num 778
[LOG] Computing n1_to_4 for num 778
[LOG] Computing n2_to_3 for num 778
[LOG] Computing n2_to_2 (adjacency) for num 634
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_4 for num 778
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_4 for num 778
[LOG] Global feature for num 778
[LOG] Global feature for num 778
[LOG] Saving tensor x_0_778.pt
[LOG] Saving tensor x_1_778.pt
[LOG] Saving tensor x_2_778.pt
[LOG] Saving tensor x_3_778.pt
[LOG] Saving tensor x_4_778.pt
[LOG] Saving tensor n0_to_0_778.pt
[LOG] Saving tensor n1_to_1_778.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n2_to_2_778.pt
[LOG] Computing n1_to_3 for num 425
[LOG] Saving tensor n3_to_3_778.pt
[LOG] Saving tensor n4_to_4_778.pt
[LOG] Saving tensor n0_to_1_778.pt
[LOG] Saving tensor n0_to_2_778.pt
[LOG] Saving tensor n0_to_3_778.pt
[LOG] Saving tensor n0_to_4_778.pt
[LOG] Saving tensor n1_to_2_778.pt
[LOG] Saving tensor n1_to_3_778.pt
[LOG] Saving tensor n1_to_4_778.pt
[LOG] Saving tensor n2_to_3_778.pt
[LOG] Computing n1_to_4 for num 425
[LOG] Saving tensor n2_to_4_778.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n3_to_4_778.pt
[LOG] Saving tensor global_feature_778.pt
[LOG] Process 97: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_3 for num 425
[LOG] Computing n3_to_3 (adjacency) for num 634
[LOG] Computing n4_to_4 (coadjacency) for num 634
[LOG] Computing n0_to_1 for num 634
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_3 (adjacency) for num 854
[LOG] Computing n0_to_2 for num 634
[LOG] Computing n4_to_4 (coadjacency) for num 854
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n0_to_1 for num 854
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n2_to_4 for num 425
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_2 for num 854
[LOG] Computing n3_to_4 for num 425
[LOG] Global feature for num 425
[LOG] Global feature for num 425
[LOG] Saving tensor x_0_425.pt
[LOG] Saving tensor x_1_425.pt
[LOG] Saving tensor x_2_425.pt
[LOG] Saving tensor x_3_425.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor x_4_425.pt
[LOG] Saving tensor n0_to_0_425.pt
[LOG] Saving tensor n1_to_1_425.pt
[LOG] Computing n0_to_3 for num 634
[LOG] Saving tensor n2_to_2_425.pt
[LOG] Computing n0_to_4 for num 634
[LOG] Saving tensor n3_to_3_425.pt
[LOG] Saving tensor n4_to_4_425.pt
[LOG] Computing n1_to_2 for num 634
[LOG] Saving tensor n0_to_1_425.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n0_to_2_425.pt
[LOG] Saving tensor n0_to_3_425.pt
[LOG] Saving tensor n0_to_4_425.pt
[LOG] Saving tensor n1_to_2_425.pt
[LOG] Process 104: Created combinatorial complex for file data_834.hdf5
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n1_to_3_425.pt
[LOG] Saving tensor n1_to_4_425.pt
[LOG] Saving tensor n2_to_3_425.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n2_to_4_425.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n3_to_4_425.pt
[LOG] Saving tensor global_feature_425.pt
[LOG] Process 53: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_3 for num 634
[LOG] Computing n1_to_4 for num 634
[LOG] GENERATED TETRA
[LOG] Computing n2_to_3 for num 634
[LOG] Process 104: Calculating Neighbors
[LOG] Loading pickle file data_834.pickle
[LOG] Processing node features for num 834
[LOG] Processing edge features for num 834
[LOG] Computing n2_to_4 for num 634
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing tetra features for num 834
[LOG] Computing n3_to_4 for num 634
[LOG] Global feature for num 634
[LOG] Global feature for num 634
[LOG] Saving tensor x_0_634.pt
[LOG] Saving tensor x_1_634.pt
[LOG] Saving tensor x_2_634.pt
[LOG] Saving tensor x_3_634.pt
[LOG] Saving tensor x_4_634.pt
[LOG] Saving tensor n0_to_0_634.pt
[LOG] Saving tensor n1_to_1_634.pt
[LOG] Saving tensor n2_to_2_634.pt
[LOG] Removed 1 subset clusters.
[LOG] Processing cluster features for num 834

    [LOG] We Currently have 568 Tetrahedra.
    [LOG] Generated 19 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.947368421052632
    [LOG] Max number of nodes per cluster is 25 and the number is 15
[LOG] Saving tensor n3_to_3_634.pt
[LOG] Saving tensor n4_to_4_634.pt
[LOG] Saving tensor n0_to_1_634.pt
[LOG] Saving tensor n0_to_2_634.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n0_to_3_634.pt
[LOG] Saving tensor n0_to_4_634.pt
[LOG] Processing cluster features for num 834
[LOG] Saving tensor n1_to_2_634.pt
[LOG] Saving tensor n1_to_3_634.pt
[LOG] We will select 40 edges and 568 tetra
[LOG] Saving tensor n1_to_4_634.pt
[LOG] Edges from tetra 0 and KDTree 40 with 0 edges in common.
[LOG] Saving tensor n2_to_3_634.pt
[LOG] Saving tensor n2_to_4_634.pt
[LOG] Processing adjacency and incidence matrices for num 834
[LOG] Computing n0_to_0 for num 834
[LOG] Saving tensor n3_to_4_634.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor global_feature_634.pt
[LOG] Process 79: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_1 for num 834
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 2: Created combinatorial complex for file data_17.hdf5
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_2 (adjacency) for num 834
[LOG] Process 2: Calculating Neighbors
[LOG] Loading pickle file data_17.pickle
[LOG] Processing node features for num 17
[LOG] Processing edge features for num 17
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing tetra features for num 17
[LOG] Processing cluster features for num 17
[LOG] Processing cluster features for num 17
[LOG] Processing adjacency and incidence matrices for num 17
[LOG] Computing n0_to_0 for num 17
[LOG] Computing n1_to_1 for num 17
[LOG] Computing n2_to_2 (adjacency) for num 17
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Computing n3_to_3 (adjacency) for num 17
[LOG] Computing n4_to_4 (coadjacency) for num 17
[LOG] Computing n0_to_1 for num 17
[LOG] Computing n0_to_2 for num 17
[LOG] Computing n3_to_3 (adjacency) for num 834
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n4_to_4 (coadjacency) for num 834
[LOG] Computing n0_to_3 for num 17
[LOG] Computing n0_to_1 for num 834
[LOG] Computing n0_to_4 for num 17
[LOG] Computing n1_to_2 for num 17
[LOG] Computing n1_to_3 for num 17
[LOG] Computing n1_to_4 for num 17
[LOG] Computing n2_to_3 for num 17
[LOG] Computing n2_to_4 for num 17
[LOG] Computing n3_to_4 for num 17
[LOG] Global feature for num 17
[LOG] Global feature for num 17
[LOG] Saving tensor x_0_17.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n0_to_2 for num 834
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor x_1_17.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor x_2_17.pt
[LOG] Saving tensor x_3_17.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor x_4_17.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n0_to_3 for num 854
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_4 for num 854
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_3 for num 834
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_4 for num 834
[LOG] Computing n1_to_2 for num 854
[LOG] Computing n1_to_2 for num 834
[LOG] Saving tensor n0_to_0_17.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n1_to_1_17.pt
[LOG] Saving tensor n2_to_2_17.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n3_to_3_17.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n4_to_4_17.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n0_to_1_17.pt
[LOG] Saving tensor n0_to_2_17.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n0_to_3_17.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n0_to_4_17.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n1_to_2_17.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n1_to_3_17.pt
[LOG] Saving tensor n1_to_4_17.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n2_to_3_17.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n2_to_4_17.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n3_to_4_17.pt
[LOG] Saving tensor global_feature_17.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Process 2: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_3 for num 834
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_4 for num 834
[LOG] Computing n2_to_3 for num 834
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_4 for num 834
[LOG] Computing n3_to_4 for num 834
[LOG] Global feature for num 834
[LOG] Global feature for num 834
[LOG] Saving tensor x_0_834.pt
[LOG] Saving tensor x_1_834.pt
[LOG] Saving tensor x_2_834.pt
[LOG] Saving tensor x_3_834.pt
[LOG] Saving tensor x_4_834.pt
[LOG] Saving tensor n0_to_0_834.pt
[LOG] Saving tensor n1_to_1_834.pt
[LOG] Saving tensor n2_to_2_834.pt
[LOG] Saving tensor n3_to_3_834.pt
[LOG] Saving tensor n4_to_4_834.pt
[LOG] Saving tensor n0_to_1_834.pt
[LOG] Saving tensor n0_to_2_834.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 964 Tetrahedra.
    [LOG] Generated 30 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 18.0
    [LOG] Max number of nodes per cluster is 58 and the number is 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] We will select 100 edges and 964 tetra
[LOG] Edges from tetra 0 and KDTree 668 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n0_to_3_834.pt
[LOG] Saving tensor n0_to_4_834.pt
[LOG] Saving tensor n1_to_2_834.pt
[LOG] Saving tensor n1_to_3_834.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n1_to_4_834.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n2_to_3_834.pt
[LOG] Saving tensor n2_to_4_834.pt
[LOG] Saving tensor n3_to_4_834.pt
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor global_feature_834.pt
[LOG] Process 104: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_3 for num 854
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_4 for num 854
[LOG] Process 89: Created combinatorial complex for file data_715.hdf5
[LOG] Computing n2_to_3 for num 854
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 89: Calculating Neighbors
[LOG] Loading pickle file data_715.pickle
[LOG] Processing node features for num 715
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing edge features for num 715
[LOG] Processing tetra features for num 715
[LOG] Computing n2_to_4 for num 854
[LOG] Processing cluster features for num 715
[LOG] Processing cluster features for num 715
[LOG] Processing adjacency and incidence matrices for num 715
[LOG] Computing n0_to_0 for num 715
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Computing n1_to_1 for num 715
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 715
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n3_to_4 for num 854
[LOG] Global feature for num 854
[LOG] Global feature for num 854
[LOG] Saving tensor x_0_854.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_3 (adjacency) for num 715
[LOG] Computing n4_to_4 (coadjacency) for num 715
[LOG] Computing n0_to_1 for num 715
[LOG] Computing n0_to_2 for num 715
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1804 Tetrahedra.
    [LOG] Generated 48 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.354166666666666
    [LOG] Max number of nodes per cluster is 30 and the number is 33
[LOG] Saving tensor x_1_854.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor x_2_854.pt
[LOG] Saving tensor x_3_854.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor x_4_854.pt
[LOG] Saving tensor n0_to_0_854.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n1_to_1_854.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n2_to_2_854.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n3_to_3_854.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n4_to_4_854.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n0_to_1_854.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n0_to_2_854.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n0_to_3_854.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n0_to_4_854.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n1_to_2_854.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n1_to_3_854.pt
[LOG] Removed 0 subset clusters.
[LOG] We will select 267 edges and 1804 tetra
[LOG] Edges from tetra 0 and KDTree 267 with 0 edges in common.
[LOG] Saving tensor euclidean_3_to_4.pt

    [LOG] We Currently have 3339 Tetrahedra.
    [LOG] Generated 82 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.4390243902439
    [LOG] Max number of nodes per cluster is 104 and the number is 63
[LOG] Saving tensor n1_to_4_854.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n2_to_3_854.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n2_to_4_854.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n3_to_4_854.pt
[LOG] Computing n0_to_3 for num 715
[LOG] Saving tensor global_feature_854.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 107: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_4 for num 715
[LOG] Computing n1_to_2 for num 715
[LOG] We will select 1250 edges and 3339 tetra
[LOG] Edges from tetra 0 and KDTree 2859 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_3 for num 715
[LOG] Computing n1_to_4 for num 715
[LOG] Computing n2_to_3 for num 715
[LOG] Computing n2_to_4 for num 715
[LOG] Computing n3_to_4 for num 715
[LOG] Calculating for cell ranks 0 and 3
[LOG] Global feature for num 715
[LOG] Global feature for num 715
[LOG] Saving tensor x_0_715.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor x_1_715.pt
[LOG] Saving tensor x_2_715.pt
[LOG] Saving tensor x_3_715.pt
[LOG] Saving tensor x_4_715.pt
[LOG] Saving tensor n0_to_0_715.pt
[LOG] Saving tensor n1_to_1_715.pt
[LOG] Saving tensor n2_to_2_715.pt
[LOG] Saving tensor n3_to_3_715.pt
[LOG] Saving tensor n4_to_4_715.pt
[LOG] Saving tensor n0_to_1_715.pt
[LOG] Saving tensor n0_to_2_715.pt
[LOG] Saving tensor n0_to_3_715.pt
[LOG] Saving tensor n0_to_4_715.pt
[LOG] Saving tensor n1_to_2_715.pt
[LOG] Saving tensor n1_to_3_715.pt
[LOG] Saving tensor n1_to_4_715.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n2_to_3_715.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n2_to_4_715.pt
[LOG] Saving tensor n3_to_4_715.pt
[LOG] Saving tensor global_feature_715.pt
[LOG] Process 89: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 46: Created combinatorial complex for file data_370.hdf5
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 46: Calculating Neighbors
[LOG] Loading pickle file data_370.pickle
[LOG] Processing node features for num 370
[LOG] Processing edge features for num 370
[LOG] Processing tetra features for num 370
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing cluster features for num 370
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing cluster features for num 370
[LOG] Processing adjacency and incidence matrices for num 370
[LOG] Computing n0_to_0 for num 370
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_1 for num 370
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Computing n2_to_2 (adjacency) for num 370
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 370
[LOG] Computing n4_to_4 (coadjacency) for num 370
[LOG] Computing n0_to_1 for num 370
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_2 for num 370
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2313 Tetrahedra.
    [LOG] Generated 61 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.147540983606557
    [LOG] Max number of nodes per cluster is 43 and the number is 45
[LOG] Computing n0_to_3 for num 370
[LOG] Computing n0_to_4 for num 370
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_2 for num 370
[LOG] Process 125: Created combinatorial complex for file data_980.hdf5
[LOG] We will select 156 edges and 2313 tetra
[LOG] Edges from tetra 0 and KDTree 907 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_3 for num 370
[LOG] Computing n1_to_4 for num 370
[LOG] Computing n2_to_3 for num 370
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 977 Tetrahedra.
    [LOG] Generated 29 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.10344827586207
    [LOG] Max number of nodes per cluster is 46 and the number is 27
[LOG] Computing n2_to_4 for num 370
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_4 for num 370
[LOG] Global feature for num 370
[LOG] Global feature for num 370
[LOG] Saving tensor x_0_370.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor x_1_370.pt
[LOG] We will select 164 edges and 977 tetra
[LOG] Edges from tetra 0 and KDTree 510 with 0 edges in common.
[LOG] Saving tensor x_2_370.pt
[LOG] Saving tensor x_3_370.pt
[LOG] Saving tensor x_4_370.pt
[LOG] Saving tensor n0_to_0_370.pt
[LOG] Saving tensor n1_to_1_370.pt
[LOG] Saving tensor n2_to_2_370.pt
[LOG] Saving tensor n3_to_3_370.pt
[LOG] Saving tensor n4_to_4_370.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n0_to_1_370.pt
[LOG] Saving tensor n0_to_2_370.pt
[LOG] Saving tensor n0_to_3_370.pt
[LOG] Saving tensor n0_to_4_370.pt
[LOG] Saving tensor n1_to_2_370.pt
[LOG] Saving tensor n1_to_3_370.pt
[LOG] Saving tensor n1_to_4_370.pt
[LOG] Saving tensor n2_to_3_370.pt
[LOG] Saving tensor n2_to_4_370.pt
[LOG] Saving tensor n3_to_4_370.pt
[LOG] Saving tensor global_feature_370.pt
[LOG] Process 46: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 125: Calculating Neighbors
[LOG] Loading pickle file data_980.pickle
[LOG] Processing node features for num 980
[LOG] Processing edge features for num 980
[LOG] Processing tetra features for num 980
[LOG] Calculating for cell ranks 3 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing cluster features for num 980
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing cluster features for num 980
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 100: Created combinatorial complex for file data_803.hdf5
[LOG] Processing adjacency and incidence matrices for num 980
[LOG] Computing n0_to_0 for num 980
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Process 100: Calculating Neighbors
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Removed 3 subset clusters.
[LOG] Loading pickle file data_803.pickle

    [LOG] We Currently have 1702 Tetrahedra.
    [LOG] Generated 54 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.148148148148149
    [LOG] Max number of nodes per cluster is 22 and the number is 21
[LOG] Processing node features for num 803
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Processing edge features for num 803
[LOG] Processing tetra features for num 803
[LOG] Processing cluster features for num 803
[LOG] Processing cluster features for num 803
[LOG] Processing adjacency and incidence matrices for num 803
[LOG] Computing n0_to_0 for num 803
[LOG] We will select 707 edges and 1702 tetra
[LOG] Edges from tetra 0 and KDTree 707 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_1 for num 803
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_2 (adjacency) for num 803
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 803
[LOG] Computing n4_to_4 (coadjacency) for num 803
[LOG] Computing n0_to_1 for num 803
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n0_to_2 for num 803
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Process 75: Created combinatorial complex for file data_602.hdf5
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_1 for num 980
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_3 for num 803
[LOG] Computing n0_to_4 for num 803
[LOG] Computing n1_to_2 for num 803
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_3 for num 803
[LOG] Computing n1_to_4 for num 803
[LOG] Computing n2_to_3 for num 803
[LOG] Computing n2_to_4 for num 803
[LOG] Process 75: Calculating Neighbors
[LOG] Loading pickle file data_602.pickle
[LOG] Processing node features for num 602
[LOG] Computing n3_to_4 for num 803
[LOG] Global feature for num 803
[LOG] Global feature for num 803
[LOG] Saving tensor x_0_803.pt
[LOG] Processing edge features for num 602
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing tetra features for num 602
[LOG] Processing cluster features for num 602
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 602
[LOG] Saving tensor x_1_803.pt
[LOG] Saving tensor x_2_803.pt
[LOG] Saving tensor x_3_803.pt
[LOG] Saving tensor x_4_803.pt
[LOG] Saving tensor n0_to_0_803.pt
[LOG] Processing adjacency and incidence matrices for num 602
[LOG] Computing n0_to_0 for num 602
[LOG] Saving tensor n1_to_1_803.pt
[LOG] Saving tensor n2_to_2_803.pt
[LOG] Saving tensor n3_to_3_803.pt
[LOG] Saving tensor n4_to_4_803.pt
[LOG] Saving tensor n0_to_1_803.pt
[LOG] Saving tensor n0_to_2_803.pt
[LOG] Saving tensor n0_to_3_803.pt
[LOG] Saving tensor n0_to_4_803.pt
[LOG] Saving tensor n1_to_2_803.pt
[LOG] Saving tensor n1_to_3_803.pt
[LOG] Computing n1_to_1 for num 602
[LOG] Saving tensor n1_to_4_803.pt
[LOG] Saving tensor n2_to_3_803.pt
[LOG] Saving tensor n2_to_4_803.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_2 (adjacency) for num 602
[LOG] Saving tensor n3_to_4_803.pt
[LOG] Saving tensor global_feature_803.pt
[LOG] Process 100: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 15: Created combinatorial complex for file data_122.hdf5
[LOG] Computing n3_to_3 (adjacency) for num 602
[LOG] Computing n4_to_4 (coadjacency) for num 602
[LOG] Computing n0_to_1 for num 602
[LOG] Computing n0_to_2 for num 602
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 15: Calculating Neighbors
[LOG] Loading pickle file data_122.pickle
[LOG] Processing node features for num 122
[LOG] Processing edge features for num 122
[LOG] Processing tetra features for num 122
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing cluster features for num 122
[LOG] Processing cluster features for num 122
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing adjacency and incidence matrices for num 122
[LOG] Computing n0_to_0 for num 122
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_1 for num 122
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_2 (adjacency) for num 980
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_3 for num 602
[LOG] Computing n0_to_4 for num 602
[LOG] Computing n1_to_2 for num 602
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_2 (adjacency) for num 122
[LOG] Computing n1_to_3 for num 602
[LOG] Computing n1_to_4 for num 602
[LOG] Computing n2_to_3 for num 602
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_4 for num 602
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n3_to_3 (adjacency) for num 122
[LOG] Computing n3_to_4 for num 602
[LOG] Computing n4_to_4 (coadjacency) for num 122
[LOG] Global feature for num 602
[LOG] Global feature for num 602
[LOG] Computing n0_to_1 for num 122
[LOG] Saving tensor x_0_602.pt
[LOG] Saving tensor x_1_602.pt
[LOG] Saving tensor x_2_602.pt
[LOG] Saving tensor x_3_602.pt
[LOG] Saving tensor x_4_602.pt
[LOG] Saving tensor n0_to_0_602.pt
[LOG] Saving tensor n1_to_1_602.pt
[LOG] Saving tensor n2_to_2_602.pt
[LOG] Saving tensor n3_to_3_602.pt
[LOG] Saving tensor n4_to_4_602.pt
[LOG] Saving tensor n0_to_1_602.pt
[LOG] Saving tensor n0_to_2_602.pt
[LOG] Saving tensor n0_to_3_602.pt
[LOG] Computing n0_to_2 for num 122
[LOG] Saving tensor n0_to_4_602.pt
[LOG] Saving tensor n1_to_2_602.pt
[LOG] Saving tensor n1_to_3_602.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n1_to_4_602.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n2_to_3_602.pt
[LOG] Saving tensor n2_to_4_602.pt
[LOG] Saving tensor n3_to_4_602.pt
[LOG] Saving tensor global_feature_602.pt
[LOG] Process 75: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1064 Tetrahedra.
    [LOG] Generated 31 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.806451612903226
    [LOG] Max number of nodes per cluster is 47 and the number is 17
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] We will select 107 edges and 1064 tetra
[LOG] Edges from tetra 0 and KDTree 1093 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_3 for num 122
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_4 for num 122
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_2 for num 122
[LOG] Computing n3_to_3 (adjacency) for num 980
[LOG] Computing n4_to_4 (coadjacency) for num 980
[LOG] Computing n0_to_1 for num 980
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 31: Created combinatorial complex for file data_251.hdf5
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_3 for num 122
[LOG] Process 31: Calculating Neighbors
[LOG] Loading pickle file data_251.pickle
[LOG] Processing node features for num 251
[LOG] Processing edge features for num 251
[LOG] Computing n1_to_4 for num 122
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing tetra features for num 251
[LOG] Computing n2_to_3 for num 122
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 251
[LOG] Computing n2_to_4 for num 122
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing cluster features for num 251
[LOG] Processing adjacency and incidence matrices for num 251
[LOG] Computing n0_to_0 for num 251
[LOG] Computing n3_to_4 for num 122
[LOG] Global feature for num 122
[LOG] Global feature for num 122
[LOG] Saving tensor x_0_122.pt
[LOG] Computing n1_to_1 for num 251
[LOG] Saving tensor x_1_122.pt
[LOG] Saving tensor x_2_122.pt
[LOG] Saving tensor x_3_122.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_2 (adjacency) for num 251
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_3 (adjacency) for num 251
[LOG] Computing n4_to_4 (coadjacency) for num 251
[LOG] Computing n0_to_1 for num 251
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n0_to_2 for num 251
[LOG] Saving tensor x_4_122.pt
[LOG] Saving tensor n0_to_0_122.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n0_to_2 for num 980
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n1_to_1_122.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n2_to_2_122.pt
[LOG] Computing n0_to_3 for num 251
[LOG] Saving tensor n3_to_3_122.pt
[LOG] Computing n0_to_4 for num 251
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_2 for num 251
[LOG] Computing n1_to_3 for num 251
[LOG] Computing n1_to_4 for num 251
[LOG] Computing n2_to_3 for num 251
[LOG] Computing n2_to_4 for num 251
[LOG] Computing n3_to_4 for num 251
[LOG] Global feature for num 251
[LOG] Global feature for num 251
[LOG] Saving tensor x_0_251.pt
[LOG] Saving tensor x_1_251.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n4_to_4_122.pt
[LOG] Saving tensor x_2_251.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor x_3_251.pt
[LOG] Saving tensor x_4_251.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n0_to_1_122.pt
[LOG] Saving tensor n0_to_0_251.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n1_to_1_251.pt
[LOG] Saving tensor n0_to_2_122.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n2_to_2_251.pt
[LOG] Saving tensor n0_to_3_122.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n3_to_3_251.pt
[LOG] Saving tensor n0_to_4_122.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n4_to_4_251.pt
[LOG] Saving tensor n0_to_1_251.pt
[LOG] Saving tensor n1_to_2_122.pt
[LOG] Saving tensor n0_to_2_251.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n1_to_3_122.pt
[LOG] Saving tensor n0_to_3_251.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n0_to_4_251.pt
[LOG] Saving tensor n1_to_4_122.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n1_to_2_251.pt
[LOG] Saving tensor n2_to_3_122.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n1_to_3_251.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n2_to_4_122.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n1_to_4_251.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n3_to_4_122.pt
[LOG] Saving tensor n2_to_3_251.pt
[LOG] Saving tensor global_feature_122.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n2_to_4_251.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 15: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n3_to_4_251.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor global_feature_251.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Process 31: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n0_to_3 for num 980
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_4 for num 980
[LOG] Computing n1_to_2 for num 980
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] GENERATED TETRA
[LOG] Computing n1_to_3 for num 980
[LOG] Computing n1_to_4 for num 980
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n2_to_3 for num 980
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n2_to_4 for num 980
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 568 Tetrahedra.
    [LOG] Generated 22 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 10.727272727272727
    [LOG] Max number of nodes per cluster is 19 and the number is 20
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] We will select 40 edges and 568 tetra
[LOG] Edges from tetra 0 and KDTree 428 with 0 edges in common.
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n3_to_4 for num 980
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Global feature for num 980
[LOG] Global feature for num 980
[LOG] Saving tensor x_0_980.pt
[LOG] Saving tensor x_1_980.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor x_2_980.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor x_3_980.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor x_4_980.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n0_to_0_980.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n1_to_1_980.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n2_to_2_980.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Removed 2 subset clusters.
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 2: Created combinatorial complex for file data_18.hdf5
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n3_to_3_980.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Process 2: Calculating Neighbors
[LOG] Loading pickle file data_18.pickle
[LOG] Processing node features for num 18
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing edge features for num 18
[LOG] Processing tetra features for num 18
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing cluster features for num 18
[LOG] Processing cluster features for num 18
[LOG] Processing adjacency and incidence matrices for num 18
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_0 for num 18
[LOG] Computing n1_to_1 for num 18
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_2 (adjacency) for num 18
[LOG] Computing n3_to_3 (adjacency) for num 18
[LOG] Computing n4_to_4 (coadjacency) for num 18
[LOG] Computing n0_to_1 for num 18
[LOG] Computing n0_to_2 for num 18
[LOG] Saving tensor n4_to_4_980.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n0_to_1_980.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n0_to_2_980.pt
[LOG] Computing n0_to_3 for num 18
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n0_to_4 for num 18
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_2 for num 18
[LOG] Saving tensor n0_to_3_980.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n0_to_4_980.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Computing n1_to_3 for num 18
[LOG] Computing n1_to_4 for num 18
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n2_to_3 for num 18
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n2_to_4 for num 18
[LOG] Saving tensor n1_to_2_980.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n1_to_3_980.pt
[LOG] Computing n3_to_4 for num 18
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Global feature for num 18
[LOG] Global feature for num 18
[LOG] Saving tensor x_0_18.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n1_to_4_980.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor x_1_18.pt
[LOG] Saving tensor x_2_18.pt
[LOG] Saving tensor n2_to_3_980.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor x_3_18.pt
[LOG] Saving tensor n2_to_4_980.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor x_4_18.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n0_to_0_18.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n3_to_4_980.pt
[LOG] Saving tensor n1_to_1_18.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor global_feature_980.pt
[LOG] Saving tensor n2_to_2_18.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Process 125: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n3_to_3_18.pt
[LOG] Saving tensor n4_to_4_18.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n0_to_1_18.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n0_to_2_18.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n0_to_3_18.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n0_to_4_18.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n1_to_2_18.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n1_to_3_18.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n1_to_4_18.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n2_to_3_18.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n2_to_4_18.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n3_to_4_18.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor global_feature_18.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 2: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1272 Tetrahedra.
    [LOG] Generated 42 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 18.023809523809526
    [LOG] Max number of nodes per cluster is 77 and the number is 11
[LOG] Calculating for cell ranks 1 and 1
[LOG] We will select 271 edges and 1272 tetra
[LOG] Edges from tetra 0 and KDTree 4452 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 7: Created combinatorial complex for file data_59.hdf5
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 7: Calculating Neighbors
[LOG] Loading pickle file data_59.pickle
[LOG] Processing node features for num 59
[LOG] Processing edge features for num 59
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing tetra features for num 59
[LOG] Processing cluster features for num 59
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing cluster features for num 59
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing adjacency and incidence matrices for num 59
[LOG] Computing n0_to_0 for num 59
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n1_to_1 for num 59
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1672 Tetrahedra.
    [LOG] Generated 46 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.26086956521739
    [LOG] Max number of nodes per cluster is 35 and the number is 44
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_2 (adjacency) for num 59
[LOG] We will select 1022 edges and 1672 tetra
[LOG] Edges from tetra 0 and KDTree 1022 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_3 (adjacency) for num 59
[LOG] Computing n4_to_4 (coadjacency) for num 59
[LOG] Computing n0_to_1 for num 59
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_2 for num 59
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_3 for num 59
[LOG] Computing n0_to_4 for num 59
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_2 for num 59
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_3 for num 59
[LOG] Computing n1_to_4 for num 59
[LOG] Computing n2_to_3 for num 59
[LOG] Calculating for cell ranks 0 and 3
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 2257 Tetrahedra.
    [LOG] Generated 52 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.01923076923077
    [LOG] Max number of nodes per cluster is 97 and the number is 28
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_4 for num 59
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n3_to_4 for num 59
[LOG] Global feature for num 59
[LOG] Global feature for num 59
[LOG] Saving tensor x_0_59.pt
[LOG] Saving tensor x_1_59.pt
[LOG] Saving tensor x_2_59.pt
[LOG] Saving tensor x_3_59.pt
[LOG] Saving tensor x_4_59.pt
[LOG] Saving tensor n0_to_0_59.pt
[LOG] Saving tensor n1_to_1_59.pt
[LOG] Saving tensor n2_to_2_59.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor n3_to_3_59.pt
[LOG] Saving tensor n4_to_4_59.pt
[LOG] Saving tensor n0_to_1_59.pt
[LOG] Saving tensor n0_to_2_59.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n0_to_3_59.pt
[LOG] Saving tensor n0_to_4_59.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n1_to_2_59.pt
[LOG] Saving tensor n1_to_3_59.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n1_to_4_59.pt
[LOG] Saving tensor n2_to_3_59.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n2_to_4_59.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n3_to_4_59.pt
[LOG] Saving tensor global_feature_59.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Process 7: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] We will select 669 edges and 2257 tetra
[LOG] Edges from tetra 0 and KDTree 4168 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 35: Created combinatorial complex for file data_281.hdf5
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Process 35: Calculating Neighbors
[LOG] Loading pickle file data_281.pickle
[LOG] Processing node features for num 281
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Processing edge features for num 281
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Processing tetra features for num 281
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing cluster features for num 281
[LOG] Processing cluster features for num 281
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing adjacency and incidence matrices for num 281
[LOG] Computing n0_to_0 for num 281
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_1 for num 281
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 73: Created combinatorial complex for file data_586.hdf5
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 281
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] GENERATED TETRA
[LOG] Computing n3_to_3 (adjacency) for num 281
[LOG] Process 73: Calculating Neighbors
[LOG] Loading pickle file data_586.pickle
[LOG] Processing node features for num 586
[LOG] Computing n4_to_4 (coadjacency) for num 281
[LOG] Computing n0_to_1 for num 281
[LOG] Processing edge features for num 586
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing tetra features for num 586
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_2 for num 281
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing cluster features for num 586
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 586
[LOG] Processing adjacency and incidence matrices for num 586
[LOG] Computing n0_to_0 for num 586
[LOG] Computing n0_to_3 for num 281
[LOG] Computing n0_to_4 for num 281
[LOG] Computing n1_to_2 for num 281
[LOG] GENERATED TETRA
[LOG] Computing n1_to_1 for num 586
[LOG] Calculating for cell ranks 1 and 4
[LOG] GENERATED TETRA
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 3436 Tetrahedra.
    [LOG] Generated 89 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.831460674157304
    [LOG] Max number of nodes per cluster is 40 and the number is 7
[LOG] GENERATED TETRA
[LOG] Computing n1_to_3 for num 281
[LOG] Computing n1_to_4 for num 281
[LOG] Computing n2_to_2 (adjacency) for num 586
[LOG] Computing n2_to_3 for num 281
[LOG] Computing n2_to_4 for num 281
[LOG] Computing n3_to_4 for num 281
[LOG] Global feature for num 281
[LOG] Global feature for num 281
[LOG] Saving tensor x_0_281.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor x_1_281.pt
[LOG] Saving tensor x_2_281.pt
[LOG] We will select 593 edges and 3436 tetra
[LOG] Edges from tetra 0 and KDTree 593 with 0 edges in common.
[LOG] Saving tensor x_3_281.pt
[LOG] Saving tensor x_4_281.pt
[LOG] Saving tensor n0_to_0_281.pt
[LOG] Saving tensor n1_to_1_281.pt
[LOG] Saving tensor n2_to_2_281.pt
[LOG] Saving tensor n3_to_3_281.pt
[LOG] Saving tensor n4_to_4_281.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n0_to_1_281.pt
[LOG] Saving tensor n0_to_2_281.pt
[LOG] Saving tensor n0_to_3_281.pt
[LOG] Saving tensor n0_to_4_281.pt
[LOG] Saving tensor n1_to_2_281.pt
[LOG] Saving tensor n1_to_3_281.pt
[LOG] Saving tensor n1_to_4_281.pt
[LOG] Saving tensor n2_to_3_281.pt
[LOG] Saving tensor n2_to_4_281.pt
[LOG] Saving tensor n3_to_4_281.pt
[LOG] Saving tensor global_feature_281.pt
[LOG] Process 35: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n3_to_3 (adjacency) for num 586
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n4_to_4 (coadjacency) for num 586
[LOG] Computing n0_to_1 for num 586
[LOG] Calculating for cell ranks 4 and 4
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n0_to_2 for num 586
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 915 Tetrahedra.
    [LOG] Generated 24 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 18.75
    [LOG] Max number of nodes per cluster is 67 and the number is 17
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] We will select 81 edges and 915 tetra
[LOG] Edges from tetra 0 and KDTree 1975 with 0 edges in common.
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1661 Tetrahedra.
    [LOG] Generated 50 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.62
    [LOG] Max number of nodes per cluster is 37 and the number is 15
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 982 Tetrahedra.
    [LOG] Generated 18 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 21.944444444444443
    [LOG] Max number of nodes per cluster is 77 and the number is 14
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] We will select 119 edges and 982 tetra
[LOG] Edges from tetra 0 and KDTree 2757 with 0 edges in common.
[LOG] We will select 147 edges and 1661 tetra
[LOG] Edges from tetra 0 and KDTree 147 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 42: Created combinatorial complex for file data_339.hdf5
[LOG] Removed 0 subset clusters.
[LOG] Process 42: Calculating Neighbors
[LOG] Loading pickle file data_339.pickle
[LOG] Processing node features for num 339
[LOG] Processing edge features for num 339
[LOG] Processing tetra features for num 339
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 3722 Tetrahedra.
    [LOG] Generated 122 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.319672131147541
    [LOG] Max number of nodes per cluster is 45 and the number is 55
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 23: Created combinatorial complex for file data_188.hdf5
[LOG] Processing cluster features for num 339
[LOG] Processing cluster features for num 339
[LOG] Processing adjacency and incidence matrices for num 339
[LOG] Computing n0_to_0 for num 339
[LOG] GENERATED TETRA
[LOG] Process 23: Calculating Neighbors
[LOG] Loading pickle file data_188.pickle
[LOG] Processing node features for num 188
[LOG] Processing edge features for num 188
[LOG] Computing n0_to_3 for num 586
[LOG] Processing tetra features for num 188
[LOG] Computing n1_to_1 for num 339
[LOG] Computing n0_to_4 for num 586
[LOG] Processing cluster features for num 188
[LOG] Computing n2_to_2 (adjacency) for num 339
[LOG] Processing cluster features for num 188
[LOG] Processing adjacency and incidence matrices for num 188
[LOG] Computing n0_to_0 for num 188
[LOG] Computing n1_to_2 for num 586
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_1 for num 188
[LOG] Computing n3_to_3 (adjacency) for num 339
[LOG] Computing n4_to_4 (coadjacency) for num 339
[LOG] Computing n0_to_1 for num 339
[LOG] Computing n2_to_2 (adjacency) for num 188
[LOG] Computing n0_to_2 for num 339
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 4
[LOG] We will select 978 edges and 3722 tetra
[LOG] Edges from tetra 0 and KDTree 2797 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 188
[LOG] Computing n4_to_4 (coadjacency) for num 188
[LOG] Computing n0_to_1 for num 188
[LOG] Computing n0_to_2 for num 188
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 3074 Tetrahedra.
    [LOG] Generated 71 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.323943661971832
    [LOG] Max number of nodes per cluster is 72 and the number is 68
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 3 and 3
[LOG] We will select 1021 edges and 3074 tetra
[LOG] Edges from tetra 0 and KDTree 1046 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n0_to_3 for num 339
[LOG] Computing n0_to_3 for num 188
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n0_to_4 for num 188
[LOG] Computing n0_to_4 for num 339
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 4593 Tetrahedra.
    [LOG] Generated 132 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.469696969696969
    [LOG] Max number of nodes per cluster is 89 and the number is 113
[LOG] Computing n1_to_2 for num 188
[LOG] Computing n1_to_2 for num 339
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n1_to_3 for num 339
[LOG] Computing n1_to_4 for num 339
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_3 for num 339
[LOG] Computing n1_to_3 for num 188
[LOG] Computing n1_to_4 for num 188
[LOG] Computing n2_to_3 for num 188
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n2_to_4 for num 339
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n2_to_4 for num 188
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n3_to_4 for num 339
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Global feature for num 339
[LOG] Global feature for num 339
[LOG] Saving tensor x_0_339.pt
[LOG] Computing n3_to_4 for num 188
[LOG] Global feature for num 188
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Global feature for num 188
[LOG] Saving tensor x_0_188.pt
[LOG] Saving tensor x_1_339.pt
[LOG] Saving tensor x_2_339.pt
[LOG] Saving tensor x_1_188.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor x_3_339.pt
[LOG] Saving tensor x_4_339.pt
[LOG] Saving tensor x_2_188.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n0_to_0_339.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1167 Tetrahedra.
    [LOG] Generated 35 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.428571428571429
    [LOG] Max number of nodes per cluster is 41 and the number is 7
[LOG] Saving tensor x_3_188.pt
[LOG] Computing n1_to_3 for num 586
[LOG] Saving tensor x_4_188.pt
[LOG] Saving tensor n0_to_0_188.pt
[LOG] Saving tensor n1_to_1_339.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n1_to_4 for num 586
[LOG] Saving tensor n1_to_1_188.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n2_to_2_339.pt
[LOG] Saving tensor n2_to_2_188.pt
[LOG] Computing n2_to_3 for num 586
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n3_to_3_339.pt
[LOG] Saving tensor n3_to_3_188.pt
[LOG] Process 95: Created combinatorial complex for file data_761.hdf5
[LOG] Saving tensor n4_to_4_339.pt
[LOG] Saving tensor n4_to_4_188.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n0_to_1_339.pt
[LOG] Saving tensor n0_to_1_188.pt
[LOG] We will select 182 edges and 1167 tetra
[LOG] Edges from tetra 0 and KDTree 480 with 0 edges in common.
[LOG] Saving tensor n0_to_2_188.pt
[LOG] Saving tensor n0_to_2_339.pt
[LOG] Computing n2_to_4 for num 586
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n0_to_3_188.pt
[LOG] Saving tensor n0_to_3_339.pt
[LOG] Computing n3_to_4 for num 586
[LOG] Global feature for num 586
[LOG] Global feature for num 586
[LOG] Saving tensor x_0_586.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 95: Calculating Neighbors
[LOG] Loading pickle file data_761.pickle
[LOG] Processing node features for num 761
[LOG] Processing edge features for num 761
[LOG] Process 101: Created combinatorial complex for file data_809.hdf5
[LOG] Processing tetra features for num 761
[LOG] We will select 769 edges and 4593 tetra
[LOG] Edges from tetra 0 and KDTree 2230 with 0 edges in common.
[LOG] Saving tensor n0_to_4_188.pt
[LOG] Saving tensor x_1_586.pt
[LOG] Saving tensor n0_to_4_339.pt
[LOG] Saving tensor n1_to_2_188.pt
[LOG] Saving tensor x_2_586.pt
[LOG] Saving tensor n1_to_3_188.pt
[LOG] Saving tensor x_3_586.pt
[LOG] Processing cluster features for num 761
[LOG] Saving tensor n1_to_2_339.pt
[LOG] Saving tensor n1_to_4_188.pt
[LOG] Saving tensor x_4_586.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Processing cluster features for num 761
[LOG] Saving tensor n2_to_3_188.pt
[LOG] Saving tensor n1_to_3_339.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n0_to_0_586.pt
[LOG] Saving tensor n2_to_4_188.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n1_to_4_339.pt
[LOG] Saving tensor n1_to_1_586.pt
[LOG] Processing adjacency and incidence matrices for num 761
[LOG] Computing n0_to_0 for num 761
[LOG] Saving tensor n3_to_4_188.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor global_feature_188.pt
[LOG] Saving tensor n2_to_3_339.pt
[LOG] Process 23: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n2_to_2_586.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n2_to_4_339.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n1_to_1 for num 761
[LOG] Saving tensor n3_to_4_339.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n3_to_3_586.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n2_to_2 (adjacency) for num 761
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor global_feature_339.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Process 42: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n4_to_4_586.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n0_to_1_586.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n0_to_2_586.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n0_to_3_586.pt
[LOG] Saving tensor n0_to_4_586.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n1_to_2_586.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n1_to_3_586.pt

    [LOG] We Currently have 1379 Tetrahedra.
    [LOG] Generated 42 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.761904761904763
    [LOG] Max number of nodes per cluster is 72 and the number is 5
[LOG] Saving tensor n1_to_4_586.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Process 101: Calculating Neighbors
[LOG] Loading pickle file data_809.pickle
[LOG] Processing node features for num 809
[LOG] Saving tensor n2_to_3_586.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n2_to_4_586.pt
[LOG] Processing edge features for num 809
[LOG] Saving tensor n3_to_4_586.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor global_feature_586.pt
[LOG] Process 73: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 761
[LOG] Computing n4_to_4 (coadjacency) for num 761
[LOG] Computing n0_to_1 for num 761
[LOG] Process 112: Created combinatorial complex for file data_890.hdf5
[LOG] Processing tetra features for num 809
[LOG] Computing n0_to_2 for num 761
[LOG] We will select 326 edges and 1379 tetra
[LOG] Edges from tetra 0 and KDTree 520 with 0 edges in common.
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1315 Tetrahedra.
    [LOG] Generated 51 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.019607843137255
    [LOG] Max number of nodes per cluster is 28 and the number is 5
[LOG] Processing cluster features for num 809
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3999 Tetrahedra.
    [LOG] Generated 92 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.597826086956522
    [LOG] Max number of nodes per cluster is 47 and the number is 64
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Processing cluster features for num 809
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] We will select 91 edges and 1315 tetra
[LOG] Edges from tetra 0 and KDTree 1329 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing adjacency and incidence matrices for num 809
[LOG] Computing n0_to_0 for num 809
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_3 for num 761
[LOG] Process 112: Calculating Neighbors
[LOG] Loading pickle file data_890.pickle
[LOG] Processing node features for num 890
[LOG] Processing edge features for num 890
[LOG] Computing n0_to_4 for num 761
[LOG] Processing tetra features for num 890
[LOG] Computing n1_to_2 for num 761
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing cluster features for num 890
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Processing cluster features for num 890
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Computing n1_to_1 for num 809
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Processing adjacency and incidence matrices for num 890
[LOG] Computing n0_to_0 for num 890
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n1_to_3 for num 761
[LOG] Computing n1_to_4 for num 761
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n2_to_3 for num 761
[LOG] Computing n1_to_1 for num 890
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] We will select 887 edges and 3999 tetra
[LOG] Edges from tetra 0 and KDTree 1358 with 0 edges in common.
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n2_to_4 for num 761
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n3_to_4 for num 761
[LOG] Global feature for num 761
[LOG] Global feature for num 761
[LOG] Saving tensor x_0_761.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor x_1_761.pt
[LOG] Saving tensor x_2_761.pt
[LOG] Saving tensor x_3_761.pt
[LOG] Saving tensor x_4_761.pt
[LOG] Saving tensor n0_to_0_761.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 890
[LOG] Saving tensor n1_to_1_761.pt
[LOG] Saving tensor n2_to_2_761.pt
[LOG] Saving tensor n3_to_3_761.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n4_to_4_761.pt
[LOG] Saving tensor n0_to_1_761.pt
[LOG] Saving tensor n0_to_2_761.pt
[LOG] Saving tensor n0_to_3_761.pt
[LOG] Saving tensor n0_to_4_761.pt
[LOG] Saving tensor n1_to_2_761.pt
[LOG] Saving tensor n1_to_3_761.pt
[LOG] Saving tensor n1_to_4_761.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n2_to_3_761.pt
[LOG] Saving tensor n2_to_4_761.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor n3_to_4_761.pt
[LOG] Saving tensor global_feature_761.pt
[LOG] Process 95: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n3_to_3 (adjacency) for num 890
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n4_to_4 (coadjacency) for num 890
[LOG] Computing n0_to_1 for num 890
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n0_to_2 for num 890
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 12: Created combinatorial complex for file data_98.hdf5
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 69: Created combinatorial complex for file data_555.hdf5
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_3 for num 890
[LOG] Computing n0_to_4 for num 890
[LOG] Process 12: Calculating Neighbors
[LOG] Loading pickle file data_98.pickle
[LOG] Processing node features for num 98
[LOG] Processing edge features for num 98
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_2 for num 890
[LOG] Process 69: Calculating Neighbors
[LOG] Loading pickle file data_555.pickle
[LOG] Processing node features for num 555
[LOG] Processing tetra features for num 98
[LOG] Processing edge features for num 555
[LOG] Processing tetra features for num 555
[LOG] Processing cluster features for num 98
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_3 for num 890
[LOG] Processing cluster features for num 98
[LOG] Computing n1_to_4 for num 890
[LOG] Processing cluster features for num 555
[LOG] Computing n2_to_3 for num 890
[LOG] Processing adjacency and incidence matrices for num 98
[LOG] Computing n0_to_0 for num 98
[LOG] Processing cluster features for num 555
[LOG] Computing n2_to_4 for num 890
[LOG] Processing adjacency and incidence matrices for num 555
[LOG] Computing n0_to_0 for num 555
[LOG] Computing n3_to_4 for num 890
[LOG] Global feature for num 890
[LOG] Global feature for num 890
[LOG] Saving tensor x_0_890.pt
[LOG] Saving tensor x_1_890.pt
[LOG] Saving tensor x_2_890.pt
[LOG] Saving tensor x_3_890.pt
[LOG] Saving tensor x_4_890.pt
[LOG] Saving tensor n0_to_0_890.pt
[LOG] Saving tensor n1_to_1_890.pt
[LOG] Computing n1_to_1 for num 98
[LOG] Saving tensor n2_to_2_890.pt
[LOG] Computing n2_to_2 (adjacency) for num 809
[LOG] Saving tensor n3_to_3_890.pt
[LOG] Saving tensor n4_to_4_890.pt
[LOG] Saving tensor n0_to_1_890.pt
[LOG] Saving tensor n0_to_2_890.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n0_to_3_890.pt
[LOG] Saving tensor n0_to_4_890.pt
[LOG] Saving tensor n1_to_2_890.pt
[LOG] Computing n1_to_1 for num 555
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n1_to_3_890.pt
[LOG] Saving tensor n1_to_4_890.pt
[LOG] Saving tensor n2_to_3_890.pt
[LOG] Saving tensor n2_to_4_890.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n3_to_4_890.pt
[LOG] Saving tensor global_feature_890.pt
[LOG] Process 112: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n2_to_2 (adjacency) for num 555
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 98
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 555
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n4_to_4 (coadjacency) for num 555
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_1 for num 555
[LOG] Computing n3_to_3 (adjacency) for num 98
[LOG] Computing n4_to_4 (coadjacency) for num 98
[LOG] Computing n0_to_1 for num 98
[LOG] Computing n0_to_2 for num 555
[LOG] Computing n0_to_2 for num 98
[LOG] Removed 2 subset clusters.
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Process 32: Created combinatorial complex for file data_257.hdf5
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n0_to_3 for num 98
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n0_to_4 for num 98
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_2 for num 98
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_3 for num 555
[LOG] Computing n1_to_3 for num 98
[LOG] Computing n0_to_4 for num 555
[LOG] Computing n1_to_4 for num 98
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_3 for num 98
[LOG] Computing n1_to_2 for num 555
[LOG] Computing n2_to_4 for num 98
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_3 (adjacency) for num 809
[LOG] Computing n4_to_4 (coadjacency) for num 809
[LOG] Computing n3_to_4 for num 98
[LOG] Global feature for num 98
[LOG] Global feature for num 98
[LOG] Saving tensor x_0_98.pt
[LOG] Computing n0_to_1 for num 809
[LOG] Saving tensor x_1_98.pt
[LOG] Saving tensor x_2_98.pt
[LOG] Saving tensor x_3_98.pt
[LOG] Saving tensor x_4_98.pt
[LOG] Computing n1_to_3 for num 555
[LOG] Saving tensor n0_to_0_98.pt
[LOG] Computing n1_to_4 for num 555
[LOG] Saving tensor n1_to_1_98.pt
[LOG] Computing n2_to_3 for num 555
[LOG] Saving tensor n2_to_2_98.pt
[LOG] Saving tensor n3_to_3_98.pt
[LOG] Saving tensor n4_to_4_98.pt
[LOG] Saving tensor n0_to_1_98.pt
[LOG] Saving tensor n0_to_2_98.pt
[LOG] Saving tensor n0_to_3_98.pt
[LOG] Computing n2_to_4 for num 555
[LOG] Process 32: Calculating Neighbors
[LOG] Loading pickle file data_257.pickle
[LOG] Processing node features for num 257
[LOG] Saving tensor n0_to_4_98.pt
[LOG] Saving tensor n1_to_2_98.pt
[LOG] Processing edge features for num 257
[LOG] Saving tensor n1_to_3_98.pt
[LOG] Saving tensor n1_to_4_98.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor n2_to_3_98.pt
[LOG] Saving tensor n2_to_4_98.pt
[LOG] Computing n3_to_4 for num 555
[LOG] Saving tensor n3_to_4_98.pt
[LOG] Saving tensor global_feature_98.pt
[LOG] Process 12: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Global feature for num 555
[LOG] Global feature for num 555
[LOG] Saving tensor x_0_555.pt
[LOG] Saving tensor x_1_555.pt
[LOG] Saving tensor x_2_555.pt
[LOG] Saving tensor x_3_555.pt
[LOG] Saving tensor x_4_555.pt
[LOG] Saving tensor n0_to_0_555.pt
[LOG] Saving tensor n1_to_1_555.pt
[LOG] Saving tensor n2_to_2_555.pt
[LOG] Saving tensor n3_to_3_555.pt
[LOG] Computing n0_to_2 for num 809
[LOG] Saving tensor n4_to_4_555.pt
[LOG] Saving tensor n0_to_1_555.pt
[LOG] Saving tensor n0_to_2_555.pt
[LOG] Processing tetra features for num 257
[LOG] Saving tensor n0_to_3_555.pt
[LOG] Saving tensor n0_to_4_555.pt
[LOG] Saving tensor n1_to_2_555.pt
[LOG] Saving tensor n1_to_3_555.pt
[LOG] Saving tensor n1_to_4_555.pt
[LOG] Saving tensor n2_to_3_555.pt
[LOG] Saving tensor n2_to_4_555.pt
[LOG] Saving tensor n3_to_4_555.pt
[LOG] Saving tensor global_feature_555.pt
[LOG] Process 69: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing cluster features for num 257
[LOG] Processing cluster features for num 257
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing adjacency and incidence matrices for num 257
[LOG] Computing n0_to_0 for num 257
[LOG] Process 19: Created combinatorial complex for file data_153.hdf5
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1966 Tetrahedra.
    [LOG] Generated 65 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 10.738461538461538
    [LOG] Max number of nodes per cluster is 48 and the number is 45
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] We will select 297 edges and 1966 tetra
[LOG] Edges from tetra 0 and KDTree 1058 with 0 edges in common.
[LOG] Computing n1_to_1 for num 257
[LOG] Calculating for cell ranks 3 and 4
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 19: Calculating Neighbors
[LOG] Loading pickle file data_153.pickle
[LOG] Processing node features for num 153
[LOG] Processing edge features for num 153
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Processing tetra features for num 153
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Process 115: Created combinatorial complex for file data_910.hdf5
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing cluster features for num 153
[LOG] Calculating for cell ranks 0 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1401 Tetrahedra.
    [LOG] Generated 43 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.3953488372093
    [LOG] Max number of nodes per cluster is 104 and the number is 41
[LOG] Computing n0_to_3 for num 809
[LOG] Processing cluster features for num 153
[LOG] Computing n0_to_4 for num 809
[LOG] Processing adjacency and incidence matrices for num 153
[LOG] Computing n0_to_0 for num 153
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_2 for num 809
[LOG] We will select 753 edges and 1401 tetra
[LOG] Edges from tetra 0 and KDTree 4246 with 0 edges in common.
[LOG] Process 65: Created combinatorial complex for file data_521.hdf5
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_1 for num 153
[LOG] Process 115: Calculating Neighbors
[LOG] Loading pickle file data_910.pickle
[LOG] Processing node features for num 910
[LOG] Processing edge features for num 910
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] GENERATED TETRA
[LOG] Processing tetra features for num 910
[LOG] Removed 0 subset clusters.
[LOG] GENERATED TETRA
[LOG] Processing cluster features for num 910
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2460 Tetrahedra.
    [LOG] Generated 54 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 18.0
    [LOG] Max number of nodes per cluster is 146 and the number is 45
[LOG] Process 65: Calculating Neighbors
[LOG] Loading pickle file data_521.pickle
[LOG] Processing node features for num 521
[LOG] Processing edge features for num 521
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_2 (adjacency) for num 257
[LOG] Processing cluster features for num 910
[LOG] Processing tetra features for num 521
[LOG] Processing adjacency and incidence matrices for num 910
[LOG] Computing n0_to_0 for num 910
[LOG] Calculating for cell ranks 2 and 2
[LOG] GENERATED TETRA
[LOG] Process 64: Created combinatorial complex for file data_514.hdf5
[LOG] We will select 609 edges and 2460 tetra
[LOG] Edges from tetra 0 and KDTree 3140 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Processing cluster features for num 521
[LOG] Computing n1_to_3 for num 809
[LOG] Computing n1_to_4 for num 809
[LOG] Computing n2_to_3 for num 809
[LOG] Processing cluster features for num 521
[LOG] Process 64: Calculating Neighbors
[LOG] Loading pickle file data_514.pickle
[LOG] Processing node features for num 514
[LOG] Processing edge features for num 514
[LOG] Processing adjacency and incidence matrices for num 521
[LOG] Computing n0_to_0 for num 521
[LOG] Computing n1_to_1 for num 910
[LOG] Processing tetra features for num 514
[LOG] Process 26: Created combinatorial complex for file data_210.hdf5
[LOG] Computing n2_to_4 for num 809
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing cluster features for num 514
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 514
[LOG] Processing adjacency and incidence matrices for num 514
[LOG] Computing n0_to_0 for num 514
[LOG] Computing n3_to_4 for num 809
[LOG] Global feature for num 809
[LOG] Global feature for num 809
[LOG] Saving tensor x_0_809.pt
[LOG] Saving tensor x_1_809.pt
[LOG] Saving tensor x_2_809.pt
[LOG] Computing n1_to_1 for num 514
[LOG] Saving tensor x_3_809.pt
[LOG] Saving tensor x_4_809.pt
[LOG] Saving tensor n0_to_0_809.pt
[LOG] Saving tensor n1_to_1_809.pt
[LOG] Saving tensor n2_to_2_809.pt
[LOG] Saving tensor n3_to_3_809.pt
[LOG] Saving tensor n4_to_4_809.pt
[LOG] Process 26: Calculating Neighbors
[LOG] Saving tensor n0_to_1_809.pt
[LOG] Saving tensor n0_to_2_809.pt
[LOG] Loading pickle file data_210.pickle
[LOG] Processing node features for num 210
[LOG] Saving tensor n0_to_3_809.pt
[LOG] Computing n1_to_1 for num 521
[LOG] Saving tensor n0_to_4_809.pt
[LOG] Saving tensor n1_to_2_809.pt
[LOG] Processing edge features for num 210
[LOG] Saving tensor n1_to_3_809.pt
[LOG] Saving tensor n1_to_4_809.pt
[LOG] Saving tensor n2_to_3_809.pt
[LOG] Saving tensor n2_to_4_809.pt
[LOG] Saving tensor n3_to_4_809.pt
[LOG] Saving tensor global_feature_809.pt
[LOG] Process 101: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing tetra features for num 210
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing cluster features for num 210
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 2083 Tetrahedra.
    [LOG] Generated 68 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.279411764705882
    [LOG] Max number of nodes per cluster is 36 and the number is 41
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1524 Tetrahedra.
    [LOG] Generated 44 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.204545454545455
    [LOG] Max number of nodes per cluster is 28 and the number is 6
[LOG] Processing cluster features for num 210
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_2 (adjacency) for num 514
[LOG] Processing adjacency and incidence matrices for num 210
[LOG] Computing n0_to_0 for num 210
[LOG] Computing n3_to_3 (adjacency) for num 257
[LOG] Computing n4_to_4 (coadjacency) for num 257
[LOG] Computing n0_to_1 for num 257
[LOG] We will select 249 edges and 1524 tetra
[LOG] Edges from tetra 0 and KDTree 775 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] We will select 820 edges and 2083 tetra
[LOG] Edges from tetra 0 and KDTree 820 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n3_to_3 (adjacency) for num 514
[LOG] Computing n4_to_4 (coadjacency) for num 514
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_1 for num 514
[LOG] Computing n2_to_2 (adjacency) for num 153
[LOG] Computing n0_to_2 for num 257
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_2 for num 514
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2864 Tetrahedra.
    [LOG] Generated 82 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.085365853658537
    [LOG] Max number of nodes per cluster is 55 and the number is 80
[LOG] Computing n1_to_1 for num 210
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] We will select 520 edges and 2864 tetra
[LOG] Edges from tetra 0 and KDTree 1467 with 0 edges in common.
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_3 for num 514
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 3 subset clusters.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_4 for num 514
[LOG] Computing n2_to_2 (adjacency) for num 210
[LOG] Computing n1_to_2 for num 514
[LOG] Process 16: Created combinatorial complex for file data_129.hdf5
[LOG] Process 76: Created combinatorial complex for file data_610.hdf5
[LOG] Computing n2_to_2 (adjacency) for num 910
[LOG] Computing n3_to_3 (adjacency) for num 210
[LOG] Computing n4_to_4 (coadjacency) for num 210
[LOG] Computing n0_to_1 for num 210
[LOG] Computing n1_to_3 for num 514
[LOG] Computing n0_to_3 for num 257
[LOG] Computing n1_to_4 for num 514
[LOG] Computing n2_to_3 for num 514
[LOG] Computing n0_to_4 for num 257
[LOG] Computing n2_to_4 for num 514
[LOG] Computing n1_to_2 for num 257
[LOG] Process 16: Calculating Neighbors
[LOG] Loading pickle file data_129.pickle
[LOG] Processing node features for num 129
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 76: Calculating Neighbors
[LOG] Loading pickle file data_610.pickle
[LOG] Processing node features for num 610
[LOG] Processing edge features for num 129
[LOG] Processing edge features for num 610
[LOG] Computing n3_to_4 for num 514
[LOG] Global feature for num 514
[LOG] Global feature for num 514
[LOG] Saving tensor x_0_514.pt
[LOG] Saving tensor x_1_514.pt
[LOG] Saving tensor x_2_514.pt
[LOG] Saving tensor x_3_514.pt
[LOG] Saving tensor x_4_514.pt
[LOG] Saving tensor n0_to_0_514.pt
[LOG] Computing n2_to_2 (adjacency) for num 521
[LOG] Processing tetra features for num 610
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n1_to_1_514.pt
[LOG] Saving tensor n2_to_2_514.pt
[LOG] Saving tensor n3_to_3_514.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n4_to_4_514.pt
[LOG] Processing tetra features for num 129
[LOG] Saving tensor n0_to_1_514.pt
[LOG] Saving tensor n0_to_2_514.pt
[LOG] Saving tensor n0_to_3_514.pt
[LOG] Saving tensor n0_to_4_514.pt
[LOG] Saving tensor n1_to_2_514.pt
[LOG] Saving tensor n1_to_3_514.pt
[LOG] Saving tensor n1_to_4_514.pt
[LOG] Processing cluster features for num 610
[LOG] Saving tensor n2_to_3_514.pt
[LOG] Saving tensor n2_to_4_514.pt
[LOG] Saving tensor n3_to_4_514.pt
[LOG] Processing cluster features for num 610
[LOG] Saving tensor global_feature_514.pt
[LOG] Process 64: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing adjacency and incidence matrices for num 610
[LOG] Computing n0_to_0 for num 610
[LOG] Processing cluster features for num 129
[LOG] Computing n0_to_2 for num 210
[LOG] Computing n1_to_1 for num 610
[LOG] Processing cluster features for num 129
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] Processing adjacency and incidence matrices for num 129
[LOG] Computing n0_to_0 for num 129
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n3_to_3 (adjacency) for num 153
[LOG] Computing n4_to_4 (coadjacency) for num 153
[LOG] Computing n2_to_2 (adjacency) for num 610
[LOG] Computing n0_to_1 for num 153
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1065 Tetrahedra.
    [LOG] Generated 34 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.705882352941176
    [LOG] Max number of nodes per cluster is 28 and the number is 26
[LOG] Computing n3_to_3 (adjacency) for num 610
[LOG] Computing n4_to_4 (coadjacency) for num 610
[LOG] Computing n1_to_1 for num 129
[LOG] Computing n0_to_1 for num 610
[LOG] Computing n0_to_2 for num 153
[LOG] We will select 186 edges and 1065 tetra
[LOG] Edges from tetra 0 and KDTree 186 with 0 edges in common.
[LOG] Computing n0_to_2 for num 610
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 11: Created combinatorial complex for file data_89.hdf5
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] GENERATED TETRA
[LOG] Computing n0_to_3 for num 210
[LOG] Computing n0_to_3 for num 610
[LOG] Computing n0_to_4 for num 610
[LOG] Computing n0_to_4 for num 210
[LOG] Computing n1_to_2 for num 610
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_2 for num 210
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 120: Created combinatorial complex for file data_946.hdf5
[LOG] Process 11: Calculating Neighbors
[LOG] Loading pickle file data_89.pickle
[LOG] Processing node features for num 89
[LOG] Processing edge features for num 89
[LOG] Computing n1_to_3 for num 610
[LOG] Computing n1_to_4 for num 610
[LOG] Computing n1_to_3 for num 257
[LOG] Computing n2_to_3 for num 610
[LOG] Processing tetra features for num 89
[LOG] Computing n2_to_2 (adjacency) for num 129
[LOG] Process 28: Created combinatorial complex for file data_228.hdf5
[LOG] Computing n2_to_4 for num 610
[LOG] Computing n1_to_4 for num 257
[LOG] Computing n3_to_4 for num 610
[LOG] Global feature for num 610
[LOG] Global feature for num 610
[LOG] Saving tensor x_0_610.pt
[LOG] Computing n2_to_3 for num 257
[LOG] Saving tensor x_1_610.pt
[LOG] Saving tensor x_2_610.pt
[LOG] Processing cluster features for num 89
[LOG] Saving tensor x_3_610.pt
[LOG] Saving tensor x_4_610.pt
[LOG] Saving tensor n0_to_0_610.pt
[LOG] Saving tensor n1_to_1_610.pt
[LOG] Saving tensor n2_to_2_610.pt
[LOG] Processing cluster features for num 89
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n3_to_3_610.pt
[LOG] Process 28: Calculating Neighbors
[LOG] Loading pickle file data_228.pickle
[LOG] Processing node features for num 228
[LOG] Saving tensor n4_to_4_610.pt
[LOG] Processing edge features for num 228
[LOG] Saving tensor n0_to_1_610.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n0_to_2_610.pt
[LOG] Processing adjacency and incidence matrices for num 89
[LOG] Computing n0_to_0 for num 89
[LOG] Saving tensor n0_to_3_610.pt
[LOG] Saving tensor n0_to_4_610.pt
[LOG] Processing tetra features for num 228
[LOG] Computing n2_to_4 for num 257
[LOG] Saving tensor n1_to_2_610.pt
[LOG] Processing cluster features for num 228
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_3 (adjacency) for num 521
[LOG] Saving tensor n1_to_3_610.pt
[LOG] Process 120: Calculating Neighbors
[LOG] Loading pickle file data_946.pickle
[LOG] Processing node features for num 946
[LOG] Saving tensor n1_to_4_610.pt
[LOG] Computing n4_to_4 (coadjacency) for num 521
[LOG] Processing cluster features for num 228
[LOG] Saving tensor n2_to_3_610.pt
[LOG] Computing n0_to_1 for num 521
[LOG] Processing edge features for num 946
[LOG] Saving tensor n2_to_4_610.pt
[LOG] Processing adjacency and incidence matrices for num 228
[LOG] Computing n0_to_0 for num 228
[LOG] Computing n3_to_4 for num 257
[LOG] Computing n1_to_1 for num 89
[LOG] Global feature for num 257
[LOG] Global feature for num 257
[LOG] Saving tensor x_0_257.pt
[LOG] Computing n1_to_1 for num 228
[LOG] Saving tensor x_1_257.pt
[LOG] Saving tensor x_2_257.pt
[LOG] Saving tensor x_3_257.pt
[LOG] Saving tensor x_4_257.pt
[LOG] Saving tensor n0_to_0_257.pt
[LOG] Processing tetra features for num 946
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n1_to_1_257.pt
[LOG] Saving tensor n2_to_2_257.pt
[LOG] Saving tensor n3_to_4_610.pt
[LOG] Saving tensor global_feature_610.pt
[LOG] Process 76: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n3_to_3_257.pt
[LOG] Computing n1_to_3 for num 210
[LOG] Saving tensor n4_to_4_257.pt
[LOG] Saving tensor n0_to_1_257.pt
[LOG] Saving tensor n0_to_2_257.pt
[LOG] Saving tensor n0_to_3_257.pt
[LOG] Saving tensor n0_to_4_257.pt
[LOG] Computing n2_to_2 (adjacency) for num 228
[LOG] Computing n1_to_4 for num 210
[LOG] Saving tensor n1_to_2_257.pt
[LOG] Computing n2_to_3 for num 210
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 946
[LOG] Computing n2_to_4 for num 210
[LOG] Computing n3_to_3 (adjacency) for num 228
[LOG] Processing cluster features for num 946
[LOG] Computing n4_to_4 (coadjacency) for num 228
[LOG] Computing n3_to_4 for num 210
[LOG] Computing n0_to_1 for num 228
[LOG] Global feature for num 210
[LOG] Global feature for num 210
[LOG] Saving tensor x_0_210.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_2 for num 521
[LOG] Saving tensor x_1_210.pt
[LOG] Saving tensor x_2_210.pt
[LOG] Saving tensor x_3_210.pt
[LOG] Saving tensor x_4_210.pt
[LOG] Saving tensor n1_to_3_257.pt
[LOG] Computing n0_to_2 for num 228
[LOG] Saving tensor n0_to_0_210.pt
[LOG] Saving tensor n1_to_4_257.pt
[LOG] Processing adjacency and incidence matrices for num 946
[LOG] Computing n0_to_0 for num 946
[LOG] Saving tensor n2_to_3_257.pt
[LOG] Saving tensor n1_to_1_210.pt
[LOG] Saving tensor n2_to_4_257.pt
[LOG] Computing n0_to_3 for num 153
[LOG] Saving tensor n3_to_4_257.pt
[LOG] Saving tensor n2_to_2_210.pt
[LOG] Saving tensor global_feature_257.pt
[LOG] Process 32: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_4 for num 153
[LOG] Saving tensor n3_to_3_210.pt
[LOG] Saving tensor n4_to_4_210.pt
[LOG] Saving tensor n0_to_1_210.pt
[LOG] Saving tensor n0_to_2_210.pt
[LOG] Computing n0_to_3 for num 228
[LOG] Computing n0_to_4 for num 228
[LOG] Computing n1_to_2 for num 153
[LOG] Computing n1_to_1 for num 946
[LOG] Computing n3_to_3 (adjacency) for num 129
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_2 for num 228
[LOG] Computing n4_to_4 (coadjacency) for num 129
[LOG] Computing n0_to_1 for num 129
[LOG] Computing n3_to_3 (adjacency) for num 910
[LOG] Saving tensor n0_to_3_210.pt
[LOG] Saving tensor n0_to_4_210.pt
[LOG] Computing n4_to_4 (coadjacency) for num 910
[LOG] Computing n0_to_1 for num 910
[LOG] Saving tensor n1_to_2_210.pt
[LOG] Saving tensor n1_to_3_210.pt
[LOG] Saving tensor n1_to_4_210.pt
[LOG] Computing n1_to_3 for num 228
[LOG] Saving tensor n2_to_3_210.pt
[LOG] Computing n1_to_4 for num 228
[LOG] Saving tensor n2_to_4_210.pt
[LOG] Computing n2_to_3 for num 228
[LOG] Saving tensor n3_to_4_210.pt
[LOG] Saving tensor global_feature_210.pt
[LOG] Process 26: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 3665 Tetrahedra.
    [LOG] Generated 89 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.50561797752809
    [LOG] Max number of nodes per cluster is 40 and the number is 49
[LOG] Computing n2_to_4 for num 228
[LOG] Computing n3_to_4 for num 228
[LOG] Global feature for num 228
[LOG] Global feature for num 228
[LOG] Saving tensor x_0_228.pt
[LOG] Saving tensor x_1_228.pt
[LOG] Saving tensor x_2_228.pt
[LOG] Saving tensor x_3_228.pt
[LOG] Saving tensor x_4_228.pt
[LOG] Saving tensor n0_to_0_228.pt
[LOG] Saving tensor n1_to_1_228.pt
[LOG] Saving tensor n2_to_2_228.pt
[LOG] Saving tensor n3_to_3_228.pt
[LOG] Saving tensor n4_to_4_228.pt
[LOG] Saving tensor n0_to_1_228.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_2 (adjacency) for num 89
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n0_to_2_228.pt
[LOG] Saving tensor n0_to_3_228.pt
[LOG] Saving tensor n0_to_4_228.pt
[LOG] Computing n0_to_2 for num 129
[LOG] Saving tensor n1_to_2_228.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n1_to_3_228.pt
[LOG] Saving tensor n1_to_4_228.pt
[LOG] Computing n0_to_2 for num 910
[LOG] Saving tensor n2_to_3_228.pt
[LOG] Saving tensor n2_to_4_228.pt
[LOG] Saving tensor n3_to_4_228.pt
[LOG] Saving tensor global_feature_228.pt
[LOG] Process 28: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] We will select 446 edges and 3665 tetra
[LOG] Edges from tetra 0 and KDTree 446 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_2 (adjacency) for num 946
[LOG] Computing n3_to_3 (adjacency) for num 89
[LOG] GENERATED TETRA
[LOG] Computing n4_to_4 (coadjacency) for num 89
[LOG] Computing n0_to_1 for num 89
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 568 Tetrahedra.
    [LOG] Generated 26 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.307692307692308
    [LOG] Max number of nodes per cluster is 28 and the number is 22
[LOG] We will select 40 edges and 568 tetra
[LOG] Edges from tetra 0 and KDTree 535 with 0 edges in common.
[LOG] Computing n0_to_2 for num 89
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1372 Tetrahedra.
    [LOG] Generated 40 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.45
    [LOG] Max number of nodes per cluster is 58 and the number is 34
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_3 for num 89
[LOG] Computing n0_to_4 for num 89
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_2 for num 89
[LOG] We will select 245 edges and 1372 tetra
[LOG] Edges from tetra 0 and KDTree 523 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_3 (adjacency) for num 946
[LOG] Computing n4_to_4 (coadjacency) for num 946
[LOG] Computing n0_to_1 for num 946
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_3 for num 521
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_4 for num 521
[LOG] Computing n1_to_2 for num 521
[LOG] Computing n0_to_2 for num 946
[LOG] Computing n1_to_3 for num 153
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_4 for num 153
[LOG] Computing n2_to_3 for num 153
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_3 for num 129
[LOG] Process 2: Created combinatorial complex for file data_19.hdf5
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_4 for num 153
[LOG] Computing n0_to_4 for num 129
[LOG] Process 2: Calculating Neighbors
[LOG] Loading pickle file data_19.pickle
[LOG] Processing node features for num 19
[LOG] Processing edge features for num 19
[LOG] Computing n1_to_2 for num 129
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing tetra features for num 19
[LOG] Processing cluster features for num 19
[LOG] Computing n1_to_3 for num 89
[LOG] Processing cluster features for num 19
[LOG] Removed 1 subset clusters.
[LOG] Processing adjacency and incidence matrices for num 19
[LOG] Computing n0_to_0 for num 19
[LOG] Computing n1_to_4 for num 89
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_1 for num 19
[LOG] Computing n2_to_3 for num 89
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_2 (adjacency) for num 19
[LOG] Computing n3_to_3 (adjacency) for num 19
[LOG] Computing n3_to_4 for num 153
[LOG] Computing n4_to_4 (coadjacency) for num 19
[LOG] Computing n0_to_1 for num 19
[LOG] Global feature for num 153
[LOG] Global feature for num 153
[LOG] Saving tensor x_0_153.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_4 for num 89
[LOG] Computing n0_to_2 for num 19
[LOG] Saving tensor x_1_153.pt
[LOG] Saving tensor x_2_153.pt
[LOG] Saving tensor x_3_153.pt
[LOG] Saving tensor x_4_153.pt
[LOG] Saving tensor n0_to_0_153.pt
[LOG] Saving tensor n1_to_1_153.pt
[LOG] Saving tensor n2_to_2_153.pt
[LOG] Computing n3_to_4 for num 89
[LOG] Saving tensor n3_to_3_153.pt
[LOG] Global feature for num 89
[LOG] Global feature for num 89
[LOG] Saving tensor x_0_89.pt
[LOG] Saving tensor x_1_89.pt
[LOG] Saving tensor n4_to_4_153.pt
[LOG] Saving tensor x_2_89.pt
[LOG] Saving tensor x_3_89.pt
[LOG] Saving tensor n0_to_1_153.pt
[LOG] Saving tensor x_4_89.pt
[LOG] Saving tensor n0_to_2_153.pt
[LOG] Saving tensor n0_to_0_89.pt
[LOG] Saving tensor n0_to_3_153.pt
[LOG] Saving tensor n1_to_1_89.pt
[LOG] Saving tensor n0_to_4_153.pt
[LOG] Saving tensor n2_to_2_89.pt
[LOG] Process 118: Created combinatorial complex for file data_933.hdf5
[LOG] Saving tensor n1_to_2_153.pt
[LOG] Saving tensor n3_to_3_89.pt
[LOG] Saving tensor n1_to_3_153.pt
[LOG] Saving tensor n4_to_4_89.pt
[LOG] Saving tensor n1_to_4_153.pt
[LOG] Saving tensor n0_to_1_89.pt
[LOG] Saving tensor n2_to_3_153.pt
[LOG] Saving tensor n0_to_2_89.pt
[LOG] Saving tensor n2_to_4_153.pt
[LOG] Saving tensor n0_to_3_89.pt
[LOG] Saving tensor n3_to_4_153.pt
[LOG] Saving tensor global_feature_153.pt
[LOG] Saving tensor n0_to_4_89.pt
[LOG] Process 19: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n1_to_2_89.pt
[LOG] Saving tensor n1_to_3_89.pt
[LOG] Saving tensor n1_to_4_89.pt
[LOG] Saving tensor n2_to_3_89.pt
[LOG] Saving tensor n2_to_4_89.pt
[LOG] Computing n0_to_3 for num 19
[LOG] Saving tensor n3_to_4_89.pt
[LOG] Saving tensor global_feature_89.pt
[LOG] Process 11: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_4 for num 19
[LOG] Computing n1_to_2 for num 19
[LOG] Computing n1_to_3 for num 19
[LOG] Computing n1_to_4 for num 19
[LOG] Computing n2_to_3 for num 19
[LOG] Computing n2_to_4 for num 19
[LOG] Computing n3_to_4 for num 19
[LOG] Calculating for cell ranks 1 and 4
[LOG] Global feature for num 19
[LOG] Global feature for num 19
[LOG] Saving tensor x_0_19.pt
[LOG] Process 118: Calculating Neighbors
[LOG] Loading pickle file data_933.pickle
[LOG] Processing node features for num 933
[LOG] Saving tensor x_1_19.pt
[LOG] Saving tensor x_2_19.pt
[LOG] Saving tensor x_3_19.pt
[LOG] Processing edge features for num 933
[LOG] Saving tensor x_4_19.pt
[LOG] Saving tensor n0_to_0_19.pt
[LOG] Saving tensor n1_to_1_19.pt
[LOG] Saving tensor n2_to_2_19.pt
[LOG] Saving tensor n3_to_3_19.pt
[LOG] Saving tensor n4_to_4_19.pt
[LOG] Saving tensor n0_to_1_19.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n0_to_2_19.pt
[LOG] Processing tetra features for num 933
[LOG] Saving tensor n0_to_3_19.pt
[LOG] Saving tensor n0_to_4_19.pt
[LOG] Saving tensor n1_to_2_19.pt
[LOG] Saving tensor n1_to_3_19.pt
[LOG] Saving tensor n1_to_4_19.pt
[LOG] Saving tensor n2_to_3_19.pt
[LOG] Saving tensor n2_to_4_19.pt
[LOG] Saving tensor n3_to_4_19.pt
[LOG] Saving tensor global_feature_19.pt
[LOG] Computing n0_to_3 for num 910
[LOG] Process 2: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing cluster features for num 933
[LOG] Processing cluster features for num 933
[LOG] Processing adjacency and incidence matrices for num 933
[LOG] Computing n0_to_0 for num 933
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_4 for num 910
[LOG] Computing n1_to_1 for num 933
[LOG] Computing n1_to_3 for num 129
[LOG] Computing n1_to_4 for num 129
[LOG] Computing n1_to_2 for num 910
[LOG] Computing n2_to_3 for num 129
[LOG] Computing n2_to_2 (adjacency) for num 933
[LOG] Computing n2_to_4 for num 129
[LOG] Computing n0_to_3 for num 946
[LOG] Computing n3_to_4 for num 129
[LOG] Global feature for num 129
[LOG] Computing n0_to_4 for num 946
[LOG] Global feature for num 129
[LOG] Saving tensor x_0_129.pt
[LOG] Saving tensor x_1_129.pt
[LOG] Saving tensor x_2_129.pt
[LOG] Saving tensor x_3_129.pt
[LOG] Saving tensor x_4_129.pt
[LOG] Computing n3_to_3 (adjacency) for num 933
[LOG] Saving tensor n0_to_0_129.pt
[LOG] Computing n4_to_4 (coadjacency) for num 933
[LOG] Saving tensor n1_to_1_129.pt
[LOG] Computing n0_to_1 for num 933
[LOG] Computing n1_to_2 for num 946
[LOG] Saving tensor n2_to_2_129.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_2 for num 933
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor n3_to_3_129.pt
[LOG] Saving tensor n4_to_4_129.pt
[LOG] Saving tensor n0_to_1_129.pt
[LOG] Saving tensor n0_to_2_129.pt
[LOG] Saving tensor n0_to_3_129.pt
[LOG] Saving tensor n0_to_4_129.pt
[LOG] Saving tensor n1_to_2_129.pt
[LOG] Saving tensor n1_to_3_129.pt
[LOG] Saving tensor n1_to_4_129.pt
[LOG] Saving tensor n2_to_3_129.pt
[LOG] Computing n1_to_3 for num 521
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_4 for num 521
[LOG] Computing n2_to_3 for num 521
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_3 for num 933
[LOG] Computing n0_to_4 for num 933
[LOG] Saving tensor n2_to_4_129.pt
[LOG] Saving tensor n3_to_4_129.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_2 for num 933
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_4 for num 521
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_3 for num 933
[LOG] Computing n1_to_4 for num 933
[LOG] Computing n2_to_3 for num 933
[LOG] Computing n2_to_4 for num 933
[LOG] Saving tensor global_feature_129.pt
[LOG] Process 16: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n3_to_4 for num 933
[LOG] Global feature for num 933
[LOG] Global feature for num 933
[LOG] Saving tensor x_0_933.pt
[LOG] Saving tensor x_1_933.pt
[LOG] Saving tensor x_2_933.pt
[LOG] Saving tensor x_3_933.pt
[LOG] Saving tensor x_4_933.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n0_to_0_933.pt
[LOG] Computing n3_to_4 for num 521
[LOG] Saving tensor n1_to_1_933.pt
[LOG] Global feature for num 521
[LOG] Saving tensor n2_to_2_933.pt
[LOG] Global feature for num 521
[LOG] Saving tensor x_0_521.pt
[LOG] Saving tensor x_1_521.pt
[LOG] Saving tensor n3_to_3_933.pt
[LOG] Saving tensor x_2_521.pt
[LOG] Saving tensor n4_to_4_933.pt
[LOG] Saving tensor x_3_521.pt
[LOG] Saving tensor x_4_521.pt
[LOG] Saving tensor n0_to_1_933.pt
[LOG] Saving tensor n0_to_0_521.pt
[LOG] Saving tensor n0_to_2_933.pt
[LOG] Computing n1_to_3 for num 946
[LOG] Saving tensor n1_to_1_521.pt
[LOG] Saving tensor n0_to_3_933.pt
[LOG] Saving tensor n0_to_4_933.pt
[LOG] Saving tensor n2_to_2_521.pt
[LOG] Saving tensor n1_to_2_933.pt
[LOG] Saving tensor n3_to_3_521.pt
[LOG] Saving tensor n1_to_3_933.pt
[LOG] Saving tensor n4_to_4_521.pt
[LOG] Saving tensor n1_to_4_933.pt
[LOG] Computing n1_to_4 for num 946
[LOG] Saving tensor n0_to_1_521.pt
[LOG] Saving tensor n2_to_3_933.pt
[LOG] Saving tensor n0_to_2_521.pt
[LOG] Saving tensor n2_to_4_933.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n0_to_3_521.pt
[LOG] Saving tensor n3_to_4_933.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_3 for num 946
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 59: Created combinatorial complex for file data_473.hdf5
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_4 for num 946
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor global_feature_933.pt
[LOG] Process 118: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_4_521.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n1_to_2_521.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n1_to_3_521.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n1_to_4_521.pt
[LOG] Computing n3_to_4 for num 946
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Global feature for num 946
[LOG] Global feature for num 946
[LOG] Saving tensor x_0_946.pt
[LOG] Saving tensor n2_to_3_521.pt
[LOG] Saving tensor x_1_946.pt
[LOG] Saving tensor x_2_946.pt
[LOG] Saving tensor n2_to_4_521.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor x_3_946.pt
[LOG] Saving tensor n3_to_4_521.pt
[LOG] Saving tensor x_4_946.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n0_to_0_946.pt
[LOG] Saving tensor global_feature_521.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Process 65: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n1_to_1_946.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n2_to_2_946.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n3_to_3_946.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n4_to_4_946.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n0_to_1_946.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n0_to_2_946.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n0_to_3_946.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n0_to_4_946.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n1_to_2_946.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n1_to_3_946.pt
[LOG] Saving tensor n1_to_4_946.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n2_to_3_946.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n2_to_4_946.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n3_to_4_946.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor global_feature_946.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Process 120: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Process 59: Calculating Neighbors
[LOG] Loading pickle file data_473.pickle
[LOG] Processing node features for num 473
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Processing edge features for num 473
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Processing tetra features for num 473
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n1_to_3 for num 910
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n1_to_4 for num 910
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing cluster features for num 473
[LOG] Computing n2_to_3 for num 910
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing cluster features for num 473
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing adjacency and incidence matrices for num 473
[LOG] Computing n0_to_0 for num 473
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n1_to_1 for num 473
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_4 for num 910
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_4 for num 910
[LOG] Global feature for num 910
[LOG] Global feature for num 910
[LOG] Saving tensor x_0_910.pt
[LOG] Saving tensor x_1_910.pt
[LOG] Saving tensor x_2_910.pt
[LOG] Saving tensor x_3_910.pt
[LOG] Saving tensor x_4_910.pt
[LOG] Saving tensor n0_to_0_910.pt
[LOG] Saving tensor n1_to_1_910.pt
[LOG] Saving tensor n2_to_2_910.pt
[LOG] Saving tensor n3_to_3_910.pt
[LOG] Saving tensor n4_to_4_910.pt
[LOG] Saving tensor n0_to_1_910.pt
[LOG] Saving tensor n0_to_2_910.pt
[LOG] Saving tensor n0_to_3_910.pt
[LOG] Saving tensor n0_to_4_910.pt
[LOG] Saving tensor n1_to_2_910.pt
[LOG] Saving tensor n1_to_3_910.pt
[LOG] Saving tensor n1_to_4_910.pt
[LOG] Saving tensor n2_to_3_910.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n2_to_4_910.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n3_to_4_910.pt
[LOG] Saving tensor global_feature_910.pt
[LOG] Process 115: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_2 (adjacency) for num 473
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_3 (adjacency) for num 473
[LOG] Computing n4_to_4 (coadjacency) for num 473
[LOG] Computing n0_to_1 for num 473
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_2 for num 473
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 963 Tetrahedra.
    [LOG] Generated 31 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.35483870967742
    [LOG] Max number of nodes per cluster is 23 and the number is 29
[LOG] We will select 151 edges and 963 tetra
[LOG] Edges from tetra 0 and KDTree 360 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 1
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 0 subset clusters.
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1284 Tetrahedra.
    [LOG] Generated 38 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.973684210526315
    [LOG] Max number of nodes per cluster is 33 and the number is 27
[LOG] Calculating for cell ranks 2 and 3
[LOG] We will select 281 edges and 1284 tetra
[LOG] Edges from tetra 0 and KDTree 281 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 21: Created combinatorial complex for file data_172.hdf5
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 21: Calculating Neighbors
[LOG] Loading pickle file data_172.pickle
[LOG] Processing node features for num 172
[LOG] Processing edge features for num 172
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing tetra features for num 172
[LOG] Processing cluster features for num 172
[LOG] Processing cluster features for num 172
[LOG] Processing adjacency and incidence matrices for num 172
[LOG] Computing n0_to_0 for num 172
[LOG] Computing n1_to_1 for num 172
[LOG] Computing n2_to_2 (adjacency) for num 172
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 3994 Tetrahedra.
    [LOG] Generated 105 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.99047619047619
    [LOG] Max number of nodes per cluster is 92 and the number is 101
[LOG] Computing n0_to_3 for num 473
[LOG] Computing n3_to_3 (adjacency) for num 172
[LOG] Computing n0_to_4 for num 473
[LOG] Computing n4_to_4 (coadjacency) for num 172
[LOG] Computing n0_to_1 for num 172
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_2 for num 172
[LOG] Computing n1_to_2 for num 473
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_3 for num 172
[LOG] Computing n0_to_4 for num 172
[LOG] Computing n1_to_2 for num 172
[LOG] Computing n1_to_3 for num 172
[LOG] Computing n1_to_4 for num 172
[LOG] Computing n2_to_3 for num 172
[LOG] We will select 887 edges and 3994 tetra
[LOG] Edges from tetra 0 and KDTree 2261 with 0 edges in common.
[LOG] Computing n2_to_4 for num 172
[LOG] Computing n3_to_4 for num 172
[LOG] Global feature for num 172
[LOG] Global feature for num 172
[LOG] Saving tensor x_0_172.pt
[LOG] Saving tensor x_1_172.pt
[LOG] Saving tensor x_2_172.pt
[LOG] Saving tensor x_3_172.pt
[LOG] Saving tensor x_4_172.pt
[LOG] Saving tensor n0_to_0_172.pt
[LOG] Saving tensor n1_to_1_172.pt
[LOG] Saving tensor n2_to_2_172.pt
[LOG] Saving tensor n3_to_3_172.pt
[LOG] Saving tensor n4_to_4_172.pt
[LOG] Saving tensor n0_to_1_172.pt
[LOG] Saving tensor n0_to_2_172.pt
[LOG] Saving tensor n0_to_3_172.pt
[LOG] Saving tensor n0_to_4_172.pt
[LOG] Saving tensor n1_to_2_172.pt
[LOG] Saving tensor n1_to_3_172.pt
[LOG] Saving tensor n1_to_4_172.pt
[LOG] Saving tensor n2_to_3_172.pt
[LOG] Saving tensor n2_to_4_172.pt
[LOG] Saving tensor n3_to_4_172.pt
[LOG] Saving tensor global_feature_172.pt
[LOG] Process 21: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_3 for num 473
[LOG] Process 56: Created combinatorial complex for file data_449.hdf5
[LOG] Computing n1_to_4 for num 473
[LOG] Computing n2_to_3 for num 473
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 56: Calculating Neighbors
[LOG] Loading pickle file data_449.pickle
[LOG] Processing node features for num 449
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing edge features for num 449
[LOG] Processing tetra features for num 449
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_4 for num 473
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing cluster features for num 449
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing cluster features for num 449
[LOG] Processing adjacency and incidence matrices for num 449
[LOG] Computing n0_to_0 for num 449
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_1 for num 449
[LOG] Computing n3_to_4 for num 473
[LOG] Global feature for num 473
[LOG] Global feature for num 473
[LOG] Saving tensor x_0_473.pt
[LOG] Saving tensor x_1_473.pt
[LOG] Saving tensor x_2_473.pt
[LOG] Saving tensor x_3_473.pt
[LOG] Saving tensor x_4_473.pt
[LOG] Saving tensor n0_to_0_473.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n1_to_1_473.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n2_to_2_473.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n3_to_3_473.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n4_to_4_473.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n0_to_1_473.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n0_to_2_473.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n0_to_3_473.pt
[LOG] Computing n2_to_2 (adjacency) for num 449
[LOG] Saving tensor n0_to_4_473.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n1_to_2_473.pt
[LOG] Saving tensor n1_to_3_473.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n1_to_4_473.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n2_to_3_473.pt
[LOG] Saving tensor n2_to_4_473.pt
[LOG] Saving tensor n3_to_4_473.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 449
[LOG] Computing n4_to_4 (coadjacency) for num 449
[LOG] Computing n0_to_1 for num 449
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor global_feature_473.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Process 59: Calculating Cross-Cell-Invariants
[LOG] Computing n0_to_2 for num 449
[LOG] Computing n0_to_3 for num 449
[LOG] Computing n0_to_4 for num 449
[LOG] Computing n1_to_2 for num 449
[LOG] Computing n1_to_3 for num 449
[LOG] Computing n1_to_4 for num 449
[LOG] Computing n2_to_3 for num 449
[LOG] Computing n2_to_4 for num 449
[LOG] Computing n3_to_4 for num 449
[LOG] Global feature for num 449
[LOG] Global feature for num 449
[LOG] Saving tensor x_0_449.pt
[LOG] Saving tensor x_1_449.pt
[LOG] Saving tensor x_2_449.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor x_3_449.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor x_4_449.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n0_to_0_449.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n1_to_1_449.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n2_to_2_449.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n3_to_3_449.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n4_to_4_449.pt
[LOG] Saving tensor n0_to_1_449.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n0_to_2_449.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n0_to_3_449.pt
[LOG] Saving tensor n0_to_4_449.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n1_to_2_449.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n1_to_3_449.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n1_to_4_449.pt
[LOG] Saving tensor n2_to_3_449.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n2_to_4_449.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n3_to_4_449.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor global_feature_449.pt
[LOG] Process 56: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Process 111: Created combinatorial complex for file data_882.hdf5
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 111: Calculating Neighbors
[LOG] Loading pickle file data_882.pickle
[LOG] Processing node features for num 882
[LOG] Processing edge features for num 882
[LOG] Processing tetra features for num 882
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing cluster features for num 882
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing cluster features for num 882
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing adjacency and incidence matrices for num 882
[LOG] Computing n0_to_0 for num 882
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 839 Tetrahedra.
    [LOG] Generated 23 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.391304347826088
    [LOG] Max number of nodes per cluster is 27 and the number is 20
[LOG] Calculating for cell ranks 1 and 2
[LOG] We will select 61 edges and 839 tetra
[LOG] Edges from tetra 0 and KDTree 61 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_1 for num 882
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 4077 Tetrahedra.
    [LOG] Generated 100 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.12
    [LOG] Max number of nodes per cluster is 57 and the number is 94
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Process 105: Created combinatorial complex for file data_841.hdf5
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Process 105: Calculating Neighbors
[LOG] Loading pickle file data_841.pickle
[LOG] Processing node features for num 841
[LOG] Processing edge features for num 841
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Processing tetra features for num 841
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Processing cluster features for num 841
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Processing cluster features for num 841
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 841
[LOG] Computing n0_to_0 for num 841
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n1_to_1 for num 841
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 841
[LOG] Computing n3_to_3 (adjacency) for num 841
[LOG] Computing n4_to_4 (coadjacency) for num 841
[LOG] Computing n0_to_1 for num 841
[LOG] Computing n0_to_2 for num 841
[LOG] We will select 942 edges and 4077 tetra
[LOG] Edges from tetra 0 and KDTree 942 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_3 for num 841
[LOG] Computing n0_to_4 for num 841
[LOG] Computing n1_to_2 for num 841
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_3 for num 841
[LOG] Computing n1_to_4 for num 841
[LOG] Computing n2_to_3 for num 841
[LOG] Computing n2_to_4 for num 841
[LOG] Computing n3_to_4 for num 841
[LOG] Global feature for num 841
[LOG] Global feature for num 841
[LOG] Saving tensor x_0_841.pt
[LOG] Saving tensor x_1_841.pt
[LOG] Saving tensor x_2_841.pt
[LOG] Saving tensor x_3_841.pt
[LOG] Saving tensor x_4_841.pt
[LOG] Saving tensor n0_to_0_841.pt
[LOG] Saving tensor n1_to_1_841.pt
[LOG] Saving tensor n2_to_2_841.pt
[LOG] Saving tensor n3_to_3_841.pt
[LOG] Saving tensor n4_to_4_841.pt
[LOG] Saving tensor n0_to_1_841.pt
[LOG] Saving tensor n0_to_2_841.pt
[LOG] Saving tensor n0_to_3_841.pt
[LOG] Saving tensor n0_to_4_841.pt
[LOG] Saving tensor n1_to_2_841.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n1_to_3_841.pt
[LOG] Saving tensor n1_to_4_841.pt
[LOG] Saving tensor n2_to_3_841.pt
[LOG] Saving tensor n2_to_4_841.pt
[LOG] Saving tensor n3_to_4_841.pt
[LOG] Saving tensor global_feature_841.pt
[LOG] Process 105: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_2 (adjacency) for num 882
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1461 Tetrahedra.
    [LOG] Generated 37 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.35135135135135
    [LOG] Max number of nodes per cluster is 35 and the number is 16
[LOG] Calculating for cell ranks 1 and 1
[LOG] We will select 178 edges and 1461 tetra
[LOG] Edges from tetra 0 and KDTree 178 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 3 subset clusters.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 47: Created combinatorial complex for file data_377.hdf5
[LOG] Process 47: Calculating Neighbors
[LOG] Loading pickle file data_377.pickle
[LOG] Processing node features for num 377
[LOG] Processing edge features for num 377
[LOG] Processing tetra features for num 377
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 377
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_3 (adjacency) for num 882
[LOG] Processing cluster features for num 377
[LOG] Computing n4_to_4 (coadjacency) for num 882
[LOG] Computing n0_to_1 for num 882
[LOG] Processing adjacency and incidence matrices for num 377
[LOG] Computing n0_to_0 for num 377
[LOG] Computing n1_to_1 for num 377
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_2 (adjacency) for num 377
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n3_to_3 (adjacency) for num 377
[LOG] Computing n4_to_4 (coadjacency) for num 377
[LOG] Computing n0_to_1 for num 377
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_2 for num 377
[LOG] Computing n0_to_2 for num 882
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_3 for num 377
[LOG] Computing n0_to_4 for num 377
[LOG] Computing n1_to_2 for num 377
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_3 for num 377
[LOG] Computing n1_to_4 for num 377
[LOG] Computing n2_to_3 for num 377
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_4 for num 377
[LOG] Computing n3_to_4 for num 377
[LOG] Global feature for num 377
[LOG] Global feature for num 377
[LOG] Saving tensor x_0_377.pt
[LOG] Saving tensor x_1_377.pt
[LOG] Saving tensor x_2_377.pt
[LOG] Saving tensor x_3_377.pt
[LOG] Saving tensor x_4_377.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n0_to_0_377.pt
[LOG] Saving tensor n1_to_1_377.pt
[LOG] Saving tensor n2_to_2_377.pt
[LOG] Saving tensor n3_to_3_377.pt
[LOG] Saving tensor n4_to_4_377.pt
[LOG] Saving tensor n0_to_1_377.pt
[LOG] Saving tensor n0_to_2_377.pt
[LOG] Saving tensor n0_to_3_377.pt
[LOG] Saving tensor n0_to_4_377.pt
[LOG] Saving tensor n1_to_2_377.pt
[LOG] Saving tensor n1_to_3_377.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n1_to_4_377.pt
[LOG] Saving tensor n2_to_3_377.pt
[LOG] Saving tensor n2_to_4_377.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n3_to_4_377.pt
[LOG] Saving tensor global_feature_377.pt
[LOG] Process 47: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 43: Created combinatorial complex for file data_345.hdf5
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Process 43: Calculating Neighbors
[LOG] Loading pickle file data_345.pickle
[LOG] Processing node features for num 345
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Processing edge features for num 345
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Processing tetra features for num 345
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing cluster features for num 345
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 345
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing adjacency and incidence matrices for num 345
[LOG] Computing n0_to_0 for num 345
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 964 Tetrahedra.
    [LOG] Generated 35 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.628571428571428
    [LOG] Max number of nodes per cluster is 32 and the number is 8
[LOG] We will select 100 edges and 964 tetra
[LOG] Edges from tetra 0 and KDTree 247 with 0 edges in common.
[LOG] Computing n1_to_1 for num 345
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 89: Created combinatorial complex for file data_716.hdf5
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 89: Calculating Neighbors
[LOG] Loading pickle file data_716.pickle
[LOG] Processing node features for num 716
[LOG] Processing edge features for num 716
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Processing tetra features for num 716
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Processing cluster features for num 716
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Processing cluster features for num 716
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Processing adjacency and incidence matrices for num 716
[LOG] Computing n0_to_0 for num 716
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n1_to_1 for num 716
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n0_to_3 for num 882
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n2_to_2 (adjacency) for num 716
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Computing n0_to_4 for num 882
[LOG] Computing n3_to_3 (adjacency) for num 716
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n4_to_4 (coadjacency) for num 716
[LOG] Computing n0_to_1 for num 716
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_2 for num 716
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_2 for num 882
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_3 for num 716
[LOG] Computing n0_to_4 for num 716
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_2 for num 716
[LOG] Computing n1_to_3 for num 716
[LOG] Computing n1_to_4 for num 716
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_3 for num 716
[LOG] Computing n2_to_4 for num 716
[LOG] Computing n3_to_4 for num 716
[LOG] Global feature for num 716
[LOG] Global feature for num 716
[LOG] Saving tensor x_0_716.pt
[LOG] Saving tensor x_1_716.pt
[LOG] Saving tensor x_2_716.pt
[LOG] Saving tensor x_3_716.pt
[LOG] Saving tensor x_4_716.pt
[LOG] Saving tensor n0_to_0_716.pt
[LOG] Saving tensor n1_to_1_716.pt
[LOG] Saving tensor n2_to_2_716.pt
[LOG] Saving tensor n3_to_3_716.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n4_to_4_716.pt
[LOG] Saving tensor n0_to_1_716.pt
[LOG] Saving tensor n0_to_2_716.pt
[LOG] Saving tensor n0_to_3_716.pt
[LOG] Saving tensor n0_to_4_716.pt
[LOG] Saving tensor n1_to_2_716.pt
[LOG] Saving tensor n1_to_3_716.pt
[LOG] Saving tensor n1_to_4_716.pt
[LOG] Saving tensor n2_to_3_716.pt
[LOG] Saving tensor n2_to_4_716.pt
[LOG] Saving tensor n3_to_4_716.pt
[LOG] Saving tensor global_feature_716.pt
[LOG] Process 89: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_2 (adjacency) for num 345
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_3 for num 882
[LOG] Computing n1_to_4 for num 882
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_3 for num 882
[LOG] Calculating for cell ranks 2 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_4 for num 882
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_4 for num 882
[LOG] Calculating for cell ranks 1 and 2
[LOG] Global feature for num 882
[LOG] Global feature for num 882
[LOG] Saving tensor x_0_882.pt
[LOG] Saving tensor x_1_882.pt
[LOG] Saving tensor x_2_882.pt
[LOG] Saving tensor x_3_882.pt
[LOG] Saving tensor x_4_882.pt
[LOG] Saving tensor n0_to_0_882.pt
[LOG] Saving tensor n1_to_1_882.pt
[LOG] Saving tensor n2_to_2_882.pt
[LOG] Saving tensor n3_to_3_882.pt
[LOG] Saving tensor n4_to_4_882.pt
[LOG] Saving tensor n0_to_1_882.pt
[LOG] Saving tensor n0_to_2_882.pt
[LOG] Saving tensor n0_to_3_882.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n0_to_4_882.pt
[LOG] Saving tensor n1_to_2_882.pt
[LOG] Saving tensor n1_to_3_882.pt
[LOG] Computing n3_to_3 (adjacency) for num 345
[LOG] Saving tensor n1_to_4_882.pt
[LOG] Saving tensor n2_to_3_882.pt
[LOG] Computing n4_to_4 (coadjacency) for num 345
[LOG] Saving tensor n2_to_4_882.pt
[LOG] Saving tensor n3_to_4_882.pt
[LOG] Computing n0_to_1 for num 345
[LOG] Saving tensor global_feature_882.pt
[LOG] Process 111: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_2 for num 345
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1990 Tetrahedra.
    [LOG] Generated 56 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.303571428571429
    [LOG] Max number of nodes per cluster is 45 and the number is 54
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] We will select 1144 edges and 1990 tetra
[LOG] Edges from tetra 0 and KDTree 1144 with 0 edges in common.
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 864 Tetrahedra.
    [LOG] Generated 26 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.192307692307692
    [LOG] Max number of nodes per cluster is 23 and the number is 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1452 Tetrahedra.
    [LOG] Generated 48 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.5625
    [LOG] Max number of nodes per cluster is 29 and the number is 12
[LOG] We will select 214 edges and 864 tetra
[LOG] Edges from tetra 0 and KDTree 214 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] We will select 279 edges and 1452 tetra
[LOG] Edges from tetra 0 and KDTree 645 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 4605 Tetrahedra.
    [LOG] Generated 111 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.64864864864865
    [LOG] Max number of nodes per cluster is 50 and the number is 89
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Removed 2 subset clusters.
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] We will select 1049 edges and 4605 tetra
[LOG] Edges from tetra 0 and KDTree 1049 with 0 edges in common.
[LOG] Process 29: Created combinatorial complex for file data_233.hdf5
[LOG] Process 29: Calculating Neighbors
[LOG] Loading pickle file data_233.pickle
[LOG] Processing node features for num 233
[LOG] Processing edge features for num 233
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing tetra features for num 233
[LOG] Computing n0_to_3 for num 345
[LOG] Processing cluster features for num 233
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 233
[LOG] Processing adjacency and incidence matrices for num 233
[LOG] Computing n0_to_0 for num 233
[LOG] Computing n0_to_4 for num 345
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_1 for num 233
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_2 for num 345
[LOG] Removed 1 subset clusters.
[LOG] Computing n2_to_2 (adjacency) for num 233
[LOG] Computing n3_to_3 (adjacency) for num 233
[LOG] Computing n4_to_4 (coadjacency) for num 233
[LOG] Computing n0_to_1 for num 233
[LOG] Computing n0_to_2 for num 233
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_3 for num 233
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1702 Tetrahedra.
    [LOG] Generated 56 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.214285714285714
    [LOG] Max number of nodes per cluster is 73 and the number is 55
[LOG] Computing n0_to_4 for num 233
[LOG] Computing n1_to_2 for num 233
[LOG] Process 108: Created combinatorial complex for file data_863.hdf5
[LOG] Computing n1_to_3 for num 233
[LOG] Computing n1_to_4 for num 233
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_3 for num 233
[LOG] Computing n2_to_4 for num 233
[LOG] Computing n3_to_4 for num 233
[LOG] Global feature for num 233
[LOG] Global feature for num 233
[LOG] Saving tensor x_0_233.pt
[LOG] Saving tensor x_1_233.pt
[LOG] Saving tensor x_2_233.pt
[LOG] Saving tensor x_3_233.pt
[LOG] Saving tensor x_4_233.pt
[LOG] Saving tensor n0_to_0_233.pt
[LOG] We will select 707 edges and 1702 tetra
[LOG] Edges from tetra 0 and KDTree 771 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n1_to_1_233.pt
[LOG] Saving tensor n2_to_2_233.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n3_to_3_233.pt
[LOG] Saving tensor n4_to_4_233.pt
[LOG] Saving tensor n0_to_1_233.pt
[LOG] Saving tensor n0_to_2_233.pt
[LOG] Saving tensor n0_to_3_233.pt
[LOG] Saving tensor n0_to_4_233.pt
[LOG] Saving tensor n1_to_2_233.pt
[LOG] Saving tensor n1_to_3_233.pt
[LOG] Saving tensor n1_to_4_233.pt
[LOG] Saving tensor n2_to_3_233.pt
[LOG] Saving tensor n2_to_4_233.pt
[LOG] Saving tensor n3_to_4_233.pt
[LOG] Saving tensor global_feature_233.pt
[LOG] Process 29: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 4801 Tetrahedra.
    [LOG] Generated 97 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.742268041237113
    [LOG] Max number of nodes per cluster is 81 and the number is 54
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 108: Calculating Neighbors
[LOG] Loading pickle file data_863.pickle
[LOG] Processing node features for num 863
[LOG] Processing edge features for num 863
[LOG] Processing tetra features for num 863
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Removed 2 subset clusters.
[LOG] Processing cluster features for num 863
[LOG] Processing cluster features for num 863
[LOG] Processing adjacency and incidence matrices for num 863
[LOG] Computing n0_to_0 for num 863
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_1 for num 863
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] We will select 2000 edges and 4801 tetra
[LOG] Edges from tetra 0 and KDTree 3815 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_2 (adjacency) for num 863
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n3_to_3 (adjacency) for num 863
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n4_to_4 (coadjacency) for num 863
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n0_to_1 for num 863
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n0_to_2 for num 863
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Process 3: Created combinatorial complex for file data_25.hdf5
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_3 for num 863
[LOG] Computing n0_to_4 for num 863
[LOG] Computing n1_to_2 for num 863
[LOG] Process 3: Calculating Neighbors
[LOG] Loading pickle file data_25.pickle
[LOG] Processing node features for num 25
[LOG] Processing edge features for num 25
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing tetra features for num 25
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_3 for num 863
[LOG] Processing cluster features for num 25
[LOG] Computing n1_to_4 for num 863
[LOG] Computing n2_to_3 for num 863
[LOG] Processing cluster features for num 25
[LOG] Computing n2_to_4 for num 863
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing adjacency and incidence matrices for num 25
[LOG] Computing n0_to_0 for num 25
[LOG] Computing n3_to_4 for num 863
[LOG] Global feature for num 863
[LOG] Global feature for num 863
[LOG] Saving tensor x_0_863.pt
[LOG] Saving tensor x_1_863.pt
[LOG] Saving tensor x_2_863.pt
[LOG] Saving tensor x_3_863.pt
[LOG] Saving tensor x_4_863.pt
[LOG] Saving tensor n0_to_0_863.pt
[LOG] Saving tensor n1_to_1_863.pt
[LOG] Saving tensor n2_to_2_863.pt
[LOG] Saving tensor n3_to_3_863.pt
[LOG] Saving tensor n4_to_4_863.pt
[LOG] Saving tensor n0_to_1_863.pt
[LOG] Computing n1_to_3 for num 345
[LOG] Saving tensor n0_to_2_863.pt
[LOG] Saving tensor n0_to_3_863.pt
[LOG] Saving tensor n0_to_4_863.pt
[LOG] Saving tensor n1_to_2_863.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n1_to_3_863.pt
[LOG] Saving tensor n1_to_4_863.pt
[LOG] Saving tensor n2_to_3_863.pt
[LOG] Saving tensor n2_to_4_863.pt
[LOG] Saving tensor n3_to_4_863.pt
[LOG] Saving tensor global_feature_863.pt
[LOG] Computing n1_to_4 for num 345
[LOG] Process 108: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 15: Created combinatorial complex for file data_123.hdf5
[LOG] Computing n1_to_1 for num 25
[LOG] Computing n2_to_3 for num 345
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n2_to_4 for num 345
[LOG] Process 15: Calculating Neighbors
[LOG] Loading pickle file data_123.pickle
[LOG] Processing node features for num 123
[LOG] Processing edge features for num 123
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing tetra features for num 123
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing cluster features for num 123
[LOG] Calculating for cell ranks 4 and 4
[LOG] GENERATED TETRA
[LOG] Processing cluster features for num 123
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_4 for num 345
[LOG] Global feature for num 345
[LOG] Global feature for num 345
[LOG] Saving tensor x_0_345.pt
[LOG] Saving tensor x_1_345.pt
[LOG] Saving tensor x_2_345.pt
[LOG] Processing adjacency and incidence matrices for num 123
[LOG] Computing n0_to_0 for num 123
[LOG] Saving tensor x_3_345.pt
[LOG] Saving tensor x_4_345.pt
[LOG] Saving tensor n0_to_0_345.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n1_to_1_345.pt
[LOG] Saving tensor n2_to_2_345.pt
[LOG] Saving tensor n3_to_3_345.pt
[LOG] Saving tensor n4_to_4_345.pt
[LOG] Saving tensor n0_to_1_345.pt
[LOG] Saving tensor n0_to_2_345.pt
[LOG] Saving tensor n0_to_3_345.pt
[LOG] Saving tensor n0_to_4_345.pt
[LOG] Saving tensor n1_to_2_345.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n1_to_3_345.pt
[LOG] Saving tensor n1_to_4_345.pt
[LOG] Saving tensor n2_to_3_345.pt
[LOG] Saving tensor n2_to_4_345.pt
[LOG] Saving tensor n3_to_4_345.pt
[LOG] Saving tensor global_feature_345.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 43: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_1 for num 123
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_2 (adjacency) for num 25
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 123
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1804 Tetrahedra.
    [LOG] Generated 59 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.59322033898305
    [LOG] Max number of nodes per cluster is 33 and the number is 44
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] We will select 267 edges and 1804 tetra
[LOG] Edges from tetra 0 and KDTree 698 with 0 edges in common.
[LOG] Computing n3_to_3 (adjacency) for num 123
[LOG] Computing n4_to_4 (coadjacency) for num 123
[LOG] Computing n0_to_1 for num 123
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n3_to_3 (adjacency) for num 25
[LOG] Computing n4_to_4 (coadjacency) for num 25
[LOG] Computing n0_to_1 for num 25
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n0_to_2 for num 123
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_2 for num 25
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_3 for num 123
[LOG] Computing n0_to_3 for num 25
[LOG] Computing n0_to_4 for num 123
[LOG] Computing n0_to_4 for num 25
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_2 for num 25
[LOG] Computing n1_to_2 for num 123
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Removed 0 subset clusters.
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 17: Created combinatorial complex for file data_137.hdf5
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 46: Created combinatorial complex for file data_371.hdf5
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n1_to_3 for num 123
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_4 for num 123
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n2_to_3 for num 123
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 5 subset clusters.

    [LOG] We Currently have 1660 Tetrahedra.
    [LOG] Generated 46 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.652173913043478
    [LOG] Max number of nodes per cluster is 65 and the number is 14
[LOG] Computing n2_to_4 for num 123
[LOG] Process 46: Calculating Neighbors
[LOG] Loading pickle file data_371.pickle
[LOG] Processing node features for num 371
[LOG] Processing edge features for num 371
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing tetra features for num 371
[LOG] Computing n3_to_4 for num 123
[LOG] Global feature for num 123
[LOG] Global feature for num 123
[LOG] Saving tensor x_0_123.pt
[LOG] Saving tensor x_1_123.pt
[LOG] Saving tensor x_2_123.pt
[LOG] Saving tensor x_3_123.pt
[LOG] Saving tensor x_4_123.pt
[LOG] Saving tensor n0_to_0_123.pt
[LOG] Saving tensor n1_to_1_123.pt
[LOG] Saving tensor n2_to_2_123.pt
[LOG] Saving tensor n3_to_3_123.pt
[LOG] Saving tensor n4_to_4_123.pt
[LOG] We will select 193 edges and 1660 tetra
[LOG] Edges from tetra 0 and KDTree 193 with 0 edges in common.
[LOG] Saving tensor n0_to_1_123.pt
[LOG] Processing cluster features for num 371
[LOG] Saving tensor n0_to_2_123.pt
[LOG] Saving tensor n0_to_3_123.pt
[LOG] Saving tensor n0_to_4_123.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n1_to_2_123.pt
[LOG] Saving tensor n1_to_3_123.pt
[LOG] Processing cluster features for num 371
[LOG] Saving tensor n1_to_4_123.pt
[LOG] Saving tensor n2_to_3_123.pt
[LOG] Saving tensor n2_to_4_123.pt
[LOG] Processing adjacency and incidence matrices for num 371
[LOG] Computing n0_to_0 for num 371
[LOG] Saving tensor n3_to_4_123.pt
[LOG] Saving tensor global_feature_123.pt
[LOG] Process 15: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_1 for num 371
[LOG] Process 17: Calculating Neighbors
[LOG] Loading pickle file data_137.pickle
[LOG] Processing node features for num 137
[LOG] Processing edge features for num 137
[LOG] Computing n1_to_3 for num 25
[LOG] Computing n1_to_4 for num 25
[LOG] Processing tetra features for num 137
[LOG] Computing n2_to_3 for num 25
[LOG] Computing n2_to_2 (adjacency) for num 371
[LOG] Computing n2_to_4 for num 25
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_4 for num 25
[LOG] Global feature for num 25
[LOG] Global feature for num 25
[LOG] Saving tensor x_0_25.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor x_1_25.pt
[LOG] Saving tensor x_2_25.pt
[LOG] Saving tensor x_3_25.pt
[LOG] Saving tensor x_4_25.pt
[LOG] Saving tensor n0_to_0_25.pt
[LOG] Processing cluster features for num 137
[LOG] Saving tensor n1_to_1_25.pt
[LOG] Saving tensor n2_to_2_25.pt
[LOG] Saving tensor n3_to_3_25.pt
[LOG] Saving tensor n4_to_4_25.pt
[LOG] Saving tensor n0_to_1_25.pt
[LOG] Saving tensor n0_to_2_25.pt
[LOG] Saving tensor n0_to_3_25.pt
[LOG] Saving tensor n0_to_4_25.pt
[LOG] Saving tensor n1_to_2_25.pt
[LOG] Saving tensor n1_to_3_25.pt
[LOG] Computing n3_to_3 (adjacency) for num 371
[LOG] Processing cluster features for num 137
[LOG] Saving tensor n1_to_4_25.pt
[LOG] Computing n4_to_4 (coadjacency) for num 371
[LOG] Saving tensor n2_to_3_25.pt
[LOG] Computing n0_to_1 for num 371
[LOG] Saving tensor n2_to_4_25.pt
[LOG] Saving tensor n3_to_4_25.pt
[LOG] Saving tensor global_feature_25.pt
[LOG] Process 3: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 80: Created combinatorial complex for file data_641.hdf5
[LOG] Computing n0_to_2 for num 371
[LOG] Processing adjacency and incidence matrices for num 137
[LOG] Computing n0_to_0 for num 137
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_1 for num 137
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Removed 3 subset clusters.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_3 for num 371
[LOG] Computing n0_to_4 for num 371
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_2 for num 371
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Process 80: Calculating Neighbors
[LOG] Loading pickle file data_641.pickle
[LOG] Processing node features for num 641
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Processing edge features for num 641
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_3 for num 371
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_4 for num 371
[LOG] Computing n2_to_3 for num 371
[LOG] Process 0: Created combinatorial complex for file data_3.hdf5
[LOG] Processing tetra features for num 641
[LOG] Computing n2_to_4 for num 371
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_4 for num 371
[LOG] Global feature for num 371
[LOG] Global feature for num 371
[LOG] Saving tensor x_0_371.pt
[LOG] Saving tensor x_1_371.pt
[LOG] Saving tensor x_2_371.pt
[LOG] Saving tensor x_3_371.pt
[LOG] Saving tensor x_4_371.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n0_to_0_371.pt
[LOG] Saving tensor n1_to_1_371.pt
[LOG] Saving tensor n2_to_2_371.pt
[LOG] Saving tensor n3_to_3_371.pt
[LOG] Saving tensor n4_to_4_371.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n0_to_1_371.pt
[LOG] Saving tensor n0_to_2_371.pt
[LOG] Saving tensor n0_to_3_371.pt
[LOG] Process 0: Calculating Neighbors
[LOG] Loading pickle file data_3.pickle
[LOG] Processing node features for num 3
[LOG] Saving tensor n0_to_4_371.pt
[LOG] Processing edge features for num 3
[LOG] Saving tensor n1_to_2_371.pt
[LOG] Saving tensor n1_to_3_371.pt
[LOG] Saving tensor n1_to_4_371.pt
[LOG] Saving tensor n2_to_3_371.pt
[LOG] Saving tensor n2_to_4_371.pt
[LOG] Processing tetra features for num 3
[LOG] Saving tensor n3_to_4_371.pt
[LOG] Saving tensor global_feature_371.pt
[LOG] Process 46: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing cluster features for num 641
[LOG] Processing cluster features for num 3
[LOG] Processing cluster features for num 3
[LOG] Processing adjacency and incidence matrices for num 3
[LOG] Computing n0_to_0 for num 3
[LOG] Processing cluster features for num 641
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n1_to_1 for num 3
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Processing adjacency and incidence matrices for num 641
[LOG] Computing n0_to_0 for num 641
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 3
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n4_to_4 (coadjacency) for num 3
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] GENERATED TETRA
[LOG] Computing n0_to_1 for num 3
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n0_to_2 for num 3
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_3 for num 3
[LOG] Computing n0_to_4 for num 3
[LOG] Computing n1_to_2 for num 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n1_to_3 for num 3
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n1_to_4 for num 3
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n2_to_3 for num 3
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n1_to_1 for num 641
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n2_to_4 for num 3
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n3_to_4 for num 3
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Global feature for num 3
[LOG] Global feature for num 3
[LOG] Saving tensor x_0_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor x_1_3.pt
[LOG] Saving tensor x_2_3.pt
[LOG] Saving tensor x_3_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor x_4_3.pt
[LOG] Saving tensor n0_to_0_3.pt
[LOG] Saving tensor n1_to_1_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n2_to_2_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n3_to_3_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n4_to_4_3.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n0_to_1_3.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n0_to_2_3.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n0_to_3_3.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n0_to_4_3.pt
[LOG] Saving tensor n1_to_2_3.pt
[LOG] Saving tensor n1_to_3_3.pt
[LOG] Saving tensor n1_to_4_3.pt
[LOG] Saving tensor n2_to_3_3.pt
[LOG] Saving tensor n2_to_4_3.pt
[LOG] Saving tensor n3_to_4_3.pt
[LOG] Saving tensor global_feature_3.pt
[LOG] Process 0: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_2 (adjacency) for num 137
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 568 Tetrahedra.
    [LOG] Generated 29 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.655172413793103
    [LOG] Max number of nodes per cluster is 28 and the number is 23
[LOG] We will select 40 edges and 568 tetra
[LOG] Edges from tetra 0 and KDTree 2208 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 0 subset clusters.
[LOG] Process 2: Created combinatorial complex for file data_20.hdf5
[LOG] Process 2: Calculating Neighbors
[LOG] Loading pickle file data_20.pickle
[LOG] Processing node features for num 20
[LOG] Processing edge features for num 20
[LOG] Processing tetra features for num 20
[LOG] Processing cluster features for num 20
[LOG] GENERATED TETRA
[LOG] Processing cluster features for num 20
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing adjacency and incidence matrices for num 20
[LOG] Computing n0_to_0 for num 20
[LOG] Computing n1_to_1 for num 20
[LOG] Computing n2_to_2 (adjacency) for num 20
[LOG] Computing n3_to_3 (adjacency) for num 20
[LOG] Computing n4_to_4 (coadjacency) for num 20
[LOG] Computing n0_to_1 for num 20
[LOG] Computing n0_to_2 for num 20
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_3 for num 20
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_4 for num 20
[LOG] Computing n1_to_2 for num 20
[LOG] Computing n1_to_3 for num 20
[LOG] Computing n1_to_4 for num 20
[LOG] Computing n2_to_3 for num 20
[LOG] Computing n2_to_4 for num 20
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_4 for num 20
[LOG] Global feature for num 20
[LOG] Global feature for num 20
[LOG] Saving tensor x_0_20.pt
[LOG] Saving tensor x_1_20.pt
[LOG] Saving tensor x_2_20.pt
[LOG] Saving tensor x_3_20.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor x_4_20.pt
[LOG] Saving tensor n0_to_0_20.pt
[LOG] Saving tensor n1_to_1_20.pt
[LOG] Saving tensor n2_to_2_20.pt
[LOG] Saving tensor n3_to_3_20.pt
[LOG] Saving tensor n4_to_4_20.pt
[LOG] Saving tensor n0_to_1_20.pt
[LOG] Saving tensor n0_to_2_20.pt
[LOG] Saving tensor n0_to_3_20.pt
[LOG] Saving tensor n0_to_4_20.pt
[LOG] Saving tensor n1_to_2_20.pt
[LOG] Saving tensor n1_to_3_20.pt
[LOG] Saving tensor n1_to_4_20.pt
[LOG] Saving tensor n2_to_3_20.pt
[LOG] Saving tensor n2_to_4_20.pt
[LOG] Saving tensor n3_to_4_20.pt
[LOG] Saving tensor global_feature_20.pt
[LOG] Process 2: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 963 Tetrahedra.
    [LOG] Generated 33 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.272727272727273
    [LOG] Max number of nodes per cluster is 47 and the number is 28
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] We will select 151 edges and 963 tetra
[LOG] Edges from tetra 0 and KDTree 1467 with 0 edges in common.
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Computing n3_to_3 (adjacency) for num 137
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n4_to_4 (coadjacency) for num 137
[LOG] Computing n0_to_1 for num 137
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 21: Created combinatorial complex for file data_173.hdf5
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_2 for num 137
[LOG] Calculating for cell ranks 3 and 4
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 2767 Tetrahedra.
    [LOG] Generated 71 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.690140845070422
    [LOG] Max number of nodes per cluster is 84 and the number is 67
[LOG] Process 21: Calculating Neighbors
[LOG] Loading pickle file data_173.pickle
[LOG] Processing node features for num 173
[LOG] Processing edge features for num 173
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing tetra features for num 173
[LOG] Processing cluster features for num 173
[LOG] Processing cluster features for num 173
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Processing adjacency and incidence matrices for num 173
[LOG] Computing n0_to_0 for num 173
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n1_to_1 for num 173
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] We will select 609 edges and 2767 tetra
[LOG] Edges from tetra 0 and KDTree 4450 with 0 edges in common.
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1713 Tetrahedra.
    [LOG] Generated 43 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.72093023255814
    [LOG] Max number of nodes per cluster is 88 and the number is 36
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 173
[LOG] Computing n3_to_3 (adjacency) for num 173
[LOG] Computing n4_to_4 (coadjacency) for num 173
[LOG] Computing n0_to_1 for num 173
[LOG] We will select 270 edges and 1713 tetra
[LOG] Edges from tetra 0 and KDTree 2452 with 0 edges in common.
[LOG] Computing n0_to_2 for num 173
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n0_to_3 for num 173
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_4 for num 173
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n1_to_2 for num 173
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n1_to_3 for num 173
[LOG] Computing n1_to_4 for num 173
[LOG] Computing n2_to_3 for num 173
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_4 for num 173
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n3_to_4 for num 173
[LOG] Global feature for num 173
[LOG] Global feature for num 173
[LOG] Saving tensor x_0_173.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor x_1_173.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor x_2_173.pt
[LOG] Saving tensor x_3_173.pt
[LOG] Saving tensor x_4_173.pt
[LOG] Saving tensor n0_to_0_173.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n1_to_1_173.pt
[LOG] Saving tensor n2_to_2_173.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n3_to_3_173.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n4_to_4_173.pt
[LOG] Saving tensor n0_to_1_173.pt
[LOG] Saving tensor n0_to_2_173.pt
[LOG] Saving tensor n0_to_3_173.pt
[LOG] Saving tensor n0_to_4_173.pt
[LOG] Saving tensor n1_to_2_173.pt
[LOG] Saving tensor n1_to_3_173.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2096 Tetrahedra.
    [LOG] Generated 69 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.652173913043478
    [LOG] Max number of nodes per cluster is 41 and the number is 32
[LOG] Saving tensor n1_to_4_173.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n2_to_3_173.pt
[LOG] Saving tensor n2_to_4_173.pt
[LOG] Saving tensor n3_to_4_173.pt
[LOG] Saving tensor global_feature_173.pt
[LOG] Process 21: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 1 subset clusters.
[LOG] We will select 282 edges and 2096 tetra
[LOG] Edges from tetra 0 and KDTree 1838 with 0 edges in common.
[LOG] Process 79: Created combinatorial complex for file data_635.hdf5
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 940 Tetrahedra.
    [LOG] Generated 25 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.84
    [LOG] Max number of nodes per cluster is 41 and the number is 2
[LOG] We will select 96 edges and 940 tetra
[LOG] Edges from tetra 0 and KDTree 306 with 0 edges in common.
[LOG] Process 79: Calculating Neighbors
[LOG] Loading pickle file data_635.pickle
[LOG] Processing node features for num 635
[LOG] Processing edge features for num 635
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing tetra features for num 635
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 635
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 635
[LOG] Processing adjacency and incidence matrices for num 635
[LOG] Computing n0_to_0 for num 635
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 0 subset clusters.
[LOG] Computing n1_to_1 for num 635
[LOG] Computing n0_to_3 for num 137
[LOG] Process 97: Created combinatorial complex for file data_779.hdf5
[LOG] Computing n0_to_4 for num 137
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_2 for num 137
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_2 (adjacency) for num 635
[LOG] Process 97: Calculating Neighbors
[LOG] Loading pickle file data_779.pickle
[LOG] Processing node features for num 779
[LOG] Processing edge features for num 779
[LOG] Processing tetra features for num 779
[LOG] Processing cluster features for num 779
[LOG] Processing cluster features for num 779
[LOG] Processing adjacency and incidence matrices for num 779
[LOG] Computing n0_to_0 for num 779
[LOG] Removed 2 subset clusters.
[LOG] Computing n1_to_1 for num 779
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_2 (adjacency) for num 779
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_3 (adjacency) for num 779
[LOG] Computing n4_to_4 (coadjacency) for num 779
[LOG] Computing n0_to_1 for num 779
[LOG] Computing n0_to_2 for num 779
[LOG] Computing n2_to_2 (adjacency) for num 641
[LOG] Process 91: Created combinatorial complex for file data_731.hdf5
[LOG] Computing n3_to_3 (adjacency) for num 635
[LOG] Computing n4_to_4 (coadjacency) for num 635
[LOG] Computing n0_to_1 for num 635
[LOG] Computing n0_to_2 for num 635
[LOG] Computing n0_to_3 for num 779
[LOG] Computing n0_to_4 for num 779
[LOG] Computing n1_to_2 for num 779
[LOG] Computing n1_to_3 for num 779
[LOG] Computing n1_to_4 for num 779
[LOG] Computing n2_to_3 for num 779
[LOG] Computing n2_to_4 for num 779
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_4 for num 779
[LOG] Global feature for num 779
[LOG] Global feature for num 779
[LOG] Saving tensor x_0_779.pt
[LOG] Process 45: Created combinatorial complex for file data_362.hdf5
[LOG] Calculating for cell ranks 1 and 2
[LOG] GENERATED TETRA
[LOG] Process 91: Calculating Neighbors
[LOG] Loading pickle file data_731.pickle
[LOG] Processing node features for num 731
[LOG] Saving tensor x_1_779.pt
[LOG] Saving tensor x_2_779.pt
[LOG] Saving tensor x_3_779.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor x_4_779.pt
[LOG] Saving tensor n0_to_0_779.pt
[LOG] Processing edge features for num 731
[LOG] Saving tensor n1_to_1_779.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n2_to_2_779.pt
[LOG] Saving tensor n3_to_3_779.pt
[LOG] Saving tensor n4_to_4_779.pt
[LOG] Saving tensor n0_to_1_779.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n0_to_2_779.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing tetra features for num 731
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n0_to_3_779.pt
[LOG] Saving tensor n0_to_4_779.pt
[LOG] Saving tensor n1_to_2_779.pt
[LOG] Saving tensor n1_to_3_779.pt
[LOG] Saving tensor n1_to_4_779.pt
[LOG] Processing cluster features for num 731
[LOG] Saving tensor n2_to_3_779.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing cluster features for num 731
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing adjacency and incidence matrices for num 731
[LOG] Computing n0_to_0 for num 731
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 45: Calculating Neighbors
[LOG] Loading pickle file data_362.pickle
[LOG] Processing node features for num 362
[LOG] Processing edge features for num 362
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n2_to_4_779.pt
[LOG] Computing n0_to_3 for num 635
[LOG] Saving tensor n3_to_4_779.pt
[LOG] Saving tensor global_feature_779.pt
[LOG] Computing n1_to_1 for num 731
[LOG] Process 97: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing tetra features for num 362
[LOG] Computing n0_to_4 for num 635
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_2 for num 635
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing cluster features for num 362
[LOG] Processing cluster features for num 362
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing adjacency and incidence matrices for num 362
[LOG] Computing n0_to_0 for num 362
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n1_to_3 for num 635
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n1_to_4 for num 635
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n2_to_2 (adjacency) for num 731
[LOG] Computing n2_to_3 for num 635
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n2_to_4 for num 635
[LOG] Computing n1_to_1 for num 362
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n3_to_4 for num 635
[LOG] Global feature for num 635
[LOG] Global feature for num 635
[LOG] Saving tensor x_0_635.pt
[LOG] Saving tensor x_1_635.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor x_2_635.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor x_3_635.pt
[LOG] Saving tensor x_4_635.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n0_to_0_635.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n1_to_1_635.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1661 Tetrahedra.
    [LOG] Generated 50 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.6
    [LOG] Max number of nodes per cluster is 28 and the number is 3
[LOG] Saving tensor n2_to_2_635.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n3_to_3_635.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n3_to_3 (adjacency) for num 731
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n4_to_4_635.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n4_to_4 (coadjacency) for num 731
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_1 for num 731
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n0_to_1_635.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] We will select 147 edges and 1661 tetra
[LOG] Edges from tetra 0 and KDTree 537 with 0 edges in common.
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n0_to_2_635.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n0_to_3_635.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n0_to_4_635.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n1_to_2_635.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n0_to_2 for num 731
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n1_to_3_635.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n1_to_4_635.pt
[LOG] Saving tensor n2_to_3_635.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n2_to_4_635.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n3_to_4_635.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor global_feature_635.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Process 79: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_3 for num 137
[LOG] Computing n1_to_4 for num 137
[LOG] Computing n2_to_2 (adjacency) for num 362
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1065 Tetrahedra.
    [LOG] Generated 41 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.439024390243903
    [LOG] Max number of nodes per cluster is 72 and the number is 16
[LOG] Computing n2_to_3 for num 137
[LOG] Calculating for cell ranks 1 and 1
[LOG] We will select 186 edges and 1065 tetra
[LOG] Edges from tetra 0 and KDTree 2333 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_4 for num 137
[LOG] Computing n3_to_3 (adjacency) for num 641
[LOG] Computing n4_to_4 (coadjacency) for num 641
[LOG] Computing n0_to_1 for num 641
[LOG] Removed 1 subset clusters.
[LOG] Computing n3_to_4 for num 137
[LOG] Calculating for cell ranks 0 and 3
[LOG] Global feature for num 137
[LOG] Global feature for num 137
[LOG] Saving tensor x_0_137.pt
[LOG] Saving tensor x_1_137.pt
[LOG] Saving tensor x_2_137.pt
[LOG] Saving tensor x_3_137.pt
[LOG] Saving tensor x_4_137.pt
[LOG] Saving tensor n0_to_0_137.pt
[LOG] Saving tensor n1_to_1_137.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n2_to_2_137.pt
[LOG] Saving tensor n3_to_3_137.pt
[LOG] Saving tensor n4_to_4_137.pt
[LOG] Saving tensor n0_to_1_137.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 95: Created combinatorial complex for file data_762.hdf5
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_3 (adjacency) for num 362
[LOG] Computing n4_to_4 (coadjacency) for num 362
[LOG] Computing n0_to_1 for num 362
[LOG] Process 28: Created combinatorial complex for file data_229.hdf5
[LOG] Saving tensor n0_to_2_137.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n0_to_3_137.pt
[LOG] Saving tensor n0_to_4_137.pt
[LOG] Saving tensor n1_to_2_137.pt
[LOG] Saving tensor n1_to_3_137.pt
[LOG] Computing n0_to_2 for num 362
[LOG] Saving tensor n1_to_4_137.pt
[LOG] Saving tensor n2_to_3_137.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n2_to_4_137.pt
[LOG] Saving tensor n3_to_4_137.pt
[LOG] Saving tensor global_feature_137.pt
[LOG] Process 17: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 731
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1064 Tetrahedra.
    [LOG] Generated 32 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.5625
    [LOG] Max number of nodes per cluster is 44 and the number is 11
[LOG] Computing n0_to_4 for num 731
[LOG] Process 28: Calculating Neighbors
[LOG] Loading pickle file data_229.pickle
[LOG] Processing node features for num 229
[LOG] Processing edge features for num 229
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Process 95: Calculating Neighbors
[LOG] Loading pickle file data_762.pickle
[LOG] Processing node features for num 762
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing edge features for num 762
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Processing tetra features for num 229
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n1_to_2 for num 731
[LOG] We will select 107 edges and 1064 tetra
[LOG] Edges from tetra 0 and KDTree 1630 with 0 edges in common.
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Processing tetra features for num 762
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Processing cluster features for num 229
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Processing cluster features for num 229
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Processing cluster features for num 762
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 229
[LOG] Computing n0_to_0 for num 229
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Processing cluster features for num 762
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 762
[LOG] Computing n0_to_0 for num 762
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_2 for num 641
[LOG] Computing n1_to_1 for num 762
[LOG] Computing n1_to_1 for num 229
[LOG] Computing n2_to_2 (adjacency) for num 229
[LOG] Computing n1_to_3 for num 731
[LOG] Computing n2_to_2 (adjacency) for num 762
[LOG] Computing n1_to_4 for num 731
[LOG] Computing n2_to_3 for num 731
[LOG] Computing n3_to_3 (adjacency) for num 229
[LOG] Computing n4_to_4 (coadjacency) for num 229
[LOG] Computing n0_to_1 for num 229
[LOG] Computing n2_to_4 for num 731
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_2 for num 229
[LOG] Computing n3_to_4 for num 731
[LOG] Global feature for num 731
[LOG] Global feature for num 731
[LOG] Saving tensor x_0_731.pt
[LOG] Saving tensor x_1_731.pt
[LOG] Saving tensor x_2_731.pt
[LOG] Saving tensor x_3_731.pt
[LOG] Saving tensor x_4_731.pt
[LOG] Saving tensor n0_to_0_731.pt
[LOG] Computing n3_to_3 (adjacency) for num 762
[LOG] Saving tensor n1_to_1_731.pt
[LOG] Saving tensor n2_to_2_731.pt
[LOG] Computing n4_to_4 (coadjacency) for num 762
[LOG] Computing n0_to_1 for num 762
[LOG] Saving tensor n3_to_3_731.pt
[LOG] Saving tensor n4_to_4_731.pt
[LOG] Saving tensor n0_to_1_731.pt
[LOG] Saving tensor n0_to_2_731.pt
[LOG] Saving tensor n0_to_3_731.pt
[LOG] Computing n0_to_2 for num 762
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n0_to_4_731.pt
[LOG] Saving tensor n1_to_2_731.pt
[LOG] Computing n0_to_3 for num 362
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 31: Created combinatorial complex for file data_252.hdf5
[LOG] Saving tensor n1_to_3_731.pt
[LOG] Saving tensor n1_to_4_731.pt
[LOG] Saving tensor n2_to_3_731.pt
[LOG] Saving tensor n2_to_4_731.pt
[LOG] Saving tensor n3_to_4_731.pt
[LOG] Computing n0_to_4 for num 362
[LOG] Saving tensor global_feature_731.pt
[LOG] Process 91: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_2 for num 362
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 31: Calculating Neighbors
[LOG] Loading pickle file data_252.pickle
[LOG] Processing node features for num 252
[LOG] Processing edge features for num 252
[LOG] Processing tetra features for num 252
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing cluster features for num 252
[LOG] Processing cluster features for num 252
[LOG] Processing adjacency and incidence matrices for num 252
[LOG] Computing n0_to_0 for num 252
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_1 for num 252
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_3 for num 762
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_4 for num 762
[LOG] Computing n0_to_3 for num 229
[LOG] Computing n1_to_2 for num 762
[LOG] Computing n2_to_2 (adjacency) for num 252
[LOG] Computing n0_to_4 for num 229
[LOG] Computing n1_to_2 for num 229
[LOG] Computing n3_to_3 (adjacency) for num 252
[LOG] Computing n4_to_4 (coadjacency) for num 252
[LOG] Computing n0_to_1 for num 252
[LOG] Computing n1_to_3 for num 762
[LOG] Computing n1_to_4 for num 762
[LOG] Computing n2_to_3 for num 762
[LOG] Computing n0_to_2 for num 252
[LOG] Computing n1_to_3 for num 229
[LOG] Computing n1_to_4 for num 229
[LOG] Computing n2_to_3 for num 229
[LOG] Computing n2_to_4 for num 762
[LOG] Computing n2_to_4 for num 229
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_4 for num 229
[LOG] Global feature for num 229
[LOG] Global feature for num 229
[LOG] Saving tensor x_0_229.pt
[LOG] Computing n3_to_4 for num 762
[LOG] Saving tensor x_1_229.pt
[LOG] Global feature for num 762
[LOG] Global feature for num 762
[LOG] Saving tensor x_0_762.pt
[LOG] Saving tensor x_2_229.pt
[LOG] Saving tensor x_3_229.pt
[LOG] Saving tensor x_4_229.pt
[LOG] Saving tensor x_1_762.pt
[LOG] Saving tensor n0_to_0_229.pt
[LOG] Saving tensor x_2_762.pt
[LOG] Saving tensor x_3_762.pt
[LOG] Saving tensor n1_to_1_229.pt
[LOG] Computing n1_to_3 for num 362
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_4 for num 362
[LOG] Saving tensor x_4_762.pt
[LOG] Saving tensor n0_to_0_762.pt
[LOG] Computing n2_to_3 for num 362
[LOG] Saving tensor n2_to_2_229.pt
[LOG] Saving tensor n1_to_1_762.pt
[LOG] Saving tensor n2_to_2_762.pt
[LOG] Saving tensor n3_to_3_229.pt
[LOG] Saving tensor n4_to_4_229.pt
[LOG] Saving tensor n3_to_3_762.pt
[LOG] Saving tensor n0_to_1_229.pt
[LOG] Saving tensor n4_to_4_762.pt
[LOG] Saving tensor n0_to_2_229.pt
[LOG] Saving tensor n0_to_3_229.pt
[LOG] Saving tensor n0_to_1_762.pt
[LOG] Saving tensor n0_to_4_229.pt
[LOG] Saving tensor n1_to_2_229.pt
[LOG] Saving tensor n0_to_2_762.pt
[LOG] Saving tensor n1_to_3_229.pt
[LOG] Saving tensor n0_to_3_762.pt
[LOG] Saving tensor n1_to_4_229.pt
[LOG] Saving tensor n0_to_4_762.pt
[LOG] Saving tensor n2_to_3_229.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n1_to_2_762.pt
[LOG] Computing n2_to_4 for num 362
[LOG] Saving tensor n2_to_4_229.pt
[LOG] Saving tensor n1_to_3_762.pt
[LOG] Saving tensor n3_to_4_229.pt
[LOG] Saving tensor global_feature_229.pt
[LOG] Saving tensor n1_to_4_762.pt
[LOG] Process 28: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n2_to_3_762.pt
[LOG] Saving tensor n2_to_4_762.pt
[LOG] Saving tensor n3_to_4_762.pt
[LOG] Saving tensor global_feature_762.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 95: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 252
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_4 for num 252
[LOG] Computing n3_to_4 for num 362
[LOG] Global feature for num 362
[LOG] Global feature for num 362
[LOG] Saving tensor x_0_362.pt
[LOG] Saving tensor x_1_362.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor x_2_362.pt
[LOG] Saving tensor x_3_362.pt
[LOG] Saving tensor x_4_362.pt
[LOG] Saving tensor n0_to_0_362.pt
[LOG] Computing n1_to_2 for num 252
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n1_to_1_362.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n2_to_2_362.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n3_to_3_362.pt
[LOG] Saving tensor n4_to_4_362.pt
[LOG] Saving tensor n0_to_1_362.pt
[LOG] Computing n1_to_3 for num 252
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n1_to_4 for num 252
[LOG] Computing n2_to_3 for num 252
[LOG] GENERATED TETRA
[LOG] Saving tensor n0_to_2_362.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n0_to_3_362.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n2_to_4 for num 252
[LOG] Saving tensor n0_to_4_362.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n1_to_2_362.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n1_to_3_362.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n3_to_4 for num 252
[LOG] Global feature for num 252
[LOG] Global feature for num 252
[LOG] Saving tensor x_0_252.pt
[LOG] Saving tensor n1_to_4_362.pt
[LOG] Saving tensor x_1_252.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n2_to_3_362.pt
[LOG] Saving tensor x_2_252.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor x_3_252.pt
[LOG] Saving tensor n2_to_4_362.pt
[LOG] Saving tensor x_4_252.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n0_to_0_252.pt
[LOG] Saving tensor n3_to_4_362.pt
[LOG] Saving tensor n1_to_1_252.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor global_feature_362.pt
[LOG] Process 45: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n2_to_2_252.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n3_to_3_252.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n4_to_4_252.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n0_to_1_252.pt
[LOG] Saving tensor n0_to_2_252.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n0_to_3_252.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n0_to_4_252.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n1_to_2_252.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n1_to_3_252.pt
[LOG] Saving tensor n1_to_4_252.pt
[LOG] Saving tensor n2_to_3_252.pt
[LOG] Saving tensor n2_to_4_252.pt
[LOG] Saving tensor n3_to_4_252.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor global_feature_252.pt
[LOG] Process 31: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_3 for num 641
[LOG] Computing n0_to_4 for num 641
[LOG] Computing n1_to_2 for num 641
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1167 Tetrahedra.
    [LOG] Generated 47 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.404255319148936
    [LOG] Max number of nodes per cluster is 41 and the number is 23
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] We will select 182 edges and 1167 tetra
[LOG] Edges from tetra 0 and KDTree 521 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 112: Created combinatorial complex for file data_891.hdf5
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 112: Calculating Neighbors
[LOG] Loading pickle file data_891.pickle
[LOG] Processing node features for num 891
[LOG] Processing edge features for num 891
[LOG] Processing tetra features for num 891
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 839 Tetrahedra.
    [LOG] Generated 28 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.714285714285714
    [LOG] Max number of nodes per cluster is 69 and the number is 27
[LOG] Processing cluster features for num 891
[LOG] Processing cluster features for num 891
[LOG] Processing adjacency and incidence matrices for num 891
[LOG] Computing n0_to_0 for num 891
[LOG] Calculating for cell ranks 0 and 2
[LOG] We will select 61 edges and 839 tetra
[LOG] Edges from tetra 0 and KDTree 342 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_1 for num 891
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 3902 Tetrahedra.
    [LOG] Generated 114 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.921052631578947
    [LOG] Max number of nodes per cluster is 70 and the number is 112
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_2 (adjacency) for num 891
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_3 (adjacency) for num 891
[LOG] Computing n4_to_4 (coadjacency) for num 891
[LOG] Computing n0_to_1 for num 891
[LOG] Computing n0_to_2 for num 891
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 0 subset clusters.
[LOG] We will select 2253 edges and 3902 tetra
[LOG] Edges from tetra 0 and KDTree 2253 with 0 edges in common.
[LOG] Process 105: Created combinatorial complex for file data_842.hdf5
[LOG] Computing n0_to_3 for num 891
[LOG] Computing n0_to_4 for num 891
[LOG] Computing n1_to_2 for num 891
[LOG] Process 105: Calculating Neighbors
[LOG] Loading pickle file data_842.pickle
[LOG] Processing node features for num 842
[LOG] Processing edge features for num 842
[LOG] Processing tetra features for num 842
[LOG] Processing cluster features for num 842
[LOG] Processing cluster features for num 842
[LOG] Processing adjacency and incidence matrices for num 842
[LOG] Computing n0_to_0 for num 842
[LOG] Computing n1_to_3 for num 891
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_4 for num 891
[LOG] Computing n1_to_1 for num 842
[LOG] Computing n2_to_3 for num 891
[LOG] Computing n2_to_2 (adjacency) for num 842
[LOG] Computing n2_to_4 for num 891
[LOG] Computing n3_to_4 for num 891
[LOG] Calculating for cell ranks 2 and 4
[LOG] Global feature for num 891
[LOG] Global feature for num 891
[LOG] Saving tensor x_0_891.pt
[LOG] Saving tensor x_1_891.pt
[LOG] Saving tensor x_2_891.pt
[LOG] Saving tensor x_3_891.pt
[LOG] Saving tensor x_4_891.pt
[LOG] Saving tensor n0_to_0_891.pt
[LOG] Saving tensor n1_to_1_891.pt
[LOG] Computing n3_to_3 (adjacency) for num 842
[LOG] Saving tensor n2_to_2_891.pt
[LOG] Computing n4_to_4 (coadjacency) for num 842
[LOG] Computing n0_to_1 for num 842
[LOG] Saving tensor n3_to_3_891.pt
[LOG] Saving tensor n4_to_4_891.pt
[LOG] Computing n0_to_2 for num 842
[LOG] Saving tensor n0_to_1_891.pt
[LOG] Saving tensor n0_to_2_891.pt
[LOG] Saving tensor n0_to_3_891.pt
[LOG] Saving tensor n0_to_4_891.pt
[LOG] Saving tensor n1_to_2_891.pt
[LOG] Saving tensor n1_to_3_891.pt
[LOG] Saving tensor n1_to_4_891.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n2_to_3_891.pt
[LOG] Saving tensor n2_to_4_891.pt
[LOG] Saving tensor n3_to_4_891.pt
[LOG] Saving tensor global_feature_891.pt
[LOG] Process 112: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 842
[LOG] Computing n0_to_4 for num 842
[LOG] Computing n1_to_2 for num 842
[LOG] Computing n1_to_3 for num 842
[LOG] Computing n1_to_4 for num 842
[LOG] Computing n2_to_3 for num 842
[LOG] Computing n2_to_4 for num 842
[LOG] Computing n3_to_4 for num 842
[LOG] Global feature for num 842
[LOG] Global feature for num 842
[LOG] Saving tensor x_0_842.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor x_1_842.pt
[LOG] Saving tensor x_2_842.pt
[LOG] Saving tensor x_3_842.pt
[LOG] Saving tensor x_4_842.pt
[LOG] Saving tensor n0_to_0_842.pt
[LOG] Saving tensor n1_to_1_842.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n2_to_2_842.pt
[LOG] Saving tensor n3_to_3_842.pt
[LOG] Saving tensor n4_to_4_842.pt
[LOG] Saving tensor n0_to_1_842.pt
[LOG] Saving tensor n0_to_2_842.pt
[LOG] Saving tensor n0_to_3_842.pt
[LOG] Saving tensor n0_to_4_842.pt
[LOG] Saving tensor n1_to_2_842.pt
[LOG] Saving tensor n1_to_3_842.pt
[LOG] Saving tensor n1_to_4_842.pt
[LOG] Saving tensor n2_to_3_842.pt
[LOG] Saving tensor n2_to_4_842.pt
[LOG] Saving tensor n3_to_4_842.pt
[LOG] Saving tensor global_feature_842.pt
[LOG] Process 105: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_3 for num 641
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 2 subset clusters.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n1_to_4 for num 641
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n2_to_3 for num 641
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_4 for num 641
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n3_to_4 for num 641
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Global feature for num 641
[LOG] Global feature for num 641
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor x_0_641.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor x_1_641.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor x_2_641.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor x_3_641.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor x_4_641.pt
[LOG] Saving tensor n0_to_0_641.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n1_to_1_641.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n2_to_2_641.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n3_to_3_641.pt
[LOG] Saving tensor n4_to_4_641.pt
[LOG] Saving tensor n0_to_1_641.pt
[LOG] Process 96: Created combinatorial complex for file data_769.hdf5
[LOG] Saving tensor n0_to_2_641.pt
[LOG] Saving tensor n0_to_3_641.pt
[LOG] Saving tensor n0_to_4_641.pt
[LOG] Saving tensor n1_to_2_641.pt
[LOG] Saving tensor n1_to_3_641.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n1_to_4_641.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n2_to_3_641.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n2_to_4_641.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n3_to_4_641.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor global_feature_641.pt
[LOG] Process 80: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor euclidean_0_to_3.pt

    [LOG] We Currently have 3016 Tetrahedra.
    [LOG] Generated 108 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.333333333333334
    [LOG] Max number of nodes per cluster is 29 and the number is 38
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] We will select 537 edges and 3016 tetra
[LOG] Edges from tetra 0 and KDTree 537 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 96: Calculating Neighbors
[LOG] Loading pickle file data_769.pickle
[LOG] Processing node features for num 769
[LOG] Processing edge features for num 769
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Processing tetra features for num 769
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 769
[LOG] Processing cluster features for num 769
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing adjacency and incidence matrices for num 769
[LOG] Computing n0_to_0 for num 769
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 3075 Tetrahedra.
    [LOG] Generated 91 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.296703296703297
    [LOG] Max number of nodes per cluster is 62 and the number is 15
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 977 Tetrahedra.
    [LOG] Generated 29 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.862068965517242
    [LOG] Max number of nodes per cluster is 98 and the number is 23
[LOG] We will select 164 edges and 977 tetra
[LOG] Edges from tetra 0 and KDTree 4762 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 3
[LOG] We will select 899 edges and 3075 tetra
[LOG] Edges from tetra 0 and KDTree 2027 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1618 Tetrahedra.
    [LOG] Generated 40 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 19.975
    [LOG] Max number of nodes per cluster is 138 and the number is 0
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] GENERATED TETRA
[LOG] We will select 456 edges and 1618 tetra
[LOG] Edges from tetra 0 and KDTree 4754 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_1 for num 769
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1524 Tetrahedra.
    [LOG] Generated 47 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.27659574468085
    [LOG] Max number of nodes per cluster is 55 and the number is 34
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 0 subset clusters.
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1315 Tetrahedra.
    [LOG] Generated 25 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.2
    [LOG] Max number of nodes per cluster is 78 and the number is 14
[LOG] Process 24: Created combinatorial complex for file data_194.hdf5
[LOG] Calculating for cell ranks 1 and 1
[LOG] We will select 91 edges and 1315 tetra
[LOG] Edges from tetra 0 and KDTree 205 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 100: Created combinatorial complex for file data_804.hdf5
[LOG] Process 24: Calculating Neighbors
[LOG] Loading pickle file data_194.pickle
[LOG] Processing node features for num 194
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 100: Calculating Neighbors
[LOG] Loading pickle file data_804.pickle
[LOG] Processing node features for num 804
[LOG] Processing edge features for num 194
[LOG] Processing edge features for num 804
[LOG] Processing tetra features for num 804
[LOG] Processing tetra features for num 194
[LOG] Processing cluster features for num 804
[LOG] Processing cluster features for num 804
[LOG] Processing cluster features for num 194
[LOG] Processing adjacency and incidence matrices for num 804
[LOG] Computing n0_to_0 for num 804
[LOG] Processing cluster features for num 194
[LOG] Processing adjacency and incidence matrices for num 194
[LOG] Computing n0_to_0 for num 194
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_1 for num 804
[LOG] Process 72: Created combinatorial complex for file data_577.hdf5
[LOG] Computing n2_to_2 (adjacency) for num 804
[LOG] Removed 0 subset clusters.
[LOG] Computing n3_to_3 (adjacency) for num 804
[LOG] Computing n4_to_4 (coadjacency) for num 804
[LOG] Computing n0_to_1 for num 804
[LOG] We will select 249 edges and 1524 tetra
[LOG] Edges from tetra 0 and KDTree 269 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_2 for num 804
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 69: Created combinatorial complex for file data_556.hdf5
[LOG] Computing n1_to_1 for num 194
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 69: Calculating Neighbors
[LOG] Loading pickle file data_556.pickle
[LOG] Processing node features for num 556
[LOG] Process 72: Calculating Neighbors
[LOG] Loading pickle file data_577.pickle
[LOG] Processing node features for num 577
[LOG] Processing edge features for num 556
[LOG] Processing edge features for num 577
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 82: Created combinatorial complex for file data_658.hdf5
[LOG] Processing tetra features for num 556
[LOG] Processing tetra features for num 577
[LOG] Processing cluster features for num 556
[LOG] Processing cluster features for num 556
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Processing adjacency and incidence matrices for num 556
[LOG] Computing n0_to_0 for num 556
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Computing n1_to_1 for num 556
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n2_to_2 (adjacency) for num 194
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Processing cluster features for num 577
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n2_to_2 (adjacency) for num 556
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Processing cluster features for num 577
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1998 Tetrahedra.
    [LOG] Generated 56 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.732142857142858
    [LOG] Max number of nodes per cluster is 51 and the number is 54
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing adjacency and incidence matrices for num 577
[LOG] Computing n0_to_0 for num 577
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 556
[LOG] Computing n4_to_4 (coadjacency) for num 556
[LOG] Computing n0_to_1 for num 556
[LOG] Computing n0_to_2 for num 556
[LOG] Computing n1_to_1 for num 577
[LOG] Process 82: Calculating Neighbors
[LOG] Loading pickle file data_658.pickle
[LOG] Processing node features for num 658
[LOG] We will select 284 edges and 1998 tetra
[LOG] Edges from tetra 0 and KDTree 3215 with 0 edges in common.
[LOG] Computing n0_to_3 for num 804
[LOG] Computing n3_to_3 (adjacency) for num 194
[LOG] Processing edge features for num 658
[LOG] Computing n4_to_4 (coadjacency) for num 194
[LOG] Computing n0_to_1 for num 194
[LOG] Computing n0_to_4 for num 804
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_2 for num 804
[LOG] Processing tetra features for num 658
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_3 for num 804
[LOG] Computing n1_to_4 for num 804
[LOG] Computing n2_to_3 for num 804
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_4 for num 804
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n3_to_4 for num 804
[LOG] Global feature for num 804
[LOG] Global feature for num 804
[LOG] Saving tensor x_0_804.pt
[LOG] Saving tensor x_1_804.pt
[LOG] Saving tensor x_2_804.pt
[LOG] Saving tensor x_3_804.pt
[LOG] Saving tensor x_4_804.pt
[LOG] Saving tensor n0_to_0_804.pt
[LOG] Saving tensor n1_to_1_804.pt
[LOG] Saving tensor n2_to_2_804.pt
[LOG] Processing cluster features for num 658
[LOG] Computing n0_to_3 for num 556
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n3_to_3_804.pt
[LOG] Saving tensor n4_to_4_804.pt
[LOG] Saving tensor n0_to_1_804.pt
[LOG] Computing n0_to_4 for num 556
[LOG] Saving tensor n0_to_2_804.pt
[LOG] Saving tensor n0_to_3_804.pt
[LOG] Saving tensor n0_to_4_804.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_2 for num 556
[LOG] Saving tensor n1_to_2_804.pt
[LOG] Saving tensor n1_to_3_804.pt
[LOG] Saving tensor n1_to_4_804.pt
[LOG] Saving tensor n2_to_3_804.pt
[LOG] Saving tensor n2_to_4_804.pt
[LOG] Saving tensor n3_to_4_804.pt
[LOG] Saving tensor global_feature_804.pt
[LOG] Processing cluster features for num 658
[LOG] Process 100: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_2 for num 194
[LOG] Removed 2 subset clusters.
[LOG] Computing n1_to_3 for num 556
[LOG] Computing n1_to_4 for num 556
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n2_to_3 for num 556
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Processing adjacency and incidence matrices for num 658
[LOG] Computing n0_to_0 for num 658
[LOG] Computing n2_to_4 for num 556
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n3_to_4 for num 556
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Global feature for num 556
[LOG] Global feature for num 556
[LOG] Saving tensor x_0_556.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor x_1_556.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor x_2_556.pt
[LOG] Saving tensor x_3_556.pt
[LOG] Saving tensor x_4_556.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n0_to_0_556.pt
[LOG] Saving tensor n1_to_1_556.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n2_to_2_556.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n3_to_3_556.pt
[LOG] Saving tensor n4_to_4_556.pt
[LOG] Saving tensor n0_to_1_556.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n0_to_2_556.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n0_to_3_556.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n0_to_4_556.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n1_to_2_556.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n1_to_3_556.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n1_to_4_556.pt
[LOG] Saving tensor n2_to_3_556.pt
[LOG] Saving tensor n2_to_4_556.pt
[LOG] Saving tensor n3_to_4_556.pt
[LOG] Saving tensor global_feature_556.pt
[LOG] Process 69: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 76: Created combinatorial complex for file data_611.hdf5
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_2 (adjacency) for num 577
[LOG] Computing n1_to_1 for num 658
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 76: Calculating Neighbors
[LOG] Loading pickle file data_611.pickle
[LOG] Processing node features for num 611
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing edge features for num 611
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing tetra features for num 611
[LOG] Processing cluster features for num 611
[LOG] Removed 0 subset clusters.
[LOG] Processing cluster features for num 611
[LOG] Processing adjacency and incidence matrices for num 611
[LOG] Computing n0_to_0 for num 611
[LOG] Computing n1_to_1 for num 611
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_2 (adjacency) for num 611
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 20: Created combinatorial complex for file data_162.hdf5
[LOG] Computing n3_to_3 (adjacency) for num 611
[LOG] Computing n4_to_4 (coadjacency) for num 611
[LOG] Computing n0_to_1 for num 611
[LOG] GENERATED TETRA
[LOG] Computing n0_to_2 for num 611
[LOG] Process 20: Calculating Neighbors
[LOG] Loading pickle file data_162.pickle
[LOG] Processing node features for num 162
[LOG] Processing edge features for num 162
[LOG] Processing tetra features for num 162
[LOG] Computing n3_to_3 (adjacency) for num 577
[LOG] Computing n4_to_4 (coadjacency) for num 577
[LOG] Computing n0_to_3 for num 194
[LOG] Computing n0_to_1 for num 577
[LOG] Processing cluster features for num 162
[LOG] Computing n0_to_4 for num 194
[LOG] Processing cluster features for num 162
[LOG] Computing n0_to_3 for num 611
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_2 for num 194
[LOG] Computing n0_to_4 for num 611
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_2 for num 577
[LOG] Processing adjacency and incidence matrices for num 162
[LOG] Computing n0_to_0 for num 162
[LOG] Computing n1_to_2 for num 611
[LOG] Computing n1_to_1 for num 162
[LOG] Computing n1_to_3 for num 611
[LOG] Computing n1_to_4 for num 611
[LOG] Computing n2_to_3 for num 611
[LOG] Computing n2_to_4 for num 611
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_2 (adjacency) for num 658
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_4 for num 611
[LOG] Calculating for cell ranks 2 and 2
[LOG] Global feature for num 611
[LOG] Global feature for num 611
[LOG] Saving tensor x_0_611.pt
[LOG] Saving tensor x_1_611.pt
[LOG] Saving tensor x_2_611.pt
[LOG] Saving tensor x_3_611.pt
[LOG] Saving tensor x_4_611.pt
[LOG] Saving tensor n0_to_0_611.pt
[LOG] Saving tensor n1_to_1_611.pt
[LOG] Saving tensor n2_to_2_611.pt
[LOG] Saving tensor n3_to_3_611.pt
[LOG] Computing n1_to_3 for num 194
[LOG] Saving tensor n4_to_4_611.pt
[LOG] Saving tensor n0_to_1_611.pt
[LOG] Saving tensor n0_to_2_611.pt
[LOG] Computing n1_to_4 for num 194
[LOG] Saving tensor n0_to_3_611.pt
[LOG] Saving tensor n0_to_4_611.pt
[LOG] Computing n2_to_3 for num 194
[LOG] Saving tensor n1_to_2_611.pt
[LOG] Saving tensor n1_to_3_611.pt
[LOG] Saving tensor n1_to_4_611.pt
[LOG] Saving tensor n2_to_3_611.pt
[LOG] Computing n2_to_2 (adjacency) for num 769
[LOG] Saving tensor n2_to_4_611.pt
[LOG] Saving tensor n3_to_4_611.pt
[LOG] Saving tensor global_feature_611.pt
[LOG] Process 76: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n2_to_4 for num 194
[LOG] Computing n2_to_2 (adjacency) for num 162
[LOG] Computing n3_to_4 for num 194
[LOG] Global feature for num 194
[LOG] Global feature for num 194
[LOG] Saving tensor x_0_194.pt
[LOG] Saving tensor x_1_194.pt
[LOG] Saving tensor x_2_194.pt
[LOG] Saving tensor x_3_194.pt
[LOG] Saving tensor x_4_194.pt
[LOG] Saving tensor n0_to_0_194.pt
[LOG] Saving tensor n1_to_1_194.pt
[LOG] Saving tensor n2_to_2_194.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n3_to_3_194.pt
[LOG] Saving tensor n4_to_4_194.pt
[LOG] Saving tensor n0_to_1_194.pt
[LOG] Saving tensor n0_to_2_194.pt
[LOG] Saving tensor n0_to_3_194.pt
[LOG] Saving tensor n0_to_4_194.pt
[LOG] Saving tensor n1_to_2_194.pt
[LOG] Saving tensor n1_to_3_194.pt
[LOG] Saving tensor n1_to_4_194.pt
[LOG] Saving tensor n2_to_3_194.pt
[LOG] Saving tensor n2_to_4_194.pt
[LOG] Saving tensor n3_to_4_194.pt
[LOG] Saving tensor global_feature_194.pt
[LOG] Process 24: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1284 Tetrahedra.
    [LOG] Generated 60 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.783333333333333
    [LOG] Max number of nodes per cluster is 30 and the number is 42
[LOG] Computing n3_to_3 (adjacency) for num 162
[LOG] Computing n4_to_4 (coadjacency) for num 162
[LOG] Computing n0_to_1 for num 162
[LOG] We will select 281 edges and 1284 tetra
[LOG] Edges from tetra 0 and KDTree 1033 with 0 edges in common.
[LOG] Computing n0_to_3 for num 577
[LOG] GENERATED TETRA
[LOG] Computing n0_to_4 for num 577
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_2 for num 162
[LOG] Computing n1_to_2 for num 577
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n3_to_3 (adjacency) for num 658
[LOG] Computing n4_to_4 (coadjacency) for num 658
[LOG] Computing n0_to_1 for num 658
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 56: Created combinatorial complex for file data_450.hdf5
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_2 for num 658
[LOG] Computing n1_to_3 for num 577
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_4 for num 577
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_3 for num 577
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n2_to_4 for num 577
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Process 56: Calculating Neighbors
[LOG] Loading pickle file data_450.pickle
[LOG] Processing node features for num 450
[LOG] Processing edge features for num 450
[LOG] Computing n0_to_3 for num 162
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing tetra features for num 450
[LOG] Computing n0_to_4 for num 162
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing cluster features for num 450
[LOG] Computing n1_to_2 for num 162
[LOG] Computing n3_to_4 for num 577
[LOG] Computing n3_to_3 (adjacency) for num 769
[LOG] Global feature for num 577
[LOG] Global feature for num 577
[LOG] Saving tensor x_0_577.pt
[LOG] Computing n4_to_4 (coadjacency) for num 769
[LOG] Processing cluster features for num 450
[LOG] Computing n0_to_1 for num 769
[LOG] Saving tensor x_1_577.pt
[LOG] Saving tensor x_2_577.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor x_3_577.pt
[LOG] Saving tensor x_4_577.pt
[LOG] Saving tensor n0_to_0_577.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Processing adjacency and incidence matrices for num 450
[LOG] Computing n0_to_0 for num 450
[LOG] Saving tensor n1_to_1_577.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n2_to_2_577.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_1 for num 450
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_3 for num 162
[LOG] Computing n1_to_4 for num 162
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n3_to_3_577.pt
[LOG] Computing n2_to_3 for num 162
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n4_to_4_577.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n0_to_1_577.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n0_to_2_577.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n0_to_3_577.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n0_to_4_577.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n1_to_2_577.pt
[LOG] Computing n2_to_4 for num 162
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n1_to_3_577.pt
[LOG] Computing n2_to_2 (adjacency) for num 450
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n1_to_4_577.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n2_to_3_577.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n2_to_4_577.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n3_to_4_577.pt
[LOG] Saving tensor global_feature_577.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Process 72: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n3_to_4 for num 162
[LOG] Global feature for num 162
[LOG] Global feature for num 162
[LOG] Saving tensor x_0_162.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor x_1_162.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor x_2_162.pt
[LOG] Saving tensor x_3_162.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor x_4_162.pt
[LOG] Saving tensor n0_to_0_162.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n1_to_1_162.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n2_to_2_162.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n3_to_3_162.pt
[LOG] Computing n3_to_3 (adjacency) for num 450
[LOG] Saving tensor n4_to_4_162.pt
[LOG] Saving tensor n0_to_1_162.pt
[LOG] Computing n4_to_4 (coadjacency) for num 450
[LOG] Saving tensor n0_to_2_162.pt
[LOG] Computing n0_to_1 for num 450
[LOG] Saving tensor n0_to_3_162.pt
[LOG] Saving tensor n0_to_4_162.pt
[LOG] Saving tensor n1_to_2_162.pt
[LOG] Saving tensor n1_to_3_162.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n1_to_4_162.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n2_to_3_162.pt
[LOG] Saving tensor n2_to_4_162.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n3_to_4_162.pt
[LOG] Saving tensor global_feature_162.pt
[LOG] Process 20: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n0_to_2 for num 450
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n0_to_3 for num 658
[LOG] GENERATED TETRA
[LOG] Computing n0_to_4 for num 658
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n1_to_2 for num 658
[LOG] Computing n0_to_2 for num 769
[LOG] Computing n0_to_3 for num 450
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n0_to_4 for num 450
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n1_to_2 for num 450
[LOG] Calculating for cell ranks 2 and 3
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1229 Tetrahedra.
    [LOG] Generated 45 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.88888888888889
    [LOG] Max number of nodes per cluster is 33 and the number is 43
[LOG] Computing n1_to_3 for num 450
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n1_to_4 for num 450
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] We will select 139 edges and 1229 tetra
[LOG] Edges from tetra 0 and KDTree 928 with 0 edges in common.
[LOG] Computing n2_to_3 for num 450
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_4 for num 450
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_4 for num 450
[LOG] Global feature for num 450
[LOG] Global feature for num 450
[LOG] Saving tensor x_0_450.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor x_1_450.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor x_2_450.pt
[LOG] Saving tensor x_3_450.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor x_4_450.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n0_to_0_450.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n1_to_1_450.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n2_to_2_450.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n3_to_3_450.pt
[LOG] Saving tensor n4_to_4_450.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n0_to_1_450.pt
[LOG] Saving tensor n0_to_2_450.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n0_to_3_450.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n0_to_4_450.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n1_to_2_450.pt
[LOG] Saving tensor n1_to_3_450.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n1_to_4_450.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n2_to_3_450.pt
[LOG] Saving tensor n2_to_4_450.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n3_to_4_450.pt
[LOG] Saving tensor global_feature_450.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Process 56: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 103: Created combinatorial complex for file data_826.hdf5
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_3 for num 658
[LOG] GENERATED TETRA
[LOG] Computing n1_to_4 for num 658
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_3 for num 658
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 1602 Tetrahedra.
    [LOG] Generated 50 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.34
    [LOG] Max number of nodes per cluster is 55 and the number is 27
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 864 Tetrahedra.
    [LOG] Generated 22 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 20.136363636363637
    [LOG] Max number of nodes per cluster is 61 and the number is 11
[LOG] Computing n2_to_4 for num 658
[LOG] We will select 214 edges and 864 tetra
[LOG] Edges from tetra 0 and KDTree 2445 with 0 edges in common.
[LOG] We will select 261 edges and 1602 tetra
[LOG] Edges from tetra 0 and KDTree 1531 with 0 edges in common.
[LOG] Computing n3_to_4 for num 658
[LOG] Calculating for cell ranks 0 and 2
[LOG] Global feature for num 658
[LOG] Global feature for num 658
[LOG] Saving tensor x_0_658.pt
[LOG] Saving tensor x_1_658.pt
[LOG] Saving tensor x_2_658.pt
[LOG] Saving tensor x_3_658.pt
[LOG] Saving tensor x_4_658.pt
[LOG] Saving tensor n0_to_0_658.pt
[LOG] Saving tensor n1_to_1_658.pt
[LOG] Saving tensor n2_to_2_658.pt
[LOG] Saving tensor n3_to_3_658.pt
[LOG] Saving tensor n4_to_4_658.pt
[LOG] Saving tensor n0_to_1_658.pt
[LOG] Saving tensor n0_to_2_658.pt
[LOG] Saving tensor n0_to_3_658.pt
[LOG] Saving tensor n0_to_4_658.pt
[LOG] Saving tensor n1_to_2_658.pt
[LOG] Saving tensor n1_to_3_658.pt
[LOG] Saving tensor n1_to_4_658.pt
[LOG] Saving tensor n2_to_3_658.pt
[LOG] Saving tensor n2_to_4_658.pt
[LOG] Saving tensor n3_to_4_658.pt
[LOG] Saving tensor global_feature_658.pt
[LOG] Process 82: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 29: Created combinatorial complex for file data_234.hdf5
[LOG] Process 103: Calculating Neighbors
[LOG] Loading pickle file data_826.pickle
[LOG] Processing node features for num 826
[LOG] Processing edge features for num 826
[LOG] Processing tetra features for num 826
[LOG] Processing cluster features for num 826
[LOG] Processing cluster features for num 826
[LOG] Removed 0 subset clusters.
[LOG] Processing adjacency and incidence matrices for num 826
[LOG] Computing n0_to_0 for num 826
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_3 for num 769
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_1 for num 826
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_4 for num 769
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_2 (adjacency) for num 826
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_2 for num 769
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 119: Created combinatorial complex for file data_940.hdf5
[LOG] Computing n3_to_3 (adjacency) for num 826
[LOG] Computing n4_to_4 (coadjacency) for num 826
[LOG] Computing n0_to_1 for num 826
[LOG] Computing n0_to_2 for num 826
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 119: Calculating Neighbors
[LOG] Loading pickle file data_940.pickle
[LOG] Processing node features for num 940
[LOG] Processing edge features for num 940
[LOG] Processing tetra features for num 940
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing cluster features for num 940
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing cluster features for num 940
[LOG] Processing adjacency and incidence matrices for num 940
[LOG] Computing n0_to_0 for num 940
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_1 for num 940
[LOG] Process 29: Calculating Neighbors
[LOG] Loading pickle file data_234.pickle
[LOG] Processing node features for num 234
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing edge features for num 234
[LOG] Processing tetra features for num 234
[LOG] Computing n0_to_3 for num 826
[LOG] Processing cluster features for num 234
[LOG] Computing n0_to_4 for num 826
[LOG] Processing cluster features for num 234
[LOG] Processing adjacency and incidence matrices for num 234
[LOG] Computing n0_to_0 for num 234
[LOG] Computing n1_to_2 for num 826
[LOG] Computing n2_to_2 (adjacency) for num 940
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n1_to_3 for num 826
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n1_to_4 for num 826
[LOG] Computing n1_to_1 for num 234
[LOG] Computing n2_to_3 for num 826
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n2_to_4 for num 826
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n3_to_4 for num 826
[LOG] Global feature for num 826
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Global feature for num 826
[LOG] Saving tensor x_0_826.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor x_1_826.pt
[LOG] Saving tensor x_2_826.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor x_3_826.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 234
[LOG] Saving tensor x_4_826.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n0_to_0_826.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n1_to_1_826.pt
[LOG] Saving tensor n2_to_2_826.pt
[LOG] Computing n3_to_3 (adjacency) for num 234
[LOG] Computing n3_to_3 (adjacency) for num 940
[LOG] Computing n4_to_4 (coadjacency) for num 234
[LOG] Computing n0_to_1 for num 234
[LOG] Computing n4_to_4 (coadjacency) for num 940
[LOG] Computing n0_to_1 for num 940
[LOG] Computing n0_to_2 for num 234
[LOG] Computing n0_to_2 for num 940
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n3_to_3_826.pt
[LOG] Saving tensor n4_to_4_826.pt
[LOG] Saving tensor n0_to_1_826.pt
[LOG] Saving tensor n0_to_2_826.pt
[LOG] Saving tensor n0_to_3_826.pt
[LOG] Saving tensor n0_to_4_826.pt
[LOG] Saving tensor n1_to_2_826.pt
[LOG] Saving tensor n1_to_3_826.pt
[LOG] Saving tensor n1_to_4_826.pt
[LOG] Saving tensor n2_to_3_826.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 964 Tetrahedra.
    [LOG] Generated 40 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.425
    [LOG] Max number of nodes per cluster is 63 and the number is 27
[LOG] Saving tensor n2_to_4_826.pt
[LOG] Saving tensor n3_to_4_826.pt
[LOG] Saving tensor global_feature_826.pt
[LOG] Process 103: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] We will select 100 edges and 964 tetra
[LOG] Edges from tetra 0 and KDTree 1934 with 0 edges in common.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_3 for num 234
[LOG] Computing n0_to_4 for num 234
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_2 for num 234
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_3 for num 234
[LOG] Computing n1_to_4 for num 234
[LOG] Computing n2_to_3 for num 234
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n2_to_4 for num 234
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_4 for num 234
[LOG] Global feature for num 234
[LOG] Global feature for num 234
[LOG] Saving tensor x_0_234.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor x_1_234.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor x_2_234.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor x_3_234.pt
[LOG] Saving tensor x_4_234.pt
[LOG] Saving tensor n0_to_0_234.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n1_to_1_234.pt
[LOG] Saving tensor n2_to_2_234.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n3_to_3_234.pt
[LOG] Saving tensor n4_to_4_234.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n0_to_1_234.pt
[LOG] Saving tensor n0_to_2_234.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n0_to_3_234.pt
[LOG] Saving tensor n0_to_4_234.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n1_to_2_234.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n1_to_3_234.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n1_to_4_234.pt
[LOG] Saving tensor n2_to_3_234.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n2_to_4_234.pt
[LOG] Saving tensor n3_to_4_234.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor global_feature_234.pt
[LOG] Computing n0_to_3 for num 940
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Process 29: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n0_to_4 for num 940
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n1_to_2 for num 940
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 89: Created combinatorial complex for file data_717.hdf5
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n1_to_3 for num 940
[LOG] Computing n1_to_4 for num 940
[LOG] Computing n2_to_3 for num 940
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_4 for num 940
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 89: Calculating Neighbors
[LOG] Loading pickle file data_717.pickle
[LOG] Processing node features for num 717
[LOG] Processing edge features for num 717
[LOG] Computing n3_to_4 for num 940
[LOG] Global feature for num 940
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Global feature for num 940
[LOG] Saving tensor x_0_940.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor x_1_940.pt
[LOG] Processing tetra features for num 717
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor x_2_940.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor x_3_940.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor x_4_940.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n0_to_0_940.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n1_to_1_940.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n2_to_2_940.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing cluster features for num 717
[LOG] Saving tensor n3_to_3_940.pt
[LOG] Saving tensor n4_to_4_940.pt
[LOG] Saving tensor n0_to_1_940.pt
[LOG] Processing cluster features for num 717
[LOG] Saving tensor n0_to_2_940.pt
[LOG] Processing adjacency and incidence matrices for num 717
[LOG] Computing n0_to_0 for num 717
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_1 for num 717
[LOG] Computing n2_to_2 (adjacency) for num 717
[LOG] Saving tensor n0_to_3_940.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n0_to_4_940.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n1_to_2_940.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n1_to_3_940.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n1_to_4_940.pt
[LOG] Saving tensor n2_to_3_940.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n2_to_4_940.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n3_to_4_940.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor global_feature_940.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Process 119: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n3_to_3 (adjacency) for num 717
[LOG] GENERATED TETRA
[LOG] Computing n4_to_4 (coadjacency) for num 717
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_1 for num 717
[LOG] Computing n0_to_2 for num 717
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_3 for num 717
[LOG] Computing n0_to_4 for num 717
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2354 Tetrahedra.
    [LOG] Generated 61 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.245901639344263
    [LOG] Max number of nodes per cluster is 47 and the number is 23
[LOG] Computing n1_to_2 for num 717
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_3 for num 717
[LOG] Computing n1_to_4 for num 717
[LOG] Computing n2_to_3 for num 717
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_4 for num 717
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n3_to_4 for num 717
[LOG] Global feature for num 717
[LOG] Calculating for cell ranks 2 and 4
[LOG] Global feature for num 717
[LOG] Saving tensor x_0_717.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] We will select 228 edges and 2354 tetra
[LOG] Edges from tetra 0 and KDTree 228 with 0 edges in common.
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor x_1_717.pt
[LOG] Saving tensor x_2_717.pt
[LOG] Saving tensor x_3_717.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor x_4_717.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 6149 Tetrahedra.
    [LOG] Generated 111 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 18.34234234234234
    [LOG] Max number of nodes per cluster is 137 and the number is 96
[LOG] Saving tensor n0_to_0_717.pt
[LOG] Saving tensor n1_to_1_717.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n2_to_2_717.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n3_to_3_717.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n4_to_4_717.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n0_to_1_717.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n0_to_2_717.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n0_to_3_717.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n0_to_4_717.pt
[LOG] Saving tensor n1_to_2_717.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n1_to_3_717.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n1_to_4_717.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n2_to_3_717.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n2_to_4_717.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n3_to_4_717.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor global_feature_717.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Process 89: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] We will select 1398 edges and 6149 tetra
[LOG] Edges from tetra 0 and KDTree 10187 with 0 edges in common.
[LOG] Computing n1_to_3 for num 769
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_4 for num 769
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_3 for num 769
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_4 for num 769
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_4 for num 769
[LOG] Global feature for num 769
[LOG] Global feature for num 769
[LOG] Saving tensor x_0_769.pt
[LOG] Saving tensor x_1_769.pt
[LOG] Saving tensor x_2_769.pt
[LOG] Saving tensor x_3_769.pt
[LOG] Saving tensor x_4_769.pt
[LOG] Saving tensor n0_to_0_769.pt
[LOG] Saving tensor n1_to_1_769.pt
[LOG] Saving tensor n2_to_2_769.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n3_to_3_769.pt
[LOG] Saving tensor n4_to_4_769.pt
[LOG] Saving tensor n0_to_1_769.pt
[LOG] Saving tensor n0_to_2_769.pt
[LOG] Saving tensor n0_to_3_769.pt
[LOG] Saving tensor n0_to_4_769.pt
[LOG] Saving tensor n1_to_2_769.pt
[LOG] Saving tensor n1_to_3_769.pt
[LOG] Saving tensor n1_to_4_769.pt
[LOG] Saving tensor n2_to_3_769.pt
[LOG] Saving tensor n2_to_4_769.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n3_to_4_769.pt
[LOG] Saving tensor global_feature_769.pt
[LOG] Process 96: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3581 Tetrahedra.
    [LOG] Generated 96 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.010416666666666
    [LOG] Max number of nodes per cluster is 47 and the number is 41
[LOG] Process 33: Created combinatorial complex for file data_265.hdf5
[LOG] Calculating for cell ranks 1 and 1
[LOG] We will select 926 edges and 3581 tetra
[LOG] Edges from tetra 0 and KDTree 926 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1666 Tetrahedra.
    [LOG] Generated 55 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.909090909090908
    [LOG] Max number of nodes per cluster is 38 and the number is 50
[LOG] Process 33: Calculating Neighbors
[LOG] Loading pickle file data_265.pickle
[LOG] Processing node features for num 265
[LOG] Processing edge features for num 265
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing tetra features for num 265
[LOG] We will select 337 edges and 1666 tetra
[LOG] Edges from tetra 0 and KDTree 337 with 0 edges in common.
[LOG] Processing cluster features for num 265
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing cluster features for num 265
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing adjacency and incidence matrices for num 265
[LOG] Computing n0_to_0 for num 265
[LOG] Computing n1_to_1 for num 265
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_2 (adjacency) for num 265
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 265
[LOG] Computing n4_to_4 (coadjacency) for num 265
[LOG] Computing n0_to_1 for num 265
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_2 for num 265
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_3 for num 265
[LOG] Computing n0_to_4 for num 265
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_2 for num 265
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 62: Created combinatorial complex for file data_498.hdf5
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_3 for num 265
[LOG] Computing n1_to_4 for num 265
[LOG] Computing n2_to_3 for num 265
[LOG] Process 62: Calculating Neighbors
[LOG] Loading pickle file data_498.pickle
[LOG] Processing node features for num 498
[LOG] Processing edge features for num 498
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Processing tetra features for num 498
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n2_to_4 for num 265
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing cluster features for num 498
[LOG] Computing n3_to_4 for num 265
[LOG] Processing cluster features for num 498
[LOG] Global feature for num 265
[LOG] Global feature for num 265
[LOG] Saving tensor x_0_265.pt
[LOG] Processing adjacency and incidence matrices for num 498
[LOG] Computing n0_to_0 for num 498
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_1 for num 498
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor x_1_265.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor x_2_265.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor x_3_265.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor x_4_265.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n0_to_0_265.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n1_to_1_265.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n2_to_2_265.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n3_to_3_265.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n4_to_4_265.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n0_to_1_265.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n0_to_2_265.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n0_to_3_265.pt
[LOG] Saving tensor n0_to_4_265.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n1_to_2_265.pt
[LOG] Computing n2_to_2 (adjacency) for num 498
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n1_to_3_265.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n1_to_4_265.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n2_to_3_265.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n2_to_4_265.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n3_to_4_265.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor global_feature_265.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Process 33: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n3_to_3 (adjacency) for num 498
[LOG] Computing n4_to_4 (coadjacency) for num 498
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_1 for num 498
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n0_to_2 for num 498
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 40: Created combinatorial complex for file data_321.hdf5
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_3 for num 498
[LOG] Computing n0_to_4 for num 498
[LOG] Computing n1_to_2 for num 498
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1672 Tetrahedra.
    [LOG] Generated 38 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 20.57894736842105
    [LOG] Max number of nodes per cluster is 81 and the number is 32
[LOG] Calculating for cell ranks 0 and 1
[LOG] We will select 1022 edges and 1672 tetra
[LOG] Edges from tetra 0 and KDTree 3889 with 0 edges in common.
[LOG] Computing n1_to_3 for num 498
[LOG] Computing n1_to_4 for num 498
[LOG] Computing n2_to_3 for num 498
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_4 for num 498
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n3_to_4 for num 498
[LOG] Global feature for num 498
[LOG] Global feature for num 498
[LOG] Saving tensor x_0_498.pt
[LOG] Saving tensor x_1_498.pt
[LOG] Saving tensor x_2_498.pt
[LOG] Saving tensor x_3_498.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor x_4_498.pt
[LOG] Saving tensor n0_to_0_498.pt
[LOG] Saving tensor n1_to_1_498.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n2_to_2_498.pt
[LOG] Process 99: Created combinatorial complex for file data_793.hdf5
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n3_to_3_498.pt
[LOG] Saving tensor n4_to_4_498.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n0_to_1_498.pt
[LOG] Saving tensor n0_to_2_498.pt
[LOG] Saving tensor n0_to_3_498.pt
[LOG] Saving tensor n0_to_4_498.pt
[LOG] Saving tensor n1_to_2_498.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 40: Calculating Neighbors
[LOG] Loading pickle file data_321.pickle
[LOG] Processing node features for num 321
[LOG] Saving tensor n1_to_3_498.pt
[LOG] Saving tensor n1_to_4_498.pt
[LOG] Saving tensor n2_to_3_498.pt
[LOG] Processing edge features for num 321
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing tetra features for num 321
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n2_to_4_498.pt
[LOG] Saving tensor n3_to_4_498.pt
[LOG] Saving tensor global_feature_498.pt
[LOG] Process 62: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 568 Tetrahedra.
    [LOG] Generated 28 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.714285714285715
    [LOG] Max number of nodes per cluster is 62 and the number is 10
[LOG] Process 99: Calculating Neighbors
[LOG] Loading pickle file data_793.pickle
[LOG] Processing node features for num 793
[LOG] Processing edge features for num 793
[LOG] We will select 40 edges and 568 tetra
[LOG] Edges from tetra 0 and KDTree 2773 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing cluster features for num 321
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing tetra features for num 793
[LOG] Removed 0 subset clusters.
[LOG] Processing cluster features for num 321
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.
[LOG] Processing cluster features for num 793
[LOG] Processing cluster features for num 793
[LOG] Process 2: Created combinatorial complex for file data_21.hdf5
[LOG] Processing adjacency and incidence matrices for num 321
[LOG] Computing n0_to_0 for num 321
[LOG] Processing adjacency and incidence matrices for num 793
[LOG] Computing n0_to_0 for num 793
[LOG] Process 2: Calculating Neighbors
[LOG] Loading pickle file data_21.pickle
[LOG] Processing node features for num 21
[LOG] Processing edge features for num 21
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing tetra features for num 21
[LOG] Processing cluster features for num 21
[LOG] Processing cluster features for num 21
[LOG] Process 35: Created combinatorial complex for file data_282.hdf5
[LOG] Processing adjacency and incidence matrices for num 21
[LOG] Computing n0_to_0 for num 21
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_1 for num 793
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_1 for num 21
[LOG] Computing n2_to_2 (adjacency) for num 21
[LOG] Computing n3_to_3 (adjacency) for num 21
[LOG] Computing n4_to_4 (coadjacency) for num 21
[LOG] Computing n0_to_1 for num 21
[LOG] Computing n0_to_2 for num 21
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_3 for num 21
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_4 for num 21
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_2 for num 21
[LOG] Computing n1_to_3 for num 21
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_4 for num 21
[LOG] Computing n2_to_3 for num 21
[LOG] Computing n2_to_4 for num 21
[LOG] Computing n3_to_4 for num 21
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Global feature for num 21
[LOG] Global feature for num 21
[LOG] Saving tensor x_0_21.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor x_1_21.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_1 for num 321
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor x_2_21.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor x_3_21.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor x_4_21.pt
[LOG] Saving tensor n0_to_0_21.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n1_to_1_21.pt
[LOG] Saving tensor n2_to_2_21.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n3_to_3_21.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n4_to_4_21.pt
[LOG] Saving tensor n0_to_1_21.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n0_to_2_21.pt
[LOG] Saving tensor n0_to_3_21.pt
[LOG] Saving tensor n0_to_4_21.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n1_to_2_21.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n1_to_3_21.pt
[LOG] Saving tensor n1_to_4_21.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n2_to_3_21.pt
[LOG] Saving tensor n2_to_4_21.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n3_to_4_21.pt
[LOG] Saving tensor global_feature_21.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Process 2: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Process 35: Calculating Neighbors
[LOG] Loading pickle file data_282.pickle
[LOG] Processing node features for num 282
[LOG] Processing edge features for num 282
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing tetra features for num 282
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Processing cluster features for num 282
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Processing cluster features for num 282
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 282
[LOG] Computing n0_to_0 for num 282
[LOG] Computing n2_to_2 (adjacency) for num 793
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1461 Tetrahedra.
    [LOG] Generated 46 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.652173913043478
    [LOG] Max number of nodes per cluster is 68 and the number is 13
[LOG] We will select 178 edges and 1461 tetra
[LOG] Edges from tetra 0 and KDTree 1148 with 0 edges in common.
[LOG] Computing n1_to_1 for num 282
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2083 Tetrahedra.
    [LOG] Generated 50 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.3
    [LOG] Max number of nodes per cluster is 34 and the number is 49
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n3_to_3 (adjacency) for num 793
[LOG] Computing n4_to_4 (coadjacency) for num 793
[LOG] Computing n0_to_1 for num 793
[LOG] We will select 820 edges and 2083 tetra
[LOG] Edges from tetra 0 and KDTree 1285 with 0 edges in common.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 47: Created combinatorial complex for file data_378.hdf5
[LOG] Computing n2_to_2 (adjacency) for num 282
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n0_to_2 for num 793
[LOG] Calculating for cell ranks 0 and 3
[LOG] GENERATED TETRA
[LOG] Process 47: Calculating Neighbors
[LOG] Loading pickle file data_378.pickle
[LOG] Processing node features for num 378
[LOG] Processing edge features for num 378
[LOG] Computing n3_to_3 (adjacency) for num 282
[LOG] Computing n4_to_4 (coadjacency) for num 282
[LOG] Computing n0_to_1 for num 282
[LOG] Processing tetra features for num 378
[LOG] Processing cluster features for num 378
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Processing cluster features for num 378
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Processing adjacency and incidence matrices for num 378
[LOG] Computing n0_to_0 for num 378
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n1_to_1 for num 378
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1370 Tetrahedra.
    [LOG] Generated 40 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 18.525
    [LOG] Max number of nodes per cluster is 57 and the number is 39
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 378
[LOG] We will select 213 edges and 1370 tetra
[LOG] Edges from tetra 0 and KDTree 3978 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_3 (adjacency) for num 378
[LOG] Computing n0_to_2 for num 282
[LOG] Computing n4_to_4 (coadjacency) for num 378
[LOG] Computing n0_to_1 for num 378
[LOG] Computing n0_to_2 for num 378
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 1 subset clusters.
[LOG] Computing n0_to_3 for num 793
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_4 for num 793
[LOG] Process 8: Created combinatorial complex for file data_66.hdf5
[LOG] Computing n1_to_2 for num 793
[LOG] Computing n0_to_3 for num 378
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_4 for num 378
[LOG] Computing n1_to_2 for num 378
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 11: Created combinatorial complex for file data_90.hdf5
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1966 Tetrahedra.
    [LOG] Generated 44 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.272727272727273
    [LOG] Max number of nodes per cluster is 76 and the number is 26
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_3 for num 378
[LOG] Computing n1_to_4 for num 378
[LOG] Computing n2_to_3 for num 378
[LOG] Computing n2_to_4 for num 378
[LOG] Computing n2_to_2 (adjacency) for num 321
[LOG] Computing n3_to_4 for num 378
[LOG] Global feature for num 378
[LOG] Global feature for num 378
[LOG] Saving tensor x_0_378.pt
[LOG] Saving tensor x_1_378.pt
[LOG] Saving tensor x_2_378.pt
[LOG] Saving tensor x_3_378.pt
[LOG] Saving tensor x_4_378.pt
[LOG] We will select 297 edges and 1966 tetra
[LOG] Edges from tetra 0 and KDTree 1921 with 0 edges in common.
[LOG] Saving tensor n0_to_0_378.pt
[LOG] Saving tensor n1_to_1_378.pt
[LOG] Saving tensor n2_to_2_378.pt
[LOG] Saving tensor n3_to_3_378.pt
[LOG] Saving tensor n4_to_4_378.pt
[LOG] Saving tensor n0_to_1_378.pt
[LOG] Saving tensor n0_to_2_378.pt
[LOG] Saving tensor n0_to_3_378.pt
[LOG] Saving tensor n0_to_4_378.pt
[LOG] Computing n0_to_3 for num 282
[LOG] Saving tensor n1_to_2_378.pt
[LOG] Saving tensor n1_to_3_378.pt
[LOG] Saving tensor n1_to_4_378.pt
[LOG] Computing n0_to_4 for num 282
[LOG] Saving tensor n2_to_3_378.pt
[LOG] Saving tensor n2_to_4_378.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n3_to_4_378.pt
[LOG] Saving tensor global_feature_378.pt
[LOG] Computing n1_to_2 for num 282
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 47: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 8: Calculating Neighbors
[LOG] Loading pickle file data_66.pickle
[LOG] Processing node features for num 66
[LOG] Processing edge features for num 66
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing tetra features for num 66
[LOG] Processing cluster features for num 66
[LOG] Removed 0 subset clusters.
[LOG] Processing cluster features for num 66
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing adjacency and incidence matrices for num 66
[LOG] Computing n0_to_0 for num 66
[LOG] Computing n1_to_3 for num 282
[LOG] Computing n1_to_4 for num 282
[LOG] Computing n2_to_3 for num 282
[LOG] Process 11: Calculating Neighbors
[LOG] Loading pickle file data_90.pickle
[LOG] Processing node features for num 90
[LOG] Computing n1_to_3 for num 793
[LOG] Computing n2_to_4 for num 282
[LOG] Processing edge features for num 90
[LOG] Computing n1_to_4 for num 793
[LOG] Computing n3_to_4 for num 282
[LOG] Global feature for num 282
[LOG] Global feature for num 282
[LOG] Saving tensor x_0_282.pt
[LOG] Saving tensor x_1_282.pt
[LOG] Processing tetra features for num 90
[LOG] Saving tensor x_2_282.pt
[LOG] Saving tensor x_3_282.pt
[LOG] Saving tensor x_4_282.pt
[LOG] Saving tensor n0_to_0_282.pt
[LOG] Computing n1_to_1 for num 66
[LOG] Saving tensor n1_to_1_282.pt
[LOG] Computing n2_to_3 for num 793
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 64: Created combinatorial complex for file data_515.hdf5
[LOG] Saving tensor n2_to_2_282.pt
[LOG] Saving tensor n3_to_3_282.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n4_to_4_282.pt
[LOG] Saving tensor n0_to_1_282.pt
[LOG] Processing cluster features for num 90
[LOG] Saving tensor n0_to_2_282.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n0_to_3_282.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n0_to_4_282.pt
[LOG] Saving tensor n1_to_2_282.pt
[LOG] Saving tensor n1_to_3_282.pt
[LOG] Processing cluster features for num 90
[LOG] Saving tensor n1_to_4_282.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n2_to_3_282.pt
[LOG] Processing adjacency and incidence matrices for num 90
[LOG] Computing n0_to_0 for num 90
[LOG] Computing n2_to_2 (adjacency) for num 66
[LOG] Saving tensor n2_to_4_282.pt
[LOG] Computing n2_to_4 for num 793
[LOG] Saving tensor n3_to_4_282.pt
[LOG] Saving tensor global_feature_282.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 35: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] GENERATED TETRA
[LOG] Computing n1_to_1 for num 90
[LOG] Computing n3_to_4 for num 793
[LOG] Calculating for cell ranks 0 and 2
[LOG] Global feature for num 793
[LOG] Global feature for num 793
[LOG] Saving tensor x_0_793.pt
[LOG] Saving tensor x_1_793.pt
[LOG] Saving tensor x_2_793.pt
[LOG] Saving tensor x_3_793.pt
[LOG] Computing n3_to_3 (adjacency) for num 66
[LOG] Saving tensor x_4_793.pt
[LOG] Saving tensor n0_to_0_793.pt
[LOG] Computing n4_to_4 (coadjacency) for num 66
[LOG] Computing n0_to_1 for num 66
[LOG] Saving tensor n1_to_1_793.pt
[LOG] Saving tensor n2_to_2_793.pt
[LOG] Saving tensor n3_to_3_793.pt
[LOG] Saving tensor n4_to_4_793.pt
[LOG] Saving tensor n0_to_1_793.pt
[LOG] Saving tensor n0_to_2_793.pt
[LOG] Saving tensor n0_to_3_793.pt
[LOG] Saving tensor n0_to_4_793.pt
[LOG] Saving tensor n1_to_2_793.pt
[LOG] Computing n0_to_2 for num 66
[LOG] Saving tensor n1_to_3_793.pt
[LOG] Saving tensor n1_to_4_793.pt
[LOG] Saving tensor n2_to_3_793.pt
[LOG] Saving tensor n2_to_4_793.pt
[LOG] Saving tensor n3_to_4_793.pt
[LOG] Saving tensor global_feature_793.pt
[LOG] Process 99: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2592 Tetrahedra.
    [LOG] Generated 74 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.324324324324325
    [LOG] Max number of nodes per cluster is 37 and the number is 13
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n2_to_2 (adjacency) for num 90
[LOG] Calculating for cell ranks 4 and 4
[LOG] We will select 433 edges and 2592 tetra
[LOG] Edges from tetra 0 and KDTree 433 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 64: Calculating Neighbors
[LOG] Loading pickle file data_515.pickle
[LOG] Processing node features for num 515
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Processing edge features for num 515
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Processing tetra features for num 515
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Processing cluster features for num 515
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Processing cluster features for num 515
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Processing adjacency and incidence matrices for num 515
[LOG] Computing n0_to_0 for num 515
[LOG] Computing n0_to_3 for num 66
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n0_to_4 for num 66
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 90
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n4_to_4 (coadjacency) for num 90
[LOG] Computing n0_to_1 for num 90
[LOG] Computing n1_to_2 for num 66
[LOG] Computing n1_to_1 for num 515
[LOG] Computing n1_to_3 for num 66
[LOG] Computing n1_to_4 for num 66
[LOG] Computing n2_to_3 for num 66
[LOG] Computing n0_to_2 for num 90
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2313 Tetrahedra.
    [LOG] Generated 70 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.642857142857142
    [LOG] Max number of nodes per cluster is 51 and the number is 28
[LOG] Computing n2_to_4 for num 66
[LOG] Computing n3_to_4 for num 66
[LOG] Global feature for num 66
[LOG] Global feature for num 66
[LOG] Saving tensor x_0_66.pt
[LOG] Saving tensor x_1_66.pt
[LOG] Saving tensor x_2_66.pt
[LOG] Saving tensor x_3_66.pt
[LOG] Saving tensor x_4_66.pt
[LOG] Saving tensor n0_to_0_66.pt
[LOG] Saving tensor n1_to_1_66.pt
[LOG] Saving tensor n2_to_2_66.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n3_to_3_66.pt
[LOG] Saving tensor n4_to_4_66.pt
[LOG] Saving tensor n0_to_1_66.pt
[LOG] Computing n2_to_2 (adjacency) for num 515
[LOG] Saving tensor n0_to_2_66.pt
[LOG] Saving tensor n0_to_3_66.pt
[LOG] Saving tensor n0_to_4_66.pt
[LOG] Saving tensor n1_to_2_66.pt
[LOG] Saving tensor n1_to_3_66.pt
[LOG] Saving tensor n1_to_4_66.pt
[LOG] Saving tensor n2_to_3_66.pt
[LOG] Saving tensor n2_to_4_66.pt
[LOG] Saving tensor n3_to_4_66.pt
[LOG] Saving tensor global_feature_66.pt
[LOG] Process 8: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] We will select 156 edges and 2313 tetra
[LOG] Edges from tetra 0 and KDTree 1357 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_3 (adjacency) for num 515
[LOG] Computing n4_to_4 (coadjacency) for num 515
[LOG] Computing n0_to_1 for num 515
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2111 Tetrahedra.
    [LOG] Generated 68 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.102941176470589
    [LOG] Max number of nodes per cluster is 46 and the number is 51
[LOG] Computing n0_to_3 for num 90
[LOG] Computing n0_to_2 for num 515
[LOG] Computing n0_to_4 for num 90
[LOG] Computing n1_to_2 for num 90
[LOG] We will select 516 edges and 2111 tetra
[LOG] Edges from tetra 0 and KDTree 1213 with 0 edges in common.
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1379 Tetrahedra.
    [LOG] Generated 35 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.485714285714286
    [LOG] Max number of nodes per cluster is 36 and the number is 13
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1452 Tetrahedra.
    [LOG] Generated 50 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.72
    [LOG] Max number of nodes per cluster is 60 and the number is 6
[LOG] We will select 326 edges and 1379 tetra
[LOG] Edges from tetra 0 and KDTree 712 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 1
[LOG] We will select 279 edges and 1452 tetra
[LOG] Edges from tetra 0 and KDTree 3637 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_3 for num 90
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_4 for num 90
[LOG] Computing n2_to_3 for num 90
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_4 for num 90
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_3 for num 515
[LOG] Computing n3_to_4 for num 90
[LOG] Global feature for num 90
[LOG] Global feature for num 90
[LOG] Saving tensor x_0_90.pt
[LOG] Saving tensor x_1_90.pt
[LOG] Computing n0_to_4 for num 515
[LOG] Saving tensor x_2_90.pt
[LOG] Saving tensor x_3_90.pt
[LOG] Saving tensor x_4_90.pt
[LOG] Process 75: Created combinatorial complex for file data_603.hdf5
[LOG] Saving tensor n0_to_0_90.pt
[LOG] Saving tensor n1_to_1_90.pt
[LOG] Computing n1_to_2 for num 515
[LOG] Saving tensor n2_to_2_90.pt
[LOG] Saving tensor n3_to_3_90.pt
[LOG] Saving tensor n4_to_4_90.pt
[LOG] Saving tensor n0_to_1_90.pt
[LOG] Saving tensor n0_to_2_90.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n0_to_3_90.pt
[LOG] Saving tensor n0_to_4_90.pt
[LOG] Saving tensor n1_to_2_90.pt
[LOG] Saving tensor n1_to_3_90.pt
[LOG] Saving tensor n1_to_4_90.pt
[LOG] Saving tensor n2_to_3_90.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n2_to_4_90.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n3_to_4_90.pt
[LOG] Saving tensor global_feature_90.pt
[LOG] Process 11: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 12: Created combinatorial complex for file data_99.hdf5
[LOG] Process 54: Created combinatorial complex for file data_434.hdf5
[LOG] Process 75: Calculating Neighbors
[LOG] Loading pickle file data_603.pickle
[LOG] Processing node features for num 603
[LOG] Computing n1_to_3 for num 515
[LOG] Processing edge features for num 603
[LOG] Computing n1_to_4 for num 515
[LOG] Process 12: Calculating Neighbors
[LOG] Loading pickle file data_99.pickle
[LOG] Processing node features for num 99
[LOG] Computing n2_to_3 for num 515
[LOG] Processing edge features for num 99
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing tetra features for num 603
[LOG] Processing tetra features for num 99
[LOG] Computing n2_to_4 for num 515
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing cluster features for num 99
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n3_to_4 for num 515
[LOG] Global feature for num 515
[LOG] Global feature for num 515
[LOG] Saving tensor x_0_515.pt
[LOG] Saving tensor x_1_515.pt
[LOG] Saving tensor x_2_515.pt
[LOG] Processing cluster features for num 603
[LOG] Processing cluster features for num 99
[LOG] Saving tensor x_3_515.pt
[LOG] Saving tensor x_4_515.pt
[LOG] Saving tensor n0_to_0_515.pt
[LOG] Saving tensor n1_to_1_515.pt
[LOG] Process 58: Created combinatorial complex for file data_466.hdf5
[LOG] Saving tensor n2_to_2_515.pt
[LOG] Processing adjacency and incidence matrices for num 99
[LOG] Computing n0_to_0 for num 99
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing cluster features for num 603
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n3_to_3_515.pt
[LOG] Saving tensor n4_to_4_515.pt
[LOG] Saving tensor n0_to_1_515.pt
[LOG] Process 54: Calculating Neighbors
[LOG] Loading pickle file data_434.pickle
[LOG] Processing node features for num 434
[LOG] Saving tensor n0_to_2_515.pt
[LOG] Processing adjacency and incidence matrices for num 603
[LOG] Computing n0_to_0 for num 603
[LOG] Processing edge features for num 434
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n0_to_3_515.pt
[LOG] Computing n1_to_1 for num 99
[LOG] Saving tensor n0_to_4_515.pt
[LOG] Saving tensor n1_to_2_515.pt
[LOG] Saving tensor n1_to_3_515.pt
[LOG] Saving tensor n1_to_4_515.pt
[LOG] Saving tensor n2_to_3_515.pt
[LOG] Saving tensor n2_to_4_515.pt
[LOG] Processing tetra features for num 434
[LOG] Saving tensor n3_to_4_515.pt
[LOG] Saving tensor global_feature_515.pt
[LOG] Process 64: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_1 for num 603
[LOG] Processing cluster features for num 434
[LOG] Process 58: Calculating Neighbors
[LOG] Processing cluster features for num 434
[LOG] Loading pickle file data_466.pickle
[LOG] Processing node features for num 466
[LOG] Computing n2_to_2 (adjacency) for num 99
[LOG] Computing n3_to_3 (adjacency) for num 321
[LOG] Processing edge features for num 466
[LOG] Computing n4_to_4 (coadjacency) for num 321
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Processing adjacency and incidence matrices for num 434
[LOG] Computing n0_to_0 for num 434
[LOG] Computing n0_to_1 for num 321
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n2_to_2 (adjacency) for num 603
[LOG] Processing tetra features for num 466
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n1_to_1 for num 434
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 99
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n4_to_4 (coadjacency) for num 99
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n0_to_1 for num 99
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Processing cluster features for num 466
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Processing cluster features for num 466
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n0_to_2 for num 99
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 466
[LOG] Computing n0_to_0 for num 466
[LOG] Process 108: Created combinatorial complex for file data_864.hdf5
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_1 for num 466
[LOG] Process 108: Calculating Neighbors
[LOG] Loading pickle file data_864.pickle
[LOG] Processing node features for num 864
[LOG] Processing edge features for num 864
[LOG] Computing n0_to_3 for num 99
[LOG] Computing n0_to_4 for num 99
[LOG] Processing tetra features for num 864
[LOG] Computing n1_to_2 for num 99
[LOG] Computing n2_to_2 (adjacency) for num 434
[LOG] Processing cluster features for num 864
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_3 (adjacency) for num 603
[LOG] Processing cluster features for num 864
[LOG] Computing n4_to_4 (coadjacency) for num 603
[LOG] Computing n0_to_1 for num 603
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing adjacency and incidence matrices for num 864
[LOG] Computing n0_to_0 for num 864
[LOG] Removed 4 subset clusters.

    [LOG] We Currently have 4094 Tetrahedra.
    [LOG] Generated 125 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.504
    [LOG] Max number of nodes per cluster is 67 and the number is 116
[LOG] Computing n0_to_2 for num 603
[LOG] Computing n1_to_3 for num 99
[LOG] Computing n1_to_4 for num 99
[LOG] Computing n2_to_3 for num 99
[LOG] Computing n2_to_4 for num 99
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n3_to_4 for num 99
[LOG] Global feature for num 99
[LOG] Global feature for num 99
[LOG] Saving tensor x_0_99.pt
[LOG] Saving tensor x_1_99.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor x_2_99.pt
[LOG] Saving tensor x_3_99.pt
[LOG] Saving tensor x_4_99.pt
[LOG] Saving tensor n0_to_0_99.pt
[LOG] Saving tensor n1_to_1_99.pt
[LOG] Saving tensor n2_to_2_99.pt
[LOG] Saving tensor n3_to_3_99.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n4_to_4_99.pt
[LOG] Saving tensor n0_to_1_99.pt
[LOG] Saving tensor n0_to_2_99.pt
[LOG] Saving tensor n0_to_3_99.pt
[LOG] Computing n2_to_2 (adjacency) for num 466
[LOG] Saving tensor n0_to_4_99.pt
[LOG] Saving tensor n1_to_2_99.pt
[LOG] Saving tensor n1_to_3_99.pt
[LOG] Saving tensor n1_to_4_99.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n2_to_3_99.pt
[LOG] Computing n1_to_1 for num 864
[LOG] Saving tensor n2_to_4_99.pt
[LOG] Computing n0_to_2 for num 321
[LOG] Saving tensor n3_to_4_99.pt
[LOG] Saving tensor global_feature_99.pt
[LOG] Process 12: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_2 (adjacency) for num 864
[LOG] We will select 522 edges and 4094 tetra
[LOG] Edges from tetra 0 and KDTree 1844 with 0 edges in common.
[LOG] Computing n3_to_3 (adjacency) for num 434
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n4_to_4 (coadjacency) for num 434
[LOG] Computing n0_to_1 for num 434
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_2 for num 434
[LOG] Computing n3_to_3 (adjacency) for num 864
[LOG] Computing n4_to_4 (coadjacency) for num 864
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_1 for num 864
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 466
[LOG] Computing n4_to_4 (coadjacency) for num 466
[LOG] Computing n0_to_1 for num 466
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_2 for num 864
[LOG] Computing n0_to_2 for num 466
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n0_to_3 for num 603
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n0_to_4 for num 603
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Computing n1_to_2 for num 603
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n0_to_3 for num 434
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n0_to_4 for num 434
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n1_to_2 for num 434
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n1_to_3 for num 603
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n1_to_4 for num 603
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n2_to_3 for num 603
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n2_to_4 for num 603
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_4 for num 603
[LOG] Global feature for num 603
[LOG] Global feature for num 603
[LOG] Saving tensor x_0_603.pt
[LOG] Saving tensor x_1_603.pt
[LOG] Saving tensor x_2_603.pt
[LOG] Saving tensor x_3_603.pt
[LOG] Saving tensor x_4_603.pt
[LOG] Saving tensor n0_to_0_603.pt
[LOG] Saving tensor n1_to_1_603.pt
[LOG] Saving tensor n2_to_2_603.pt
[LOG] Saving tensor n3_to_3_603.pt
[LOG] Saving tensor n4_to_4_603.pt
[LOG] Saving tensor n0_to_1_603.pt
[LOG] Saving tensor n0_to_2_603.pt
[LOG] Saving tensor n0_to_3_603.pt
[LOG] Saving tensor n0_to_4_603.pt
[LOG] Saving tensor n1_to_2_603.pt
[LOG] Saving tensor n1_to_3_603.pt
[LOG] Saving tensor n1_to_4_603.pt
[LOG] Saving tensor n2_to_3_603.pt
[LOG] Saving tensor n2_to_4_603.pt
[LOG] Saving tensor n3_to_4_603.pt
[LOG] Saving tensor global_feature_603.pt
[LOG] Process 75: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_3 for num 434
[LOG] Computing n1_to_4 for num 434
[LOG] Computing n0_to_3 for num 864
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_3 for num 466
[LOG] Computing n2_to_3 for num 434
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_4 for num 466
[LOG] Computing n0_to_4 for num 864
[LOG] Computing n1_to_2 for num 466
[LOG] Computing n2_to_4 for num 434
[LOG] Computing n1_to_2 for num 864
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_4 for num 434
[LOG] Global feature for num 434
[LOG] Global feature for num 434
[LOG] Saving tensor x_0_434.pt
[LOG] Saving tensor x_1_434.pt
[LOG] Saving tensor x_2_434.pt
[LOG] Saving tensor x_3_434.pt
[LOG] Saving tensor x_4_434.pt
[LOG] Saving tensor n0_to_0_434.pt
[LOG] Saving tensor n1_to_1_434.pt
[LOG] Saving tensor n2_to_2_434.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n3_to_3_434.pt
[LOG] Saving tensor n4_to_4_434.pt
[LOG] Computing n1_to_3 for num 864
[LOG] Saving tensor n0_to_1_434.pt
[LOG] Saving tensor n0_to_2_434.pt
[LOG] Computing n1_to_4 for num 864
[LOG] Saving tensor n0_to_3_434.pt
[LOG] Computing n2_to_3 for num 864
[LOG] Saving tensor n0_to_4_434.pt
[LOG] Saving tensor n1_to_2_434.pt
[LOG] Saving tensor n1_to_3_434.pt
[LOG] Saving tensor n1_to_4_434.pt
[LOG] Saving tensor n2_to_3_434.pt
[LOG] Saving tensor n2_to_4_434.pt
[LOG] Saving tensor n3_to_4_434.pt
[LOG] Computing n2_to_4 for num 864
[LOG] Saving tensor global_feature_434.pt
[LOG] Process 54: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n3_to_4 for num 864
[LOG] Global feature for num 864
[LOG] Global feature for num 864
[LOG] Saving tensor x_0_864.pt
[LOG] Saving tensor x_1_864.pt
[LOG] Saving tensor x_2_864.pt
[LOG] Saving tensor x_3_864.pt
[LOG] Saving tensor x_4_864.pt
[LOG] Saving tensor n0_to_0_864.pt
[LOG] Saving tensor n1_to_1_864.pt
[LOG] Saving tensor n2_to_2_864.pt
[LOG] Saving tensor n3_to_3_864.pt
[LOG] Saving tensor n4_to_4_864.pt
[LOG] Saving tensor n0_to_1_864.pt
[LOG] Saving tensor n0_to_2_864.pt
[LOG] Saving tensor n0_to_3_864.pt
[LOG] Saving tensor n0_to_4_864.pt
[LOG] Saving tensor n1_to_2_864.pt
[LOG] Saving tensor n1_to_3_864.pt
[LOG] Saving tensor n1_to_4_864.pt
[LOG] Saving tensor n2_to_3_864.pt
[LOG] Saving tensor n2_to_4_864.pt
[LOG] Saving tensor n3_to_4_864.pt
[LOG] Saving tensor global_feature_864.pt
[LOG] Process 108: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_3 for num 466
[LOG] Computing n1_to_4 for num 466
[LOG] Computing n2_to_3 for num 466
[LOG] Computing n2_to_4 for num 466
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_4 for num 466
[LOG] Global feature for num 466
[LOG] Global feature for num 466
[LOG] Saving tensor x_0_466.pt
[LOG] Saving tensor x_1_466.pt
[LOG] Saving tensor x_2_466.pt
[LOG] Saving tensor x_3_466.pt
[LOG] Saving tensor x_4_466.pt
[LOG] Saving tensor n0_to_0_466.pt
[LOG] Saving tensor n1_to_1_466.pt
[LOG] Saving tensor n2_to_2_466.pt
[LOG] Saving tensor n3_to_3_466.pt
[LOG] Saving tensor n4_to_4_466.pt
[LOG] Saving tensor n0_to_1_466.pt
[LOG] Saving tensor n0_to_2_466.pt
[LOG] Saving tensor n0_to_3_466.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n0_to_4_466.pt
[LOG] Saving tensor n1_to_2_466.pt
[LOG] Saving tensor n1_to_3_466.pt
[LOG] Saving tensor n1_to_4_466.pt
[LOG] Saving tensor n2_to_3_466.pt
[LOG] Saving tensor n2_to_4_466.pt
[LOG] Saving tensor n3_to_4_466.pt
[LOG] Saving tensor global_feature_466.pt
[LOG] Process 58: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 39: Created combinatorial complex for file data_313.hdf5
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 39: Calculating Neighbors
[LOG] Loading pickle file data_313.pickle
[LOG] Processing node features for num 313
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing edge features for num 313
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing tetra features for num 313
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Processing cluster features for num 313
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Processing cluster features for num 313
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1661 Tetrahedra.
    [LOG] Generated 54 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.055555555555555
    [LOG] Max number of nodes per cluster is 30 and the number is 20
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 313
[LOG] Computing n0_to_0 for num 313
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] We will select 147 edges and 1661 tetra
[LOG] Edges from tetra 0 and KDTree 1614 with 0 edges in common.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n1_to_1 for num 313
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1832 Tetrahedra.
    [LOG] Generated 43 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.44186046511628
    [LOG] Max number of nodes per cluster is 42 and the number is 17
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] We will select 246 edges and 1832 tetra
[LOG] Edges from tetra 0 and KDTree 246 with 0 edges in common.
[LOG] Removed 3 subset clusters.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n2_to_2 (adjacency) for num 313
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 95: Created combinatorial complex for file data_763.hdf5
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Process 95: Calculating Neighbors
[LOG] Loading pickle file data_763.pickle
[LOG] Processing node features for num 763
[LOG] Processing edge features for num 763
[LOG] Computing n0_to_3 for num 321
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing tetra features for num 763
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing cluster features for num 763
[LOG] Processing cluster features for num 763
[LOG] Computing n0_to_4 for num 321
[LOG] Processing adjacency and incidence matrices for num 763
[LOG] Computing n0_to_0 for num 763
[LOG] Computing n1_to_1 for num 763
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n1_to_2 for num 321
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 763
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 763
[LOG] Computing n4_to_4 (coadjacency) for num 763
[LOG] Computing n0_to_1 for num 763
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_2 for num 763
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_3 for num 763
[LOG] Computing n0_to_4 for num 763
[LOG] Computing n1_to_2 for num 763
[LOG] Computing n1_to_3 for num 763
[LOG] Computing n1_to_4 for num 763
[LOG] Computing n2_to_3 for num 763
[LOG] Process 102: Created combinatorial complex for file data_817.hdf5
[LOG] Computing n2_to_4 for num 763
[LOG] Computing n3_to_4 for num 763
[LOG] Global feature for num 763
[LOG] Global feature for num 763
[LOG] Saving tensor x_0_763.pt
[LOG] Saving tensor x_1_763.pt
[LOG] Saving tensor x_2_763.pt
[LOG] Saving tensor x_3_763.pt
[LOG] Saving tensor x_4_763.pt
[LOG] Saving tensor n0_to_0_763.pt
[LOG] Saving tensor n1_to_1_763.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n2_to_2_763.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n3_to_3_763.pt
[LOG] Saving tensor n4_to_4_763.pt
[LOG] Saving tensor n0_to_1_763.pt
[LOG] Saving tensor n0_to_2_763.pt
[LOG] Saving tensor n0_to_3_763.pt
[LOG] Saving tensor n0_to_4_763.pt
[LOG] Saving tensor n1_to_2_763.pt
[LOG] Saving tensor n1_to_3_763.pt
[LOG] Process 102: Calculating Neighbors
[LOG] Loading pickle file data_817.pickle
[LOG] Processing node features for num 817
[LOG] Saving tensor n1_to_4_763.pt
[LOG] Processing edge features for num 817
[LOG] Saving tensor n2_to_3_763.pt
[LOG] Saving tensor n2_to_4_763.pt
[LOG] Saving tensor n3_to_4_763.pt
[LOG] Processing tetra features for num 817
[LOG] Saving tensor global_feature_763.pt
[LOG] Process 95: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 817
[LOG] Processing cluster features for num 817
[LOG] Processing adjacency and incidence matrices for num 817
[LOG] Computing n0_to_0 for num 817
[LOG] Computing n1_to_1 for num 817
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n3_to_3 (adjacency) for num 313
[LOG] Computing n4_to_4 (coadjacency) for num 313
[LOG] Computing n0_to_1 for num 313
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_2 (adjacency) for num 817
[LOG] Computing n0_to_2 for num 313
[LOG] Calculating for cell ranks 2 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 817
[LOG] Computing n4_to_4 (coadjacency) for num 817
[LOG] Computing n0_to_1 for num 817
[LOG] Computing n0_to_2 for num 817
[LOG] Calculating for cell ranks 0 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 1631 Tetrahedra.
    [LOG] Generated 41 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.585365853658537
    [LOG] Max number of nodes per cluster is 53 and the number is 13
[LOG] Computing n0_to_3 for num 817
[LOG] Computing n0_to_4 for num 817
[LOG] Computing n1_to_2 for num 817
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] We will select 272 edges and 1631 tetra
[LOG] Edges from tetra 0 and KDTree 272 with 0 edges in common.
[LOG] Computing n1_to_3 for num 817
[LOG] Computing n1_to_4 for num 817
[LOG] Computing n2_to_3 for num 817
[LOG] Computing n2_to_4 for num 817
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_4 for num 817
[LOG] Global feature for num 817
[LOG] Global feature for num 817
[LOG] Saving tensor x_0_817.pt
[LOG] Saving tensor x_1_817.pt
[LOG] Saving tensor x_2_817.pt
[LOG] Saving tensor x_3_817.pt
[LOG] Saving tensor x_4_817.pt
[LOG] Saving tensor n0_to_0_817.pt
[LOG] Saving tensor n1_to_1_817.pt
[LOG] Saving tensor n2_to_2_817.pt
[LOG] Saving tensor n3_to_3_817.pt
[LOG] Saving tensor n4_to_4_817.pt
[LOG] Saving tensor n0_to_1_817.pt
[LOG] Saving tensor n0_to_2_817.pt
[LOG] Saving tensor n0_to_3_817.pt
[LOG] Saving tensor n0_to_4_817.pt
[LOG] Saving tensor n1_to_2_817.pt
[LOG] Saving tensor n1_to_3_817.pt
[LOG] Saving tensor n1_to_4_817.pt
[LOG] Saving tensor n2_to_3_817.pt
[LOG] Saving tensor n2_to_4_817.pt
[LOG] Saving tensor n3_to_4_817.pt
[LOG] Saving tensor global_feature_817.pt
[LOG] Process 102: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 940 Tetrahedra.
    [LOG] Generated 32 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.40625
    [LOG] Max number of nodes per cluster is 55 and the number is 22
[LOG] Removed 0 subset clusters.
[LOG] We will select 96 edges and 940 tetra
[LOG] Edges from tetra 0 and KDTree 2049 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1711 Tetrahedra.
    [LOG] Generated 58 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.637931034482758
    [LOG] Max number of nodes per cluster is 45 and the number is 55
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n0_to_3 for num 313
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Process 25: Created combinatorial complex for file data_201.hdf5
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Removed 0 subset clusters.
[LOG] We will select 267 edges and 1711 tetra
[LOG] Edges from tetra 0 and KDTree 308 with 0 edges in common.
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n1_to_3 for num 321
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n0_to_4 for num 313
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_4 for num 321
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_2 for num 313
[LOG] Process 97: Created combinatorial complex for file data_780.hdf5
[LOG] Computing n2_to_3 for num 321
[LOG] GENERATED TETRA
[LOG] Process 25: Calculating Neighbors
[LOG] Loading pickle file data_201.pickle
[LOG] Processing node features for num 201
[LOG] Processing edge features for num 201
[LOG] Processing tetra features for num 201
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 97: Calculating Neighbors
[LOG] Loading pickle file data_780.pickle
[LOG] Processing node features for num 780
[LOG] Processing cluster features for num 201
[LOG] Processing edge features for num 780
[LOG] Processing cluster features for num 201
[LOG] Processing tetra features for num 780
[LOG] Processing adjacency and incidence matrices for num 201
[LOG] Computing n0_to_0 for num 201
[LOG] Processing cluster features for num 780
[LOG] Computing n1_to_1 for num 201
[LOG] Processing cluster features for num 780
[LOG] Processing adjacency and incidence matrices for num 780
[LOG] Computing n0_to_0 for num 780
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_4 for num 321
[LOG] Computing n1_to_1 for num 780
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_2 (adjacency) for num 780
[LOG] Computing n2_to_2 (adjacency) for num 201
[LOG] Computing n3_to_3 (adjacency) for num 780
[LOG] Computing n4_to_4 (coadjacency) for num 780
[LOG] Computing n0_to_1 for num 780
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_2 for num 780
[LOG] Calculating for cell ranks 0 and 3
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1360 Tetrahedra.
    [LOG] Generated 31 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.709677419354838
    [LOG] Max number of nodes per cluster is 66 and the number is 14
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_3 (adjacency) for num 201
[LOG] Computing n4_to_4 (coadjacency) for num 201
[LOG] Computing n3_to_4 for num 321
[LOG] Computing n0_to_1 for num 201
[LOG] Global feature for num 321
[LOG] Global feature for num 321
[LOG] Saving tensor x_0_321.pt
[LOG] We will select 635 edges and 1360 tetra
[LOG] Edges from tetra 0 and KDTree 635 with 0 edges in common.
[LOG] Saving tensor x_1_321.pt
[LOG] Saving tensor x_2_321.pt
[LOG] Saving tensor x_3_321.pt
[LOG] Saving tensor x_4_321.pt
[LOG] Saving tensor n0_to_0_321.pt
[LOG] Computing n0_to_2 for num 201
[LOG] Saving tensor n1_to_1_321.pt
[LOG] Saving tensor n2_to_2_321.pt
[LOG] Computing n1_to_3 for num 313
[LOG] Computing n1_to_4 for num 313
[LOG] Computing n2_to_3 for num 313
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_3 for num 201
[LOG] Computing n0_to_4 for num 201
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1372 Tetrahedra.
    [LOG] Generated 43 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.55813953488372
    [LOG] Max number of nodes per cluster is 45 and the number is 7
[LOG] Saving tensor n3_to_3_321.pt
[LOG] Computing n1_to_2 for num 201
[LOG] Saving tensor n4_to_4_321.pt
[LOG] Computing n0_to_3 for num 780
[LOG] Saving tensor n0_to_1_321.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n0_to_2_321.pt
[LOG] Saving tensor n0_to_3_321.pt
[LOG] Saving tensor n0_to_4_321.pt
[LOG] Computing n0_to_4 for num 780
[LOG] Saving tensor n1_to_2_321.pt
[LOG] Saving tensor n1_to_3_321.pt
[LOG] Saving tensor n1_to_4_321.pt
[LOG] Saving tensor n2_to_3_321.pt
[LOG] We will select 245 edges and 1372 tetra
[LOG] Edges from tetra 0 and KDTree 432 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_4 for num 313
[LOG] Saving tensor n2_to_4_321.pt
[LOG] Computing n1_to_2 for num 780
[LOG] Saving tensor n3_to_4_321.pt
[LOG] Saving tensor global_feature_321.pt
[LOG] Process 40: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_3 for num 780
[LOG] Computing n1_to_4 for num 780
[LOG] Computing n2_to_3 for num 780
[LOG] Computing n2_to_4 for num 780
[LOG] Computing n1_to_3 for num 201
[LOG] Computing n3_to_4 for num 780
[LOG] Computing n1_to_4 for num 201
[LOG] Global feature for num 780
[LOG] Global feature for num 780
[LOG] Saving tensor x_0_780.pt
[LOG] Saving tensor x_1_780.pt
[LOG] Computing n2_to_3 for num 201
[LOG] Saving tensor x_2_780.pt
[LOG] Saving tensor x_3_780.pt
[LOG] Saving tensor x_4_780.pt
[LOG] Saving tensor n0_to_0_780.pt
[LOG] Saving tensor n1_to_1_780.pt
[LOG] Saving tensor n2_to_2_780.pt
[LOG] Saving tensor n3_to_3_780.pt
[LOG] Saving tensor n4_to_4_780.pt
[LOG] Saving tensor n0_to_1_780.pt
[LOG] Computing n2_to_4 for num 201
[LOG] Saving tensor n0_to_2_780.pt
[LOG] Saving tensor n0_to_3_780.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n0_to_4_780.pt
[LOG] Saving tensor n1_to_2_780.pt
[LOG] Saving tensor n1_to_3_780.pt
[LOG] Saving tensor n1_to_4_780.pt
[LOG] Saving tensor n2_to_3_780.pt
[LOG] Saving tensor n2_to_4_780.pt
[LOG] Computing n3_to_4 for num 201
[LOG] Saving tensor n3_to_4_780.pt
[LOG] Global feature for num 201
[LOG] Saving tensor global_feature_780.pt
[LOG] Global feature for num 201
[LOG] Saving tensor x_0_201.pt
[LOG] Process 97: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor x_1_201.pt
[LOG] Saving tensor x_2_201.pt
[LOG] Saving tensor x_3_201.pt
[LOG] Process 46: Created combinatorial complex for file data_372.hdf5
[LOG] Saving tensor x_4_201.pt
[LOG] Saving tensor n0_to_0_201.pt
[LOG] Saving tensor n1_to_1_201.pt
[LOG] Saving tensor n2_to_2_201.pt
[LOG] Computing n3_to_4 for num 313
[LOG] Saving tensor n3_to_3_201.pt
[LOG] Saving tensor n4_to_4_201.pt
[LOG] Global feature for num 313
[LOG] Global feature for num 313
[LOG] Saving tensor x_0_313.pt
[LOG] Saving tensor n0_to_1_201.pt
[LOG] Saving tensor x_1_313.pt
[LOG] Saving tensor n0_to_2_201.pt
[LOG] Saving tensor x_2_313.pt
[LOG] Saving tensor x_3_313.pt
[LOG] Saving tensor x_4_313.pt
[LOG] Saving tensor n0_to_3_201.pt
[LOG] Saving tensor n0_to_0_313.pt
[LOG] Saving tensor n0_to_4_201.pt
[LOG] Saving tensor n1_to_1_313.pt
[LOG] Saving tensor n1_to_2_201.pt
[LOG] Saving tensor n2_to_2_313.pt
[LOG] Saving tensor n1_to_3_201.pt
[LOG] Saving tensor n1_to_4_201.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n2_to_3_201.pt
[LOG] Saving tensor n3_to_3_313.pt
[LOG] Saving tensor n2_to_4_201.pt
[LOG] Saving tensor n4_to_4_313.pt
[LOG] Saving tensor n3_to_4_201.pt
[LOG] Saving tensor n0_to_1_313.pt
[LOG] Saving tensor global_feature_201.pt
[LOG] Process 25: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_2_313.pt
[LOG] Saving tensor n0_to_3_313.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor n0_to_4_313.pt
[LOG] Saving tensor n1_to_2_313.pt
[LOG] Saving tensor n1_to_3_313.pt
[LOG] Saving tensor n1_to_4_313.pt
[LOG] Process 46: Calculating Neighbors
[LOG] Loading pickle file data_372.pickle
[LOG] Processing node features for num 372
[LOG] Saving tensor n2_to_3_313.pt
[LOG] Saving tensor n2_to_4_313.pt
[LOG] Processing edge features for num 372
[LOG] Saving tensor n3_to_4_313.pt
[LOG] Saving tensor global_feature_313.pt
[LOG] Processing tetra features for num 372
[LOG] Process 39: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing cluster features for num 372
[LOG] Processing cluster features for num 372
[LOG] Processing adjacency and incidence matrices for num 372
[LOG] Computing n0_to_0 for num 372
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 5: Created combinatorial complex for file data_42.hdf5
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 0 subset clusters.
[LOG] Computing n1_to_1 for num 372
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 5: Calculating Neighbors
[LOG] Loading pickle file data_42.pickle
[LOG] Processing node features for num 42
[LOG] Processing edge features for num 42
[LOG] Computing n2_to_2 (adjacency) for num 372
[LOG] Processing tetra features for num 42
[LOG] Process 118: Created combinatorial complex for file data_934.hdf5
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing cluster features for num 42
[LOG] Processing cluster features for num 42
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 915 Tetrahedra.
    [LOG] Generated 21 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 19.571428571428573
    [LOG] Max number of nodes per cluster is 107 and the number is 19
[LOG] Processing adjacency and incidence matrices for num 42
[LOG] Computing n0_to_0 for num 42
[LOG] Process 118: Calculating Neighbors
[LOG] Loading pickle file data_934.pickle
[LOG] Processing node features for num 934
[LOG] We will select 81 edges and 915 tetra
[LOG] Processing edge features for num 934
[LOG] Edges from tetra 0 and KDTree 1426 with 0 edges in common.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing tetra features for num 934
[LOG] Computing n3_to_3 (adjacency) for num 372
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n4_to_4 (coadjacency) for num 372
[LOG] Computing n0_to_1 for num 372
[LOG] Computing n1_to_1 for num 42
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_2 for num 372
[LOG] Processing cluster features for num 934
[LOG] Processing cluster features for num 934
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing adjacency and incidence matrices for num 934
[LOG] Computing n0_to_0 for num 934
[LOG] Computing n1_to_1 for num 934
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n2_to_2 (adjacency) for num 934
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n0_to_3 for num 372
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Computing n0_to_4 for num 372
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n2_to_2 (adjacency) for num 42
[LOG] Computing n1_to_2 for num 372
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Process 42: Created combinatorial complex for file data_340.hdf5
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n3_to_3 (adjacency) for num 934
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n4_to_4 (coadjacency) for num 934
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n0_to_1 for num 934
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 42
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Computing n4_to_4 (coadjacency) for num 42
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n0_to_2 for num 934
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_1 for num 42
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_3 for num 372
[LOG] Process 42: Calculating Neighbors
[LOG] Loading pickle file data_340.pickle
[LOG] Processing node features for num 340
[LOG] Computing n1_to_4 for num 372
[LOG] Computing n2_to_3 for num 372
[LOG] Processing edge features for num 340
[LOG] Processing tetra features for num 340
[LOG] Computing n0_to_2 for num 42
[LOG] Computing n2_to_4 for num 372
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing cluster features for num 340
[LOG] Processing cluster features for num 340
[LOG] Computing n3_to_4 for num 372
[LOG] Global feature for num 372
[LOG] Global feature for num 372
[LOG] Saving tensor x_0_372.pt
[LOG] Saving tensor x_1_372.pt
[LOG] Saving tensor x_2_372.pt
[LOG] Processing adjacency and incidence matrices for num 340
[LOG] Saving tensor x_3_372.pt
[LOG] Computing n0_to_0 for num 340
[LOG] Saving tensor x_4_372.pt
[LOG] Saving tensor n0_to_0_372.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n1_to_1_372.pt
[LOG] Saving tensor n2_to_2_372.pt
[LOG] Saving tensor n3_to_3_372.pt
[LOG] Saving tensor n4_to_4_372.pt
[LOG] Saving tensor n0_to_1_372.pt
[LOG] Saving tensor n0_to_2_372.pt
[LOG] Computing n1_to_1 for num 340
[LOG] Saving tensor n0_to_3_372.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n0_to_4_372.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n1_to_2_372.pt
[LOG] Saving tensor n1_to_3_372.pt
[LOG] Saving tensor n1_to_4_372.pt
[LOG] Saving tensor n2_to_3_372.pt
[LOG] Computing n2_to_2 (adjacency) for num 340
[LOG] Saving tensor n2_to_4_372.pt
[LOG] Saving tensor n3_to_4_372.pt
[LOG] Saving tensor global_feature_372.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 46: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_3 for num 934
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_4 for num 934
[LOG] Computing n3_to_3 (adjacency) for num 340
[LOG] Computing n1_to_2 for num 934
[LOG] Computing n4_to_4 (coadjacency) for num 340
[LOG] Computing n0_to_1 for num 340
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_2 for num 340
[LOG] Computing n0_to_3 for num 42
[LOG] Computing n0_to_4 for num 42
[LOG] Computing n1_to_2 for num 42
[LOG] Computing n1_to_3 for num 934
[LOG] Computing n1_to_4 for num 934
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_3 for num 934
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n2_to_4 for num 934
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_4 for num 934
[LOG] Global feature for num 934
[LOG] Global feature for num 934
[LOG] Saving tensor x_0_934.pt
[LOG] Saving tensor x_1_934.pt
[LOG] Saving tensor x_2_934.pt
[LOG] Saving tensor x_3_934.pt
[LOG] Saving tensor x_4_934.pt
[LOG] Saving tensor n0_to_0_934.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n1_to_1_934.pt
[LOG] Saving tensor n2_to_2_934.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n3_to_3_934.pt
[LOG] Saving tensor n4_to_4_934.pt
[LOG] Saving tensor n0_to_1_934.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n0_to_2_934.pt
[LOG] Saving tensor n0_to_3_934.pt
[LOG] Saving tensor n0_to_4_934.pt
[LOG] Saving tensor n1_to_2_934.pt
[LOG] Saving tensor n1_to_3_934.pt
[LOG] Saving tensor n1_to_4_934.pt
[LOG] Saving tensor n2_to_3_934.pt
[LOG] Saving tensor n2_to_4_934.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n3_to_4_934.pt
[LOG] Saving tensor global_feature_934.pt
[LOG] Process 118: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 340
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_4 for num 340
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_2 for num 340
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_3 for num 340
[LOG] Computing n1_to_4 for num 340
[LOG] Computing n2_to_3 for num 340
[LOG] Computing n2_to_4 for num 340
[LOG] Computing n3_to_4 for num 340
[LOG] Global feature for num 340
[LOG] Global feature for num 340
[LOG] Saving tensor x_0_340.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor x_1_340.pt
[LOG] Saving tensor x_2_340.pt
[LOG] Saving tensor x_3_340.pt
[LOG] Saving tensor x_4_340.pt
[LOG] Saving tensor n0_to_0_340.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n1_to_1_340.pt
[LOG] Saving tensor n2_to_2_340.pt
[LOG] Computing n1_to_3 for num 42
[LOG] Saving tensor n3_to_3_340.pt
[LOG] Saving tensor n4_to_4_340.pt
[LOG] Computing n1_to_4 for num 42
[LOG] Saving tensor n0_to_1_340.pt
[LOG] Saving tensor n0_to_2_340.pt
[LOG] Saving tensor n0_to_3_340.pt
[LOG] Saving tensor n0_to_4_340.pt
[LOG] Computing n2_to_3 for num 42
[LOG] Saving tensor n1_to_2_340.pt
[LOG] Saving tensor n1_to_3_340.pt
[LOG] Saving tensor n1_to_4_340.pt
[LOG] Saving tensor n2_to_3_340.pt
[LOG] Saving tensor n2_to_4_340.pt
[LOG] Computing n2_to_4 for num 42
[LOG] Saving tensor n3_to_4_340.pt
[LOG] Saving tensor global_feature_340.pt
[LOG] Process 42: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_4 for num 42
[LOG] Global feature for num 42
[LOG] Global feature for num 42
[LOG] Saving tensor x_0_42.pt
[LOG] Saving tensor x_1_42.pt
[LOG] Saving tensor x_2_42.pt
[LOG] Saving tensor x_3_42.pt
[LOG] Saving tensor x_4_42.pt
[LOG] Saving tensor n0_to_0_42.pt
[LOG] Saving tensor n1_to_1_42.pt
[LOG] Saving tensor n2_to_2_42.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n3_to_3_42.pt
[LOG] Saving tensor n4_to_4_42.pt
[LOG] Saving tensor n0_to_1_42.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n0_to_2_42.pt
[LOG] Saving tensor n0_to_3_42.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n0_to_4_42.pt
[LOG] Saving tensor n1_to_2_42.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n1_to_3_42.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n1_to_4_42.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n2_to_3_42.pt
[LOG] Saving tensor n2_to_4_42.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n3_to_4_42.pt
[LOG] Saving tensor global_feature_42.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Process 5: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 3436 Tetrahedra.
    [LOG] Generated 88 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.534090909090908
    [LOG] Max number of nodes per cluster is 49 and the number is 78
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] We will select 593 edges and 3436 tetra
[LOG] Edges from tetra 0 and KDTree 1276 with 0 edges in common.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Removed 2 subset clusters.
[LOG] Saving tensor hausdorff_3_to_4.pt

    [LOG] We Currently have 2152 Tetrahedra.
    [LOG] Generated 74 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.256756756756756
    [LOG] Max number of nodes per cluster is 42 and the number is 50
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] We will select 1289 edges and 2152 tetra
[LOG] Edges from tetra 0 and KDTree 1289 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Removed 2 subset clusters.
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 101: Created combinatorial complex for file data_810.hdf5
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1272 Tetrahedra.
    [LOG] Generated 26 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 21.576923076923077
    [LOG] Max number of nodes per cluster is 106 and the number is 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 568 Tetrahedra.
    [LOG] Generated 21 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.142857142857142
    [LOG] Max number of nodes per cluster is 45 and the number is 15
[LOG] We will select 40 edges and 568 tetra
[LOG] Edges from tetra 0 and KDTree 1119 with 0 edges in common.
[LOG] We will select 271 edges and 1272 tetra
[LOG] Edges from tetra 0 and KDTree 1769 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 101: Calculating Neighbors
[LOG] Loading pickle file data_810.pickle
[LOG] Processing node features for num 810
[LOG] GENERATED TETRA
[LOG] Processing edge features for num 810
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing tetra features for num 810
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 2: Created combinatorial complex for file data_22.hdf5
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 2: Calculating Neighbors
[LOG] Loading pickle file data_22.pickle
[LOG] Processing node features for num 22
[LOG] Process 92: Created combinatorial complex for file data_737.hdf5
[LOG] Processing edge features for num 22
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing cluster features for num 810
[LOG] Processing tetra features for num 22
[LOG] Processing cluster features for num 22
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing cluster features for num 22
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing adjacency and incidence matrices for num 22
[LOG] Computing n0_to_0 for num 22
[LOG] Processing cluster features for num 810
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_1 for num 22
[LOG] Computing n2_to_2 (adjacency) for num 22
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing adjacency and incidence matrices for num 810
[LOG] Computing n0_to_0 for num 810
[LOG] Computing n3_to_3 (adjacency) for num 22
[LOG] Computing n4_to_4 (coadjacency) for num 22
[LOG] Computing n0_to_1 for num 22
[LOG] Computing n0_to_2 for num 22
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n1_to_1 for num 810
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Process 92: Calculating Neighbors
[LOG] Loading pickle file data_737.pickle
[LOG] Processing node features for num 737
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Processing edge features for num 737
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n0_to_3 for num 22
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n0_to_4 for num 22
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n1_to_2 for num 22
[LOG] Processing tetra features for num 737
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n1_to_3 for num 22
[LOG] Computing n1_to_4 for num 22
[LOG] Computing n2_to_3 for num 22
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n2_to_4 for num 22
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n3_to_4 for num 22
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Global feature for num 22
[LOG] Global feature for num 22
[LOG] Saving tensor x_0_22.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor x_1_22.pt
[LOG] Saving tensor x_2_22.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor x_3_22.pt
[LOG] Saving tensor x_4_22.pt
[LOG] Saving tensor n0_to_0_22.pt
[LOG] Saving tensor n1_to_1_22.pt
[LOG] Saving tensor n2_to_2_22.pt
[LOG] Saving tensor n3_to_3_22.pt
[LOG] Saving tensor n4_to_4_22.pt
[LOG] Saving tensor n0_to_1_22.pt
[LOG] Saving tensor n0_to_2_22.pt
[LOG] Processing cluster features for num 737
[LOG] Process 7: Created combinatorial complex for file data_60.hdf5
[LOG] Saving tensor n0_to_3_22.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2159 Tetrahedra.
    [LOG] Generated 65 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.307692307692308
    [LOG] Max number of nodes per cluster is 31 and the number is 10
[LOG] Saving tensor n0_to_4_22.pt
[LOG] Saving tensor n1_to_2_22.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n1_to_3_22.pt
[LOG] Saving tensor n1_to_4_22.pt
[LOG] Saving tensor n2_to_3_22.pt
[LOG] Saving tensor n2_to_4_22.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n3_to_4_22.pt
[LOG] Processing cluster features for num 737
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor global_feature_22.pt
[LOG] Process 2: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Processing adjacency and incidence matrices for num 737
[LOG] Computing n0_to_0 for num 737
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Process 7: Calculating Neighbors
[LOG] Loading pickle file data_60.pickle
[LOG] Processing node features for num 60
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Processing edge features for num 60
[LOG] We will select 471 edges and 2159 tetra
[LOG] Edges from tetra 0 and KDTree 471 with 0 edges in common.
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Processing tetra features for num 60
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Processing cluster features for num 60
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing cluster features for num 60
[LOG] Computing n1_to_1 for num 737
[LOG] Processing adjacency and incidence matrices for num 60
[LOG] Computing n0_to_0 for num 60
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 1284 Tetrahedra.
    [LOG] Generated 37 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.08108108108108
    [LOG] Max number of nodes per cluster is 23 and the number is 32
[LOG] Computing n1_to_1 for num 60
[LOG] We will select 281 edges and 1284 tetra
[LOG] Edges from tetra 0 and KDTree 613 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_2 (adjacency) for num 60
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_2 (adjacency) for num 810
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_3 (adjacency) for num 60
[LOG] Computing n4_to_4 (coadjacency) for num 60
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_1 for num 60
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_2 for num 60
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] GENERATED TETRA
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 6125 Tetrahedra.
    [LOG] Generated 139 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.37410071942446
    [LOG] Max number of nodes per cluster is 63 and the number is 111
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Removed 3 subset clusters.
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n0_to_3 for num 60
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Computing n0_to_4 for num 60
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Process 56: Created combinatorial complex for file data_451.hdf5
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_2 for num 60
[LOG] Process 56: Calculating Neighbors
[LOG] Loading pickle file data_451.pickle
[LOG] Processing node features for num 451
[LOG] Processing edge features for num 451
[LOG] Computing n2_to_2 (adjacency) for num 737
[LOG] Computing n1_to_3 for num 60
[LOG] Computing n1_to_4 for num 60
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1627 Tetrahedra.
    [LOG] Generated 43 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.255813953488373
    [LOG] Max number of nodes per cluster is 42 and the number is 12
[LOG] Computing n2_to_3 for num 60
[LOG] Processing tetra features for num 451
[LOG] Computing n2_to_4 for num 60
[LOG] Computing n3_to_4 for num 60
[LOG] Global feature for num 60
[LOG] Global feature for num 60
[LOG] Saving tensor x_0_60.pt
[LOG] Processing cluster features for num 451
[LOG] We will select 1431 edges and 6125 tetra
[LOG] Edges from tetra 0 and KDTree 4897 with 0 edges in common.
[LOG] Saving tensor x_1_60.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor x_2_60.pt
[LOG] Saving tensor x_3_60.pt
[LOG] Saving tensor x_4_60.pt
[LOG] Saving tensor n0_to_0_60.pt
[LOG] Saving tensor n1_to_1_60.pt
[LOG] Processing cluster features for num 451
[LOG] Saving tensor n2_to_2_60.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n3_to_3_60.pt
[LOG] Saving tensor n4_to_4_60.pt
[LOG] Processing adjacency and incidence matrices for num 451
[LOG] Computing n0_to_0 for num 451
[LOG] Saving tensor n0_to_1_60.pt
[LOG] Saving tensor n0_to_2_60.pt
[LOG] We will select 144 edges and 1627 tetra
[LOG] Edges from tetra 0 and KDTree 254 with 0 edges in common.
[LOG] Saving tensor n0_to_3_60.pt
[LOG] Saving tensor n0_to_4_60.pt
[LOG] Saving tensor n1_to_2_60.pt
[LOG] Saving tensor n1_to_3_60.pt
[LOG] Saving tensor n1_to_4_60.pt
[LOG] Saving tensor n2_to_3_60.pt
[LOG] Saving tensor n2_to_4_60.pt
[LOG] Saving tensor n3_to_4_60.pt
[LOG] Computing n1_to_1 for num 451
[LOG] Saving tensor global_feature_60.pt
[LOG] Process 7: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 1 subset clusters.
[LOG] Computing n3_to_3 (adjacency) for num 810
[LOG] Computing n4_to_4 (coadjacency) for num 810
[LOG] Computing n0_to_1 for num 810
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_2 (adjacency) for num 451
[LOG] Computing n3_to_3 (adjacency) for num 737
[LOG] Computing n4_to_4 (coadjacency) for num 737
[LOG] Computing n0_to_1 for num 737
[LOG] Computing n0_to_2 for num 810
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_3 (adjacency) for num 451
[LOG] Computing n4_to_4 (coadjacency) for num 451
[LOG] Computing n0_to_1 for num 451
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_2 for num 451
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_2 for num 737
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 83: Created combinatorial complex for file data_665.hdf5
[LOG] Computing n0_to_3 for num 451
[LOG] Computing n0_to_4 for num 451
[LOG] Computing n1_to_2 for num 451
[LOG] Process 83: Calculating Neighbors
[LOG] Loading pickle file data_665.pickle
[LOG] Processing node features for num 665
[LOG] Processing edge features for num 665
[LOG] Computing n1_to_3 for num 451
[LOG] Computing n1_to_4 for num 451
[LOG] Computing n2_to_3 for num 451
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_4 for num 451
[LOG] Processing tetra features for num 665
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_3 for num 737
[LOG] Computing n3_to_4 for num 451
[LOG] Global feature for num 451
[LOG] Global feature for num 451
[LOG] Saving tensor x_0_451.pt
[LOG] Computing n0_to_4 for num 737
[LOG] Saving tensor x_1_451.pt
[LOG] Saving tensor x_2_451.pt
[LOG] Saving tensor x_3_451.pt
[LOG] Saving tensor x_4_451.pt
[LOG] Saving tensor n0_to_0_451.pt
[LOG] Computing n1_to_2 for num 737
[LOG] Saving tensor n1_to_1_451.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3615 Tetrahedra.
    [LOG] Generated 82 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.5
    [LOG] Max number of nodes per cluster is 64 and the number is 80
[LOG] Saving tensor n2_to_2_451.pt
[LOG] Removed 1 subset clusters.
[LOG] Processing cluster features for num 665
[LOG] Saving tensor n3_to_3_451.pt
[LOG] Saving tensor n4_to_4_451.pt
[LOG] Saving tensor n0_to_1_451.pt
[LOG] Saving tensor n0_to_2_451.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n0_to_3_451.pt
[LOG] Saving tensor n0_to_4_451.pt
[LOG] Processing cluster features for num 665
[LOG] Saving tensor n1_to_2_451.pt
[LOG] Saving tensor n1_to_3_451.pt
[LOG] Saving tensor n1_to_4_451.pt
[LOG] Saving tensor n2_to_3_451.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n2_to_4_451.pt
[LOG] Saving tensor n3_to_4_451.pt
[LOG] Processing adjacency and incidence matrices for num 665
[LOG] Computing n0_to_0 for num 665
[LOG] Saving tensor global_feature_451.pt
[LOG] Process 56: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 4 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_1 for num 665
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] We will select 680 edges and 3615 tetra
[LOG] Edges from tetra 0 and KDTree 3526 with 0 edges in common.
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Process 13: Created combinatorial complex for file data_106.hdf5
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n0_to_3 for num 810
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n0_to_4 for num 810
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_2 for num 810
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 13: Calculating Neighbors
[LOG] Loading pickle file data_106.pickle
[LOG] Processing node features for num 106
[LOG] Processing edge features for num 106
[LOG] Processing tetra features for num 106
[LOG] Processing cluster features for num 106
[LOG] Processing cluster features for num 106
[LOG] Computing n2_to_2 (adjacency) for num 665
[LOG] Processing adjacency and incidence matrices for num 106
[LOG] Computing n0_to_0 for num 106
[LOG] Computing n1_to_1 for num 106
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_2 (adjacency) for num 106
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_3 (adjacency) for num 106
[LOG] Computing n4_to_4 (coadjacency) for num 106
[LOG] Computing n0_to_1 for num 106
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_3 (adjacency) for num 665
[LOG] Computing n0_to_2 for num 106
[LOG] Computing n4_to_4 (coadjacency) for num 665
[LOG] Computing n0_to_1 for num 665
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 2513 Tetrahedra.
    [LOG] Generated 51 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.137254901960784
    [LOG] Max number of nodes per cluster is 99 and the number is 49
[LOG] Computing n0_to_2 for num 665
[LOG] Computing n1_to_3 for num 737
[LOG] We will select 448 edges and 2513 tetra
[LOG] Edges from tetra 0 and KDTree 734 with 0 edges in common.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Computing n1_to_4 for num 737
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_3 for num 737
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n0_to_3 for num 106
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n0_to_4 for num 106
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n1_to_2 for num 106
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n2_to_4 for num 737
[LOG] Computing n1_to_3 for num 810
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n1_to_4 for num 810
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n2_to_3 for num 810
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n3_to_4 for num 737
[LOG] Global feature for num 737
[LOG] Global feature for num 737
[LOG] Saving tensor x_0_737.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n1_to_3 for num 106
[LOG] Saving tensor x_1_737.pt
[LOG] Saving tensor x_2_737.pt
[LOG] Computing n1_to_4 for num 106
[LOG] Saving tensor x_3_737.pt
[LOG] Saving tensor x_4_737.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n2_to_3 for num 106
[LOG] Saving tensor n0_to_0_737.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n1_to_1_737.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n2_to_2_737.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n3_to_3_737.pt
[LOG] Saving tensor n4_to_4_737.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_4 for num 106
[LOG] Saving tensor n0_to_1_737.pt
[LOG] Saving tensor n0_to_2_737.pt
[LOG] Computing n3_to_4 for num 106
[LOG] Saving tensor n0_to_3_737.pt
[LOG] Global feature for num 106
[LOG] Global feature for num 106
[LOG] Saving tensor x_0_106.pt
[LOG] Saving tensor n0_to_4_737.pt
[LOG] Saving tensor x_1_106.pt
[LOG] Computing n2_to_4 for num 810
[LOG] Saving tensor n1_to_2_737.pt
[LOG] Saving tensor x_2_106.pt
[LOG] Saving tensor x_3_106.pt
[LOG] Saving tensor n1_to_3_737.pt
[LOG] Saving tensor x_4_106.pt
[LOG] Computing n0_to_3 for num 665
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n0_to_0_106.pt
[LOG] Saving tensor n1_to_1_106.pt
[LOG] Saving tensor n1_to_4_737.pt
[LOG] Computing n0_to_4 for num 665
[LOG] Saving tensor n2_to_2_106.pt
[LOG] Saving tensor n2_to_3_737.pt
[LOG] Saving tensor n3_to_3_106.pt
[LOG] Saving tensor n2_to_4_737.pt
[LOG] Computing n1_to_2 for num 665
[LOG] Saving tensor n4_to_4_106.pt
[LOG] Saving tensor n3_to_4_737.pt
[LOG] Saving tensor n0_to_1_106.pt
[LOG] Saving tensor global_feature_737.pt
[LOG] Process 92: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_2_106.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n0_to_3_106.pt
[LOG] Saving tensor n0_to_4_106.pt
[LOG] Computing n3_to_4 for num 810
[LOG] Saving tensor n1_to_2_106.pt
[LOG] Global feature for num 810
[LOG] Global feature for num 810
[LOG] Saving tensor x_0_810.pt
[LOG] Saving tensor n1_to_3_106.pt
[LOG] Saving tensor x_1_810.pt
[LOG] Saving tensor n1_to_4_106.pt
[LOG] Saving tensor x_2_810.pt
[LOG] Saving tensor n2_to_3_106.pt
[LOG] Saving tensor x_3_810.pt
[LOG] Saving tensor n2_to_4_106.pt
[LOG] Saving tensor x_4_810.pt
[LOG] Saving tensor n0_to_0_810.pt
[LOG] Saving tensor n3_to_4_106.pt
[LOG] Saving tensor global_feature_106.pt
[LOG] Saving tensor n1_to_1_810.pt
[LOG] Process 13: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n2_to_2_810.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n3_to_3_810.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n4_to_4_810.pt
[LOG] Saving tensor n0_to_1_810.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n0_to_2_810.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n0_to_3_810.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n0_to_4_810.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n1_to_2_810.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n1_to_3_810.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n1_to_4_810.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n2_to_3_810.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n2_to_4_810.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n3_to_4_810.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor global_feature_810.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Process 101: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n1_to_3 for num 665
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_4 for num 665
[LOG] Computing n2_to_3 for num 665
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 0 subset clusters.
[LOG] Computing n2_to_4 for num 665
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_4 for num 665
[LOG] Global feature for num 665
[LOG] Global feature for num 665
[LOG] Saving tensor x_0_665.pt
[LOG] Saving tensor x_1_665.pt
[LOG] Saving tensor x_2_665.pt
[LOG] Saving tensor x_3_665.pt
[LOG] Saving tensor x_4_665.pt
[LOG] Saving tensor n0_to_0_665.pt
[LOG] Saving tensor n1_to_1_665.pt
[LOG] Removed 2 subset clusters.
[LOG] Saving tensor n2_to_2_665.pt
[LOG] Saving tensor n3_to_3_665.pt
[LOG] Saving tensor n4_to_4_665.pt
[LOG] Saving tensor n0_to_1_665.pt
[LOG] Saving tensor n0_to_2_665.pt
[LOG] Saving tensor n0_to_3_665.pt
[LOG] Saving tensor n0_to_4_665.pt
[LOG] Saving tensor n1_to_2_665.pt
[LOG] Saving tensor n1_to_3_665.pt
[LOG] Saving tensor n1_to_4_665.pt
[LOG] Saving tensor n2_to_3_665.pt
[LOG] Saving tensor n2_to_4_665.pt
[LOG] Saving tensor n3_to_4_665.pt
[LOG] Saving tensor global_feature_665.pt
[LOG] Process 83: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 85: Created combinatorial complex for file data_682.hdf5
[LOG] GENERATED TETRA
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 3484 Tetrahedra.
    [LOG] Generated 76 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.56578947368421
    [LOG] Max number of nodes per cluster is 45 and the number is 62
[LOG] Process 52: Created combinatorial complex for file data_418.hdf5
[LOG] We will select 377 edges and 3484 tetra
[LOG] Edges from tetra 0 and KDTree 1105 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 3
[LOG] GENERATED TETRA
[LOG] Process 44: Created combinatorial complex for file data_353.hdf5
[LOG] Process 52: Calculating Neighbors
[LOG] Loading pickle file data_418.pickle
[LOG] Processing node features for num 418
[LOG] Processing edge features for num 418
[LOG] Processing tetra features for num 418
[LOG] GENERATED TETRA
[LOG] Processing cluster features for num 418
[LOG] Processing cluster features for num 418
[LOG] Processing adjacency and incidence matrices for num 418
[LOG] Computing n0_to_0 for num 418
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_1 for num 418
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1353 Tetrahedra.
    [LOG] Generated 47 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.191489361702128
    [LOG] Max number of nodes per cluster is 28 and the number is 35
[LOG] We will select 201 edges and 1353 tetra
[LOG] Edges from tetra 0 and KDTree 333 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 44: Calculating Neighbors
[LOG] Loading pickle file data_353.pickle
[LOG] Processing node features for num 353
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing edge features for num 353
[LOG] Process 85: Calculating Neighbors
[LOG] Loading pickle file data_682.pickle
[LOG] Processing node features for num 682
[LOG] Processing edge features for num 682
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing tetra features for num 353
[LOG] Processing tetra features for num 682
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1524 Tetrahedra.
    [LOG] Generated 38 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.81578947368421
    [LOG] Max number of nodes per cluster is 58 and the number is 36
[LOG] Computing n2_to_2 (adjacency) for num 418
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] We will select 249 edges and 1524 tetra
[LOG] Edges from tetra 0 and KDTree 930 with 0 edges in common.
[LOG] Processing cluster features for num 682
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing cluster features for num 682
[LOG] Processing cluster features for num 353
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1167 Tetrahedra.
    [LOG] Generated 30 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.9
    [LOG] Max number of nodes per cluster is 124 and the number is 28
[LOG] Processing adjacency and incidence matrices for num 682
[LOG] Computing n0_to_0 for num 682
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing cluster features for num 353
[LOG] We will select 182 edges and 1167 tetra
[LOG] Edges from tetra 0 and KDTree 2558 with 0 edges in common.
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing adjacency and incidence matrices for num 353
[LOG] Computing n0_to_0 for num 353
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_1 for num 682
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n3_to_3 (adjacency) for num 418
[LOG] Computing n4_to_4 (coadjacency) for num 418
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n0_to_1 for num 418
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Process 10: Created combinatorial complex for file data_82.hdf5
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3665 Tetrahedra.
    [LOG] Generated 78 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.525641025641026
    [LOG] Max number of nodes per cluster is 100 and the number is 73
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n0_to_2 for num 418
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Process 10: Calculating Neighbors
[LOG] Loading pickle file data_82.pickle
[LOG] Processing node features for num 82
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Removed 0 subset clusters.
[LOG] Processing edge features for num 82
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Processing tetra features for num 82
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Processing cluster features for num 82
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing cluster features for num 82
[LOG] Processing adjacency and incidence matrices for num 82
[LOG] Computing n0_to_0 for num 82
[LOG] We will select 446 edges and 3665 tetra
[LOG] Edges from tetra 0 and KDTree 3815 with 0 edges in common.
[LOG] Process 76: Created combinatorial complex for file data_612.hdf5
[LOG] Computing n1_to_1 for num 82
[LOG] Process 112: Created combinatorial complex for file data_892.hdf5
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_2 (adjacency) for num 82
[LOG] Process 112: Calculating Neighbors
[LOG] Loading pickle file data_892.pickle
[LOG] Processing node features for num 892
[LOG] Process 76: Calculating Neighbors
[LOG] Loading pickle file data_612.pickle
[LOG] Processing node features for num 612
[LOG] Processing edge features for num 612
[LOG] Processing edge features for num 892
[LOG] Processing tetra features for num 892
[LOG] Processing tetra features for num 612
[LOG] Computing n3_to_3 (adjacency) for num 82
[LOG] Processing cluster features for num 892
[LOG] Process 116: Created combinatorial complex for file data_918.hdf5
[LOG] Computing n4_to_4 (coadjacency) for num 82
[LOG] Processing cluster features for num 612
[LOG] Computing n0_to_1 for num 82
[LOG] Processing cluster features for num 892
[LOG] Processing cluster features for num 612
[LOG] Computing n0_to_2 for num 82
[LOG] Processing adjacency and incidence matrices for num 892
[LOG] Computing n0_to_0 for num 892
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing adjacency and incidence matrices for num 612
[LOG] Computing n0_to_0 for num 612
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_1 for num 612
[LOG] Computing n1_to_1 for num 892
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_1 for num 353
[LOG] Computing n2_to_2 (adjacency) for num 892
[LOG] Computing n2_to_2 (adjacency) for num 612
[LOG] Computing n0_to_3 for num 82
[LOG] Computing n0_to_4 for num 82
[LOG] Computing n2_to_2 (adjacency) for num 682
[LOG] Computing n1_to_2 for num 82
[LOG] Computing n0_to_3 for num 418
[LOG] Computing n0_to_4 for num 418
[LOG] Computing n1_to_2 for num 418
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 116: Calculating Neighbors
[LOG] Loading pickle file data_918.pickle
[LOG] Processing node features for num 918
[LOG] Computing n3_to_3 (adjacency) for num 892
[LOG] Processing edge features for num 918
[LOG] Computing n4_to_4 (coadjacency) for num 892
[LOG] Computing n0_to_1 for num 892
[LOG] Computing n1_to_3 for num 82
[LOG] Computing n1_to_4 for num 82
[LOG] Computing n2_to_3 for num 82
[LOG] Processing tetra features for num 918
[LOG] Computing n0_to_2 for num 892
[LOG] Computing n2_to_4 for num 82
[LOG] Computing n3_to_3 (adjacency) for num 612
[LOG] Computing n4_to_4 (coadjacency) for num 612
[LOG] Computing n0_to_1 for num 612
[LOG] Computing n3_to_4 for num 82
[LOG] Global feature for num 82
[LOG] Global feature for num 82
[LOG] Saving tensor x_0_82.pt
[LOG] Saving tensor x_1_82.pt
[LOG] Saving tensor x_2_82.pt
[LOG] Saving tensor x_3_82.pt
[LOG] Saving tensor x_4_82.pt
[LOG] Saving tensor n0_to_0_82.pt
[LOG] Saving tensor n1_to_1_82.pt
[LOG] Saving tensor n2_to_2_82.pt
[LOG] Saving tensor n3_to_3_82.pt
[LOG] Computing n0_to_2 for num 612
[LOG] Saving tensor n4_to_4_82.pt
[LOG] Saving tensor n0_to_1_82.pt
[LOG] Saving tensor n0_to_2_82.pt
[LOG] Saving tensor n0_to_3_82.pt
[LOG] Saving tensor n0_to_4_82.pt
[LOG] Saving tensor n1_to_2_82.pt
[LOG] Processing cluster features for num 918
[LOG] Saving tensor n1_to_3_82.pt
[LOG] Saving tensor n1_to_4_82.pt
[LOG] Saving tensor n2_to_3_82.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n2_to_4_82.pt
[LOG] Saving tensor n3_to_4_82.pt
[LOG] Saving tensor global_feature_82.pt
[LOG] Process 10: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing cluster features for num 918
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Processing adjacency and incidence matrices for num 918
[LOG] Computing n0_to_0 for num 918
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n1_to_1 for num 918
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n1_to_3 for num 418
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n1_to_4 for num 418
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n2_to_3 for num 418
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_3 for num 612
[LOG] Computing n0_to_3 for num 892
[LOG] Computing n0_to_4 for num 612
[LOG] Computing n2_to_4 for num 418
[LOG] Computing n0_to_4 for num 892
[LOG] Computing n1_to_2 for num 612
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_2 for num 892
[LOG] Computing n3_to_4 for num 418
[LOG] Global feature for num 418
[LOG] Global feature for num 418
[LOG] Saving tensor x_0_418.pt
[LOG] Saving tensor x_1_418.pt
[LOG] Saving tensor x_2_418.pt
[LOG] Saving tensor x_3_418.pt
[LOG] Saving tensor x_4_418.pt
[LOG] Saving tensor n0_to_0_418.pt
[LOG] Saving tensor n1_to_1_418.pt
[LOG] Saving tensor n2_to_2_418.pt
[LOG] Saving tensor n3_to_3_418.pt
[LOG] Saving tensor n4_to_4_418.pt
[LOG] Saving tensor n0_to_1_418.pt
[LOG] Computing n1_to_3 for num 892
[LOG] Saving tensor n0_to_2_418.pt
[LOG] Computing n1_to_4 for num 892
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n0_to_3_418.pt
[LOG] Computing n2_to_3 for num 892
[LOG] Saving tensor n0_to_4_418.pt
[LOG] Saving tensor n1_to_2_418.pt
[LOG] Computing n2_to_4 for num 892
[LOG] Saving tensor n1_to_3_418.pt
[LOG] Saving tensor n1_to_4_418.pt
[LOG] Computing n1_to_3 for num 612
[LOG] Saving tensor n2_to_3_418.pt
[LOG] Computing n1_to_4 for num 612
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n2_to_4_418.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_3 for num 612
[LOG] Saving tensor n3_to_4_418.pt
[LOG] Saving tensor global_feature_418.pt
[LOG] Computing n3_to_4 for num 892
[LOG] Global feature for num 892
[LOG] Global feature for num 892
[LOG] Process 52: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor x_0_892.pt
[LOG] Saving tensor x_1_892.pt
[LOG] Saving tensor x_2_892.pt
[LOG] Saving tensor x_3_892.pt
[LOG] Saving tensor x_4_892.pt
[LOG] Saving tensor n0_to_0_892.pt
[LOG] Computing n2_to_4 for num 612
[LOG] Saving tensor n1_to_1_892.pt
[LOG] Saving tensor n2_to_2_892.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n3_to_3_892.pt
[LOG] Computing n3_to_4 for num 612
[LOG] Global feature for num 612
[LOG] Saving tensor n4_to_4_892.pt
[LOG] Global feature for num 612
[LOG] Saving tensor x_0_612.pt
[LOG] Saving tensor x_1_612.pt
[LOG] Saving tensor n0_to_1_892.pt
[LOG] Saving tensor x_2_612.pt
[LOG] Saving tensor x_3_612.pt
[LOG] Saving tensor x_4_612.pt
[LOG] Saving tensor n0_to_2_892.pt
[LOG] Saving tensor n0_to_0_612.pt
[LOG] Saving tensor n0_to_3_892.pt
[LOG] Saving tensor n1_to_1_612.pt
[LOG] Saving tensor n0_to_4_892.pt
[LOG] Saving tensor n2_to_2_612.pt
[LOG] Saving tensor n1_to_2_892.pt
[LOG] Saving tensor n1_to_3_892.pt
[LOG] Saving tensor n3_to_3_612.pt
[LOG] Saving tensor n1_to_4_892.pt
[LOG] Saving tensor n4_to_4_612.pt
[LOG] Saving tensor n2_to_3_892.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n0_to_1_612.pt
[LOG] Saving tensor n2_to_4_892.pt
[LOG] Saving tensor n0_to_2_612.pt
[LOG] Saving tensor n3_to_4_892.pt
[LOG] Saving tensor n0_to_3_612.pt
[LOG] Saving tensor global_feature_892.pt
[LOG] Computing n2_to_2 (adjacency) for num 918
[LOG] Saving tensor n0_to_4_612.pt
[LOG] Process 112: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n1_to_2_612.pt
[LOG] Saving tensor n1_to_3_612.pt
[LOG] Saving tensor n1_to_4_612.pt
[LOG] Saving tensor n2_to_3_612.pt
[LOG] Saving tensor n2_to_4_612.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n3_to_4_612.pt
[LOG] Saving tensor global_feature_612.pt
[LOG] Process 76: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_3 (adjacency) for num 682
[LOG] Computing n4_to_4 (coadjacency) for num 682
[LOG] Computing n0_to_1 for num 682
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_2 for num 682
[LOG] Process 59: Created combinatorial complex for file data_474.hdf5
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 59: Calculating Neighbors
[LOG] Loading pickle file data_474.pickle
[LOG] Processing node features for num 474
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing edge features for num 474
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Processing tetra features for num 474
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1990 Tetrahedra.
    [LOG] Generated 53 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.584905660377359
    [LOG] Max number of nodes per cluster is 68 and the number is 51
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing cluster features for num 474
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 2
[LOG] We will select 1144 edges and 1990 tetra
[LOG] Edges from tetra 0 and KDTree 1493 with 0 edges in common.
[LOG] Processing cluster features for num 474
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing adjacency and incidence matrices for num 474
[LOG] Computing n0_to_0 for num 474
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_1 for num 474
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_3 (adjacency) for num 918
[LOG] Computing n4_to_4 (coadjacency) for num 918
[LOG] Computing n0_to_1 for num 918
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_2 for num 918
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_3 for num 682
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_4 for num 682
[LOG] Computing n2_to_2 (adjacency) for num 474
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1064 Tetrahedra.
    [LOG] Generated 25 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.84
    [LOG] Max number of nodes per cluster is 60 and the number is 24
[LOG] Computing n1_to_2 for num 682
[LOG] We will select 107 edges and 1064 tetra
[LOG] Edges from tetra 0 and KDTree 1689 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_2 (adjacency) for num 353
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 3: Created combinatorial complex for file data_26.hdf5
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 31: Created combinatorial complex for file data_253.hdf5
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 31: Calculating Neighbors
[LOG] Loading pickle file data_253.pickle
[LOG] Processing node features for num 253
[LOG] Processing edge features for num 253
[LOG] Processing tetra features for num 253
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing cluster features for num 253
[LOG] Processing cluster features for num 253
[LOG] Process 3: Calculating Neighbors
[LOG] Loading pickle file data_26.pickle
[LOG] Processing node features for num 26
[LOG] Processing adjacency and incidence matrices for num 253
[LOG] Computing n0_to_0 for num 253
[LOG] Processing edge features for num 26
[LOG] Computing n1_to_1 for num 253
[LOG] Processing tetra features for num 26
[LOG] Computing n2_to_2 (adjacency) for num 253
[LOG] Processing cluster features for num 26
[LOG] Computing n1_to_3 for num 682
[LOG] Processing cluster features for num 26
[LOG] Computing n3_to_3 (adjacency) for num 253
[LOG] Computing n1_to_4 for num 682
[LOG] Computing n4_to_4 (coadjacency) for num 253
[LOG] Computing n0_to_1 for num 253
[LOG] Processing adjacency and incidence matrices for num 26
[LOG] Computing n0_to_0 for num 26
[LOG] Computing n2_to_3 for num 682
[LOG] Computing n0_to_2 for num 253
[LOG] Computing n0_to_3 for num 918
[LOG] Computing n0_to_4 for num 918
[LOG] Computing n1_to_2 for num 918
[LOG] Computing n2_to_4 for num 682
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_1 for num 26
[LOG] Computing n3_to_4 for num 682
[LOG] Global feature for num 682
[LOG] Global feature for num 682
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor x_0_682.pt
[LOG] Saving tensor x_1_682.pt
[LOG] Computing n3_to_3 (adjacency) for num 474
[LOG] Saving tensor x_2_682.pt
[LOG] Saving tensor x_3_682.pt
[LOG] Saving tensor x_4_682.pt
[LOG] Computing n4_to_4 (coadjacency) for num 474
[LOG] Saving tensor n0_to_0_682.pt
[LOG] Computing n0_to_1 for num 474
[LOG] Saving tensor n1_to_1_682.pt
[LOG] Computing n0_to_3 for num 253
[LOG] Saving tensor n2_to_2_682.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_4 for num 253
[LOG] Saving tensor n3_to_3_682.pt
[LOG] Saving tensor n4_to_4_682.pt
[LOG] Saving tensor n0_to_1_682.pt
[LOG] Computing n1_to_2 for num 253
[LOG] Saving tensor n0_to_2_682.pt
[LOG] Saving tensor n0_to_3_682.pt
[LOG] Saving tensor n0_to_4_682.pt
[LOG] Saving tensor n1_to_2_682.pt
[LOG] Saving tensor n1_to_3_682.pt
[LOG] Saving tensor n1_to_4_682.pt
[LOG] Saving tensor n2_to_3_682.pt
[LOG] Saving tensor n2_to_4_682.pt
[LOG] Saving tensor n3_to_4_682.pt
[LOG] Computing n1_to_3 for num 253
[LOG] Computing n1_to_4 for num 253
[LOG] Saving tensor global_feature_682.pt
[LOG] Process 85: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n2_to_3 for num 253
[LOG] Computing n2_to_4 for num 253
[LOG] Computing n3_to_4 for num 253
[LOG] Global feature for num 253
[LOG] Global feature for num 253
[LOG] Saving tensor x_0_253.pt
[LOG] Saving tensor x_1_253.pt
[LOG] Saving tensor x_2_253.pt
[LOG] Saving tensor x_3_253.pt
[LOG] Saving tensor x_4_253.pt
[LOG] Saving tensor n0_to_0_253.pt
[LOG] Saving tensor n1_to_1_253.pt
[LOG] Saving tensor n2_to_2_253.pt
[LOG] Saving tensor n3_to_3_253.pt
[LOG] Saving tensor n4_to_4_253.pt
[LOG] Computing n0_to_2 for num 474
[LOG] Saving tensor n0_to_1_253.pt
[LOG] Saving tensor n0_to_2_253.pt
[LOG] Saving tensor n0_to_3_253.pt
[LOG] Saving tensor n0_to_4_253.pt
[LOG] Saving tensor n1_to_2_253.pt
[LOG] Saving tensor n1_to_3_253.pt
[LOG] Saving tensor n1_to_4_253.pt
[LOG] Saving tensor n2_to_3_253.pt
[LOG] Saving tensor n2_to_4_253.pt
[LOG] Saving tensor n3_to_4_253.pt
[LOG] Saving tensor global_feature_253.pt
[LOG] Process 31: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_3 for num 918
[LOG] Computing n1_to_4 for num 918
[LOG] Computing n2_to_3 for num 918
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_4 for num 918
[LOG] Computing n3_to_4 for num 918
[LOG] Global feature for num 918
[LOG] Global feature for num 918
[LOG] Saving tensor x_0_918.pt
[LOG] Saving tensor x_1_918.pt
[LOG] Saving tensor x_2_918.pt
[LOG] Saving tensor x_3_918.pt
[LOG] Saving tensor x_4_918.pt
[LOG] Saving tensor n0_to_0_918.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n1_to_1_918.pt
[LOG] Saving tensor n2_to_2_918.pt
[LOG] Saving tensor n3_to_3_918.pt
[LOG] Saving tensor n4_to_4_918.pt
[LOG] Saving tensor n0_to_1_918.pt
[LOG] Saving tensor n0_to_2_918.pt
[LOG] Saving tensor n0_to_3_918.pt
[LOG] Saving tensor n0_to_4_918.pt
[LOG] Saving tensor n1_to_2_918.pt
[LOG] Saving tensor n1_to_3_918.pt
[LOG] Saving tensor n1_to_4_918.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n2_to_3_918.pt
[LOG] Saving tensor n2_to_4_918.pt
[LOG] Saving tensor n3_to_4_918.pt
[LOG] Saving tensor global_feature_918.pt
[LOG] Process 116: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_2 (adjacency) for num 26
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_3 (adjacency) for num 26
[LOG] Computing n4_to_4 (coadjacency) for num 26
[LOG] Computing n0_to_1 for num 26
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_2 for num 26
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_3 for num 26
[LOG] Computing n0_to_4 for num 26
[LOG] Computing n1_to_2 for num 26
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n0_to_3 for num 474
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n0_to_4 for num 474
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_2 for num 474
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_3 (adjacency) for num 353
[LOG] Computing n4_to_4 (coadjacency) for num 353
[LOG] Computing n0_to_1 for num 353
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_3 for num 26
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_4 for num 26
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_3 for num 26
[LOG] Computing n2_to_4 for num 26
[LOG] Computing n1_to_3 for num 474
[LOG] Computing n1_to_4 for num 474
[LOG] Computing n3_to_4 for num 26
[LOG] Global feature for num 26
[LOG] Global feature for num 26
[LOG] Saving tensor x_0_26.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor x_1_26.pt
[LOG] Computing n2_to_3 for num 474
[LOG] Saving tensor x_2_26.pt
[LOG] Saving tensor x_3_26.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor x_4_26.pt
[LOG] Saving tensor n0_to_0_26.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n1_to_1_26.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n2_to_2_26.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n3_to_3_26.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n4_to_4_26.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n0_to_1_26.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n0_to_2_26.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n0_to_3_26.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n0_to_4_26.pt
[LOG] Saving tensor n1_to_2_26.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n1_to_3_26.pt
[LOG] Saving tensor n1_to_4_26.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n2_to_3_26.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n2_to_4_26.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n2_to_4 for num 474
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n3_to_4_26.pt
[LOG] Saving tensor global_feature_26.pt
[LOG] Process 3: Calculating Cross-Cell-Invariants
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_4 for num 474
[LOG] Global feature for num 474
[LOG] Global feature for num 474
[LOG] Saving tensor x_0_474.pt
[LOG] Saving tensor x_1_474.pt
[LOG] Saving tensor x_2_474.pt
[LOG] Saving tensor x_3_474.pt
[LOG] Saving tensor x_4_474.pt
[LOG] Saving tensor n0_to_0_474.pt
[LOG] Saving tensor n1_to_1_474.pt
[LOG] Saving tensor n2_to_2_474.pt
[LOG] Saving tensor n3_to_3_474.pt
[LOG] Computing n0_to_2 for num 353
[LOG] Saving tensor n4_to_4_474.pt
[LOG] Saving tensor n0_to_1_474.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n0_to_2_474.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n0_to_3_474.pt
[LOG] Saving tensor n0_to_4_474.pt
[LOG] Saving tensor n1_to_2_474.pt
[LOG] Saving tensor n1_to_3_474.pt
[LOG] Saving tensor n1_to_4_474.pt
[LOG] Saving tensor n2_to_3_474.pt
[LOG] Saving tensor n2_to_4_474.pt
[LOG] Saving tensor n3_to_4_474.pt
[LOG] Saving tensor global_feature_474.pt
[LOG] Process 59: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 5182 Tetrahedra.
    [LOG] Generated 134 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.447761194029852
    [LOG] Max number of nodes per cluster is 50 and the number is 131
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] GENERATED TETRA
[LOG] GENERATED TETRA
[LOG] We will select 1563 edges and 5182 tetra
[LOG] Edges from tetra 0 and KDTree 3282 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1588 Tetrahedra.
    [LOG] Generated 38 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.578947368421053
    [LOG] Max number of nodes per cluster is 35 and the number is 19
[LOG] We will select 235 edges and 1588 tetra
[LOG] Edges from tetra 0 and KDTree 235 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1660 Tetrahedra.
    [LOG] Generated 60 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.483333333333333
    [LOG] Max number of nodes per cluster is 37 and the number is 56[LOG] Saving tensor euclidean_3_to_4.pt

[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] We will select 193 edges and 1660 tetra
[LOG] Edges from tetra 0 and KDTree 1128 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] GENERATED TETRA
[LOG] Process 19: Created combinatorial complex for file data_154.hdf5
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Process 19: Calculating Neighbors
[LOG] Loading pickle file data_154.pickle
[LOG] Processing node features for num 154
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Processing edge features for num 154
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Processing tetra features for num 154
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Processing cluster features for num 154
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Processing cluster features for num 154
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 154
[LOG] Computing n0_to_0 for num 154
[LOG] Computing n1_to_1 for num 154
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_2 (adjacency) for num 154
[LOG] Process 0: Created combinatorial complex for file data_4.hdf5
[LOG] Computing n3_to_3 (adjacency) for num 154
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 4 subset clusters.

    [LOG] We Currently have 1666 Tetrahedra.
    [LOG] Generated 57 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.508771929824562
    [LOG] Max number of nodes per cluster is 30 and the number is 16
[LOG] Computing n4_to_4 (coadjacency) for num 154
[LOG] Computing n0_to_1 for num 154
[LOG] Computing n0_to_2 for num 154
[LOG] Process 0: Calculating Neighbors
[LOG] Loading pickle file data_4.pickle
[LOG] Processing node features for num 4
[LOG] Processing edge features for num 4
[LOG] Processing tetra features for num 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2864 Tetrahedra.
    [LOG] Generated 77 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.090909090909092
    [LOG] Max number of nodes per cluster is 43 and the number is 66
[LOG] We will select 337 edges and 1666 tetra
[LOG] Edges from tetra 0 and KDTree 801 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing cluster features for num 4
[LOG] Processing cluster features for num 4
[LOG] Processing adjacency and incidence matrices for num 4
[LOG] Computing n0_to_0 for num 4
[LOG] Computing n1_to_1 for num 4
[LOG] Computing n0_to_3 for num 154
[LOG] We will select 520 edges and 2864 tetra
[LOG] Edges from tetra 0 and KDTree 1251 with 0 edges in common.
[LOG] Computing n0_to_4 for num 154
[LOG] Computing n1_to_2 for num 154
[LOG] Computing n2_to_2 (adjacency) for num 4
[LOG] Computing n1_to_3 for num 154
[LOG] Computing n1_to_4 for num 154
[LOG] Computing n2_to_3 for num 154
[LOG] Removed 1 subset clusters.
[LOG] Computing n2_to_4 for num 154
[LOG] Computing n3_to_3 (adjacency) for num 4
[LOG] Computing n4_to_4 (coadjacency) for num 4
[LOG] Computing n0_to_1 for num 4
[LOG] Computing n3_to_4 for num 154
[LOG] Global feature for num 154
[LOG] Global feature for num 154
[LOG] Saving tensor x_0_154.pt
[LOG] Computing n0_to_2 for num 4
[LOG] Saving tensor x_1_154.pt
[LOG] Saving tensor x_2_154.pt
[LOG] Saving tensor x_3_154.pt
[LOG] Saving tensor x_4_154.pt
[LOG] Saving tensor n0_to_0_154.pt
[LOG] Saving tensor n1_to_1_154.pt
[LOG] Saving tensor n2_to_2_154.pt
[LOG] Saving tensor n3_to_3_154.pt
[LOG] Saving tensor n4_to_4_154.pt
[LOG] Saving tensor n0_to_1_154.pt
[LOG] Saving tensor n0_to_2_154.pt
[LOG] Saving tensor n0_to_3_154.pt
[LOG] Saving tensor n0_to_4_154.pt
[LOG] Saving tensor n1_to_2_154.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n1_to_3_154.pt
[LOG] Saving tensor n1_to_4_154.pt
[LOG] Saving tensor n2_to_3_154.pt
[LOG] Saving tensor n2_to_4_154.pt
[LOG] Saving tensor n3_to_4_154.pt
[LOG] Saving tensor global_feature_154.pt
[LOG] Process 19: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_3 for num 353
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 963 Tetrahedra.
    [LOG] Generated 24 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 22.708333333333332
    [LOG] Max number of nodes per cluster is 219 and the number is 19
[LOG] Computing n0_to_3 for num 4
[LOG] Computing n0_to_4 for num 4
[LOG] Computing n0_to_4 for num 353
[LOG] We will select 151 edges and 963 tetra
[LOG] Edges from tetra 0 and KDTree 10693 with 0 edges in common.
[LOG] Computing n1_to_2 for num 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 2 subset clusters.
[LOG] Computing n1_to_2 for num 353
[LOG] Computing n1_to_3 for num 4
[LOG] Computing n1_to_4 for num 4
[LOG] Computing n2_to_3 for num 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_4 for num 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n3_to_4 for num 4
[LOG] Global feature for num 4
[LOG] Global feature for num 4
[LOG] Saving tensor x_0_4.pt
[LOG] Saving tensor x_1_4.pt
[LOG] Saving tensor x_2_4.pt
[LOG] Saving tensor x_3_4.pt
[LOG] Saving tensor x_4_4.pt
[LOG] Saving tensor n0_to_0_4.pt
[LOG] Process 62: Created combinatorial complex for file data_499.hdf5
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n1_to_1_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n2_to_2_4.pt
[LOG] Saving tensor n3_to_3_4.pt
[LOG] Saving tensor n4_to_4_4.pt
[LOG] Process 106: Created combinatorial complex for file data_847.hdf5
[LOG] Saving tensor n0_to_1_4.pt
[LOG] Saving tensor n0_to_2_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n0_to_3_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n0_to_4_4.pt
[LOG] Saving tensor n1_to_2_4.pt
[LOG] Saving tensor n1_to_3_4.pt
[LOG] Saving tensor n1_to_4_4.pt
[LOG] Saving tensor n2_to_3_4.pt
[LOG] Saving tensor n2_to_4_4.pt
[LOG] Saving tensor n3_to_4_4.pt
[LOG] Process 62: Calculating Neighbors
[LOG] Loading pickle file data_499.pickle
[LOG] Processing node features for num 499
[LOG] Processing edge features for num 499
[LOG] GENERATED TETRA
[LOG] Saving tensor global_feature_4.pt
[LOG] Process 0: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing tetra features for num 499
[LOG] Process 21: Created combinatorial complex for file data_174.hdf5
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing cluster features for num 499
[LOG] Processing cluster features for num 499
[LOG] Processing adjacency and incidence matrices for num 499
[LOG] Computing n0_to_0 for num 499
[LOG] Process 21: Calculating Neighbors
[LOG] Loading pickle file data_174.pickle
[LOG] Processing node features for num 174
[LOG] Removed 2 subset clusters.
[LOG] Processing edge features for num 174
[LOG] Computing n1_to_1 for num 499
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing tetra features for num 174
[LOG] Processing cluster features for num 174
[LOG] Processing cluster features for num 174
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing adjacency and incidence matrices for num 174
[LOG] Computing n0_to_0 for num 174
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n2_to_2 (adjacency) for num 499
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1834 Tetrahedra.
    [LOG] Generated 62 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.129032258064516
    [LOG] Max number of nodes per cluster is 31 and the number is 36
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n1_to_1 for num 174
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Process 120: Created combinatorial complex for file data_947.hdf5
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 174
[LOG] We will select 139 edges and 1834 tetra
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Edges from tetra 0 and KDTree 139 with 0 edges in common.
[LOG] Computing n3_to_3 (adjacency) for num 499
[LOG] Computing n4_to_4 (coadjacency) for num 499
[LOG] Computing n0_to_1 for num 499
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_2 for num 499
[LOG] Computing n3_to_3 (adjacency) for num 174
[LOG] Computing n4_to_4 (coadjacency) for num 174
[LOG] Computing n0_to_1 for num 174
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_2 for num 174
[LOG] Process 120: Calculating Neighbors
[LOG] Loading pickle file data_947.pickle
[LOG] Processing node features for num 947
[LOG] Processing edge features for num 947
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing tetra features for num 947
[LOG] Computing n0_to_3 for num 499
[LOG] Computing n0_to_4 for num 499
[LOG] Computing n1_to_2 for num 499
[LOG] Processing cluster features for num 947
[LOG] Processing cluster features for num 947
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing adjacency and incidence matrices for num 947
[LOG] Computing n0_to_0 for num 947
[LOG] Computing n1_to_3 for num 499
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_4 for num 499
[LOG] Computing n2_to_3 for num 499
[LOG] Computing n2_to_4 for num 499
[LOG] Computing n1_to_1 for num 947
[LOG] Process 106: Calculating Neighbors
[LOG] Loading pickle file data_847.pickle
[LOG] Processing node features for num 847
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Processing edge features for num 847
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Removed 2 subset clusters.
[LOG] Computing n3_to_4 for num 499

    [LOG] We Currently have 6815 Tetrahedra.
    [LOG] Generated 171 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.964912280701755
    [LOG] Max number of nodes per cluster is 72 and the number is 42
[LOG] Global feature for num 499
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Global feature for num 499
[LOG] Saving tensor x_0_499.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor x_1_499.pt
[LOG] Saving tensor x_2_499.pt
[LOG] Saving tensor x_3_499.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor x_4_499.pt
[LOG] Saving tensor n0_to_0_499.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n1_to_1_499.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n2_to_2_499.pt
[LOG] Saving tensor n3_to_3_499.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n4_to_4_499.pt
[LOG] Saving tensor n0_to_1_499.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n0_to_2_499.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n0_to_3_499.pt
[LOG] Computing n0_to_3 for num 174
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1229 Tetrahedra.
    [LOG] Generated 37 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.0
    [LOG] Max number of nodes per cluster is 144 and the number is 34
[LOG] Processing tetra features for num 847
[LOG] Computing n0_to_4 for num 174
[LOG] Computing n1_to_2 for num 174
[LOG] We will select 139 edges and 1229 tetra
[LOG] Edges from tetra 0 and KDTree 4020 with 0 edges in common.
[LOG] Computing n1_to_3 for num 174
[LOG] Computing n1_to_4 for num 174
[LOG] Computing n2_to_3 for num 174
[LOG] Saving tensor n0_to_4_499.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n2_to_4 for num 174
[LOG] Computing n3_to_4 for num 174
[LOG] Global feature for num 174
[LOG] Global feature for num 174
[LOG] Saving tensor x_0_174.pt
[LOG] Processing cluster features for num 847
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing cluster features for num 847
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Processing adjacency and incidence matrices for num 847
[LOG] Computing n0_to_0 for num 847
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_2 (adjacency) for num 947
[LOG] We will select 1663 edges and 6815 tetra
[LOG] Edges from tetra 0 and KDTree 1663 with 0 edges in common.
[LOG] Saving tensor x_1_174.pt
[LOG] Saving tensor n1_to_2_499.pt
[LOG] Saving tensor x_2_174.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor x_3_174.pt
[LOG] Saving tensor n1_to_3_499.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor x_4_174.pt
[LOG] Saving tensor n1_to_4_499.pt
[LOG] Saving tensor n0_to_0_174.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n2_to_3_499.pt
[LOG] Saving tensor n1_to_1_174.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n2_to_4_499.pt
[LOG] Saving tensor n2_to_2_174.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n3_to_4_499.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor global_feature_499.pt
[LOG] Process 62: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n3_to_3_174.pt
[LOG] Saving tensor n4_to_4_174.pt
[LOG] Saving tensor n0_to_1_174.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n0_to_2_174.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n0_to_3_174.pt
[LOG] Saving tensor n0_to_4_174.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n1_to_2_174.pt
[LOG] Saving tensor n1_to_3_174.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n1_to_4_174.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n2_to_3_174.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Process 114: Created combinatorial complex for file data_903.hdf5
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n2_to_4_174.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n3_to_4_174.pt
[LOG] Saving tensor global_feature_174.pt
[LOG] Process 21: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 103: Created combinatorial complex for file data_827.hdf5
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 114: Calculating Neighbors
[LOG] Loading pickle file data_903.pickle
[LOG] Processing node features for num 903
[LOG] Processing edge features for num 903
[LOG] Processing tetra features for num 903
[LOG] Process 103: Calculating Neighbors
[LOG] Loading pickle file data_827.pickle
[LOG] Processing node features for num 827
[LOG] Processing edge features for num 827
[LOG] Processing cluster features for num 903
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Processing tetra features for num 827
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Processing cluster features for num 903
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Processing adjacency and incidence matrices for num 903
[LOG] Computing n0_to_0 for num 903
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Processing cluster features for num 827
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n1_to_1 for num 903
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Processing cluster features for num 827
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Processing adjacency and incidence matrices for num 827
[LOG] Computing n0_to_0 for num 827
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 947
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n4_to_4 (coadjacency) for num 947
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n0_to_1 for num 947
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 903
[LOG] Computing n1_to_1 for num 827
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_2 (adjacency) for num 827
[LOG] Computing n0_to_2 for num 947
[LOG] Computing n1_to_1 for num 847
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 827
[LOG] Computing n3_to_3 (adjacency) for num 903
[LOG] Computing n4_to_4 (coadjacency) for num 827
[LOG] Computing n0_to_1 for num 827
[LOG] Computing n4_to_4 (coadjacency) for num 903
[LOG] Computing n0_to_1 for num 903
[LOG] Computing n0_to_2 for num 903
[LOG] Computing n0_to_2 for num 827
[LOG] Computing n1_to_3 for num 353
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 3918 Tetrahedra.
    [LOG] Generated 96 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.947916666666666
    [LOG] Max number of nodes per cluster is 201 and the number is 67
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_4 for num 353
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_3 for num 353
[LOG] Computing n0_to_3 for num 903
[LOG] Computing n0_to_4 for num 903
[LOG] Computing n1_to_2 for num 903
[LOG] Calculating for cell ranks 0 and 2
[LOG] We will select 891 edges and 3918 tetra
[LOG] Edges from tetra 0 and KDTree 3326 with 0 edges in common.
[LOG] Computing n1_to_3 for num 903
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_4 for num 903
[LOG] Computing n2_to_3 for num 903
[LOG] Computing n2_to_4 for num 903
[LOG] Computing n3_to_4 for num 903
[LOG] Global feature for num 903
[LOG] Computing n0_to_3 for num 827
[LOG] Global feature for num 903
[LOG] Saving tensor x_0_903.pt
[LOG] Saving tensor x_1_903.pt
[LOG] Saving tensor x_2_903.pt
[LOG] Saving tensor x_3_903.pt
[LOG] Computing n2_to_4 for num 353
[LOG] Saving tensor x_4_903.pt
[LOG] Saving tensor n0_to_0_903.pt
[LOG] Saving tensor n1_to_1_903.pt
[LOG] Computing n0_to_4 for num 827
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n2_to_2_903.pt
[LOG] Saving tensor n3_to_3_903.pt
[LOG] Saving tensor n4_to_4_903.pt
[LOG] Saving tensor n0_to_1_903.pt
[LOG] Saving tensor n0_to_2_903.pt
[LOG] Saving tensor n0_to_3_903.pt
[LOG] Computing n1_to_2 for num 827
[LOG] Saving tensor n0_to_4_903.pt
[LOG] Saving tensor n1_to_2_903.pt
[LOG] Saving tensor n1_to_3_903.pt
[LOG] Saving tensor n1_to_4_903.pt
[LOG] Saving tensor n2_to_3_903.pt
[LOG] Saving tensor n2_to_4_903.pt
[LOG] Saving tensor n3_to_4_903.pt
[LOG] Saving tensor global_feature_903.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 114: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_3 for num 827
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_4 for num 827
[LOG] Computing n2_to_3 for num 827
[LOG] Computing n2_to_4 for num 827
[LOG] Computing n3_to_4 for num 827
[LOG] Global feature for num 827
[LOG] Global feature for num 827
[LOG] Saving tensor x_0_827.pt
[LOG] Saving tensor x_1_827.pt
[LOG] Saving tensor x_2_827.pt
[LOG] Saving tensor x_3_827.pt
[LOG] Saving tensor x_4_827.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n0_to_0_827.pt
[LOG] Saving tensor n1_to_1_827.pt
[LOG] Saving tensor n2_to_2_827.pt
[LOG] Saving tensor n3_to_3_827.pt
[LOG] Saving tensor n4_to_4_827.pt
[LOG] Saving tensor n0_to_1_827.pt
[LOG] Saving tensor n0_to_2_827.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n0_to_3_827.pt
[LOG] Saving tensor n0_to_4_827.pt
[LOG] Saving tensor n1_to_2_827.pt
[LOG] Saving tensor n1_to_3_827.pt
[LOG] Computing n3_to_4 for num 353
[LOG] Saving tensor n1_to_4_827.pt
[LOG] Saving tensor n2_to_3_827.pt
[LOG] Computing n0_to_3 for num 947
[LOG] Global feature for num 353
[LOG] Saving tensor n2_to_4_827.pt
[LOG] Global feature for num 353
[LOG] Saving tensor x_0_353.pt
[LOG] Saving tensor x_1_353.pt
[LOG] Saving tensor n3_to_4_827.pt
[LOG] Saving tensor x_2_353.pt
[LOG] Saving tensor global_feature_827.pt
[LOG] Saving tensor x_3_353.pt
[LOG] Process 103: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor x_4_353.pt
[LOG] Saving tensor n0_to_0_353.pt
[LOG] Saving tensor n1_to_1_353.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n2_to_2_353.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_4 for num 947
[LOG] Computing n1_to_2 for num 947
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1057 Tetrahedra.
    [LOG] Generated 33 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.0
    [LOG] Max number of nodes per cluster is 42 and the number is 14
[LOG] Calculating for cell ranks 0 and 1
[LOG] We will select 202 edges and 1057 tetra
[LOG] Edges from tetra 0 and KDTree 202 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n3_to_3_353.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n1_to_3 for num 947
[LOG] Computing n1_to_4 for num 947
[LOG] Computing n2_to_3 for num 947
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_4 for num 947
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_4 for num 947
[LOG] Global feature for num 947
[LOG] Global feature for num 947
[LOG] Saving tensor x_0_947.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 63: Created combinatorial complex for file data_505.hdf5
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 964 Tetrahedra.
    [LOG] Generated 32 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.15625
    [LOG] Max number of nodes per cluster is 32 and the number is 0
[LOG] Calculating for cell ranks 2 and 4
[LOG] We will select 100 edges and 964 tetra
[LOG] Edges from tetra 0 and KDTree 222 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 107: Created combinatorial complex for file data_855.hdf5
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n4_to_4_353.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n0_to_1_353.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor x_1_947.pt
[LOG] Saving tensor n0_to_2_353.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor x_2_947.pt
[LOG] Saving tensor x_3_947.pt
[LOG] Saving tensor n0_to_3_353.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor x_4_947.pt
[LOG] Saving tensor n0_to_4_353.pt
[LOG] Saving tensor n0_to_0_947.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Process 63: Calculating Neighbors
[LOG] Loading pickle file data_505.pickle
[LOG] Processing node features for num 505
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n1_to_2_353.pt
[LOG] Saving tensor n1_to_1_947.pt
[LOG] Processing edge features for num 505
[LOG] Saving tensor n2_to_2_947.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n1_to_3_353.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n3_to_3_947.pt
[LOG] Processing tetra features for num 505
[LOG] Process 89: Created combinatorial complex for file data_718.hdf5
[LOG] Saving tensor n1_to_4_353.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing cluster features for num 505
[LOG] Saving tensor n4_to_4_947.pt
[LOG] Processing cluster features for num 505
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing adjacency and incidence matrices for num 505
[LOG] Computing n0_to_0 for num 505
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_1 for num 505
[LOG] Process 89: Calculating Neighbors
[LOG] Loading pickle file data_718.pickle
[LOG] Processing node features for num 718
[LOG] Processing edge features for num 718
[LOG] Processing tetra features for num 718
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n0_to_1_947.pt
[LOG] Saving tensor n2_to_3_353.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n2_to_4_353.pt
[LOG] Saving tensor n0_to_2_947.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n3_to_4_353.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n0_to_3_947.pt
[LOG] Saving tensor global_feature_353.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Processing cluster features for num 718
[LOG] Process 44: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_4_947.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 505
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Process 107: Calculating Neighbors
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Loading pickle file data_855.pickle
[LOG] Saving tensor n1_to_2_947.pt
[LOG] Processing node features for num 855
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n1_to_3_947.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Processing cluster features for num 718
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n1_to_4_947.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n2_to_3_947.pt
[LOG] Processing edge features for num 855
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Processing adjacency and incidence matrices for num 718
[LOG] Computing n0_to_0 for num 718
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n2_to_4_947.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n3_to_4_947.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n1_to_1 for num 718
[LOG] Saving tensor global_feature_947.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Process 120: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n3_to_3 (adjacency) for num 505
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n4_to_4 (coadjacency) for num 505
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n0_to_1 for num 505
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n0_to_2 for num 505
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 718
[LOG] Computing n2_to_2 (adjacency) for num 847
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing tetra features for num 855
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_3 (adjacency) for num 718
[LOG] Computing n4_to_4 (coadjacency) for num 718
[LOG] Computing n0_to_1 for num 718
[LOG] Computing n0_to_2 for num 718
[LOG] Computing n0_to_3 for num 505
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_4 for num 505
[LOG] Computing n1_to_2 for num 505
[LOG] Processing cluster features for num 855
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_3 for num 505
[LOG] Processing cluster features for num 855
[LOG] Computing n1_to_4 for num 505
[LOG] Computing n2_to_3 for num 505
[LOG] Computing n2_to_4 for num 505
[LOG] Computing n3_to_4 for num 505
[LOG] Global feature for num 505
[LOG] Global feature for num 505
[LOG] Saving tensor x_0_505.pt
[LOG] Computing n0_to_3 for num 718
[LOG] Saving tensor x_1_505.pt
[LOG] Saving tensor x_2_505.pt
[LOG] Processing adjacency and incidence matrices for num 855
[LOG] Saving tensor x_3_505.pt
[LOG] Computing n0_to_0 for num 855
[LOG] Saving tensor x_4_505.pt
[LOG] Computing n0_to_4 for num 718
[LOG] Computing n1_to_2 for num 718
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_3 for num 718
[LOG] Computing n1_to_4 for num 718
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_3 for num 718
[LOG] Computing n2_to_4 for num 718
[LOG] Saving tensor n0_to_0_505.pt
[LOG] Saving tensor n1_to_1_505.pt
[LOG] Computing n3_to_4 for num 718
[LOG] Global feature for num 718
[LOG] Saving tensor n2_to_2_505.pt
[LOG] Global feature for num 718
[LOG] Saving tensor x_0_718.pt
[LOG] Saving tensor x_1_718.pt
[LOG] Saving tensor x_2_718.pt
[LOG] Saving tensor n3_to_3_505.pt
[LOG] Saving tensor x_3_718.pt
[LOG] Saving tensor n4_to_4_505.pt
[LOG] Saving tensor x_4_718.pt
[LOG] Saving tensor n0_to_0_718.pt
[LOG] Saving tensor n0_to_1_505.pt
[LOG] Saving tensor n0_to_2_505.pt
[LOG] Saving tensor n1_to_1_718.pt
[LOG] Saving tensor n0_to_3_505.pt
[LOG] Saving tensor n2_to_2_718.pt
[LOG] Saving tensor n0_to_4_505.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n1_to_2_505.pt
[LOG] Saving tensor n3_to_3_718.pt
[LOG] Saving tensor n1_to_3_505.pt
[LOG] Saving tensor n4_to_4_718.pt
[LOG] Saving tensor n1_to_4_505.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n2_to_3_505.pt
[LOG] Saving tensor n0_to_1_718.pt
[LOG] Saving tensor n2_to_4_505.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n0_to_2_718.pt
[LOG] Saving tensor n3_to_4_505.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n0_to_3_718.pt
[LOG] Saving tensor global_feature_505.pt
[LOG] Process 63: Calculating Cross-Cell-Invariants
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n0_to_4_718.pt
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n1_to_2_718.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n1_to_3_718.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n1_to_4_718.pt
[LOG] Saving tensor n2_to_3_718.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n2_to_4_718.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n3_to_4_718.pt
[LOG] Saving tensor global_feature_718.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Process 89: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_1 for num 855
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Process 98: Created combinatorial complex for file data_785.hdf5
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 855
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Process 98: Calculating Neighbors
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Loading pickle file data_785.pickle
[LOG] Processing node features for num 785
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Processing edge features for num 785
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_3 (adjacency) for num 847
[LOG] Processing tetra features for num 785
[LOG] Computing n4_to_4 (coadjacency) for num 847
[LOG] Computing n0_to_1 for num 847
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing cluster features for num 785
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing cluster features for num 785
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3016 Tetrahedra.
    [LOG] Generated 64 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.078125
    [LOG] Max number of nodes per cluster is 68 and the number is 62
[LOG] Processing adjacency and incidence matrices for num 785
[LOG] Computing n0_to_0 for num 785
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] We will select 537 edges and 3016 tetra
[LOG] Edges from tetra 0 and KDTree 1164 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_2 for num 847
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_1 for num 785
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_3 (adjacency) for num 855
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n4_to_4 (coadjacency) for num 855
[LOG] Computing n0_to_1 for num 855
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 568 Tetrahedra.
    [LOG] Generated 15 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 19.133333333333333
    [LOG] Max number of nodes per cluster is 47 and the number is 8
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1861 Tetrahedra.
    [LOG] Generated 59 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.830508474576272
    [LOG] Max number of nodes per cluster is 55 and the number is 19
[LOG] We will select 40 edges and 568 tetra
[LOG] Edges from tetra 0 and KDTree 374 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_2 for num 855
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] We will select 233 edges and 1861 tetra
[LOG] Edges from tetra 0 and KDTree 233 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Removed 0 subset clusters.
[LOG] Process 2: Created combinatorial complex for file data_23.hdf5
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 2: Calculating Neighbors
[LOG] Loading pickle file data_23.pickle
[LOG] Processing node features for num 23
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing edge features for num 23
[LOG] Processing tetra features for num 23
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Processing cluster features for num 23
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing cluster features for num 23
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Processing adjacency and incidence matrices for num 23
[LOG] Computing n0_to_0 for num 23
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n1_to_1 for num 23
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 23
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 23
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n4_to_4 (coadjacency) for num 23
[LOG] Computing n0_to_1 for num 23
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n0_to_2 for num 23
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Process 72: Created combinatorial complex for file data_578.hdf5
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_3 for num 23
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_0_to_1.pt

    [LOG] We Currently have 839 Tetrahedra.
    [LOG] Generated 31 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.967741935483872
    [LOG] Max number of nodes per cluster is 67 and the number is 26
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n0_to_4 for num 23
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n1_to_2 for num 23
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n1_to_3 for num 23
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_4 for num 23
[LOG] Computing n2_to_3 for num 23
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n2_to_4 for num 23
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n3_to_4 for num 23
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Global feature for num 23
[LOG] Global feature for num 23
[LOG] Saving tensor x_0_23.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor x_1_23.pt
[LOG] Saving tensor x_2_23.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor x_3_23.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] We will select 61 edges and 839 tetra
[LOG] Edges from tetra 0 and KDTree 4020 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor x_4_23.pt
[LOG] Saving tensor n0_to_0_23.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n1_to_1_23.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n2_to_2_23.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n3_to_3_23.pt
[LOG] Saving tensor n4_to_4_23.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n0_to_1_23.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n0_to_2_23.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n0_to_3_23.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n0_to_4_23.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n1_to_2_23.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Process 72: Calculating Neighbors
[LOG] Loading pickle file data_578.pickle
[LOG] Processing node features for num 578
[LOG] Processing edge features for num 578
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n1_to_3_23.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n1_to_4_23.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n2_to_3_23.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n2_to_4_23.pt
[LOG] Saving tensor n3_to_4_23.pt
[LOG] Saving tensor global_feature_23.pt
[LOG] Process 2: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing tetra features for num 578
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 105: Created combinatorial complex for file data_843.hdf5
[LOG] Processing cluster features for num 578
[LOG] Processing cluster features for num 578
[LOG] Processing adjacency and incidence matrices for num 578
[LOG] Computing n0_to_0 for num 578
[LOG] GENERATED TETRA
[LOG] Process 105: Calculating Neighbors
[LOG] Loading pickle file data_843.pickle
[LOG] Processing node features for num 843
[LOG] Processing edge features for num 843
[LOG] Processing tetra features for num 843
[LOG] Removed 1 subset clusters.
[LOG] Processing cluster features for num 843
[LOG] Processing cluster features for num 843
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing adjacency and incidence matrices for num 843
[LOG] Computing n0_to_0 for num 843
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_1 for num 578
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_1 for num 843
[LOG] Computing n2_to_2 (adjacency) for num 843
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_3 (adjacency) for num 843
[LOG] Computing n4_to_4 (coadjacency) for num 843
[LOG] Computing n0_to_1 for num 843
[LOG] Computing n0_to_2 for num 843
[LOG] Process 65: Created combinatorial complex for file data_522.hdf5
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1661 Tetrahedra.
    [LOG] Generated 56 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.017857142857142
    [LOG] Max number of nodes per cluster is 46 and the number is 25
[LOG] Calculating for cell ranks 1 and 4
[LOG] We will select 147 edges and 1661 tetra
[LOG] Edges from tetra 0 and KDTree 435 with 0 edges in common.
[LOG] Process 65: Calculating Neighbors
[LOG] Loading pickle file data_522.pickle
[LOG] Processing node features for num 522
[LOG] Processing edge features for num 522
[LOG] Processing tetra features for num 522
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing cluster features for num 522
[LOG] Processing cluster features for num 522
[LOG] Computing n2_to_2 (adjacency) for num 578
[LOG] Computing n0_to_3 for num 843
[LOG] Processing adjacency and incidence matrices for num 522
[LOG] Computing n0_to_0 for num 522
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_4 for num 843
[LOG] Computing n1_to_1 for num 522
[LOG] Computing n1_to_2 for num 843
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1484 Tetrahedra.
    [LOG] Generated 39 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.948717948717949
    [LOG] Max number of nodes per cluster is 65 and the number is 37
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_3 for num 843
[LOG] Computing n1_to_4 for num 843
[LOG] Computing n2_to_3 for num 843
[LOG] Computing n2_to_4 for num 843
[LOG] Computing n3_to_4 for num 843
[LOG] Global feature for num 843
[LOG] Global feature for num 843
[LOG] Saving tensor x_0_843.pt
[LOG] Saving tensor x_1_843.pt
[LOG] Saving tensor x_2_843.pt
[LOG] Saving tensor x_3_843.pt
[LOG] Saving tensor x_4_843.pt
[LOG] Saving tensor n0_to_0_843.pt
[LOG] Saving tensor n1_to_1_843.pt
[LOG] Saving tensor n2_to_2_843.pt
[LOG] Saving tensor n3_to_3_843.pt
[LOG] Saving tensor n4_to_4_843.pt
[LOG] Saving tensor n0_to_1_843.pt
[LOG] Saving tensor n0_to_2_843.pt
[LOG] Saving tensor n0_to_3_843.pt
[LOG] Computing n2_to_2 (adjacency) for num 522
[LOG] Saving tensor n0_to_4_843.pt
[LOG] Saving tensor n1_to_2_843.pt
[LOG] Saving tensor n1_to_3_843.pt
[LOG] Saving tensor n1_to_4_843.pt
[LOG] Saving tensor n2_to_3_843.pt
[LOG] Saving tensor n2_to_4_843.pt
[LOG] Saving tensor n3_to_4_843.pt
[LOG] Saving tensor global_feature_843.pt
[LOG] Process 105: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n3_to_3 (adjacency) for num 522
[LOG] Computing n4_to_4 (coadjacency) for num 522
[LOG] Computing n0_to_1 for num 522
[LOG] Computing n0_to_2 for num 522
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_3 for num 847
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n3_to_3 (adjacency) for num 578
[LOG] Computing n4_to_4 (coadjacency) for num 578
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_1 for num 578
[LOG] Computing n0_to_4 for num 847
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n0_to_3 for num 855
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n0_to_3 for num 522
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n0_to_4 for num 522
[LOG] Process 95: Created combinatorial complex for file data_764.hdf5
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n1_to_2 for num 522
[LOG] Computing n1_to_2 for num 847
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n0_to_4 for num 855
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n0_to_2 for num 578
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] We will select 228 edges and 1484 tetra
[LOG] Edges from tetra 0 and KDTree 2809 with 0 edges in common.
[LOG] Computing n1_to_2 for num 855
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 95: Calculating Neighbors
[LOG] Loading pickle file data_764.pickle
[LOG] Processing node features for num 764
[LOG] Processing edge features for num 764
[LOG] Calculating for cell ranks 1 and 3
[LOG] GENERATED TETRA
[LOG] Processing tetra features for num 764
[LOG] Computing n1_to_3 for num 522
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n1_to_4 for num 522
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n2_to_3 for num 522
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3452 Tetrahedra.
    [LOG] Generated 91 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.76923076923077
    [LOG] Max number of nodes per cluster is 59 and the number is 75
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Processing cluster features for num 764
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n2_to_4 for num 522
[LOG] Processing cluster features for num 764
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Processing adjacency and incidence matrices for num 764
[LOG] Computing n0_to_0 for num 764
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_4 for num 522
[LOG] Computing n1_to_1 for num 764
[LOG] Global feature for num 522
[LOG] Global feature for num 522
[LOG] Saving tensor x_0_522.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor x_1_522.pt
[LOG] Saving tensor x_2_522.pt
[LOG] Saving tensor x_3_522.pt
[LOG] Saving tensor x_4_522.pt
[LOG] Saving tensor n0_to_0_522.pt
[LOG] Saving tensor n1_to_1_522.pt
[LOG] Saving tensor n2_to_2_522.pt
[LOG] Saving tensor n3_to_3_522.pt
[LOG] Saving tensor n4_to_4_522.pt
[LOG] Computing n2_to_2 (adjacency) for num 764
[LOG] Saving tensor n0_to_1_522.pt
[LOG] Saving tensor n0_to_2_522.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n0_to_3_522.pt
[LOG] Saving tensor n0_to_4_522.pt
[LOG] Saving tensor n1_to_2_522.pt
[LOG] Saving tensor n1_to_3_522.pt
[LOG] Saving tensor n1_to_4_522.pt
[LOG] Saving tensor n2_to_3_522.pt
[LOG] Saving tensor n2_to_4_522.pt
[LOG] Saving tensor n3_to_4_522.pt
[LOG] Saving tensor global_feature_522.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 65: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] We will select 2832 edges and 3452 tetra
[LOG] Edges from tetra 0 and KDTree 2832 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_3 (adjacency) for num 764
[LOG] Computing n4_to_4 (coadjacency) for num 764
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_1 for num 764
[LOG] Computing n0_to_2 for num 764
[LOG] Computing n2_to_2 (adjacency) for num 785
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_3 for num 764
[LOG] Removed 1 subset clusters.
[LOG] Computing n0_to_4 for num 764
[LOG] Computing n1_to_2 for num 764
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_3 for num 764
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_4 for num 764
[LOG] Computing n2_to_3 for num 764
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2449 Tetrahedra.
    [LOG] Generated 75 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.733333333333333
    [LOG] Max number of nodes per cluster is 40 and the number is 37
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_4 for num 764
[LOG] Computing n3_to_4 for num 764
[LOG] Calculating for cell ranks 1 and 3
[LOG] Global feature for num 764
[LOG] Global feature for num 764
[LOG] Saving tensor x_0_764.pt
[LOG] Saving tensor x_1_764.pt
[LOG] Saving tensor x_2_764.pt
[LOG] Saving tensor x_3_764.pt
[LOG] Saving tensor x_4_764.pt
[LOG] Saving tensor n0_to_0_764.pt
[LOG] Computing n0_to_3 for num 578
[LOG] Saving tensor n1_to_1_764.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n2_to_2_764.pt
[LOG] Saving tensor n3_to_3_764.pt
[LOG] Saving tensor n4_to_4_764.pt
[LOG] Process 33: Created combinatorial complex for file data_266.hdf5
[LOG] Saving tensor n0_to_1_764.pt
[LOG] Saving tensor n0_to_2_764.pt
[LOG] Computing n0_to_4 for num 578
[LOG] Saving tensor n0_to_3_764.pt
[LOG] Saving tensor n0_to_4_764.pt
[LOG] Saving tensor n1_to_2_764.pt
[LOG] Saving tensor n1_to_3_764.pt
[LOG] Saving tensor n1_to_4_764.pt
[LOG] Saving tensor n2_to_3_764.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n2_to_4_764.pt
[LOG] Saving tensor n3_to_4_764.pt
[LOG] We will select 600 edges and 2449 tetra
[LOG] Edges from tetra 0 and KDTree 951 with 0 edges in common.
[LOG] Saving tensor global_feature_764.pt
[LOG] Computing n1_to_2 for num 578
[LOG] Process 95: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 33: Calculating Neighbors
[LOG] Loading pickle file data_266.pickle
[LOG] Processing node features for num 266
[LOG] Processing edge features for num 266
[LOG] Processing tetra features for num 266
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1379 Tetrahedra.
    [LOG] Generated 38 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.210526315789474
    [LOG] Max number of nodes per cluster is 32 and the number is 36
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing cluster features for num 266
[LOG] Processing cluster features for num 266
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing adjacency and incidence matrices for num 266
[LOG] Computing n0_to_0 for num 266
[LOG] Computing n1_to_3 for num 855
[LOG] We will select 326 edges and 1379 tetra
[LOG] Edges from tetra 0 and KDTree 431 with 0 edges in common.
[LOG] Computing n1_to_1 for num 266
[LOG] Computing n1_to_4 for num 855
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_3 for num 855
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_2 (adjacency) for num 266
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_4 for num 855
[LOG] Computing n3_to_3 (adjacency) for num 266
[LOG] Computing n4_to_4 (coadjacency) for num 266
[LOG] Computing n0_to_1 for num 266
[LOG] Computing n0_to_2 for num 266
[LOG] Computing n1_to_3 for num 578
[LOG] Computing n3_to_4 for num 855
[LOG] Computing n1_to_4 for num 578
[LOG] Global feature for num 855
[LOG] Global feature for num 855
[LOG] Saving tensor x_0_855.pt
[LOG] Saving tensor x_1_855.pt
[LOG] Saving tensor x_2_855.pt
[LOG] Saving tensor x_3_855.pt
[LOG] Computing n2_to_3 for num 578
[LOG] Saving tensor x_4_855.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n0_to_0_855.pt
[LOG] Saving tensor n1_to_1_855.pt
[LOG] Saving tensor n2_to_2_855.pt
[LOG] Computing n0_to_3 for num 266
[LOG] Computing n0_to_4 for num 266
[LOG] Computing n1_to_2 for num 266
[LOG] Saving tensor n3_to_3_855.pt
[LOG] Saving tensor n4_to_4_855.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n0_to_1_855.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_3 for num 266
[LOG] Computing n1_to_4 for num 266
[LOG] Computing n2_to_3 for num 266
[LOG] Computing n2_to_4 for num 266
[LOG] Computing n3_to_4 for num 266
[LOG] Global feature for num 266
[LOG] Global feature for num 266
[LOG] Saving tensor x_0_266.pt
[LOG] Saving tensor x_1_266.pt
[LOG] Saving tensor x_2_266.pt
[LOG] Saving tensor n0_to_2_855.pt
[LOG] Saving tensor x_3_266.pt
[LOG] Saving tensor x_4_266.pt
[LOG] Saving tensor n0_to_0_266.pt
[LOG] Saving tensor n0_to_3_855.pt
[LOG] Saving tensor n1_to_1_266.pt
[LOG] Saving tensor n0_to_4_855.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n2_to_2_266.pt
[LOG] Saving tensor n1_to_2_855.pt
[LOG] Saving tensor n3_to_3_266.pt
[LOG] Saving tensor n1_to_3_855.pt
[LOG] Process 12: Created combinatorial complex for file data_100.hdf5
[LOG] Saving tensor n4_to_4_266.pt
[LOG] Saving tensor n1_to_4_855.pt
[LOG] Saving tensor n2_to_3_855.pt
[LOG] Saving tensor n0_to_1_266.pt
[LOG] Saving tensor n0_to_2_266.pt
[LOG] Saving tensor n2_to_4_855.pt
[LOG] Saving tensor n0_to_3_266.pt
[LOG] Saving tensor n3_to_4_855.pt
[LOG] Saving tensor n0_to_4_266.pt
[LOG] Saving tensor global_feature_855.pt
[LOG] Saving tensor n1_to_2_266.pt
[LOG] Process 107: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n1_to_3_266.pt
[LOG] Saving tensor n1_to_4_266.pt
[LOG] Saving tensor n2_to_3_266.pt
[LOG] Saving tensor n2_to_4_266.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n3_to_4_266.pt
[LOG] Saving tensor global_feature_266.pt
[LOG] Process 33: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 12: Calculating Neighbors
[LOG] Loading pickle file data_100.pickle
[LOG] Processing node features for num 100
[LOG] Processing edge features for num 100
[LOG] Removed 3 subset clusters.
[LOG] Processing tetra features for num 100
[LOG] Processing cluster features for num 100
[LOG] Processing cluster features for num 100
[LOG] Processing adjacency and incidence matrices for num 100
[LOG] Computing n0_to_0 for num 100
[LOG] Removed 2 subset clusters.
[LOG] Computing n1_to_1 for num 100
[LOG] Computing n2_to_4 for num 578
[LOG] Computing n2_to_2 (adjacency) for num 100
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 86: Created combinatorial complex for file data_690.hdf5
[LOG] Computing n3_to_4 for num 578
[LOG] Global feature for num 578
[LOG] Global feature for num 578
[LOG] Saving tensor x_0_578.pt
[LOG] Saving tensor x_1_578.pt
[LOG] Saving tensor x_2_578.pt
[LOG] Saving tensor x_3_578.pt
[LOG] Saving tensor x_4_578.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n0_to_0_578.pt
[LOG] Computing n3_to_3 (adjacency) for num 100
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n1_to_1_578.pt
[LOG] Computing n4_to_4 (coadjacency) for num 100
[LOG] Saving tensor n2_to_2_578.pt
[LOG] Computing n0_to_1 for num 100
[LOG] Saving tensor n3_to_3_578.pt
[LOG] Saving tensor n4_to_4_578.pt
[LOG] Saving tensor n0_to_1_578.pt
[LOG] Saving tensor n0_to_2_578.pt
[LOG] Saving tensor n0_to_3_578.pt
[LOG] Saving tensor n0_to_4_578.pt
[LOG] Computing n0_to_2 for num 100
[LOG] Saving tensor n1_to_2_578.pt
[LOG] Saving tensor n1_to_3_578.pt
[LOG] Saving tensor n1_to_4_578.pt
[LOG] Saving tensor n2_to_3_578.pt
[LOG] Saving tensor n2_to_4_578.pt
[LOG] Saving tensor n3_to_4_578.pt
[LOG] Saving tensor global_feature_578.pt
[LOG] Process 72: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 86: Calculating Neighbors
[LOG] Loading pickle file data_690.pickle
[LOG] Processing node features for num 690
[LOG] Processing edge features for num 690
[LOG] Process 30: Created combinatorial complex for file data_241.hdf5
[LOG] Processing tetra features for num 690
[LOG] Computing n0_to_3 for num 100
[LOG] Computing n0_to_4 for num 100
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_2 for num 100
[LOG] Processing cluster features for num 690
[LOG] Computing n1_to_3 for num 847
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1284 Tetrahedra.
    [LOG] Generated 42 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.333333333333334
    [LOG] Max number of nodes per cluster is 48 and the number is 32
[LOG] Processing cluster features for num 690
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing adjacency and incidence matrices for num 690
[LOG] Computing n0_to_0 for num 690
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_4 for num 847
[LOG] We will select 281 edges and 1284 tetra
[LOG] Edges from tetra 0 and KDTree 1207 with 0 edges in common.
[LOG] Computing n1_to_3 for num 100
[LOG] Computing n1_to_4 for num 100
[LOG] Computing n2_to_3 for num 100
[LOG] GENERATED TETRA
[LOG] Computing n2_to_4 for num 100
[LOG] Computing n2_to_3 for num 847
[LOG] Computing n1_to_1 for num 690
[LOG] Computing n3_to_4 for num 100
[LOG] Global feature for num 100
[LOG] Global feature for num 100
[LOG] Saving tensor x_0_100.pt
[LOG] Saving tensor x_1_100.pt
[LOG] Saving tensor x_2_100.pt
[LOG] Saving tensor x_3_100.pt
[LOG] Saving tensor x_4_100.pt
[LOG] Saving tensor n0_to_0_100.pt
[LOG] Saving tensor n1_to_1_100.pt
[LOG] Saving tensor n2_to_2_100.pt
[LOG] Saving tensor n3_to_3_100.pt
[LOG] Saving tensor n4_to_4_100.pt
[LOG] Saving tensor n0_to_1_100.pt
[LOG] Saving tensor n0_to_2_100.pt
[LOG] Saving tensor n0_to_3_100.pt
[LOG] Saving tensor n0_to_4_100.pt
[LOG] Saving tensor n1_to_2_100.pt
[LOG] Saving tensor n1_to_3_100.pt
[LOG] Saving tensor n1_to_4_100.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n2_to_3_100.pt
[LOG] Saving tensor n2_to_4_100.pt
[LOG] Saving tensor n3_to_4_100.pt
[LOG] Saving tensor global_feature_100.pt
[LOG] Process 12: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_4 for num 847
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 56: Created combinatorial complex for file data_452.hdf5
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_4 for num 847
[LOG] Global feature for num 847
[LOG] Computing n2_to_2 (adjacency) for num 690
[LOG] Global feature for num 847
[LOG] Saving tensor x_0_847.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor x_1_847.pt
[LOG] Saving tensor x_2_847.pt
[LOG] Saving tensor x_3_847.pt
[LOG] Saving tensor x_4_847.pt
[LOG] Saving tensor n0_to_0_847.pt
[LOG] Saving tensor n1_to_1_847.pt
[LOG] Saving tensor n2_to_2_847.pt
[LOG] Saving tensor n3_to_3_847.pt
[LOG] Saving tensor n4_to_4_847.pt
[LOG] Saving tensor n0_to_1_847.pt
[LOG] Saving tensor n0_to_2_847.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n0_to_3_847.pt
[LOG] Saving tensor n0_to_4_847.pt
[LOG] Saving tensor n1_to_2_847.pt
[LOG] Saving tensor n1_to_3_847.pt
[LOG] Process 56: Calculating Neighbors
[LOG] Loading pickle file data_452.pickle
[LOG] Processing node features for num 452
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n1_to_4_847.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n2_to_3_847.pt
[LOG] Processing edge features for num 452
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Processing tetra features for num 452
[LOG] Processing cluster features for num 452
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing cluster features for num 452
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing adjacency and incidence matrices for num 452
[LOG] Computing n0_to_0 for num 452
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n2_to_4_847.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n3_to_4_847.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor global_feature_847.pt
[LOG] Process 106: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n1_to_1 for num 452
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_3 (adjacency) for num 690
[LOG] Process 30: Calculating Neighbors
[LOG] Loading pickle file data_241.pickle
[LOG] Processing node features for num 241
[LOG] Computing n4_to_4 (coadjacency) for num 690
[LOG] Computing n2_to_2 (adjacency) for num 452
[LOG] Computing n0_to_1 for num 690
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing edge features for num 241
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 452
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n4_to_4 (coadjacency) for num 452
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Computing n0_to_1 for num 452
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Computing n0_to_2 for num 690
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing tetra features for num 241
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_2 for num 452
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing cluster features for num 241
[LOG] GENERATED TETRA
[LOG] Processing cluster features for num 241
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing adjacency and incidence matrices for num 241
[LOG] Computing n0_to_0 for num 241
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_3 for num 452
[LOG] Computing n0_to_4 for num 452
[LOG] Computing n1_to_2 for num 452
[LOG] Computing n0_to_3 for num 690
[LOG] Computing n0_to_4 for num 690
[LOG] Computing n1_to_3 for num 452
[LOG] Computing n1_to_4 for num 452
[LOG] Computing n2_to_3 for num 452
[LOG] Computing n1_to_2 for num 690
[LOG] Computing n2_to_4 for num 452
[LOG] Computing n3_to_4 for num 452
[LOG] Global feature for num 452
[LOG] Global feature for num 452
[LOG] Saving tensor x_0_452.pt
[LOG] Saving tensor x_1_452.pt
[LOG] Saving tensor x_2_452.pt
[LOG] Saving tensor x_3_452.pt
[LOG] Saving tensor x_4_452.pt
[LOG] Saving tensor n0_to_0_452.pt
[LOG] Saving tensor n1_to_1_452.pt
[LOG] Saving tensor n2_to_2_452.pt
[LOG] Saving tensor n3_to_3_452.pt
[LOG] Saving tensor n4_to_4_452.pt
[LOG] Saving tensor n0_to_1_452.pt
[LOG] Saving tensor n0_to_2_452.pt
[LOG] Saving tensor n0_to_3_452.pt
[LOG] Saving tensor n0_to_4_452.pt
[LOG] Saving tensor n1_to_2_452.pt
[LOG] Computing n3_to_3 (adjacency) for num 785
[LOG] Saving tensor n1_to_3_452.pt
[LOG] Saving tensor n1_to_4_452.pt
[LOG] Saving tensor n2_to_3_452.pt
[LOG] Saving tensor n2_to_4_452.pt
[LOG] Saving tensor n3_to_4_452.pt
[LOG] Saving tensor global_feature_452.pt
[LOG] Process 56: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n4_to_4 (coadjacency) for num 785
[LOG] Computing n0_to_1 for num 785
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1464 Tetrahedra.
    [LOG] Generated 36 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 19.944444444444443
    [LOG] Max number of nodes per cluster is 102 and the number is 15
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_3 for num 690
[LOG] Computing n1_to_4 for num 690
[LOG] Computing n2_to_3 for num 690
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n2_to_4 for num 690
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 982 Tetrahedra.
    [LOG] Generated 29 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.20689655172414
    [LOG] Max number of nodes per cluster is 101 and the number is 22
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n3_to_4 for num 690
[LOG] Computing n0_to_2 for num 785
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Global feature for num 690
[LOG] Global feature for num 690
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor x_0_690.pt
[LOG] Saving tensor x_1_690.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor x_2_690.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor x_3_690.pt
[LOG] Saving tensor x_4_690.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n0_to_0_690.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n1_to_1_690.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n2_to_2_690.pt
[LOG] We will select 119 edges and 982 tetra
[LOG] Edges from tetra 0 and KDTree 2231 with 0 edges in common.
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n3_to_3_690.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n4_to_4_690.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n0_to_1_690.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n0_to_2_690.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n0_to_3_690.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n0_to_4_690.pt
[LOG] Saving tensor n1_to_2_690.pt
[LOG] Saving tensor n1_to_3_690.pt
[LOG] Saving tensor n1_to_4_690.pt
[LOG] Saving tensor n2_to_3_690.pt
[LOG] Saving tensor n2_to_4_690.pt
[LOG] Saving tensor n3_to_4_690.pt
[LOG] Saving tensor global_feature_690.pt
[LOG] Process 86: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n1_to_1 for num 241
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] We will select 586 edges and 1464 tetra
[LOG] Edges from tetra 0 and KDTree 4196 with 0 edges in common.
[LOG] Process 23: Created combinatorial complex for file data_189.hdf5
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 23: Calculating Neighbors
[LOG] Loading pickle file data_189.pickle
[LOG] Processing node features for num 189
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing edge features for num 189
[LOG] Processing tetra features for num 189
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing cluster features for num 189
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing cluster features for num 189
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing adjacency and incidence matrices for num 189
[LOG] Computing n0_to_0 for num 189
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_1 for num 189
[LOG] Computing n2_to_2 (adjacency) for num 189
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_3 (adjacency) for num 189
[LOG] Computing n4_to_4 (coadjacency) for num 189
[LOG] Computing n0_to_1 for num 189
[LOG] Computing n0_to_2 for num 189
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_3 for num 189
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_4 for num 189
[LOG] Process 78: Created combinatorial complex for file data_627.hdf5
[LOG] Computing n1_to_2 for num 189
[LOG] Computing n1_to_3 for num 189
[LOG] Computing n1_to_4 for num 189
[LOG] Computing n2_to_3 for num 189
[LOG] Computing n2_to_4 for num 189
[LOG] Computing n3_to_4 for num 189
[LOG] Global feature for num 189
[LOG] Global feature for num 189
[LOG] Saving tensor x_0_189.pt
[LOG] Saving tensor x_1_189.pt
[LOG] Saving tensor x_2_189.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor x_3_189.pt
[LOG] Saving tensor x_4_189.pt
[LOG] Saving tensor n0_to_0_189.pt
[LOG] Saving tensor n1_to_1_189.pt
[LOG] Saving tensor n2_to_2_189.pt
[LOG] Saving tensor n3_to_3_189.pt
[LOG] Saving tensor n4_to_4_189.pt
[LOG] Saving tensor n0_to_1_189.pt
[LOG] Saving tensor n0_to_2_189.pt
[LOG] Process 78: Calculating Neighbors
[LOG] Loading pickle file data_627.pickle
[LOG] Saving tensor n0_to_3_189.pt
[LOG] Processing node features for num 627
[LOG] Saving tensor n0_to_4_189.pt
[LOG] Saving tensor n1_to_2_189.pt
[LOG] Saving tensor n1_to_3_189.pt
[LOG] Saving tensor n1_to_4_189.pt
[LOG] Saving tensor n2_to_3_189.pt
[LOG] Processing edge features for num 627
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n2_to_4_189.pt
[LOG] Saving tensor n3_to_4_189.pt
[LOG] Saving tensor global_feature_189.pt
[LOG] Process 23: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing tetra features for num 627
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Processing cluster features for num 627
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Processing cluster features for num 627
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 627
[LOG] Computing n0_to_0 for num 627
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1702 Tetrahedra.
    [LOG] Generated 62 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.35483870967742
    [LOG] Max number of nodes per cluster is 55 and the number is 27
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] We will select 707 edges and 1702 tetra
[LOG] Edges from tetra 0 and KDTree 2315 with 0 edges in common.
[LOG] Computing n1_to_1 for num 627
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_2 (adjacency) for num 627
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_3 (adjacency) for num 627
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n4_to_4 (coadjacency) for num 627
[LOG] Computing n0_to_1 for num 627
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_2 for num 627
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 15: Created combinatorial complex for file data_124.hdf5
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 3
[LOG] GENERATED TETRA
[LOG] Process 15: Calculating Neighbors
[LOG] Loading pickle file data_124.pickle
[LOG] Processing node features for num 124
[LOG] Processing edge features for num 124
[LOG] Processing tetra features for num 124
[LOG] Processing cluster features for num 124
[LOG] Computing n0_to_3 for num 785
[LOG] Processing cluster features for num 124
[LOG] Processing adjacency and incidence matrices for num 124
[LOG] Computing n0_to_0 for num 124
[LOG] Computing n0_to_4 for num 785
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_2 for num 785
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_3 for num 627
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_4 for num 627
[LOG] Computing n1_to_2 for num 627
[LOG] GENERATED TETRA
[LOG] Computing n1_to_1 for num 124
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_3 for num 627
[LOG] Computing n1_to_4 for num 627
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_3 for num 627
[LOG] Computing n2_to_4 for num 627
[LOG] Computing n3_to_4 for num 627
[LOG] Global feature for num 627
[LOG] Global feature for num 627
[LOG] Saving tensor x_0_627.pt
[LOG] Saving tensor x_1_627.pt
[LOG] Saving tensor x_2_627.pt
[LOG] Saving tensor x_3_627.pt
[LOG] Saving tensor x_4_627.pt
[LOG] Saving tensor n0_to_0_627.pt
[LOG] Saving tensor n1_to_1_627.pt
[LOG] Saving tensor n2_to_2_627.pt
[LOG] Saving tensor n3_to_3_627.pt
[LOG] Saving tensor n4_to_4_627.pt
[LOG] Saving tensor n0_to_1_627.pt
[LOG] Saving tensor n0_to_2_627.pt
[LOG] Computing n2_to_2 (adjacency) for num 124
[LOG] Saving tensor n0_to_3_627.pt
[LOG] Saving tensor n0_to_4_627.pt
[LOG] Saving tensor n1_to_2_627.pt
[LOG] Saving tensor n1_to_3_627.pt
[LOG] Saving tensor n1_to_4_627.pt
[LOG] Saving tensor n2_to_3_627.pt
[LOG] Saving tensor n2_to_4_627.pt
[LOG] Saving tensor n3_to_4_627.pt
[LOG] Saving tensor global_feature_627.pt
[LOG] Process 78: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_2 (adjacency) for num 241
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1353 Tetrahedra.
    [LOG] Generated 38 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.447368421052632
    [LOG] Max number of nodes per cluster is 44 and the number is 27
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n3_to_3 (adjacency) for num 124
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n4_to_4 (coadjacency) for num 124
[LOG] Computing n0_to_1 for num 124
[LOG] Calculating for cell ranks 0 and 3
[LOG] We will select 201 edges and 1353 tetra
[LOG] Edges from tetra 0 and KDTree 853 with 0 edges in common.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1065 Tetrahedra.
    [LOG] Generated 43 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.837209302325581
    [LOG] Max number of nodes per cluster is 48 and the number is 16
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] We will select 186 edges and 1065 tetra
[LOG] Edges from tetra 0 and KDTree 2445 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n0_to_2 for num 124
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 28: Created combinatorial complex for file data_230.hdf5
[LOG] Process 10: Created combinatorial complex for file data_83.hdf5
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 28: Calculating Neighbors
[LOG] Loading pickle file data_230.pickle
[LOG] Processing node features for num 230
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing edge features for num 230
[LOG] Process 10: Calculating Neighbors
[LOG] Loading pickle file data_83.pickle
[LOG] Processing node features for num 83
[LOG] Processing edge features for num 83
[LOG] Processing tetra features for num 230
[LOG] Processing tetra features for num 83
[LOG] Processing cluster features for num 230
[LOG] Processing cluster features for num 83
[LOG] Processing cluster features for num 230
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 864 Tetrahedra.
    [LOG] Generated 39 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.487179487179485
    [LOG] Max number of nodes per cluster is 61 and the number is 37
[LOG] Processing cluster features for num 83
[LOG] Processing adjacency and incidence matrices for num 230
[LOG] Computing n0_to_0 for num 230
[LOG] Processing adjacency and incidence matrices for num 83
[LOG] Computing n0_to_0 for num 83
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_3 (adjacency) for num 241
[LOG] Computing n1_to_1 for num 83
[LOG] Computing n4_to_4 (coadjacency) for num 241
[LOG] Computing n0_to_1 for num 241
[LOG] We will select 214 edges and 864 tetra
[LOG] Edges from tetra 0 and KDTree 4510 with 0 edges in common.
[LOG] Computing n0_to_3 for num 124
[LOG] Computing n1_to_1 for num 230
[LOG] Computing n2_to_2 (adjacency) for num 83
[LOG] GENERATED TETRA
[LOG] Computing n0_to_4 for num 124
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_2 for num 124
[LOG] Computing n2_to_2 (adjacency) for num 230
[LOG] Computing n3_to_3 (adjacency) for num 83
[LOG] Computing n4_to_4 (coadjacency) for num 83
[LOG] Computing n0_to_1 for num 83
[LOG] Computing n3_to_3 (adjacency) for num 230
[LOG] Computing n4_to_4 (coadjacency) for num 230
[LOG] Computing n0_to_1 for num 230
[LOG] Computing n0_to_2 for num 83
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_2 for num 230
[LOG] Calculating for cell ranks 4 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 29: Created combinatorial complex for file data_235.hdf5
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 29: Calculating Neighbors
[LOG] Loading pickle file data_235.pickle
[LOG] Processing node features for num 235
[LOG] Computing n1_to_3 for num 124
[LOG] Processing edge features for num 235
[LOG] Computing n1_to_4 for num 124
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing tetra features for num 235
[LOG] Computing n2_to_3 for num 124
[LOG] Computing n0_to_3 for num 83
[LOG] Processing cluster features for num 235
[LOG] Computing n2_to_4 for num 124
[LOG] Computing n0_to_4 for num 83
[LOG] Processing cluster features for num 235
[LOG] Computing n1_to_2 for num 83
[LOG] Computing n3_to_4 for num 124
[LOG] Global feature for num 124
[LOG] Global feature for num 124
[LOG] Saving tensor x_0_124.pt
[LOG] Processing adjacency and incidence matrices for num 235
[LOG] Computing n0_to_0 for num 235
[LOG] Saving tensor x_1_124.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor x_2_124.pt
[LOG] Saving tensor x_3_124.pt
[LOG] Saving tensor x_4_124.pt
[LOG] Saving tensor n0_to_0_124.pt
[LOG] Saving tensor n1_to_1_124.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n2_to_2_124.pt
[LOG] Saving tensor n3_to_3_124.pt
[LOG] Saving tensor n4_to_4_124.pt
[LOG] Saving tensor n0_to_1_124.pt
[LOG] Saving tensor n0_to_2_124.pt
[LOG] Saving tensor n0_to_3_124.pt
[LOG] Saving tensor n0_to_4_124.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n1_to_2_124.pt
[LOG] Saving tensor n1_to_3_124.pt
[LOG] Saving tensor n1_to_4_124.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n1_to_3 for num 83
[LOG] Saving tensor n2_to_3_124.pt
[LOG] Computing n1_to_4 for num 83
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Computing n2_to_3 for num 83
[LOG] Saving tensor n2_to_4_124.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n3_to_4_124.pt
[LOG] Saving tensor global_feature_124.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Process 15: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n2_to_4 for num 83
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n0_to_3 for num 230
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n3_to_4 for num 83
[LOG] Global feature for num 83
[LOG] Global feature for num 83
[LOG] Saving tensor x_0_83.pt
[LOG] Saving tensor x_1_83.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n0_to_4 for num 230
[LOG] Saving tensor x_2_83.pt
[LOG] Saving tensor x_3_83.pt
[LOG] Saving tensor x_4_83.pt
[LOG] Saving tensor n0_to_0_83.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n1_to_1_83.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n2_to_2_83.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n3_to_3_83.pt
[LOG] Computing n1_to_2 for num 230
[LOG] Saving tensor n4_to_4_83.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n0_to_1_83.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n0_to_2_83.pt
[LOG] Computing n1_to_1 for num 235
[LOG] Saving tensor n0_to_3_83.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n0_to_4_83.pt
[LOG] Saving tensor n1_to_2_83.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n1_to_3_83.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n1_to_4_83.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n2_to_3_83.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n2_to_4_83.pt
[LOG] Saving tensor n3_to_4_83.pt
[LOG] Computing n1_to_3 for num 230
[LOG] Computing n1_to_4 for num 230
[LOG] Saving tensor global_feature_83.pt
[LOG] Process 10: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n2_to_3 for num 230
[LOG] Computing n2_to_2 (adjacency) for num 235
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n2_to_4 for num 230
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1711 Tetrahedra.
    [LOG] Generated 39 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.179487179487179
    [LOG] Max number of nodes per cluster is 54 and the number is 18
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n3_to_4 for num 230
[LOG] Global feature for num 230
[LOG] Global feature for num 230
[LOG] Saving tensor x_0_230.pt
[LOG] Computing n3_to_3 (adjacency) for num 235
[LOG] Saving tensor x_1_230.pt
[LOG] Computing n4_to_4 (coadjacency) for num 235
[LOG] Saving tensor x_2_230.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor x_3_230.pt
[LOG] Computing n0_to_1 for num 235
[LOG] Saving tensor x_4_230.pt
[LOG] Saving tensor n0_to_0_230.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n1_to_1_230.pt
[LOG] Saving tensor n2_to_2_230.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n3_to_3_230.pt
[LOG] Saving tensor n4_to_4_230.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n0_to_1_230.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n0_to_2_230.pt
[LOG] We will select 267 edges and 1711 tetra
[LOG] Edges from tetra 0 and KDTree 867 with 0 edges in common.
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n0_to_3_230.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n0_to_4_230.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n1_to_2_230.pt
[LOG] Saving tensor n1_to_3_230.pt
[LOG] Saving tensor n1_to_4_230.pt
[LOG] Saving tensor n2_to_3_230.pt
[LOG] Saving tensor n2_to_4_230.pt
[LOG] Saving tensor n3_to_4_230.pt
[LOG] Saving tensor global_feature_230.pt
[LOG] Process 28: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_2 for num 235
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_2 for num 241
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_3 for num 235
[LOG] Computing n0_to_4 for num 235
[LOG] Removed 0 subset clusters.
[LOG] Computing n1_to_2 for num 235
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_3 for num 235
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_4 for num 235
[LOG] Computing n2_to_3 for num 235
[LOG] Computing n2_to_4 for num 235
[LOG] Computing n3_to_4 for num 235
[LOG] Global feature for num 235
[LOG] Calculating for cell ranks 4 and 4
[LOG] Global feature for num 235
[LOG] Saving tensor x_0_235.pt
[LOG] Saving tensor x_1_235.pt
[LOG] Saving tensor x_2_235.pt
[LOG] Saving tensor x_3_235.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor x_4_235.pt
[LOG] Saving tensor n0_to_0_235.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 46: Created combinatorial complex for file data_373.hdf5
[LOG] Saving tensor n1_to_1_235.pt
[LOG] Saving tensor n2_to_2_235.pt
[LOG] Saving tensor n3_to_3_235.pt
[LOG] Saving tensor n4_to_4_235.pt
[LOG] Saving tensor n0_to_1_235.pt
[LOG] Saving tensor n0_to_2_235.pt
[LOG] Saving tensor n0_to_3_235.pt
[LOG] Saving tensor n0_to_4_235.pt
[LOG] Saving tensor n1_to_2_235.pt
[LOG] Saving tensor n1_to_3_235.pt
[LOG] Saving tensor n1_to_4_235.pt
[LOG] Saving tensor n2_to_3_235.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n2_to_4_235.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n3_to_4_235.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor global_feature_235.pt
[LOG] Process 29: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2096 Tetrahedra.
    [LOG] Generated 44 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.181818181818183
    [LOG] Max number of nodes per cluster is 102 and the number is 41
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Process 46: Calculating Neighbors
[LOG] Loading pickle file data_373.pickle
[LOG] Processing node features for num 373
[LOG] Processing edge features for num 373
[LOG] Processing tetra features for num 373
[LOG] Computing n1_to_3 for num 785
[LOG] We will select 282 edges and 2096 tetra
[LOG] Edges from tetra 0 and KDTree 1886 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing cluster features for num 373
[LOG] Processing cluster features for num 373
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1832 Tetrahedra.
    [LOG] Generated 59 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.40677966101695
    [LOG] Max number of nodes per cluster is 80 and the number is 56
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Processing adjacency and incidence matrices for num 373
[LOG] Computing n0_to_0 for num 373
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_4 for num 785
[LOG] Computing n1_to_1 for num 373
[LOG] Calculating for cell ranks 3 and 4
[LOG] We will select 246 edges and 1832 tetra
[LOG] Edges from tetra 0 and KDTree 1324 with 0 edges in common.
[LOG] Computing n2_to_3 for num 785
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_2 (adjacency) for num 373
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 373
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n4_to_4 (coadjacency) for num 373
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_1 for num 373
[LOG] Computing n0_to_2 for num 373
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n2_to_4 for num 785
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Removed 3 subset clusters.
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n0_to_3 for num 373
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n0_to_4 for num 373
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1228 Tetrahedra.
    [LOG] Generated 48 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.5
    [LOG] Max number of nodes per cluster is 23 and the number is 4
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n1_to_2 for num 373
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Process 102: Created combinatorial complex for file data_818.hdf5
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n3_to_4 for num 785
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Global feature for num 785
[LOG] Global feature for num 785
[LOG] Saving tensor x_0_785.pt
[LOG] We will select 349 edges and 1228 tetra
[LOG] Edges from tetra 0 and KDTree 349 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor x_1_785.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor x_2_785.pt
[LOG] Saving tensor x_3_785.pt
[LOG] Saving tensor x_4_785.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n0_to_0_785.pt
[LOG] Saving tensor n1_to_1_785.pt
[LOG] Saving tensor n2_to_2_785.pt
[LOG] Saving tensor n3_to_3_785.pt
[LOG] Saving tensor n4_to_4_785.pt
[LOG] Process 91: Created combinatorial complex for file data_732.hdf5
[LOG] Saving tensor n0_to_1_785.pt
[LOG] Saving tensor n0_to_2_785.pt
[LOG] Saving tensor n0_to_3_785.pt
[LOG] Saving tensor n0_to_4_785.pt
[LOG] Computing n1_to_3 for num 373
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n1_to_2_785.pt
[LOG] Computing n1_to_4 for num 373
[LOG] Saving tensor n1_to_3_785.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n1_to_4_785.pt
[LOG] Computing n2_to_3 for num 373
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n2_to_3_785.pt
[LOG] Process 102: Calculating Neighbors
[LOG] Loading pickle file data_818.pickle
[LOG] Processing node features for num 818
[LOG] Saving tensor n2_to_4_785.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n3_to_4_785.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Processing edge features for num 818
[LOG] Saving tensor global_feature_785.pt
[LOG] Process 98: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n2_to_4 for num 373
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n0_to_3 for num 241
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] GENERATED TETRA
[LOG] Processing tetra features for num 818
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n3_to_4 for num 373
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Global feature for num 373
[LOG] Global feature for num 373
[LOG] Saving tensor x_0_373.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor x_1_373.pt
[LOG] Saving tensor x_2_373.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor x_3_373.pt
[LOG] Saving tensor x_4_373.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n0_to_0_373.pt
[LOG] Saving tensor n1_to_1_373.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n2_to_2_373.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n3_to_3_373.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing cluster features for num 818
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n4_to_4_373.pt
[LOG] Computing n0_to_4 for num 241
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n0_to_1_373.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n0_to_2_373.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n0_to_3_373.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n0_to_4_373.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 4084 Tetrahedra.
    [LOG] Generated 105 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.847619047619048
    [LOG] Max number of nodes per cluster is 52 and the number is 71
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n1_to_2_373.pt
[LOG] Saving tensor n1_to_3_373.pt
[LOG] Processing cluster features for num 818
[LOG] Saving tensor n1_to_4_373.pt
[LOG] Saving tensor n2_to_3_373.pt
[LOG] Process 91: Calculating Neighbors
[LOG] Loading pickle file data_732.pickle
[LOG] Processing node features for num 732
[LOG] Saving tensor n2_to_4_373.pt
[LOG] Saving tensor n3_to_4_373.pt
[LOG] Saving tensor global_feature_373.pt
[LOG] Processing edge features for num 732
[LOG] Process 46: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing adjacency and incidence matrices for num 818
[LOG] Computing n0_to_0 for num 818
[LOG] Computing n1_to_2 for num 241
[LOG] Processing tetra features for num 732
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_1 for num 818
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 680 Tetrahedra.
    [LOG] Generated 26 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.807692307692308
    [LOG] Max number of nodes per cluster is 27 and the number is 9
[LOG] Processing cluster features for num 732
[LOG] Processing cluster features for num 732
[LOG] We will select 100 edges and 680 tetra
[LOG] Edges from tetra 0 and KDTree 220 with 0 edges in common.
[LOG] Processing adjacency and incidence matrices for num 732
[LOG] Computing n0_to_0 for num 732
[LOG] Computing n1_to_1 for num 732
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_2 (adjacency) for num 818
[LOG] We will select 1201 edges and 4084 tetra
[LOG] Edges from tetra 0 and KDTree 1201 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_2 (adjacency) for num 732
[LOG] Computing n3_to_3 (adjacency) for num 818
[LOG] Computing n4_to_4 (coadjacency) for num 818
[LOG] Removed 4 subset clusters.
[LOG] Computing n0_to_1 for num 818
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_2 for num 818
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 89: Created combinatorial complex for file data_719.hdf5
[LOG] Process 89: Calculating Neighbors
[LOG] Loading pickle file data_719.pickle
[LOG] Processing node features for num 719
[LOG] Processing edge features for num 719
[LOG] Processing tetra features for num 719
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing cluster features for num 719
[LOG] Processing cluster features for num 719
[LOG] Processing adjacency and incidence matrices for num 719
[LOG] Computing n0_to_0 for num 719
[LOG] Computing n1_to_1 for num 719
[LOG] Process 77: Created combinatorial complex for file data_617.hdf5
[LOG] Computing n3_to_3 (adjacency) for num 732
[LOG] Computing n2_to_2 (adjacency) for num 719
[LOG] Computing n4_to_4 (coadjacency) for num 732
[LOG] Computing n0_to_1 for num 732
[LOG] Computing n3_to_3 (adjacency) for num 719
[LOG] Computing n4_to_4 (coadjacency) for num 719
[LOG] Computing n0_to_1 for num 719
[LOG] Computing n0_to_2 for num 719
[LOG] Computing n0_to_2 for num 732
[LOG] Computing n0_to_3 for num 719
[LOG] Computing n0_to_4 for num 719
[LOG] Process 77: Calculating Neighbors
[LOG] Loading pickle file data_617.pickle
[LOG] Processing node features for num 617
[LOG] Computing n1_to_2 for num 719
[LOG] Processing edge features for num 617
[LOG] Processing tetra features for num 617
[LOG] Computing n1_to_3 for num 719
[LOG] Computing n1_to_4 for num 719
[LOG] Computing n2_to_3 for num 719
[LOG] Computing n2_to_4 for num 719
[LOG] Computing n3_to_4 for num 719
[LOG] Global feature for num 719
[LOG] Processing cluster features for num 617
[LOG] Global feature for num 719
[LOG] Saving tensor x_0_719.pt
[LOG] Saving tensor x_1_719.pt
[LOG] Saving tensor x_2_719.pt
[LOG] Saving tensor x_3_719.pt
[LOG] Saving tensor x_4_719.pt
[LOG] Saving tensor n0_to_0_719.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing cluster features for num 617
[LOG] Saving tensor n1_to_1_719.pt
[LOG] Saving tensor n2_to_2_719.pt
[LOG] Saving tensor n3_to_3_719.pt
[LOG] Saving tensor n4_to_4_719.pt
[LOG] Saving tensor n0_to_1_719.pt
[LOG] Processing adjacency and incidence matrices for num 617
[LOG] Computing n0_to_0 for num 617
[LOG] Saving tensor n0_to_2_719.pt
[LOG] Saving tensor n0_to_3_719.pt
[LOG] Saving tensor n0_to_4_719.pt
[LOG] Saving tensor n1_to_2_719.pt
[LOG] Saving tensor n1_to_3_719.pt
[LOG] Saving tensor n1_to_4_719.pt
[LOG] Saving tensor n2_to_3_719.pt
[LOG] Computing n1_to_1 for num 617
[LOG] Saving tensor n2_to_4_719.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n3_to_4_719.pt
[LOG] Saving tensor global_feature_719.pt
[LOG] Process 89: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 818
[LOG] Computing n0_to_4 for num 818
[LOG] Computing n1_to_2 for num 818
[LOG] Computing n2_to_2 (adjacency) for num 617
[LOG] Computing n3_to_3 (adjacency) for num 617
[LOG] Computing n4_to_4 (coadjacency) for num 617
[LOG] Computing n0_to_1 for num 617
[LOG] Calculating for cell ranks 0 and 1
[LOG] GENERATED TETRA
[LOG] Computing n0_to_2 for num 617
[LOG] Computing n1_to_3 for num 818
[LOG] Computing n1_to_4 for num 818
[LOG] Computing n2_to_3 for num 818
[LOG] Computing n2_to_4 for num 818
[LOG] Computing n0_to_3 for num 732
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_4 for num 818
[LOG] Global feature for num 818
[LOG] Global feature for num 818
[LOG] Saving tensor x_0_818.pt
[LOG] Saving tensor x_1_818.pt
[LOG] Saving tensor x_2_818.pt
[LOG] Saving tensor x_3_818.pt
[LOG] Computing n0_to_4 for num 732
[LOG] Saving tensor x_4_818.pt
[LOG] Saving tensor n0_to_0_818.pt
[LOG] Saving tensor n1_to_1_818.pt
[LOG] Computing n0_to_3 for num 617
[LOG] Saving tensor n2_to_2_818.pt
[LOG] Computing n0_to_4 for num 617
[LOG] Saving tensor n3_to_3_818.pt
[LOG] Computing n1_to_2 for num 732
[LOG] Saving tensor n4_to_4_818.pt
[LOG] Saving tensor n0_to_1_818.pt
[LOG] Computing n1_to_2 for num 617
[LOG] Saving tensor n0_to_2_818.pt
[LOG] Saving tensor n0_to_3_818.pt
[LOG] Saving tensor n0_to_4_818.pt
[LOG] Saving tensor n1_to_2_818.pt
[LOG] Saving tensor n1_to_3_818.pt
[LOG] Saving tensor n1_to_4_818.pt
[LOG] Saving tensor n2_to_3_818.pt
[LOG] Saving tensor n2_to_4_818.pt
[LOG] Saving tensor n3_to_4_818.pt
[LOG] Saving tensor global_feature_818.pt
[LOG] Process 102: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_3 for num 617
[LOG] Computing n1_to_4 for num 617
[LOG] Computing n2_to_3 for num 617
[LOG] Computing n2_to_4 for num 617
[LOG] Computing n1_to_3 for num 732
[LOG] Computing n1_to_4 for num 732
[LOG] Computing n2_to_3 for num 732
[LOG] Computing n3_to_4 for num 617
[LOG] Global feature for num 617
[LOG] Global feature for num 617
[LOG] Saving tensor x_0_617.pt
[LOG] Saving tensor x_1_617.pt
[LOG] Saving tensor x_2_617.pt
[LOG] Saving tensor x_3_617.pt
[LOG] Saving tensor x_4_617.pt
[LOG] Saving tensor n0_to_0_617.pt
[LOG] Saving tensor n1_to_1_617.pt
[LOG] Saving tensor n2_to_2_617.pt
[LOG] Computing n2_to_4 for num 732
[LOG] Saving tensor n3_to_3_617.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n4_to_4_617.pt
[LOG] Saving tensor n0_to_1_617.pt
[LOG] Saving tensor n0_to_2_617.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n0_to_3_617.pt
[LOG] Saving tensor n0_to_4_617.pt
[LOG] Saving tensor n1_to_2_617.pt
[LOG] Saving tensor n1_to_3_617.pt
[LOG] Saving tensor n1_to_4_617.pt
[LOG] Computing n3_to_4 for num 732
[LOG] Global feature for num 732
[LOG] Global feature for num 732
[LOG] Saving tensor x_0_732.pt
[LOG] Saving tensor n2_to_3_617.pt
[LOG] Saving tensor x_1_732.pt
[LOG] Saving tensor n2_to_4_617.pt
[LOG] Saving tensor x_2_732.pt
[LOG] Saving tensor x_3_732.pt
[LOG] Saving tensor n3_to_4_617.pt
[LOG] Saving tensor x_4_732.pt
[LOG] Saving tensor global_feature_617.pt
[LOG] Saving tensor n0_to_0_732.pt
[LOG] Process 77: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n1_to_1_732.pt
[LOG] Saving tensor n2_to_2_732.pt
[LOG] Saving tensor n3_to_3_732.pt
[LOG] Saving tensor n4_to_4_732.pt
[LOG] Saving tensor n0_to_1_732.pt
[LOG] Saving tensor n0_to_2_732.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n0_to_3_732.pt
[LOG] Saving tensor n0_to_4_732.pt
[LOG] Saving tensor n1_to_2_732.pt
[LOG] Saving tensor n1_to_3_732.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n1_to_4_732.pt
[LOG] Saving tensor n2_to_3_732.pt
[LOG] Saving tensor n2_to_4_732.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n3_to_4_732.pt
[LOG] Saving tensor global_feature_732.pt
[LOG] Process 91: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_3 for num 241
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] GENERATED TETRA
[LOG] Computing n1_to_4 for num 241
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n2_to_3 for num 241
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 88: Created combinatorial complex for file data_705.hdf5
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_4 for num 241
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1315 Tetrahedra.
    [LOG] Generated 42 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.404761904761905
    [LOG] Max number of nodes per cluster is 42 and the number is 9
[LOG] Computing n3_to_4 for num 241
[LOG] Global feature for num 241
[LOG] Global feature for num 241
[LOG] Saving tensor x_0_241.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1627 Tetrahedra.
    [LOG] Generated 55 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.872727272727273
    [LOG] Max number of nodes per cluster is 55 and the number is 29
[LOG] Calculating for cell ranks 1 and 2
[LOG] We will select 91 edges and 1315 tetra
[LOG] Edges from tetra 0 and KDTree 266 with 0 edges in common.
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1372 Tetrahedra.
    [LOG] Generated 33 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 19.393939393939394
    [LOG] Max number of nodes per cluster is 86 and the number is 28
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor x_1_241.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor x_2_241.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor x_3_241.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor x_4_241.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n0_to_0_241.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n1_to_1_241.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n2_to_2_241.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n3_to_3_241.pt
[LOG] Saving tensor n4_to_4_241.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n0_to_1_241.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n0_to_2_241.pt
[LOG] We will select 245 edges and 1372 tetra
[LOG] Edges from tetra 0 and KDTree 5468 with 0 edges in common.
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n0_to_3_241.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n0_to_4_241.pt
[LOG] We will select 144 edges and 1627 tetra
[LOG] Edges from tetra 0 and KDTree 1360 with 0 edges in common.
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n1_to_2_241.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n1_to_3_241.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n1_to_4_241.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n2_to_3_241.pt
[LOG] Saving tensor n2_to_4_241.pt
[LOG] Saving tensor n3_to_4_241.pt
[LOG] Saving tensor global_feature_241.pt
[LOG] Process 30: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 0 subset clusters.
[LOG] Process 69: Created combinatorial complex for file data_557.hdf5
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 69: Calculating Neighbors
[LOG] Loading pickle file data_557.pickle
[LOG] Processing node features for num 557
[LOG] Processing edge features for num 557
[LOG] Processing tetra features for num 557
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 118: Created combinatorial complex for file data_935.hdf5
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 557
[LOG] Processing cluster features for num 557
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing adjacency and incidence matrices for num 557
[LOG] Computing n0_to_0 for num 557
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_1 for num 557
[LOG] Process 13: Created combinatorial complex for file data_107.hdf5
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_2 (adjacency) for num 557
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n3_to_3 (adjacency) for num 557
[LOG] Computing n4_to_4 (coadjacency) for num 557
[LOG] Computing n0_to_1 for num 557
[LOG] Computing n0_to_2 for num 557
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 118: Calculating Neighbors
[LOG] Loading pickle file data_935.pickle
[LOG] Processing node features for num 935
[LOG] Process 13: Calculating Neighbors
[LOG] Loading pickle file data_107.pickle
[LOG] Processing node features for num 107
[LOG] Processing edge features for num 107
[LOG] Processing edge features for num 935
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing tetra features for num 107
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing tetra features for num 935
[LOG] Process 88: Calculating Neighbors
[LOG] Loading pickle file data_705.pickle
[LOG] Processing node features for num 705
[LOG] Processing edge features for num 705
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing cluster features for num 107
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing cluster features for num 935
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing cluster features for num 107
[LOG] Processing cluster features for num 935
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing adjacency and incidence matrices for num 107
[LOG] Computing n0_to_0 for num 107
[LOG] Processing tetra features for num 705
[LOG] Processing adjacency and incidence matrices for num 935
[LOG] Computing n0_to_0 for num 935
[LOG] Computing n1_to_1 for num 107
[LOG] Computing n0_to_3 for num 557
[LOG] Computing n0_to_4 for num 557
[LOG] Computing n1_to_2 for num 557
[LOG] Processing cluster features for num 705
[LOG] Computing n2_to_2 (adjacency) for num 107
[LOG] Computing n1_to_3 for num 557
[LOG] Computing n1_to_4 for num 557
[LOG] Computing n1_to_1 for num 935
[LOG] Computing n2_to_3 for num 557
[LOG] Computing n2_to_4 for num 557
[LOG] Processing cluster features for num 705
[LOG] Computing n3_to_4 for num 557
[LOG] Global feature for num 557
[LOG] Global feature for num 557
[LOG] Saving tensor x_0_557.pt
[LOG] Saving tensor x_1_557.pt
[LOG] Saving tensor x_2_557.pt
[LOG] Saving tensor x_3_557.pt
[LOG] Saving tensor x_4_557.pt
[LOG] Saving tensor n0_to_0_557.pt
[LOG] Saving tensor n1_to_1_557.pt
[LOG] Saving tensor n2_to_2_557.pt
[LOG] Saving tensor n3_to_3_557.pt
[LOG] Processing adjacency and incidence matrices for num 705
[LOG] Computing n0_to_0 for num 705
[LOG] Saving tensor n4_to_4_557.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n0_to_1_557.pt
[LOG] Saving tensor n0_to_2_557.pt
[LOG] Saving tensor n0_to_3_557.pt
[LOG] Saving tensor n0_to_4_557.pt
[LOG] Computing n2_to_2 (adjacency) for num 935
[LOG] Saving tensor n1_to_2_557.pt
[LOG] Saving tensor n1_to_3_557.pt
[LOG] Saving tensor n1_to_4_557.pt
[LOG] Saving tensor n2_to_3_557.pt
[LOG] Saving tensor n2_to_4_557.pt
[LOG] Saving tensor n3_to_4_557.pt
[LOG] Saving tensor global_feature_557.pt
[LOG] Process 69: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n3_to_3 (adjacency) for num 107
[LOG] Computing n4_to_4 (coadjacency) for num 107
[LOG] Computing n0_to_1 for num 107
[LOG] Computing n3_to_3 (adjacency) for num 935
[LOG] Computing n4_to_4 (coadjacency) for num 935
[LOG] Computing n0_to_1 for num 935
[LOG] Computing n0_to_2 for num 107
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Computing n1_to_1 for num 705
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n0_to_2 for num 935
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_3 for num 107
[LOG] Computing n0_to_4 for num 107
[LOG] Computing n1_to_2 for num 107
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_3 for num 107
[LOG] Computing n1_to_4 for num 107
[LOG] Computing n2_to_3 for num 107
[LOG] Computing n2_to_4 for num 107
[LOG] Computing n3_to_4 for num 107
[LOG] Global feature for num 107
[LOG] Global feature for num 107
[LOG] Saving tensor x_0_107.pt
[LOG] Saving tensor x_1_107.pt
[LOG] Saving tensor x_2_107.pt
[LOG] Saving tensor x_3_107.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor x_4_107.pt
[LOG] Saving tensor n0_to_0_107.pt
[LOG] Saving tensor n1_to_1_107.pt
[LOG] Saving tensor n2_to_2_107.pt
[LOG] Saving tensor n3_to_3_107.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n4_to_4_107.pt
[LOG] Saving tensor n0_to_1_107.pt
[LOG] Saving tensor n0_to_2_107.pt
[LOG] Saving tensor n0_to_3_107.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n0_to_4_107.pt
[LOG] Saving tensor n1_to_2_107.pt
[LOG] Saving tensor n1_to_3_107.pt
[LOG] Saving tensor n1_to_4_107.pt
[LOG] Saving tensor n2_to_3_107.pt
[LOG] Saving tensor n2_to_4_107.pt
[LOG] Saving tensor n3_to_4_107.pt
[LOG] Saving tensor global_feature_107.pt
[LOG] Process 13: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 935
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_4 for num 935
[LOG] Computing n1_to_2 for num 935
[LOG] GENERATED TETRA
[LOG] Computing n1_to_3 for num 935
[LOG] Computing n1_to_4 for num 935
[LOG] Computing n2_to_3 for num 935
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_4 for num 935
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n3_to_4 for num 935
[LOG] Global feature for num 935
[LOG] Global feature for num 935
[LOG] Saving tensor x_0_935.pt
[LOG] Saving tensor x_1_935.pt
[LOG] Saving tensor x_2_935.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor x_3_935.pt
[LOG] Saving tensor x_4_935.pt
[LOG] Saving tensor n0_to_0_935.pt
[LOG] Saving tensor n1_to_1_935.pt
[LOG] Saving tensor n2_to_2_935.pt
[LOG] Saving tensor n3_to_3_935.pt
[LOG] Saving tensor n4_to_4_935.pt
[LOG] Saving tensor n0_to_1_935.pt
[LOG] Saving tensor n0_to_2_935.pt
[LOG] Saving tensor n0_to_3_935.pt
[LOG] Saving tensor n0_to_4_935.pt
[LOG] Saving tensor n1_to_2_935.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n1_to_3_935.pt
[LOG] Saving tensor n1_to_4_935.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n2_to_3_935.pt
[LOG] Saving tensor n2_to_4_935.pt
[LOG] Saving tensor n3_to_4_935.pt
[LOG] Saving tensor global_feature_935.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Process 118: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1715 Tetrahedra.
    [LOG] Generated 50 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.54
    [LOG] Max number of nodes per cluster is 35 and the number is 35
[LOG] Calculating for cell ranks 2 and 3
[LOG] We will select 405 edges and 1715 tetra
[LOG] Edges from tetra 0 and KDTree 405 with 0 edges in common.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_2 (adjacency) for num 705
[LOG] Calculating for cell ranks 0 and 3
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2159 Tetrahedra.
    [LOG] Generated 64 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.203125
    [LOG] Max number of nodes per cluster is 47 and the number is 42
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] We will select 471 edges and 2159 tetra
[LOG] Edges from tetra 0 and KDTree 1756 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Process 11: Created combinatorial complex for file data_91.hdf5
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n3_to_3 (adjacency) for num 705
[LOG] Computing n4_to_4 (coadjacency) for num 705
[LOG] Computing n0_to_1 for num 705
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 83: Created combinatorial complex for file data_666.hdf5
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 11: Calculating Neighbors
[LOG] Loading pickle file data_91.pickle
[LOG] Processing node features for num 91
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Processing edge features for num 91
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing tetra features for num 91
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing cluster features for num 91
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_2 for num 705
[LOG] Processing cluster features for num 91
[LOG] Process 83: Calculating Neighbors
[LOG] Loading pickle file data_666.pickle
[LOG] Processing node features for num 666
[LOG] Processing adjacency and incidence matrices for num 91
[LOG] Computing n0_to_0 for num 91
[LOG] Processing edge features for num 666
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Processing tetra features for num 666
[LOG] Computing n1_to_1 for num 91
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1998 Tetrahedra.
    [LOG] Generated 45 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 18.355555555555554
    [LOG] Max number of nodes per cluster is 74 and the number is 32
[LOG] Processing cluster features for num 666
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing cluster features for num 666
[LOG] Processing adjacency and incidence matrices for num 666
[LOG] Computing n0_to_0 for num 666
[LOG] We will select 284 edges and 1998 tetra
[LOG] Edges from tetra 0 and KDTree 2204 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_2 (adjacency) for num 91
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_1 for num 666
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n3_to_3 (adjacency) for num 91
[LOG] Computing n4_to_4 (coadjacency) for num 91
[LOG] Computing n0_to_1 for num 91
[LOG] Computing n0_to_2 for num 91
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_2 (adjacency) for num 666
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_3 for num 91
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_4 for num 91
[LOG] Computing n1_to_2 for num 91
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_3 (adjacency) for num 666
[LOG] Computing n4_to_4 (coadjacency) for num 666
[LOG] Computing n0_to_1 for num 666
[LOG] Computing n1_to_3 for num 91
[LOG] Computing n1_to_4 for num 91
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_3 for num 91
[LOG] Process 20: Created combinatorial complex for file data_163.hdf5
[LOG] Computing n2_to_4 for num 91
[LOG] Computing n0_to_2 for num 666
[LOG] Computing n0_to_3 for num 705
[LOG] Computing n3_to_4 for num 91
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Global feature for num 91
[LOG] Calculating for cell ranks 0 and 4
[LOG] Global feature for num 91
[LOG] Saving tensor x_0_91.pt
[LOG] Saving tensor x_1_91.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n0_to_4 for num 705
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_2 for num 705
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor x_2_91.pt
[LOG] Saving tensor x_3_91.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor x_4_91.pt
[LOG] Saving tensor n0_to_0_91.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n1_to_1_91.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n2_to_2_91.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n3_to_3_91.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n4_to_4_91.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n0_to_1_91.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n0_to_2_91.pt
[LOG] Saving tensor n0_to_3_91.pt
[LOG] Saving tensor n0_to_4_91.pt
[LOG] Saving tensor n1_to_2_91.pt
[LOG] Saving tensor n1_to_3_91.pt
[LOG] Saving tensor n1_to_4_91.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n2_to_3_91.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n2_to_4_91.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Process 20: Calculating Neighbors
[LOG] Loading pickle file data_163.pickle
[LOG] Processing node features for num 163
[LOG] Saving tensor n3_to_4_91.pt
[LOG] Saving tensor global_feature_91.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Process 11: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing edge features for num 163
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Processing tetra features for num 163
[LOG] Computing n0_to_3 for num 666
[LOG] Computing n0_to_4 for num 666
[LOG] Processing cluster features for num 163
[LOG] Computing n1_to_2 for num 666
[LOG] Processing cluster features for num 163
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing adjacency and incidence matrices for num 163
[LOG] Computing n0_to_0 for num 163
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_1 for num 163
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_3 for num 666
[LOG] Computing n2_to_2 (adjacency) for num 163
[LOG] Computing n1_to_4 for num 666
[LOG] Computing n2_to_3 for num 666
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n2_to_4 for num 666
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_4 for num 666
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Global feature for num 666
[LOG] Global feature for num 666
[LOG] Saving tensor x_0_666.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor x_1_666.pt
[LOG] Saving tensor x_2_666.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor x_3_666.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor x_4_666.pt
[LOG] Saving tensor n0_to_0_666.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n1_to_1_666.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n2_to_2_666.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n3_to_3_666.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n4_to_4_666.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n0_to_1_666.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n0_to_2_666.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n0_to_3_666.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n0_to_4_666.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n1_to_2_666.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n1_to_3_666.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n1_to_4_666.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n2_to_3_666.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n2_to_4_666.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n3_to_4_666.pt
[LOG] Saving tensor global_feature_666.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Process 83: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 163
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n4_to_4 (coadjacency) for num 163
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n0_to_1 for num 163
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n0_to_2 for num 163
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Computing n1_to_3 for num 705
[LOG] Computing n1_to_4 for num 705
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n2_to_3 for num 705
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n2_to_4 for num 705
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_4 for num 705
[LOG] Global feature for num 705
[LOG] Global feature for num 705
[LOG] Saving tensor x_0_705.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor x_1_705.pt
[LOG] Saving tensor x_2_705.pt
[LOG] Saving tensor x_3_705.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor x_4_705.pt
[LOG] Saving tensor n0_to_0_705.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n1_to_1_705.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n2_to_2_705.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n3_to_3_705.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n4_to_4_705.pt
[LOG] Computing n0_to_3 for num 163
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 940 Tetrahedra.
    [LOG] Generated 26 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 19.23076923076923
    [LOG] Max number of nodes per cluster is 58 and the number is 8
[LOG] Computing n0_to_4 for num 163
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_2 for num 163
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n0_to_1_705.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] We will select 96 edges and 940 tetra
[LOG] Edges from tetra 0 and KDTree 2187 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n0_to_2_705.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n0_to_3_705.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n0_to_4_705.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n1_to_2_705.pt
[LOG] Saving tensor n1_to_3_705.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n1_to_4_705.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n2_to_3_705.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_3 for num 163
[LOG] Computing n1_to_4 for num 163
[LOG] Computing n2_to_3 for num 163
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n2_to_4_705.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n2_to_4 for num 163
[LOG] Saving tensor n3_to_4_705.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor global_feature_705.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Process 88: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n3_to_4 for num 163
[LOG] Global feature for num 163
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Global feature for num 163
[LOG] Saving tensor x_0_163.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor x_1_163.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor x_2_163.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor x_3_163.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor x_4_163.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 97: Created combinatorial complex for file data_781.hdf5
[LOG] Saving tensor n0_to_0_163.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n1_to_1_163.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n2_to_2_163.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n3_to_3_163.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n4_to_4_163.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n0_to_1_163.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Process 97: Calculating Neighbors
[LOG] Loading pickle file data_781.pickle
[LOG] Processing node features for num 781
[LOG] Processing edge features for num 781
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing tetra features for num 781
[LOG] GENERATED TETRA
[LOG] Processing cluster features for num 781
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n0_to_2_163.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing cluster features for num 781
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n0_to_3_163.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n0_to_4_163.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Processing adjacency and incidence matrices for num 781
[LOG] Computing n0_to_0 for num 781
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n1_to_2_163.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n1_to_3_163.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n1_to_4_163.pt
[LOG] Saving tensor n2_to_3_163.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n2_to_4_163.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n3_to_4_163.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor global_feature_163.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Process 20: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n1_to_1 for num 781
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 781
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n3_to_3 (adjacency) for num 781
[LOG] Computing n4_to_4 (coadjacency) for num 781
[LOG] Computing n0_to_1 for num 781
[LOG] Computing n0_to_2 for num 781
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 3965 Tetrahedra.
    [LOG] Generated 101 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.356435643564357
    [LOG] Max number of nodes per cluster is 40 and the number is 95
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt

    [LOG] We Currently have 1660 Tetrahedra.
    [LOG] Generated 44 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.522727272727273
    [LOG] Max number of nodes per cluster is 29 and the number is 28
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 3053 Tetrahedra.
    [LOG] Generated 86 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.313953488372093
    [LOG] Max number of nodes per cluster is 49 and the number is 85
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] We will select 193 edges and 1660 tetra
[LOG] Edges from tetra 0 and KDTree 236 with 0 edges in common.
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] We will select 517 edges and 3053 tetra
[LOG] Edges from tetra 0 and KDTree 517 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] We will select 1437 edges and 3965 tetra
[LOG] Edges from tetra 0 and KDTree 1437 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_3 for num 781
[LOG] Computing n0_to_4 for num 781
[LOG] Computing n1_to_2 for num 781
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_3 for num 781
[LOG] Computing n1_to_4 for num 781
[LOG] Computing n2_to_3 for num 781
[LOG] Computing n2_to_4 for num 781
[LOG] Computing n3_to_4 for num 781
[LOG] Global feature for num 781
[LOG] Global feature for num 781
[LOG] Saving tensor x_0_781.pt
[LOG] Saving tensor x_1_781.pt
[LOG] Saving tensor x_2_781.pt
[LOG] Saving tensor x_3_781.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor x_4_781.pt
[LOG] Saving tensor n0_to_0_781.pt
[LOG] Saving tensor n1_to_1_781.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n2_to_2_781.pt
[LOG] Saving tensor n3_to_3_781.pt
[LOG] Saving tensor n4_to_4_781.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n0_to_1_781.pt
[LOG] Saving tensor n0_to_2_781.pt
[LOG] Saving tensor n0_to_3_781.pt
[LOG] Saving tensor n0_to_4_781.pt
[LOG] Saving tensor n1_to_2_781.pt
[LOG] Saving tensor n1_to_3_781.pt
[LOG] Saving tensor n1_to_4_781.pt
[LOG] Saving tensor n2_to_3_781.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n2_to_4_781.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n3_to_4_781.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor global_feature_781.pt
[LOG] Process 97: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Process 0: Created combinatorial complex for file data_5.hdf5
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Process 0: Calculating Neighbors
[LOG] Loading pickle file data_5.pickle
[LOG] Processing node features for num 5
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Processing edge features for num 5
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Processing tetra features for num 5
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing cluster features for num 5
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing cluster features for num 5
[LOG] Processing adjacency and incidence matrices for num 5
[LOG] Computing n0_to_0 for num 5
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1631 Tetrahedra.
    [LOG] Generated 53 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.679245283018869
    [LOG] Max number of nodes per cluster is 43 and the number is 49
[LOG] Computing n1_to_1 for num 5
[LOG] We will select 272 edges and 1631 tetra
[LOG] Edges from tetra 0 and KDTree 1047 with 0 edges in common.
[LOG] Computing n2_to_2 (adjacency) for num 5
[LOG] Calculating for cell ranks 0 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n3_to_3 (adjacency) for num 5
[LOG] Computing n4_to_4 (coadjacency) for num 5
[LOG] Computing n0_to_1 for num 5
[LOG] Computing n0_to_2 for num 5
[LOG] Calculating for cell ranks 0 and 1
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 977 Tetrahedra.
    [LOG] Generated 40 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.85
    [LOG] Max number of nodes per cluster is 27 and the number is 29
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_3 for num 5
[LOG] We will select 164 edges and 977 tetra
[LOG] Edges from tetra 0 and KDTree 405 with 0 edges in common.
[LOG] Computing n0_to_4 for num 5
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1602 Tetrahedra.
    [LOG] Generated 59 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.423728813559322
    [LOG] Max number of nodes per cluster is 39 and the number is 35
[LOG] Computing n1_to_2 for num 5
[LOG] Removed 2 subset clusters.
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1057 Tetrahedra.
    [LOG] Generated 29 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.931034482758621
    [LOG] Max number of nodes per cluster is 34 and the number is 16
[LOG] Calculating for cell ranks 3 and 3
[LOG] We will select 261 edges and 1602 tetra
[LOG] Edges from tetra 0 and KDTree 1313 with 0 edges in common.
[LOG] We will select 202 edges and 1057 tetra
[LOG] Edges from tetra 0 and KDTree 216 with 0 edges in common.
[LOG] Computing n1_to_3 for num 5
[LOG] Computing n1_to_4 for num 5
[LOG] Computing n2_to_3 for num 5
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n2_to_4 for num 5
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_4 for num 5
[LOG] Global feature for num 5
[LOG] Global feature for num 5
[LOG] Saving tensor x_0_5.pt
[LOG] Saving tensor x_1_5.pt
[LOG] Saving tensor x_2_5.pt
[LOG] Saving tensor x_3_5.pt
[LOG] Saving tensor x_4_5.pt
[LOG] Saving tensor n0_to_0_5.pt
[LOG] Saving tensor n1_to_1_5.pt
[LOG] Saving tensor n2_to_2_5.pt
[LOG] Saving tensor n3_to_3_5.pt
[LOG] Saving tensor n4_to_4_5.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Process 25: Created combinatorial complex for file data_202.hdf5
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n0_to_1_5.pt
[LOG] Saving tensor n0_to_2_5.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n0_to_3_5.pt
[LOG] Saving tensor n0_to_4_5.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n1_to_2_5.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n1_to_3_5.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n1_to_4_5.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n2_to_3_5.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n2_to_4_5.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n3_to_4_5.pt
[LOG] Saving tensor global_feature_5.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Process 0: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Process 25: Calculating Neighbors
[LOG] Loading pickle file data_202.pickle
[LOG] Processing node features for num 202
[LOG] Processing edge features for num 202
[LOG] Processing tetra features for num 202
[LOG] Process 123: Created combinatorial complex for file data_966.hdf5
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing cluster features for num 202
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Process 100: Created combinatorial complex for file data_805.hdf5
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing cluster features for num 202
[LOG] Processing adjacency and incidence matrices for num 202
[LOG] Computing n0_to_0 for num 202
[LOG] Process 100: Calculating Neighbors
[LOG] Loading pickle file data_805.pickle
[LOG] Processing node features for num 805
[LOG] Processing edge features for num 805
[LOG] Removed 0 subset clusters.
[LOG] Processing tetra features for num 805
[LOG] Computing n1_to_1 for num 202
[LOG] Processing cluster features for num 805
[LOG] Processing cluster features for num 805
[LOG] Processing adjacency and incidence matrices for num 805
[LOG] Computing n0_to_0 for num 805
[LOG] Removed 2 subset clusters.
[LOG] Computing n1_to_1 for num 805
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Removed 5 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_2 (adjacency) for num 805
[LOG] Computing n2_to_2 (adjacency) for num 202
[LOG] GENERATED TETRA
[LOG] Process 63: Created combinatorial complex for file data_506.hdf5
[LOG] Process 123: Calculating Neighbors
[LOG] Loading pickle file data_966.pickle
[LOG] Processing node features for num 966
[LOG] Processing edge features for num 966
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_3 (adjacency) for num 805
[LOG] Computing n4_to_4 (coadjacency) for num 805
[LOG] Computing n0_to_1 for num 805
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_2 for num 805
[LOG] Processing tetra features for num 966
[LOG] Process 63: Calculating Neighbors
[LOG] Loading pickle file data_506.pickle
[LOG] Processing node features for num 506
[LOG] Processing edge features for num 506
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing tetra features for num 506
[LOG] Processing cluster features for num 506
[LOG] Computing n3_to_3 (adjacency) for num 202
[LOG] Processing cluster features for num 506
[LOG] Computing n4_to_4 (coadjacency) for num 202
[LOG] Processing cluster features for num 966
[LOG] Computing n0_to_1 for num 202
[LOG] Processing adjacency and incidence matrices for num 506
[LOG] Computing n0_to_0 for num 506
[LOG] Process 119: Created combinatorial complex for file data_941.hdf5
[LOG] Computing n1_to_1 for num 506
[LOG] Processing cluster features for num 966
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_3 for num 805
[LOG] Computing n0_to_2 for num 202
[LOG] Computing n0_to_4 for num 805
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Processing adjacency and incidence matrices for num 966
[LOG] Computing n0_to_0 for num 966
[LOG] Computing n1_to_2 for num 805
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n2_to_2 (adjacency) for num 506
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n1_to_3 for num 805
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n1_to_4 for num 805
[LOG] Computing n2_to_3 for num 805
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 119: Calculating Neighbors
[LOG] Loading pickle file data_941.pickle
[LOG] Processing node features for num 941
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Processing edge features for num 941
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 506
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n2_to_4 for num 805
[LOG] Computing n4_to_4 (coadjacency) for num 506
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n0_to_1 for num 506
[LOG] Computing n1_to_1 for num 966
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Processing tetra features for num 941
[LOG] Computing n3_to_4 for num 805
[LOG] Global feature for num 805
[LOG] Global feature for num 805
[LOG] Computing n0_to_2 for num 506
[LOG] Saving tensor x_0_805.pt
[LOG] Saving tensor x_1_805.pt
[LOG] Saving tensor x_2_805.pt
[LOG] Saving tensor x_3_805.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor x_4_805.pt
[LOG] Saving tensor n0_to_0_805.pt
[LOG] Saving tensor n1_to_1_805.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n2_to_2_805.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n3_to_3_805.pt
[LOG] Saving tensor n4_to_4_805.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Processing cluster features for num 941
[LOG] Saving tensor n0_to_1_805.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n0_to_2_805.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n0_to_3_805.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n0_to_4_805.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n1_to_2_805.pt
[LOG] Processing cluster features for num 941
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n1_to_3_805.pt
[LOG] Saving tensor n1_to_4_805.pt
[LOG] Saving tensor n2_to_3_805.pt
[LOG] Saving tensor n2_to_4_805.pt
[LOG] Saving tensor n3_to_4_805.pt
[LOG] Saving tensor global_feature_805.pt
[LOG] Process 100: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing adjacency and incidence matrices for num 941
[LOG] Computing n0_to_0 for num 941
[LOG] Computing n0_to_3 for num 506
[LOG] Computing n0_to_4 for num 506
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_2 for num 506
[LOG] Computing n1_to_1 for num 941
[LOG] Process 94: Created combinatorial complex for file data_753.hdf5
[LOG] Computing n1_to_3 for num 506
[LOG] Computing n1_to_4 for num 506
[LOG] Computing n2_to_3 for num 506
[LOG] Computing n2_to_4 for num 506
[LOG] Computing n3_to_4 for num 506
[LOG] Global feature for num 506
[LOG] Global feature for num 506
[LOG] Saving tensor x_0_506.pt
[LOG] Saving tensor x_1_506.pt
[LOG] Saving tensor x_2_506.pt
[LOG] Saving tensor x_3_506.pt
[LOG] Saving tensor x_4_506.pt
[LOG] Saving tensor n0_to_0_506.pt
[LOG] Computing n2_to_2 (adjacency) for num 941
[LOG] Saving tensor n1_to_1_506.pt
[LOG] Saving tensor n2_to_2_506.pt
[LOG] Saving tensor n3_to_3_506.pt
[LOG] Saving tensor n4_to_4_506.pt
[LOG] Saving tensor n0_to_1_506.pt
[LOG] Saving tensor n0_to_2_506.pt
[LOG] Saving tensor n0_to_3_506.pt
[LOG] Saving tensor n0_to_4_506.pt
[LOG] Saving tensor n1_to_2_506.pt
[LOG] Computing n0_to_3 for num 202
[LOG] Saving tensor n1_to_3_506.pt
[LOG] Saving tensor n1_to_4_506.pt
[LOG] Saving tensor n2_to_3_506.pt
[LOG] Saving tensor n2_to_4_506.pt
[LOG] Saving tensor n3_to_4_506.pt
[LOG] Saving tensor global_feature_506.pt
[LOG] Process 63: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_4 for num 202
[LOG] Computing n1_to_2 for num 202
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 2592 Tetrahedra.
    [LOG] Generated 79 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.632911392405063
    [LOG] Max number of nodes per cluster is 33 and the number is 29
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n3_to_3 (adjacency) for num 941
[LOG] Computing n4_to_4 (coadjacency) for num 941
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n0_to_1 for num 941
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n2_to_2 (adjacency) for num 966
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n0_to_2 for num 941
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n1_to_3 for num 202
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n1_to_4 for num 202
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Process 94: Calculating Neighbors
[LOG] Loading pickle file data_753.pickle
[LOG] Processing node features for num 753
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n2_to_3 for num 202
[LOG] Processing edge features for num 753
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n2_to_4 for num 202
[LOG] We will select 433 edges and 2592 tetra
[LOG] Edges from tetra 0 and KDTree 840 with 0 edges in common.
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n3_to_4 for num 202
[LOG] Global feature for num 202
[LOG] Global feature for num 202
[LOG] Saving tensor x_0_202.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Processing tetra features for num 753
[LOG] Saving tensor x_1_202.pt
[LOG] Saving tensor x_2_202.pt
[LOG] Saving tensor x_3_202.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor x_4_202.pt
[LOG] Saving tensor n0_to_0_202.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n1_to_1_202.pt
[LOG] Saving tensor n2_to_2_202.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n3_to_3_202.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n4_to_4_202.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n0_to_1_202.pt
[LOG] Saving tensor n0_to_2_202.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n0_to_3_202.pt
[LOG] Saving tensor n0_to_4_202.pt
[LOG] Saving tensor n1_to_2_202.pt
[LOG] Saving tensor n1_to_3_202.pt
[LOG] Saving tensor n1_to_4_202.pt
[LOG] Saving tensor n2_to_3_202.pt
[LOG] Saving tensor n2_to_4_202.pt
[LOG] Saving tensor n3_to_4_202.pt
[LOG] Saving tensor global_feature_202.pt
[LOG] Process 25: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing cluster features for num 753
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_3 for num 941
[LOG] Computing n0_to_4 for num 941
[LOG] Processing cluster features for num 753
[LOG] Computing n1_to_2 for num 941
[LOG] Processing adjacency and incidence matrices for num 753
[LOG] Computing n0_to_0 for num 753
[LOG] GENERATED TETRA
[LOG] Computing n1_to_3 for num 941
[LOG] Computing n1_to_4 for num 941
[LOG] Computing n2_to_3 for num 941
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_4 for num 941
[LOG] Computing n3_to_4 for num 941
[LOG] Global feature for num 941
[LOG] Global feature for num 941
[LOG] Saving tensor x_0_941.pt
[LOG] Saving tensor x_1_941.pt
[LOG] Saving tensor x_2_941.pt
[LOG] Saving tensor x_3_941.pt
[LOG] Saving tensor x_4_941.pt
[LOG] Saving tensor n0_to_0_941.pt
[LOG] Saving tensor n1_to_1_941.pt
[LOG] Saving tensor n2_to_2_941.pt
[LOG] Saving tensor n3_to_3_941.pt
[LOG] Saving tensor n4_to_4_941.pt
[LOG] Saving tensor n0_to_1_941.pt
[LOG] Saving tensor n0_to_2_941.pt
[LOG] Saving tensor n0_to_3_941.pt
[LOG] Saving tensor n0_to_4_941.pt
[LOG] Saving tensor n1_to_2_941.pt
[LOG] Saving tensor n1_to_3_941.pt
[LOG] Saving tensor n1_to_4_941.pt
[LOG] Saving tensor n2_to_3_941.pt
[LOG] Saving tensor n2_to_4_941.pt
[LOG] Saving tensor n3_to_4_941.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor global_feature_941.pt
[LOG] Process 119: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n3_to_3 (adjacency) for num 966
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n4_to_4 (coadjacency) for num 966
[LOG] Computing n0_to_1 for num 966
[LOG] Computing n1_to_1 for num 753
[LOG] Computing n0_to_2 for num 966
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1834 Tetrahedra.
    [LOG] Generated 50 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.3
    [LOG] Max number of nodes per cluster is 50 and the number is 32
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] We will select 139 edges and 1834 tetra
[LOG] Edges from tetra 0 and KDTree 519 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_3 for num 966
[LOG] Computing n0_to_4 for num 966
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_2 for num 966
[LOG] Process 54: Created combinatorial complex for file data_435.hdf5
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Process 54: Calculating Neighbors
[LOG] Loading pickle file data_435.pickle
[LOG] Processing node features for num 435
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Processing edge features for num 435
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Processing tetra features for num 435
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Process 114: Created combinatorial complex for file data_904.hdf5
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing cluster features for num 435
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing cluster features for num 435
[LOG] Computing n1_to_3 for num 966
[LOG] Processing adjacency and incidence matrices for num 435
[LOG] Computing n0_to_0 for num 435
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] Computing n1_to_4 for num 966
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_3 for num 966
[LOG] Process 114: Calculating Neighbors
[LOG] Loading pickle file data_904.pickle
[LOG] Processing node features for num 904
[LOG] Processing edge features for num 904
[LOG] Processing tetra features for num 904
[LOG] Computing n1_to_1 for num 435
[LOG] Computing n2_to_4 for num 966
[LOG] Processing cluster features for num 904
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing cluster features for num 904
[LOG] Processing adjacency and incidence matrices for num 904
[LOG] Computing n0_to_0 for num 904
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_1 for num 904
[LOG] Computing n3_to_4 for num 966
[LOG] Global feature for num 966
[LOG] Global feature for num 966
[LOG] Saving tensor x_0_966.pt
[LOG] Saving tensor x_1_966.pt
[LOG] Saving tensor x_2_966.pt
[LOG] Saving tensor x_3_966.pt
[LOG] Saving tensor x_4_966.pt
[LOG] Saving tensor n0_to_0_966.pt
[LOG] Saving tensor n1_to_1_966.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n2_to_2_966.pt
[LOG] Saving tensor n3_to_3_966.pt
[LOG] Saving tensor n4_to_4_966.pt
[LOG] Saving tensor n0_to_1_966.pt
[LOG] Saving tensor n0_to_2_966.pt
[LOG] Saving tensor n0_to_3_966.pt
[LOG] Saving tensor n0_to_4_966.pt
[LOG] Saving tensor n1_to_2_966.pt
[LOG] Saving tensor n1_to_3_966.pt
[LOG] Saving tensor n1_to_4_966.pt
[LOG] Computing n2_to_2 (adjacency) for num 904
[LOG] Saving tensor n2_to_3_966.pt
[LOG] Saving tensor n2_to_4_966.pt
[LOG] Saving tensor n3_to_4_966.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor global_feature_966.pt
[LOG] Process 123: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_3 (adjacency) for num 904
[LOG] Computing n2_to_2 (adjacency) for num 435
[LOG] Computing n4_to_4 (coadjacency) for num 904
[LOG] Computing n0_to_1 for num 904
[LOG] GENERATED TETRA
[LOG] Computing n0_to_2 for num 904
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_2 (adjacency) for num 753
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 3522 Tetrahedra.
    [LOG] Generated 81 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.444444444444445
    [LOG] Max number of nodes per cluster is 36 and the number is 14
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_3 (adjacency) for num 435
[LOG] Computing n4_to_4 (coadjacency) for num 435
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_1 for num 435
[LOG] Computing n0_to_3 for num 904
[LOG] Computing n0_to_4 for num 904
[LOG] Computing n1_to_2 for num 904
[LOG] Computing n0_to_2 for num 435
[LOG] We will select 560 edges and 3522 tetra
[LOG] Edges from tetra 0 and KDTree 560 with 0 edges in common.
[LOG] Computing n1_to_3 for num 904
[LOG] Computing n1_to_4 for num 904
[LOG] Computing n2_to_3 for num 904
[LOG] Computing n2_to_4 for num 904
[LOG] GENERATED TETRA
[LOG] Computing n3_to_4 for num 904
[LOG] Global feature for num 904
[LOG] Global feature for num 904
[LOG] Saving tensor x_0_904.pt
[LOG] Saving tensor x_1_904.pt
[LOG] Saving tensor x_2_904.pt
[LOG] Saving tensor x_3_904.pt
[LOG] Saving tensor x_4_904.pt
[LOG] Saving tensor n0_to_0_904.pt
[LOG] Saving tensor n1_to_1_904.pt
[LOG] Saving tensor n2_to_2_904.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n3_to_3_904.pt
[LOG] Saving tensor n4_to_4_904.pt
[LOG] Saving tensor n0_to_1_904.pt
[LOG] Saving tensor n0_to_2_904.pt
[LOG] Saving tensor n0_to_3_904.pt
[LOG] Saving tensor n0_to_4_904.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n1_to_2_904.pt
[LOG] Saving tensor n1_to_3_904.pt
[LOG] Saving tensor n1_to_4_904.pt
[LOG] Saving tensor n2_to_3_904.pt
[LOG] Saving tensor n2_to_4_904.pt
[LOG] Saving tensor n3_to_4_904.pt
[LOG] Saving tensor global_feature_904.pt
[LOG] Process 114: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_3 (adjacency) for num 753
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n4_to_4 (coadjacency) for num 753
[LOG] Computing n0_to_3 for num 435
[LOG] Computing n0_to_1 for num 753
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_4 for num 435
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_2 for num 435
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_2 for num 753
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2471 Tetrahedra.
    [LOG] Generated 80 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.8125
    [LOG] Max number of nodes per cluster is 34 and the number is 79
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_3 for num 435
[LOG] Computing n1_to_4 for num 435
[LOG] Computing n2_to_3 for num 435
[LOG] Calculating for cell ranks 0 and 3
[LOG] We will select 497 edges and 2471 tetra
[LOG] Edges from tetra 0 and KDTree 2748 with 0 edges in common.
[LOG] Computing n2_to_4 for num 435
[LOG] GENERATED TETRA
[LOG] Computing n3_to_4 for num 435
[LOG] Global feature for num 435
[LOG] Global feature for num 435
[LOG] Saving tensor x_0_435.pt
[LOG] Saving tensor x_1_435.pt
[LOG] Saving tensor x_2_435.pt
[LOG] Saving tensor x_3_435.pt
[LOG] Saving tensor x_4_435.pt
[LOG] Saving tensor n0_to_0_435.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n1_to_1_435.pt
[LOG] Saving tensor n2_to_2_435.pt
[LOG] Saving tensor n3_to_3_435.pt
[LOG] Saving tensor n4_to_4_435.pt
[LOG] Saving tensor n0_to_1_435.pt
[LOG] Saving tensor n0_to_2_435.pt
[LOG] Saving tensor n0_to_3_435.pt
[LOG] Saving tensor n0_to_4_435.pt
[LOG] Saving tensor n1_to_2_435.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n1_to_3_435.pt
[LOG] Saving tensor n1_to_4_435.pt
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 1 and 3

    [LOG] We Currently have 1452 Tetrahedra.
    [LOG] Generated 46 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.282608695652176
    [LOG] Max number of nodes per cluster is 85 and the number is 28
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n2_to_3_435.pt
[LOG] Saving tensor n2_to_4_435.pt
[LOG] Saving tensor n3_to_4_435.pt
[LOG] Saving tensor global_feature_435.pt
[LOG] Process 54: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 4
[LOG] We will select 279 edges and 1452 tetra
[LOG] Edges from tetra 0 and KDTree 2760 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] GENERATED TETRA
[LOG] Removed 2 subset clusters.
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1588 Tetrahedra.
    [LOG] Generated 60 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.6
    [LOG] Max number of nodes per cluster is 43 and the number is 50
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] We will select 235 edges and 1588 tetra
[LOG] Edges from tetra 0 and KDTree 1621 with 0 edges in common.
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_3 for num 753
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_4 for num 753
[LOG] Computing n1_to_2 for num 753
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 117: Created combinatorial complex for file data_924.hdf5
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 108: Created combinatorial complex for file data_865.hdf5
[LOG] Calculating for cell ranks 0 and 3
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 108: Calculating Neighbors
[LOG] Loading pickle file data_865.pickle
[LOG] Processing node features for num 865
[LOG] Processing edge features for num 865
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing tetra features for num 865
[LOG] Process 117: Calculating Neighbors
[LOG] Loading pickle file data_924.pickle
[LOG] Processing node features for num 924
[LOG] Processing edge features for num 924
[LOG] Process 19: Created combinatorial complex for file data_155.hdf5
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing cluster features for num 865
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 124: Created combinatorial complex for file data_974.hdf5
[LOG] Processing tetra features for num 924
[LOG] Processing cluster features for num 865
[LOG] Calculating for cell ranks 3 and 4
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 3033 Tetrahedra.
    [LOG] Generated 98 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.918367346938776
    [LOG] Max number of nodes per cluster is 63 and the number is 11
[LOG] Processing adjacency and incidence matrices for num 865
[LOG] Computing n0_to_0 for num 865
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 924
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 19: Calculating Neighbors
[LOG] Loading pickle file data_155.pickle
[LOG] Processing node features for num 155
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_1 for num 865
[LOG] Processing edge features for num 155
[LOG] Processing cluster features for num 924
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing tetra features for num 155
[LOG] Processing adjacency and incidence matrices for num 924
[LOG] Computing n0_to_0 for num 924
[LOG] Process 124: Calculating Neighbors
[LOG] Loading pickle file data_974.pickle
[LOG] Processing node features for num 974
[LOG] Processing edge features for num 974
[LOG] Processing cluster features for num 155
[LOG] We will select 643 edges and 3033 tetra
[LOG] Edges from tetra 0 and KDTree 643 with 0 edges in common.
[LOG] Processing cluster features for num 155
[LOG] Processing tetra features for num 974
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_2 (adjacency) for num 865
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Processing adjacency and incidence matrices for num 155
[LOG] Computing n0_to_0 for num 155
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n1_to_1 for num 924
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Processing cluster features for num 974
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Processing cluster features for num 974
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n1_to_1 for num 155
[LOG] Computing n3_to_3 (adjacency) for num 865
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 974
[LOG] Computing n0_to_0 for num 974
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n4_to_4 (coadjacency) for num 865
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n0_to_1 for num 865
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_2 for num 865
[LOG] Computing n1_to_1 for num 974
[LOG] Computing n2_to_2 (adjacency) for num 155
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 155
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n4_to_4 (coadjacency) for num 155
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n0_to_1 for num 155
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_2 for num 155
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1461 Tetrahedra.
    [LOG] Generated 37 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.243243243243244
    [LOG] Max number of nodes per cluster is 39 and the number is 35
[LOG] We will select 178 edges and 1461 tetra
[LOG] Edges from tetra 0 and KDTree 2895 with 0 edges in common.
[LOG] Computing n2_to_2 (adjacency) for num 924
[LOG] Computing n2_to_2 (adjacency) for num 974
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_3 for num 865
[LOG] Computing n0_to_4 for num 865
[LOG] Computing n1_to_2 for num 865
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_3 for num 865
[LOG] Computing n1_to_4 for num 865
[LOG] Computing n2_to_3 for num 865
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_4 for num 865
[LOG] Computing n1_to_3 for num 753
[LOG] Computing n3_to_3 (adjacency) for num 974
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_4 for num 865
[LOG] Computing n4_to_4 (coadjacency) for num 974
[LOG] Global feature for num 865
[LOG] Global feature for num 865
[LOG] Saving tensor x_0_865.pt
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_1 for num 974
[LOG] Saving tensor x_1_865.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor x_2_865.pt
[LOG] Saving tensor x_3_865.pt
[LOG] Saving tensor x_4_865.pt
[LOG] Saving tensor n0_to_0_865.pt
[LOG] Saving tensor n1_to_1_865.pt
[LOG] Saving tensor n2_to_2_865.pt
[LOG] Computing n1_to_4 for num 753
[LOG] Saving tensor n3_to_3_865.pt
[LOG] Saving tensor n4_to_4_865.pt
[LOG] Saving tensor n0_to_1_865.pt
[LOG] Saving tensor n0_to_2_865.pt
[LOG] Saving tensor n0_to_3_865.pt
[LOG] Saving tensor n0_to_4_865.pt
[LOG] Saving tensor n1_to_2_865.pt
[LOG] Saving tensor n1_to_3_865.pt
[LOG] Saving tensor n1_to_4_865.pt
[LOG] Computing n0_to_3 for num 155
[LOG] Saving tensor n2_to_3_865.pt
[LOG] Saving tensor n2_to_4_865.pt
[LOG] Saving tensor n3_to_4_865.pt
[LOG] Saving tensor global_feature_865.pt
[LOG] Process 108: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n2_to_3 for num 753
[LOG] Computing n0_to_2 for num 974
[LOG] Computing n0_to_4 for num 155
[LOG] Process 47: Created combinatorial complex for file data_379.hdf5
[LOG] Computing n1_to_2 for num 155
[LOG] Computing n2_to_4 for num 753
[LOG] Process 47: Calculating Neighbors
[LOG] Loading pickle file data_379.pickle
[LOG] Processing node features for num 379
[LOG] Processing edge features for num 379
[LOG] Computing n1_to_3 for num 155
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_4 for num 155
[LOG] Computing n2_to_3 for num 155
[LOG] Processing tetra features for num 379
[LOG] Computing n2_to_4 for num 155
[LOG] Processing cluster features for num 379
[LOG] Processing cluster features for num 379
[LOG] Computing n3_to_4 for num 753
[LOG] Computing n3_to_4 for num 155
[LOG] Global feature for num 155
[LOG] Global feature for num 155
[LOG] Saving tensor x_0_155.pt
[LOG] Global feature for num 753
[LOG] Global feature for num 753
[LOG] Saving tensor x_0_753.pt
[LOG] Saving tensor x_1_155.pt
[LOG] Saving tensor x_2_155.pt
[LOG] Saving tensor x_1_753.pt
[LOG] Saving tensor x_3_155.pt
[LOG] Saving tensor x_2_753.pt
[LOG] Processing adjacency and incidence matrices for num 379
[LOG] Computing n0_to_0 for num 379
[LOG] Saving tensor x_3_753.pt
[LOG] Saving tensor x_4_155.pt
[LOG] Saving tensor n0_to_0_155.pt
[LOG] Saving tensor x_4_753.pt
[LOG] Saving tensor n0_to_0_753.pt
[LOG] Saving tensor n1_to_1_155.pt
[LOG] Saving tensor n1_to_1_753.pt
[LOG] Computing n3_to_3 (adjacency) for num 924
[LOG] Saving tensor n2_to_2_155.pt
[LOG] Saving tensor n2_to_2_753.pt
[LOG] Saving tensor n3_to_3_155.pt
[LOG] Computing n4_to_4 (coadjacency) for num 924
[LOG] Saving tensor n4_to_4_155.pt
[LOG] Saving tensor n3_to_3_753.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_1 for num 924
[LOG] Saving tensor n0_to_1_155.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_1 for num 379
[LOG] Saving tensor n4_to_4_753.pt
[LOG] Saving tensor n0_to_2_155.pt
[LOG] Saving tensor n0_to_1_753.pt
[LOG] Saving tensor n0_to_3_155.pt
[LOG] Saving tensor n0_to_2_753.pt
[LOG] Saving tensor n0_to_4_155.pt
[LOG] Saving tensor n0_to_3_753.pt
[LOG] Saving tensor n1_to_2_155.pt
[LOG] Saving tensor n0_to_4_753.pt
[LOG] Saving tensor n1_to_3_155.pt
[LOG] Saving tensor n1_to_2_753.pt
[LOG] Saving tensor n1_to_4_155.pt
[LOG] Saving tensor n1_to_3_753.pt
[LOG] Saving tensor n2_to_3_155.pt
[LOG] Saving tensor n1_to_4_753.pt
[LOG] Saving tensor n2_to_4_155.pt
[LOG] Saving tensor n2_to_3_753.pt
[LOG] Saving tensor n3_to_4_155.pt
[LOG] Computing n0_to_2 for num 924
[LOG] Computing n2_to_2 (adjacency) for num 379
[LOG] Saving tensor n2_to_4_753.pt
[LOG] Saving tensor global_feature_155.pt
[LOG] Process 19: Calculating Cross-Cell-Invariants
[LOG] Saving tensor n3_to_4_753.pt
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor global_feature_753.pt
[LOG] Process 94: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 0 subset clusters.
[LOG] Computing n3_to_3 (adjacency) for num 379
[LOG] Computing n4_to_4 (coadjacency) for num 379
[LOG] Computing n0_to_1 for num 379
[LOG] Computing n0_to_2 for num 379
[LOG] Computing n0_to_3 for num 974
[LOG] Computing n0_to_4 for num 974
[LOG] GENERATED TETRA
[LOG] Computing n1_to_2 for num 974
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_3 for num 379
[LOG] Computing n0_to_4 for num 379
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_2 for num 379
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 60: Created combinatorial complex for file data_481.hdf5
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1370 Tetrahedra.
    [LOG] Generated 44 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.5
    [LOG] Max number of nodes per cluster is 26 and the number is 15
[LOG] Computing n1_to_3 for num 379
[LOG] Computing n1_to_4 for num 379
[LOG] Computing n2_to_3 for num 379
[LOG] Computing n2_to_4 for num 379
[LOG] Computing n1_to_3 for num 974
[LOG] Computing n3_to_4 for num 379
[LOG] Global feature for num 379
[LOG] Global feature for num 379
[LOG] Saving tensor x_0_379.pt
[LOG] Saving tensor x_1_379.pt
[LOG] Computing n1_to_4 for num 974
[LOG] Saving tensor x_2_379.pt
[LOG] Saving tensor x_3_379.pt
[LOG] Saving tensor x_4_379.pt
[LOG] Saving tensor n0_to_0_379.pt
[LOG] We will select 156 edges and 1370 tetra
[LOG] Edges from tetra 0 and KDTree 405 with 0 edges in common.
[LOG] Saving tensor n1_to_1_379.pt
[LOG] Computing n2_to_3 for num 974
[LOG] Saving tensor n2_to_2_379.pt
[LOG] Saving tensor n3_to_3_379.pt
[LOG] Saving tensor n4_to_4_379.pt
[LOG] Saving tensor n0_to_1_379.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n0_to_2_379.pt
[LOG] Saving tensor n0_to_3_379.pt
[LOG] Saving tensor n0_to_4_379.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n1_to_2_379.pt
[LOG] Saving tensor n1_to_3_379.pt
[LOG] Saving tensor n1_to_4_379.pt
[LOG] Computing n0_to_3 for num 924
[LOG] Saving tensor n2_to_3_379.pt
[LOG] Computing n2_to_4 for num 974
[LOG] Saving tensor n2_to_4_379.pt
[LOG] Saving tensor n3_to_4_379.pt
[LOG] Saving tensor global_feature_379.pt
[LOG] Process 47: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_4 for num 924
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_2 for num 924
[LOG] Computing n3_to_4 for num 974
[LOG] Calculating for cell ranks 0 and 2
[LOG] Global feature for num 974
[LOG] Global feature for num 974
[LOG] Saving tensor x_0_974.pt
[LOG] Process 60: Calculating Neighbors
[LOG] Loading pickle file data_481.pickle
[LOG] Processing node features for num 481
[LOG] Saving tensor x_1_974.pt
[LOG] Saving tensor x_2_974.pt
[LOG] Processing edge features for num 481
[LOG] Saving tensor x_3_974.pt
[LOG] Saving tensor x_4_974.pt
[LOG] Saving tensor n0_to_0_974.pt
[LOG] Saving tensor n1_to_1_974.pt
[LOG] Saving tensor n2_to_2_974.pt
[LOG] Saving tensor n3_to_3_974.pt
[LOG] Saving tensor n4_to_4_974.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n0_to_1_974.pt
[LOG] Processing tetra features for num 481
[LOG] Saving tensor n0_to_2_974.pt
[LOG] Saving tensor n0_to_3_974.pt
[LOG] Saving tensor n0_to_4_974.pt
[LOG] Saving tensor n1_to_2_974.pt
[LOG] Saving tensor n1_to_3_974.pt
[LOG] Saving tensor n1_to_4_974.pt
[LOG] Saving tensor n2_to_3_974.pt
[LOG] Saving tensor n2_to_4_974.pt
[LOG] Saving tensor n3_to_4_974.pt
[LOG] Saving tensor global_feature_974.pt
[LOG] Process 124: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing cluster features for num 481
[LOG] Processing cluster features for num 481
[LOG] Processing adjacency and incidence matrices for num 481
[LOG] Computing n0_to_0 for num 481
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_1 for num 481
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] GENERATED TETRA
[LOG] Computing n1_to_3 for num 924
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_4 for num 924
[LOG] Computing n2_to_3 for num 924
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 75: Created combinatorial complex for file data_604.hdf5
[LOG] Computing n2_to_4 for num 924
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 5 subset clusters.

    [LOG] We Currently have 1228 Tetrahedra.
    [LOG] Generated 46 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.217391304347826
    [LOG] Max number of nodes per cluster is 37 and the number is 27
[LOG] Computing n3_to_4 for num 924
[LOG] Global feature for num 924
[LOG] Global feature for num 924
[LOG] Saving tensor x_0_924.pt
[LOG] Saving tensor x_1_924.pt
[LOG] Saving tensor x_2_924.pt
[LOG] Saving tensor x_3_924.pt
[LOG] Saving tensor x_4_924.pt
[LOG] Saving tensor n0_to_0_924.pt
[LOG] Saving tensor n1_to_1_924.pt
[LOG] Saving tensor n2_to_2_924.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n3_to_3_924.pt
[LOG] Saving tensor n4_to_4_924.pt
[LOG] Saving tensor n0_to_1_924.pt
[LOG] We will select 349 edges and 1228 tetra
[LOG] Edges from tetra 0 and KDTree 1839 with 0 edges in common.
[LOG] Saving tensor n0_to_2_924.pt
[LOG] Saving tensor n0_to_3_924.pt
[LOG] Saving tensor n0_to_4_924.pt
[LOG] Saving tensor n1_to_2_924.pt
[LOG] Computing n2_to_2 (adjacency) for num 481
[LOG] Saving tensor n1_to_3_924.pt
[LOG] Saving tensor n1_to_4_924.pt
[LOG] Saving tensor n2_to_3_924.pt
[LOG] Saving tensor n2_to_4_924.pt
[LOG] Saving tensor n3_to_4_924.pt
[LOG] Saving tensor global_feature_924.pt
[LOG] Process 117: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 75: Calculating Neighbors
[LOG] Loading pickle file data_604.pickle
[LOG] Processing node features for num 604
[LOG] Processing edge features for num 604
[LOG] Process 77: Created combinatorial complex for file data_618.hdf5
[LOG] Processing tetra features for num 604
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing cluster features for num 604
[LOG] Computing n3_to_3 (adjacency) for num 481
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing cluster features for num 604
[LOG] Computing n4_to_4 (coadjacency) for num 481
[LOG] Computing n0_to_1 for num 481
[LOG] Processing adjacency and incidence matrices for num 604
[LOG] Computing n0_to_0 for num 604
[LOG] Computing n1_to_1 for num 604
[LOG] Process 77: Calculating Neighbors
[LOG] Loading pickle file data_618.pickle
[LOG] Processing node features for num 618
[LOG] Processing edge features for num 618
[LOG] Processing tetra features for num 618
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_2 for num 481
[LOG] Processing cluster features for num 618
[LOG] Computing n2_to_2 (adjacency) for num 604
[LOG] Processing cluster features for num 618
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing adjacency and incidence matrices for num 618
[LOG] Computing n0_to_0 for num 618
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_1 for num 618
[LOG] Computing n3_to_3 (adjacency) for num 604
[LOG] Computing n4_to_4 (coadjacency) for num 604
[LOG] Computing n0_to_1 for num 604
[LOG] Computing n0_to_2 for num 604
[LOG] Computing n2_to_2 (adjacency) for num 618
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_3 for num 604
[LOG] Computing n3_to_3 (adjacency) for num 618
[LOG] Computing n0_to_4 for num 604
[LOG] Computing n4_to_4 (coadjacency) for num 618
[LOG] Computing n0_to_1 for num 618
[LOG] Computing n1_to_2 for num 604
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_2 for num 618
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_3 for num 604
[LOG] Computing n1_to_4 for num 604
[LOG] Computing n2_to_3 for num 604
[LOG] Computing n2_to_4 for num 604
[LOG] Computing n3_to_4 for num 604
[LOG] Global feature for num 604
[LOG] Global feature for num 604
[LOG] Saving tensor x_0_604.pt
[LOG] Saving tensor x_1_604.pt
[LOG] Saving tensor x_2_604.pt
[LOG] Saving tensor x_3_604.pt
[LOG] Saving tensor x_4_604.pt
[LOG] Saving tensor n0_to_0_604.pt
[LOG] Saving tensor n1_to_1_604.pt
[LOG] Saving tensor n2_to_2_604.pt
[LOG] Saving tensor n3_to_3_604.pt
[LOG] Saving tensor n4_to_4_604.pt
[LOG] Saving tensor n0_to_1_604.pt
[LOG] Saving tensor n0_to_2_604.pt
[LOG] Saving tensor n0_to_3_604.pt
[LOG] Saving tensor n0_to_4_604.pt
[LOG] Computing n0_to_3 for num 481
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_3 for num 618
[LOG] Computing n0_to_4 for num 618
[LOG] Computing n0_to_4 for num 481
[LOG] Computing n1_to_2 for num 618
[LOG] Saving tensor n1_to_2_604.pt
[LOG] Saving tensor n1_to_3_604.pt
[LOG] Saving tensor n1_to_4_604.pt
[LOG] Computing n1_to_2 for num 481
[LOG] Saving tensor n2_to_3_604.pt
[LOG] Saving tensor n2_to_4_604.pt
[LOG] Saving tensor n3_to_4_604.pt
[LOG] Saving tensor global_feature_604.pt
[LOG] Process 75: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_3 for num 618
[LOG] Computing n1_to_4 for num 618
[LOG] Computing n2_to_3 for num 618
[LOG] Computing n2_to_4 for num 618
[LOG] Computing n3_to_4 for num 618
[LOG] Global feature for num 618
[LOG] Global feature for num 618
[LOG] Saving tensor x_0_618.pt
[LOG] Saving tensor x_1_618.pt
[LOG] Saving tensor x_2_618.pt
[LOG] Saving tensor x_3_618.pt
[LOG] Saving tensor x_4_618.pt
[LOG] Saving tensor n0_to_0_618.pt
[LOG] Saving tensor n1_to_1_618.pt
[LOG] Saving tensor n2_to_2_618.pt
[LOG] Saving tensor n3_to_3_618.pt
[LOG] Saving tensor n4_to_4_618.pt
[LOG] Saving tensor n0_to_1_618.pt
[LOG] Saving tensor n0_to_2_618.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n0_to_3_618.pt
[LOG] Saving tensor n0_to_4_618.pt
[LOG] Saving tensor n1_to_2_618.pt
[LOG] Saving tensor n1_to_3_618.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 4077 Tetrahedra.
    [LOG] Generated 97 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.670103092783505
    [LOG] Max number of nodes per cluster is 50 and the number is 91
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1666 Tetrahedra.
    [LOG] Generated 43 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.511627906976745
    [LOG] Max number of nodes per cluster is 75 and the number is 42
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n1_to_4_618.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n2_to_3_618.pt
[LOG] Saving tensor n2_to_4_618.pt
[LOG] Saving tensor n3_to_4_618.pt
[LOG] Saving tensor global_feature_618.pt
[LOG] We will select 337 edges and 1666 tetra
[LOG] Edges from tetra 0 and KDTree 5993 with 0 edges in common.
[LOG] Process 77: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] We will select 942 edges and 4077 tetra
[LOG] Edges from tetra 0 and KDTree 1423 with 0 edges in common.
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n1_to_3 for num 481
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n1_to_4 for num 481
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n2_to_3 for num 481
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n2_to_4 for num 481
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n3_to_4 for num 481
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Global feature for num 481
[LOG] Global feature for num 481
[LOG] Saving tensor x_0_481.pt
[LOG] Saving tensor x_1_481.pt
[LOG] Saving tensor x_2_481.pt
[LOG] Saving tensor x_3_481.pt
[LOG] Saving tensor x_4_481.pt
[LOG] Saving tensor n0_to_0_481.pt
[LOG] Saving tensor n1_to_1_481.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n2_to_2_481.pt
[LOG] Saving tensor n3_to_3_481.pt
[LOG] Saving tensor n4_to_4_481.pt
[LOG] Saving tensor n0_to_1_481.pt
[LOG] Saving tensor n0_to_2_481.pt
[LOG] Saving tensor n0_to_3_481.pt
[LOG] Saving tensor n0_to_4_481.pt
[LOG] Saving tensor n1_to_2_481.pt
[LOG] Saving tensor n1_to_3_481.pt
[LOG] Saving tensor n1_to_4_481.pt
[LOG] Saving tensor n2_to_3_481.pt
[LOG] Saving tensor n2_to_4_481.pt
[LOG] Saving tensor n3_to_4_481.pt
[LOG] Saving tensor global_feature_481.pt
[LOG] Removed 0 subset clusters.
[LOG] Process 60: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 62: Created combinatorial complex for file data_500.hdf5
[LOG] Process 62: Calculating Neighbors
[LOG] Loading pickle file data_500.pickle
[LOG] Processing node features for num 500
[LOG] Processing edge features for num 500
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing tetra features for num 500
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing cluster features for num 500
[LOG] Processing cluster features for num 500
[LOG] Processing adjacency and incidence matrices for num 500
[LOG] Computing n0_to_0 for num 500
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_1 for num 500
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n2_to_2 (adjacency) for num 500
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_3 (adjacency) for num 500
[LOG] Computing n4_to_4 (coadjacency) for num 500
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n0_to_1 for num 500
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_2 for num 500
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Process 43: Created combinatorial complex for file data_346.hdf5
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 43: Calculating Neighbors
[LOG] Loading pickle file data_346.pickle
[LOG] Processing node features for num 346
[LOG] GENERATED TETRA
[LOG] Processing edge features for num 346
[LOG] Computing n0_to_3 for num 500
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_4 for num 500
[LOG] Processing tetra features for num 346
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_2 for num 500
[LOG] Processing cluster features for num 346
[LOG] Processing cluster features for num 346
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_3 for num 500
[LOG] Processing adjacency and incidence matrices for num 346
[LOG] Computing n1_to_4 for num 500
[LOG] Computing n0_to_0 for num 346
[LOG] Computing n2_to_3 for num 500
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_4 for num 500
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_4 for num 500
[LOG] Global feature for num 500
[LOG] Global feature for num 500
[LOG] Saving tensor x_0_500.pt
[LOG] Saving tensor x_1_500.pt
[LOG] Saving tensor x_2_500.pt
[LOG] Saving tensor x_3_500.pt
[LOG] Saving tensor x_4_500.pt
[LOG] Saving tensor n0_to_0_500.pt
[LOG] Saving tensor n1_to_1_500.pt
[LOG] Saving tensor n2_to_2_500.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n3_to_3_500.pt
[LOG] Saving tensor n4_to_4_500.pt
[LOG] Saving tensor n0_to_1_500.pt
[LOG] Saving tensor n0_to_2_500.pt
[LOG] Saving tensor n0_to_3_500.pt
[LOG] Saving tensor n0_to_4_500.pt
[LOG] Saving tensor n1_to_2_500.pt
[LOG] Saving tensor n1_to_3_500.pt
[LOG] Saving tensor n1_to_4_500.pt
[LOG] Saving tensor n2_to_3_500.pt
[LOG] Saving tensor n2_to_4_500.pt
[LOG] Saving tensor n3_to_4_500.pt
[LOG] Saving tensor global_feature_500.pt
[LOG] Process 62: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_1 for num 346
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] GENERATED TETRA
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1370 Tetrahedra.
    [LOG] Generated 45 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.88888888888889
    [LOG] Max number of nodes per cluster is 59 and the number is 43
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] We will select 213 edges and 1370 tetra
[LOG] Edges from tetra 0 and KDTree 3107 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_2 (adjacency) for num 346
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1379 Tetrahedra.
    [LOG] Generated 41 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.560975609756097
    [LOG] Max number of nodes per cluster is 33 and the number is 39
[LOG] Calculating for cell ranks 0 and 1
[LOG] We will select 326 edges and 1379 tetra
[LOG] Edges from tetra 0 and KDTree 713 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1661 Tetrahedra.
    [LOG] Generated 47 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.446808510638299
    [LOG] Max number of nodes per cluster is 47 and the number is 39
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 8: Created combinatorial complex for file data_67.hdf5
[LOG] We will select 147 edges and 1661 tetra
[LOG] Edges from tetra 0 and KDTree 668 with 0 edges in common.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 8: Calculating Neighbors
[LOG] Loading pickle file data_67.pickle
[LOG] Processing node features for num 67
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Processing edge features for num 67
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Processing tetra features for num 67
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing cluster features for num 67
[LOG] Processing cluster features for num 67
[LOG] Processing adjacency and incidence matrices for num 67
[LOG] Computing n0_to_0 for num 67
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 12: Created combinatorial complex for file data_101.hdf5
[LOG] Computing n1_to_1 for num 67
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n2_to_2 (adjacency) for num 67
[LOG] Process 12: Calculating Neighbors
[LOG] Loading pickle file data_101.pickle
[LOG] Processing node features for num 101
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Processing edge features for num 101
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing tetra features for num 101
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Processing cluster features for num 101
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n3_to_3 (adjacency) for num 67
[LOG] Processing cluster features for num 101
[LOG] Removed 0 subset clusters.
[LOG] Computing n4_to_4 (coadjacency) for num 67
[LOG] Computing n0_to_1 for num 67
[LOG] Processing adjacency and incidence matrices for num 101
[LOG] Computing n0_to_0 for num 101
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_2 for num 67
[LOG] Computing n1_to_1 for num 101
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1861 Tetrahedra.
    [LOG] Generated 56 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.678571428571429
    [LOG] Max number of nodes per cluster is 47 and the number is 18
[LOG] Calculating for cell ranks 3 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 95: Created combinatorial complex for file data_765.hdf5
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_2 (adjacency) for num 101
[LOG] We will select 233 edges and 1861 tetra
[LOG] Edges from tetra 0 and KDTree 695 with 0 edges in common.
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 346
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n4_to_4 (coadjacency) for num 346
[LOG] Computing n0_to_1 for num 346
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_3 (adjacency) for num 101
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1261 Tetrahedra.
    [LOG] Generated 28 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.714285714285714
    [LOG] Max number of nodes per cluster is 30 and the number is 16
[LOG] Computing n4_to_4 (coadjacency) for num 101
[LOG] Computing n0_to_1 for num 101
[LOG] Process 95: Calculating Neighbors
[LOG] Loading pickle file data_765.pickle
[LOG] Processing node features for num 765
[LOG] Processing edge features for num 765
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing tetra features for num 765
[LOG] We will select 73 edges and 1261 tetra
[LOG] Edges from tetra 0 and KDTree 73 with 0 edges in common.
[LOG] Computing n0_to_2 for num 101
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing cluster features for num 765
[LOG] Processing cluster features for num 765
[LOG] Processing adjacency and incidence matrices for num 765
[LOG] Computing n0_to_0 for num 765
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n1_to_1 for num 765
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n0_to_2 for num 346
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n0_to_3 for num 67
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n0_to_4 for num 67
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 765
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n1_to_2 for num 67
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Computing n0_to_3 for num 101
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_4 for num 101
[LOG] Computing n1_to_3 for num 67
[LOG] Computing n1_to_2 for num 101
[LOG] Computing n1_to_4 for num 67
[LOG] Computing n2_to_3 for num 67
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_4 for num 67
[LOG] Computing n3_to_3 (adjacency) for num 765
[LOG] Computing n3_to_4 for num 67
[LOG] Computing n4_to_4 (coadjacency) for num 765
[LOG] Global feature for num 67
[LOG] Global feature for num 67
[LOG] Saving tensor x_0_67.pt
[LOG] Computing n0_to_1 for num 765
[LOG] Saving tensor x_1_67.pt
[LOG] Saving tensor x_2_67.pt
[LOG] Saving tensor x_3_67.pt
[LOG] Saving tensor x_4_67.pt
[LOG] Saving tensor n0_to_0_67.pt
[LOG] Computing n0_to_2 for num 765
[LOG] Saving tensor n1_to_1_67.pt
[LOG] Saving tensor n2_to_2_67.pt
[LOG] Saving tensor n3_to_3_67.pt
[LOG] Saving tensor n4_to_4_67.pt
[LOG] Saving tensor n0_to_1_67.pt
[LOG] Saving tensor n0_to_2_67.pt
[LOG] Saving tensor n0_to_3_67.pt
[LOG] Saving tensor n0_to_4_67.pt
[LOG] Saving tensor n1_to_2_67.pt
[LOG] Computing n1_to_3 for num 101
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n1_to_3_67.pt
[LOG] Saving tensor n1_to_4_67.pt
[LOG] Computing n1_to_4 for num 101
[LOG] Saving tensor n2_to_3_67.pt
[LOG] Saving tensor n2_to_4_67.pt
[LOG] Computing n2_to_3 for num 101
[LOG] Saving tensor n3_to_4_67.pt
[LOG] Saving tensor global_feature_67.pt
[LOG] Process 8: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n2_to_4 for num 101
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n3_to_4 for num 101
[LOG] Global feature for num 101
[LOG] Global feature for num 101
[LOG] Saving tensor x_0_101.pt
[LOG] Saving tensor x_1_101.pt
[LOG] Saving tensor x_2_101.pt
[LOG] Saving tensor x_3_101.pt
[LOG] Saving tensor x_4_101.pt
[LOG] Saving tensor n0_to_0_101.pt
[LOG] Saving tensor n1_to_1_101.pt
[LOG] Saving tensor n2_to_2_101.pt
[LOG] Saving tensor n3_to_3_101.pt
[LOG] Saving tensor n4_to_4_101.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n0_to_1_101.pt
[LOG] Saving tensor n0_to_2_101.pt
[LOG] Saving tensor n0_to_3_101.pt
[LOG] Process 34: Created combinatorial complex for file data_273.hdf5
[LOG] Computing n0_to_3 for num 765
[LOG] Computing n0_to_4 for num 765
[LOG] Saving tensor n0_to_4_101.pt
[LOG] Saving tensor n1_to_2_101.pt
[LOG] Computing n1_to_2 for num 765
[LOG] Saving tensor n1_to_3_101.pt
[LOG] Saving tensor n1_to_4_101.pt
[LOG] Saving tensor n2_to_3_101.pt
[LOG] Saving tensor n2_to_4_101.pt
[LOG] Saving tensor n3_to_4_101.pt
[LOG] Saving tensor global_feature_101.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 12: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 65: Created combinatorial complex for file data_523.hdf5
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_3 for num 765
[LOG] Computing n1_to_4 for num 765
[LOG] Computing n2_to_3 for num 765
[LOG] Computing n2_to_4 for num 765
[LOG] Computing n3_to_4 for num 765
[LOG] Global feature for num 765
[LOG] Global feature for num 765
[LOG] Saving tensor x_0_765.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor x_1_765.pt
[LOG] Saving tensor x_2_765.pt
[LOG] Saving tensor x_3_765.pt
[LOG] Saving tensor x_4_765.pt
[LOG] Saving tensor n0_to_0_765.pt
[LOG] Saving tensor n1_to_1_765.pt
[LOG] Saving tensor n2_to_2_765.pt
[LOG] Saving tensor n3_to_3_765.pt
[LOG] Saving tensor n4_to_4_765.pt
[LOG] Saving tensor n0_to_1_765.pt
[LOG] Saving tensor n0_to_2_765.pt
[LOG] Saving tensor n0_to_3_765.pt
[LOG] Saving tensor n0_to_4_765.pt
[LOG] Saving tensor n1_to_2_765.pt
[LOG] Saving tensor n1_to_3_765.pt
[LOG] Process 65: Calculating Neighbors
[LOG] Loading pickle file data_523.pickle
[LOG] Processing node features for num 523
[LOG] Saving tensor n1_to_4_765.pt
[LOG] Saving tensor n2_to_3_765.pt
[LOG] Processing edge features for num 523
[LOG] Saving tensor n2_to_4_765.pt
[LOG] Saving tensor n3_to_4_765.pt
[LOG] Saving tensor global_feature_765.pt
[LOG] Process 95: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing tetra features for num 523
[LOG] Processing cluster features for num 523
[LOG] Processing cluster features for num 523
[LOG] GENERATED TETRA
[LOG] Processing adjacency and incidence matrices for num 523
[LOG] Computing n0_to_0 for num 523
[LOG] Computing n1_to_1 for num 523
[LOG] Computing n2_to_2 (adjacency) for num 523
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 638 Tetrahedra.
    [LOG] Generated 19 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.0
    [LOG] Max number of nodes per cluster is 24 and the number is 12
[LOG] Calculating for cell ranks 1 and 3
[LOG] We will select 315 edges and 638 tetra
[LOG] Edges from tetra 0 and KDTree 315 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 34: Calculating Neighbors
[LOG] Loading pickle file data_273.pickle
[LOG] Processing node features for num 273
[LOG] Processing edge features for num 273
[LOG] Processing tetra features for num 273
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_3 (adjacency) for num 523
[LOG] Computing n4_to_4 (coadjacency) for num 523
[LOG] Computing n0_to_1 for num 523
[LOG] Processing cluster features for num 273
[LOG] Processing cluster features for num 273
[LOG] Computing n0_to_2 for num 523
[LOG] Processing adjacency and incidence matrices for num 273
[LOG] Computing n0_to_0 for num 273
[LOG] Computing n0_to_3 for num 346
[LOG] Computing n1_to_1 for num 273
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_2 (adjacency) for num 273
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_4 for num 346
[LOG] GENERATED TETRA
[LOG] Computing n1_to_2 for num 346
[LOG] Computing n3_to_3 (adjacency) for num 273
[LOG] Removed 1 subset clusters.
[LOG] Computing n4_to_4 (coadjacency) for num 273
[LOG] Computing n0_to_1 for num 273
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_2 for num 273
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 5: Created combinatorial complex for file data_43.hdf5
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_3 for num 273
[LOG] Computing n0_to_4 for num 273
[LOG] Process 5: Calculating Neighbors
[LOG] Loading pickle file data_43.pickle
[LOG] Processing node features for num 43
[LOG] Processing edge features for num 43
[LOG] Computing n1_to_2 for num 273
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing tetra features for num 43
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 2

    [LOG] We Currently have 1079 Tetrahedra.
    [LOG] Generated 29 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.0
    [LOG] Max number of nodes per cluster is 37 and the number is 12
[LOG] Computing n0_to_3 for num 523
[LOG] Processing cluster features for num 43
[LOG] Computing n1_to_3 for num 273
[LOG] Computing n1_to_4 for num 273
[LOG] Computing n2_to_3 for num 273
[LOG] Processing cluster features for num 43
[LOG] Computing n0_to_4 for num 523
[LOG] Processing adjacency and incidence matrices for num 43
[LOG] Computing n2_to_4 for num 273
[LOG] Computing n0_to_0 for num 43
[LOG] Computing n1_to_2 for num 523
[LOG] Computing n3_to_4 for num 273
[LOG] Global feature for num 273
[LOG] Global feature for num 273
[LOG] Saving tensor x_0_273.pt
[LOG] Computing n1_to_1 for num 43
[LOG] Calculating for cell ranks 3 and 4
[LOG] We will select 183 edges and 1079 tetra
[LOG] Edges from tetra 0 and KDTree 183 with 0 edges in common.
[LOG] Saving tensor x_1_273.pt
[LOG] Saving tensor x_2_273.pt
[LOG] Saving tensor x_3_273.pt
[LOG] Saving tensor x_4_273.pt
[LOG] Saving tensor n0_to_0_273.pt
[LOG] Saving tensor n1_to_1_273.pt
[LOG] Saving tensor n2_to_2_273.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n3_to_3_273.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n4_to_4_273.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n0_to_1_273.pt
[LOG] Saving tensor n0_to_2_273.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n0_to_3_273.pt
[LOG] Saving tensor n0_to_4_273.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n1_to_2_273.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n1_to_3_273.pt
[LOG] Saving tensor n1_to_4_273.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n2_to_3_273.pt
[LOG] Computing n2_to_2 (adjacency) for num 43
[LOG] Computing n3_to_3 (adjacency) for num 43
[LOG] Computing n4_to_4 (coadjacency) for num 43
[LOG] Computing n0_to_1 for num 43
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_2 for num 43
[LOG] Computing n1_to_3 for num 523
[LOG] Computing n1_to_4 for num 523
[LOG] Computing n2_to_3 for num 523
[LOG] Computing n0_to_3 for num 43
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_4 for num 43
[LOG] Computing n1_to_2 for num 43
[LOG] Saving tensor n2_to_4_273.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n2_to_4 for num 523
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n3_to_4_273.pt
[LOG] Saving tensor global_feature_273.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Process 34: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n3_to_4 for num 523
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Global feature for num 523
[LOG] Global feature for num 523
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor x_0_523.pt
[LOG] Computing n1_to_3 for num 43
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor x_1_523.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n1_to_4 for num 43
[LOG] Saving tensor x_2_523.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor x_3_523.pt
[LOG] Computing n2_to_3 for num 43
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor x_4_523.pt
[LOG] Saving tensor n0_to_0_523.pt
[LOG] Computing n2_to_4 for num 43
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n1_to_1_523.pt
[LOG] Computing n3_to_4 for num 43
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Global feature for num 43
[LOG] Global feature for num 43
[LOG] Saving tensor x_0_43.pt
[LOG] Saving tensor n2_to_2_523.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor x_1_43.pt
[LOG] Saving tensor n3_to_3_523.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor x_2_43.pt
[LOG] Saving tensor n4_to_4_523.pt
[LOG] Saving tensor x_3_43.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n0_to_1_523.pt
[LOG] Saving tensor x_4_43.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n0_to_0_43.pt
[LOG] Saving tensor n0_to_2_523.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n1_to_1_43.pt
[LOG] Saving tensor n0_to_3_523.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n0_to_4_523.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n2_to_2_43.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n1_to_2_523.pt
[LOG] Saving tensor n3_to_3_43.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n1_to_3_523.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n4_to_4_43.pt
[LOG] Saving tensor n0_to_1_43.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n1_to_4_523.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n0_to_2_43.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n2_to_3_523.pt
[LOG] Saving tensor n2_to_4_523.pt
[LOG] Saving tensor n0_to_3_43.pt
[LOG] Saving tensor n0_to_4_43.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n1_to_2_43.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n3_to_4_523.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n1_to_3_43.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor global_feature_523.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n1_to_4_43.pt
[LOG] Process 65: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n2_to_3_43.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n2_to_4_43.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n3_to_4_43.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor global_feature_43.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Process 5: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 92: Created combinatorial complex for file data_738.hdf5
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 92: Calculating Neighbors
[LOG] Loading pickle file data_738.pickle
[LOG] Processing node features for num 738
[LOG] Processing edge features for num 738
[LOG] Processing tetra features for num 738
[LOG] Processing cluster features for num 738
[LOG] Processing cluster features for num 738
[LOG] Processing adjacency and incidence matrices for num 738
[LOG] Computing n0_to_0 for num 738
[LOG] Computing n1_to_1 for num 738
[LOG] Computing n1_to_3 for num 346
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_2 (adjacency) for num 738
[LOG] Computing n1_to_4 for num 346
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 738
[LOG] Computing n2_to_3 for num 346
[LOG] Computing n4_to_4 (coadjacency) for num 738
[LOG] Computing n0_to_1 for num 738
[LOG] Computing n0_to_2 for num 738
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_4 for num 346
[LOG] Computing n0_to_3 for num 738
[LOG] Computing n0_to_4 for num 738
[LOG] Computing n1_to_2 for num 738
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_3 for num 738
[LOG] Computing n1_to_4 for num 738
[LOG] Computing n2_to_3 for num 738
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_4 for num 738
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_4 for num 738
[LOG] Global feature for num 738
[LOG] Global feature for num 738
[LOG] Saving tensor x_0_738.pt
[LOG] Computing n3_to_4 for num 346
[LOG] Saving tensor x_1_738.pt
[LOG] Global feature for num 346
[LOG] Global feature for num 346
[LOG] Saving tensor x_2_738.pt
[LOG] Saving tensor x_0_346.pt
[LOG] Saving tensor x_3_738.pt
[LOG] Saving tensor x_4_738.pt
[LOG] Saving tensor n0_to_0_738.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor x_1_346.pt
[LOG] Saving tensor n1_to_1_738.pt
[LOG] Saving tensor x_2_346.pt
[LOG] Saving tensor n2_to_2_738.pt
[LOG] Saving tensor x_3_346.pt
[LOG] Saving tensor x_4_346.pt
[LOG] Saving tensor n3_to_3_738.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n4_to_4_738.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n0_to_0_346.pt
[LOG] Saving tensor n0_to_1_738.pt
[LOG] Saving tensor n1_to_1_346.pt
[LOG] Saving tensor n0_to_2_738.pt
[LOG] Saving tensor n0_to_3_738.pt
[LOG] Saving tensor n2_to_2_346.pt
[LOG] Saving tensor n0_to_4_738.pt
[LOG] Saving tensor n1_to_2_738.pt
[LOG] Saving tensor n3_to_3_346.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n1_to_3_738.pt
[LOG] Saving tensor n4_to_4_346.pt
[LOG] Saving tensor n1_to_4_738.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n0_to_1_346.pt
[LOG] Saving tensor n2_to_3_738.pt
[LOG] Saving tensor n0_to_2_346.pt
[LOG] Saving tensor n2_to_4_738.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n0_to_3_346.pt
[LOG] Saving tensor n3_to_4_738.pt
[LOG] Saving tensor n0_to_4_346.pt
[LOG] Saving tensor global_feature_738.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n1_to_2_346.pt
[LOG] Process 92: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n1_to_3_346.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n1_to_4_346.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n2_to_3_346.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n2_to_4_346.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n3_to_4_346.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor global_feature_346.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Process 43: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 839 Tetrahedra.
    [LOG] Generated 23 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 18.08695652173913
    [LOG] Max number of nodes per cluster is 68 and the number is 21
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] We will select 61 edges and 839 tetra
[LOG] Edges from tetra 0 and KDTree 1935 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Process 105: Created combinatorial complex for file data_844.hdf5
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Process 105: Calculating Neighbors
[LOG] Loading pickle file data_844.pickle
[LOG] Processing node features for num 844
[LOG] Processing edge features for num 844
[LOG] GENERATED TETRA
[LOG] Processing tetra features for num 844
[LOG] Processing cluster features for num 844
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing cluster features for num 844
[LOG] Processing adjacency and incidence matrices for num 844
[LOG] Computing n0_to_0 for num 844
[LOG] Computing n1_to_1 for num 844
[LOG] Computing n2_to_2 (adjacency) for num 844
[LOG] Computing n3_to_3 (adjacency) for num 844
[LOG] Computing n4_to_4 (coadjacency) for num 844
[LOG] Computing n0_to_1 for num 844
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_2 for num 844
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 977 Tetrahedra.
    [LOG] Generated 26 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.0
    [LOG] Max number of nodes per cluster is 54 and the number is 14
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] We will select 164 edges and 977 tetra
[LOG] Edges from tetra 0 and KDTree 452 with 0 edges in common.
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_3 for num 844
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n0_to_4 for num 844
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_2 for num 844
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Computing n1_to_3 for num 844
[LOG] Computing n1_to_4 for num 844
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Computing n2_to_3 for num 844
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_4 for num 844
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n3_to_4 for num 844
[LOG] Global feature for num 844
[LOG] Global feature for num 844
[LOG] Saving tensor x_0_844.pt
[LOG] Saving tensor x_1_844.pt
[LOG] Saving tensor x_2_844.pt
[LOG] Saving tensor x_3_844.pt
[LOG] Saving tensor x_4_844.pt
[LOG] Saving tensor n0_to_0_844.pt
[LOG] Saving tensor n1_to_1_844.pt
[LOG] Saving tensor n2_to_2_844.pt
[LOG] Saving tensor n3_to_3_844.pt
[LOG] Saving tensor n4_to_4_844.pt
[LOG] Saving tensor n0_to_1_844.pt
[LOG] Saving tensor n0_to_2_844.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n0_to_3_844.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n0_to_4_844.pt
[LOG] Saving tensor n1_to_2_844.pt
[LOG] Saving tensor n1_to_3_844.pt
[LOG] Saving tensor n1_to_4_844.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n2_to_3_844.pt
[LOG] Saving tensor n2_to_4_844.pt
[LOG] Saving tensor n3_to_4_844.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor global_feature_844.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 100: Created combinatorial complex for file data_806.hdf5
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 100: Calculating Neighbors
[LOG] Loading pickle file data_806.pickle
[LOG] Processing node features for num 806
[LOG] Processing edge features for num 806
[LOG] Processing tetra features for num 806
[LOG] Process 105: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Processing cluster features for num 806
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Processing cluster features for num 806
[LOG] Processing adjacency and incidence matrices for num 806
[LOG] Computing n0_to_0 for num 806
[LOG] Computing n1_to_1 for num 806
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_2 (adjacency) for num 806
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n3_to_3 (adjacency) for num 806
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n4_to_4 (coadjacency) for num 806
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n0_to_1 for num 806
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n0_to_2 for num 806
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_3 for num 806
[LOG] GENERATED TETRA
[LOG] Computing n0_to_4 for num 806
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_2 for num 806
[LOG] Computing n1_to_3 for num 806
[LOG] Computing n1_to_4 for num 806
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_3 for num 806
[LOG] Computing n2_to_4 for num 806
[LOG] Computing n3_to_4 for num 806
[LOG] Global feature for num 806
[LOG] Global feature for num 806
[LOG] Saving tensor x_0_806.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor x_1_806.pt
[LOG] Saving tensor x_2_806.pt
[LOG] Saving tensor x_3_806.pt
[LOG] Saving tensor x_4_806.pt
[LOG] Saving tensor n0_to_0_806.pt
[LOG] Saving tensor n1_to_1_806.pt
[LOG] Saving tensor n2_to_2_806.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n3_to_3_806.pt
[LOG] Saving tensor n4_to_4_806.pt
[LOG] Saving tensor n0_to_1_806.pt
[LOG] Saving tensor n0_to_2_806.pt
[LOG] Saving tensor n0_to_3_806.pt
[LOG] Saving tensor n0_to_4_806.pt
[LOG] Saving tensor n1_to_2_806.pt
[LOG] Saving tensor n1_to_3_806.pt
[LOG] Saving tensor n1_to_4_806.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n2_to_3_806.pt
[LOG] Saving tensor n2_to_4_806.pt
[LOG] Saving tensor n3_to_4_806.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor global_feature_806.pt
[LOG] Process 100: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2111 Tetrahedra.
    [LOG] Generated 66 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.318181818181818
    [LOG] Max number of nodes per cluster is 45 and the number is 30
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] We will select 516 edges and 2111 tetra
[LOG] Edges from tetra 0 and KDTree 947 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 58: Created combinatorial complex for file data_467.hdf5
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 864 Tetrahedra.
    [LOG] Generated 21 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 22.428571428571427
    [LOG] Max number of nodes per cluster is 135 and the number is 19
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] We will select 214 edges and 864 tetra
[LOG] Edges from tetra 0 and KDTree 2587 with 0 edges in common.
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Process 58: Calculating Neighbors
[LOG] Loading pickle file data_467.pickle
[LOG] Processing node features for num 467
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Processing edge features for num 467
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing tetra features for num 467
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing cluster features for num 467
[LOG] Removed 0 subset clusters.
[LOG] Processing cluster features for num 467
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing adjacency and incidence matrices for num 467
[LOG] Computing n0_to_0 for num 467
[LOG] Process 29: Created combinatorial complex for file data_236.hdf5
[LOG] Computing n1_to_1 for num 467
[LOG] Process 29: Calculating Neighbors
[LOG] Loading pickle file data_236.pickle
[LOG] Processing node features for num 236
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing edge features for num 236
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing tetra features for num 236
[LOG] Processing cluster features for num 236
[LOG] Processing cluster features for num 236
[LOG] Processing adjacency and incidence matrices for num 236
[LOG] Computing n0_to_0 for num 236
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_1 for num 236
[LOG] Computing n2_to_2 (adjacency) for num 236
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_3 (adjacency) for num 236
[LOG] Computing n4_to_4 (coadjacency) for num 236
[LOG] Computing n0_to_1 for num 236
[LOG] Computing n2_to_2 (adjacency) for num 467
[LOG] Computing n0_to_2 for num 236
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_3 for num 236
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_3 (adjacency) for num 467
[LOG] Computing n0_to_4 for num 236
[LOG] Computing n4_to_4 (coadjacency) for num 467
[LOG] Computing n0_to_1 for num 467
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_2 for num 236
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_3 for num 236
[LOG] Computing n1_to_4 for num 236
[LOG] Computing n2_to_3 for num 236
[LOG] Computing n2_to_4 for num 236
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n3_to_4 for num 236
[LOG] Global feature for num 236
[LOG] Global feature for num 236
[LOG] Saving tensor x_0_236.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor x_1_236.pt
[LOG] Computing n0_to_2 for num 467
[LOG] Saving tensor x_2_236.pt
[LOG] Saving tensor x_3_236.pt
[LOG] Saving tensor x_4_236.pt
[LOG] Saving tensor n0_to_0_236.pt
[LOG] Saving tensor n1_to_1_236.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n2_to_2_236.pt
[LOG] Saving tensor n3_to_3_236.pt
[LOG] Saving tensor n4_to_4_236.pt
[LOG] Saving tensor n0_to_1_236.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n0_to_2_236.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n0_to_3_236.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n0_to_4_236.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n1_to_2_236.pt
[LOG] Saving tensor n1_to_3_236.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n1_to_4_236.pt
[LOG] Saving tensor n2_to_3_236.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n2_to_4_236.pt
[LOG] Saving tensor n3_to_4_236.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor global_feature_236.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 29: Calculating Cross-Cell-Invariants
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 3075 Tetrahedra.
    [LOG] Generated 86 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.80232558139535
    [LOG] Max number of nodes per cluster is 27 and the number is 19
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] We will select 636 edges and 3075 tetra
[LOG] Edges from tetra 0 and KDTree 636 with 0 edges in common.
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_3 for num 467
[LOG] Computing n0_to_4 for num 467
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_2 for num 467
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_3 for num 467
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_4 for num 467
[LOG] Computing n2_to_3 for num 467
[LOG] Computing n2_to_4 for num 467
[LOG] Computing n3_to_4 for num 467
[LOG] Global feature for num 467
[LOG] Global feature for num 467
[LOG] Saving tensor x_0_467.pt
[LOG] Saving tensor x_1_467.pt
[LOG] Saving tensor x_2_467.pt
[LOG] Saving tensor x_3_467.pt
[LOG] Saving tensor x_4_467.pt
[LOG] Saving tensor n0_to_0_467.pt
[LOG] Saving tensor n1_to_1_467.pt
[LOG] Saving tensor n2_to_2_467.pt
[LOG] Saving tensor n3_to_3_467.pt
[LOG] Saving tensor n4_to_4_467.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n0_to_1_467.pt
[LOG] Saving tensor n0_to_2_467.pt
[LOG] Saving tensor n0_to_3_467.pt
[LOG] Saving tensor n0_to_4_467.pt
[LOG] Saving tensor n1_to_2_467.pt
[LOG] Saving tensor n1_to_3_467.pt
[LOG] Saving tensor n1_to_4_467.pt
[LOG] Saving tensor n2_to_3_467.pt
[LOG] Saving tensor n2_to_4_467.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n3_to_4_467.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor global_feature_467.pt
[LOG] Process 58: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1056 Tetrahedra.
    [LOG] Generated 36 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.305555555555555
    [LOG] Max number of nodes per cluster is 67 and the number is 34
[LOG] Calculating for cell ranks 1 and 3
[LOG] We will select 422 edges and 1056 tetra
[LOG] Edges from tetra 0 and KDTree 1208 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1315 Tetrahedra.
    [LOG] Generated 42 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.333333333333334
    [LOG] Max number of nodes per cluster is 35 and the number is 38
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] We will select 91 edges and 1315 tetra
[LOG] Edges from tetra 0 and KDTree 1346 with 0 edges in common.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Process 37: Created combinatorial complex for file data_300.hdf5
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Process 82: Created combinatorial complex for file data_659.hdf5
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Process 37: Calculating Neighbors
[LOG] Loading pickle file data_300.pickle
[LOG] Processing node features for num 300
[LOG] Processing edge features for num 300
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing tetra features for num 300
[LOG] Processing cluster features for num 300
[LOG] Processing cluster features for num 300
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2193 Tetrahedra.
    [LOG] Generated 72 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.555555555555555
    [LOG] Max number of nodes per cluster is 36 and the number is 1
[LOG] Processing adjacency and incidence matrices for num 300
[LOG] Computing n0_to_0 for num 300
[LOG] Process 69: Created combinatorial complex for file data_558.hdf5
[LOG] Process 82: Calculating Neighbors
[LOG] Loading pickle file data_659.pickle
[LOG] Processing node features for num 659
[LOG] Processing edge features for num 659
[LOG] Computing n1_to_1 for num 300
[LOG] Processing tetra features for num 659
[LOG] Process 69: Calculating Neighbors
[LOG] Loading pickle file data_558.pickle
[LOG] Processing node features for num 558
[LOG] Processing edge features for num 558
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing tetra features for num 558
[LOG] Processing cluster features for num 659
[LOG] Processing cluster features for num 558
[LOG] Computing n2_to_2 (adjacency) for num 300
[LOG] Processing cluster features for num 558
[LOG] Processing adjacency and incidence matrices for num 558
[LOG] Computing n0_to_0 for num 558
[LOG] Processing cluster features for num 659
[LOG] Computing n3_to_3 (adjacency) for num 300
[LOG] Computing n4_to_4 (coadjacency) for num 300
[LOG] Computing n1_to_1 for num 558
[LOG] Processing adjacency and incidence matrices for num 659
[LOG] Computing n0_to_0 for num 659
[LOG] Computing n0_to_1 for num 300
[LOG] Computing n2_to_2 (adjacency) for num 558
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_2 for num 300
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1336 Tetrahedra.
    [LOG] Generated 35 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.571428571428573
    [LOG] Max number of nodes per cluster is 66 and the number is 31
[LOG] Computing n3_to_3 (adjacency) for num 558
[LOG] Computing n4_to_4 (coadjacency) for num 558
[LOG] Computing n1_to_1 for num 659
[LOG] Computing n0_to_1 for num 558
[LOG] Computing n0_to_2 for num 558
[LOG] We will select 106 edges and 1336 tetra
[LOG] Edges from tetra 0 and KDTree 1061 with 0 edges in common.
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2353 Tetrahedra.
    [LOG] Generated 53 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.584905660377359
    [LOG] Max number of nodes per cluster is 109 and the number is 52
[LOG] Computing n0_to_3 for num 300
[LOG] Computing n0_to_4 for num 300
[LOG] Computing n1_to_2 for num 300
[LOG] We will select 1194 edges and 2353 tetra
[LOG] Edges from tetra 0 and KDTree 3411 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_3 for num 300
[LOG] Computing n1_to_4 for num 300
[LOG] Computing n2_to_3 for num 300
[LOG] We will select 503 edges and 2193 tetra
[LOG] Edges from tetra 0 and KDTree 503 with 0 edges in common.
[LOG] Computing n2_to_4 for num 300
[LOG] Computing n0_to_3 for num 558
[LOG] Computing n3_to_4 for num 300
[LOG] Global feature for num 300
[LOG] Global feature for num 300
[LOG] Saving tensor x_0_300.pt
[LOG] Saving tensor x_1_300.pt
[LOG] Saving tensor x_2_300.pt
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_4 for num 558
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor x_3_300.pt
[LOG] Saving tensor x_4_300.pt
[LOG] Saving tensor n0_to_0_300.pt
[LOG] Saving tensor n1_to_1_300.pt
[LOG] Computing n1_to_2 for num 558
[LOG] Saving tensor n2_to_2_300.pt
[LOG] Saving tensor n3_to_3_300.pt
[LOG] Saving tensor n4_to_4_300.pt
[LOG] Saving tensor n0_to_1_300.pt
[LOG] Saving tensor n0_to_2_300.pt
[LOG] Saving tensor n0_to_3_300.pt
[LOG] Saving tensor n0_to_4_300.pt
[LOG] Saving tensor n1_to_2_300.pt
[LOG] Computing n1_to_3 for num 558
[LOG] Computing n1_to_4 for num 558
[LOG] Computing n2_to_3 for num 558
[LOG] Saving tensor n1_to_3_300.pt
[LOG] Saving tensor n1_to_4_300.pt
[LOG] Saving tensor n2_to_3_300.pt
[LOG] Saving tensor n2_to_4_300.pt
[LOG] Saving tensor n3_to_4_300.pt
[LOG] Saving tensor global_feature_300.pt
[LOG] Computing n2_to_4 for num 558
[LOG] Process 37: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n3_to_4 for num 558
[LOG] Global feature for num 558
[LOG] Global feature for num 558
[LOG] Saving tensor x_0_558.pt
[LOG] Saving tensor x_1_558.pt
[LOG] Saving tensor x_2_558.pt
[LOG] Saving tensor x_3_558.pt
[LOG] Saving tensor x_4_558.pt
[LOG] Saving tensor n0_to_0_558.pt
[LOG] Process 48: Created combinatorial complex for file data_387.hdf5
[LOG] Saving tensor n1_to_1_558.pt
[LOG] Saving tensor n2_to_2_558.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n3_to_3_558.pt
[LOG] Computing n2_to_2 (adjacency) for num 659
[LOG] Saving tensor n4_to_4_558.pt
[LOG] Saving tensor n0_to_1_558.pt
[LOG] Saving tensor n0_to_2_558.pt
[LOG] Saving tensor n0_to_3_558.pt
[LOG] Saving tensor n0_to_4_558.pt
[LOG] Saving tensor n1_to_2_558.pt
[LOG] Saving tensor n1_to_3_558.pt
[LOG] Saving tensor n1_to_4_558.pt
[LOG] Saving tensor n2_to_3_558.pt
[LOG] Saving tensor n2_to_4_558.pt
[LOG] Saving tensor n3_to_4_558.pt
[LOG] Saving tensor global_feature_558.pt
[LOG] Process 69: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 48: Calculating Neighbors
[LOG] Loading pickle file data_387.pickle
[LOG] Processing node features for num 387
[LOG] Processing edge features for num 387
[LOG] Processing tetra features for num 387
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 6851 Tetrahedra.
    [LOG] Generated 106 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.62264150943396
    [LOG] Max number of nodes per cluster is 255 and the number is 104
[LOG] Processing cluster features for num 387
[LOG] GENERATED TETRA
[LOG] Processing cluster features for num 387
[LOG] Processing adjacency and incidence matrices for num 387
[LOG] Computing n0_to_0 for num 387
[LOG] Computing n1_to_1 for num 387
[LOG] Computing n2_to_2 (adjacency) for num 387
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] Computing n3_to_3 (adjacency) for num 387
[LOG] Computing n4_to_4 (coadjacency) for num 387
[LOG] We will select 2783 edges and 6851 tetra
[LOG] Edges from tetra 0 and KDTree 6800 with 0 edges in common.
[LOG] Computing n0_to_1 for num 387
[LOG] Computing n0_to_2 for num 387
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 659
[LOG] Computing n4_to_4 (coadjacency) for num 659
[LOG] Computing n0_to_1 for num 659
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_2 for num 659
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_3 for num 387
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_4 for num 387
[LOG] Computing n1_to_2 for num 387
[LOG] Computing n1_to_3 for num 387
[LOG] Computing n1_to_4 for num 387
[LOG] Computing n2_to_3 for num 387
[LOG] Removed 3 subset clusters.
[LOG] Computing n2_to_4 for num 387
[LOG] Computing n3_to_4 for num 387
[LOG] Global feature for num 387
[LOG] Global feature for num 387
[LOG] Saving tensor x_0_387.pt
[LOG] Saving tensor x_1_387.pt
[LOG] Saving tensor x_2_387.pt
[LOG] Saving tensor x_3_387.pt
[LOG] Saving tensor x_4_387.pt
[LOG] Saving tensor n0_to_0_387.pt
[LOG] Saving tensor n1_to_1_387.pt
[LOG] Saving tensor n2_to_2_387.pt
[LOG] Saving tensor n3_to_3_387.pt
[LOG] Saving tensor n4_to_4_387.pt
[LOG] Saving tensor n0_to_1_387.pt
[LOG] Saving tensor n0_to_2_387.pt
[LOG] Saving tensor n0_to_3_387.pt
[LOG] Saving tensor n0_to_4_387.pt
[LOG] Saving tensor n1_to_2_387.pt
[LOG] Saving tensor n1_to_3_387.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n1_to_4_387.pt
[LOG] Saving tensor n2_to_3_387.pt
[LOG] Saving tensor n2_to_4_387.pt
[LOG] Saving tensor n3_to_4_387.pt
[LOG] Saving tensor global_feature_387.pt
[LOG] Process 48: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 113: Created combinatorial complex for file data_897.hdf5
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1064 Tetrahedra.
    [LOG] Generated 32 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.75
    [LOG] Max number of nodes per cluster is 58 and the number is 30
[LOG] Process 17: Created combinatorial complex for file data_138.hdf5
[LOG] Calculating for cell ranks 0 and 2
[LOG] We will select 107 edges and 1064 tetra
[LOG] Edges from tetra 0 and KDTree 2388 with 0 edges in common.
[LOG] Process 113: Calculating Neighbors
[LOG] Loading pickle file data_897.pickle
[LOG] Processing node features for num 897
[LOG] Processing edge features for num 897
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing tetra features for num 897
[LOG] Process 17: Calculating Neighbors
[LOG] Loading pickle file data_138.pickle
[LOG] Processing node features for num 138
[LOG] Processing edge features for num 138
[LOG] Processing tetra features for num 138
[LOG] Processing cluster features for num 897
[LOG] Processing cluster features for num 897
[LOG] Processing cluster features for num 138
[LOG] Computing n0_to_3 for num 659
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3581 Tetrahedra.
    [LOG] Generated 98 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.224489795918368
    [LOG] Max number of nodes per cluster is 36 and the number is 48
[LOG] Processing cluster features for num 138
[LOG] Processing adjacency and incidence matrices for num 897
[LOG] Computing n0_to_0 for num 897
[LOG] Processing adjacency and incidence matrices for num 138
[LOG] Computing n0_to_0 for num 138
[LOG] Computing n0_to_4 for num 659
[LOG] Computing n1_to_2 for num 659
[LOG] Computing n1_to_1 for num 138
[LOG] Calculating for cell ranks 0 and 1
[LOG] We will select 926 edges and 3581 tetra
[LOG] Edges from tetra 0 and KDTree 1679 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 2
[LOG] GENERATED TETRA
[LOG] Computing n1_to_1 for num 897
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_2 (adjacency) for num 138
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 0 subset clusters.
[LOG] Computing n1_to_3 for num 659
[LOG] Computing n1_to_4 for num 659
[LOG] Computing n2_to_3 for num 659
[LOG] Computing n3_to_3 (adjacency) for num 138
[LOG] Computing n4_to_4 (coadjacency) for num 138
[LOG] Computing n0_to_1 for num 138
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1524 Tetrahedra.
    [LOG] Generated 49 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.122448979591837
    [LOG] Max number of nodes per cluster is 48 and the number is 18
[LOG] Process 31: Created combinatorial complex for file data_254.hdf5
[LOG] Computing n2_to_4 for num 659
[LOG] Computing n0_to_2 for num 138
[LOG] We will select 249 edges and 1524 tetra
[LOG] Edges from tetra 0 and KDTree 699 with 0 edges in common.
[LOG] Process 31: Calculating Neighbors
[LOG] Loading pickle file data_254.pickle
[LOG] Processing node features for num 254
[LOG] Processing edge features for num 254
[LOG] Processing tetra features for num 254
[LOG] Computing n3_to_4 for num 659
[LOG] Global feature for num 659
[LOG] Global feature for num 659
[LOG] Saving tensor x_0_659.pt
[LOG] Saving tensor x_1_659.pt
[LOG] Saving tensor x_2_659.pt
[LOG] Processing cluster features for num 254
[LOG] Saving tensor x_3_659.pt
[LOG] Saving tensor x_4_659.pt
[LOG] Saving tensor n0_to_0_659.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n1_to_1_659.pt
[LOG] Processing cluster features for num 254
[LOG] Saving tensor n2_to_2_659.pt
[LOG] Processing adjacency and incidence matrices for num 254
[LOG] Computing n0_to_0 for num 254
[LOG] Saving tensor n3_to_3_659.pt
[LOG] Saving tensor n4_to_4_659.pt
[LOG] Saving tensor n0_to_1_659.pt
[LOG] Computing n1_to_1 for num 254
[LOG] Saving tensor n0_to_2_659.pt
[LOG] Saving tensor n0_to_3_659.pt
[LOG] Saving tensor n0_to_4_659.pt
[LOG] Saving tensor n1_to_2_659.pt
[LOG] Saving tensor n1_to_3_659.pt
[LOG] Saving tensor n1_to_4_659.pt
[LOG] Saving tensor n2_to_3_659.pt
[LOG] Computing n2_to_2 (adjacency) for num 254
[LOG] Saving tensor n2_to_4_659.pt
[LOG] Saving tensor n3_to_4_659.pt
[LOG] Saving tensor global_feature_659.pt
[LOG] Process 82: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n3_to_3 (adjacency) for num 254
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n4_to_4 (coadjacency) for num 254
[LOG] Computing n0_to_1 for num 254
[LOG] Computing n0_to_2 for num 254
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_3 for num 138
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n2_to_2 (adjacency) for num 897
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n0_to_4 for num 138
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n1_to_2 for num 138
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n0_to_3 for num 254
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n0_to_4 for num 254
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Removed 0 subset clusters.
[LOG] Computing n1_to_2 for num 254
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n1_to_3 for num 254
[LOG] Computing n1_to_4 for num 254
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n2_to_3 for num 254
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Computing n2_to_4 for num 254
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Computing n3_to_4 for num 254
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Global feature for num 254
[LOG] Global feature for num 254
[LOG] Saving tensor x_0_254.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor x_1_254.pt
[LOG] Saving tensor x_2_254.pt
[LOG] Saving tensor x_3_254.pt
[LOG] Saving tensor x_4_254.pt
[LOG] Saving tensor n0_to_0_254.pt
[LOG] Saving tensor n1_to_1_254.pt
[LOG] Process 76: Created combinatorial complex for file data_613.hdf5
[LOG] Saving tensor n2_to_2_254.pt
[LOG] Saving tensor n3_to_3_254.pt
[LOG] Saving tensor n4_to_4_254.pt
[LOG] Saving tensor n0_to_1_254.pt
[LOG] Saving tensor n0_to_2_254.pt
[LOG] Saving tensor n0_to_3_254.pt
[LOG] Computing n3_to_3 (adjacency) for num 897
[LOG] Saving tensor n0_to_4_254.pt
[LOG] Computing n4_to_4 (coadjacency) for num 897
[LOG] Saving tensor n1_to_2_254.pt
[LOG] Computing n0_to_1 for num 897
[LOG] Saving tensor n1_to_3_254.pt
[LOG] Saving tensor n1_to_4_254.pt
[LOG] Computing n1_to_3 for num 138
[LOG] Saving tensor n2_to_3_254.pt
[LOG] Computing n1_to_4 for num 138
[LOG] Saving tensor n2_to_4_254.pt
[LOG] Saving tensor n3_to_4_254.pt
[LOG] Process 76: Calculating Neighbors
[LOG] Loading pickle file data_613.pickle
[LOG] Processing node features for num 613
[LOG] Computing n2_to_3 for num 138
[LOG] Saving tensor global_feature_254.pt
[LOG] Processing edge features for num 613
[LOG] Process 31: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing tetra features for num 613
[LOG] Computing n2_to_4 for num 138
[LOG] Processing cluster features for num 613
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 1 subset clusters.
[LOG] Processing cluster features for num 613
[LOG] Computing n3_to_4 for num 138
[LOG] Global feature for num 138
[LOG] Global feature for num 138
[LOG] Saving tensor x_0_138.pt
[LOG] Saving tensor x_1_138.pt
[LOG] Processing adjacency and incidence matrices for num 613
[LOG] Computing n0_to_0 for num 613
[LOG] Saving tensor x_2_138.pt
[LOG] Saving tensor x_3_138.pt
[LOG] Saving tensor x_4_138.pt
[LOG] Saving tensor n0_to_0_138.pt
[LOG] Saving tensor n1_to_1_138.pt
[LOG] Saving tensor n2_to_2_138.pt
[LOG] Saving tensor n3_to_3_138.pt
[LOG] Saving tensor n4_to_4_138.pt
[LOG] Saving tensor n0_to_1_138.pt
[LOG] Computing n1_to_1 for num 613
[LOG] Saving tensor n0_to_2_138.pt
[LOG] Saving tensor n0_to_3_138.pt
[LOG] Saving tensor n0_to_4_138.pt
[LOG] Saving tensor n1_to_2_138.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n1_to_3_138.pt
[LOG] Saving tensor n1_to_4_138.pt
[LOG] Saving tensor n2_to_3_138.pt
[LOG] Saving tensor n2_to_4_138.pt
[LOG] Saving tensor n3_to_4_138.pt
[LOG] Computing n0_to_2 for num 897
[LOG] Saving tensor global_feature_138.pt
[LOG] Process 17: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_2 (adjacency) for num 613
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1065 Tetrahedra.
    [LOG] Generated 22 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 18.454545454545453
    [LOG] Max number of nodes per cluster is 66 and the number is 20
[LOG] We will select 186 edges and 1065 tetra
[LOG] Edges from tetra 0 and KDTree 2869 with 0 edges in common.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 99: Created combinatorial complex for file data_794.hdf5
[LOG] Computing n3_to_3 (adjacency) for num 613
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n4_to_4 (coadjacency) for num 613
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_1 for num 613
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_2 for num 613
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Process 99: Calculating Neighbors
[LOG] Loading pickle file data_794.pickle
[LOG] Processing node features for num 794
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing edge features for num 794
[LOG] Process 28: Created combinatorial complex for file data_231.hdf5
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Processing tetra features for num 794
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Process 28: Calculating Neighbors
[LOG] Loading pickle file data_231.pickle
[LOG] Processing node features for num 231
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing edge features for num 231
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_3 for num 613
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing tetra features for num 231
[LOG] Computing n0_to_4 for num 613
[LOG] Processing cluster features for num 231
[LOG] Processing cluster features for num 794
[LOG] Computing n1_to_2 for num 613
[LOG] Computing n0_to_3 for num 897
[LOG] Processing cluster features for num 231
[LOG] Processing adjacency and incidence matrices for num 231
[LOG] Computing n0_to_0 for num 231
[LOG] Computing n0_to_4 for num 897
[LOG] Processing cluster features for num 794
[LOG] Removed 0 subset clusters.
[LOG] Computing n1_to_2 for num 897
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n1_to_1 for num 231
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Processing adjacency and incidence matrices for num 794
[LOG] Computing n0_to_0 for num 794
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n1_to_3 for num 613
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n1_to_4 for num 613
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n2_to_3 for num 613
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n2_to_2 (adjacency) for num 231
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n2_to_4 for num 613
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n3_to_4 for num 613
[LOG] Global feature for num 613
[LOG] Global feature for num 613
[LOG] Saving tensor x_0_613.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor x_1_613.pt
[LOG] Saving tensor x_2_613.pt
[LOG] Computing n3_to_3 (adjacency) for num 231
[LOG] Saving tensor x_3_613.pt
[LOG] Saving tensor x_4_613.pt
[LOG] Computing n4_to_4 (coadjacency) for num 231
[LOG] Saving tensor n0_to_0_613.pt
[LOG] Computing n0_to_1 for num 231
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n1_to_1_613.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n2_to_2_613.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n3_to_3_613.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n4_to_4_613.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n0_to_1_613.pt
[LOG] Saving tensor n0_to_2_613.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n0_to_3_613.pt
[LOG] Computing n0_to_2 for num 231
[LOG] Saving tensor n0_to_4_613.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n1_to_2_613.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n1_to_3_613.pt
[LOG] Saving tensor n1_to_4_613.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n2_to_3_613.pt
[LOG] Saving tensor n2_to_4_613.pt
[LOG] Saving tensor n3_to_4_613.pt
[LOG] Saving tensor global_feature_613.pt
[LOG] Process 76: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_1 for num 794
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_3 for num 231
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_4 for num 231
[LOG] Computing n1_to_2 for num 231
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_3 for num 231
[LOG] Computing n1_to_4 for num 231
[LOG] Computing n2_to_3 for num 231
[LOG] Computing n2_to_4 for num 231
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_4 for num 231
[LOG] Global feature for num 231
[LOG] Global feature for num 231
[LOG] Saving tensor x_0_231.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor x_1_231.pt
[LOG] Saving tensor x_2_231.pt
[LOG] Saving tensor x_3_231.pt
[LOG] Saving tensor x_4_231.pt
[LOG] Saving tensor n0_to_0_231.pt
[LOG] Saving tensor n1_to_1_231.pt
[LOG] Saving tensor n2_to_2_231.pt
[LOG] Saving tensor n3_to_3_231.pt
[LOG] Saving tensor n4_to_4_231.pt
[LOG] Saving tensor n0_to_1_231.pt
[LOG] Saving tensor n0_to_2_231.pt
[LOG] Saving tensor n0_to_3_231.pt
[LOG] Saving tensor n0_to_4_231.pt
[LOG] Saving tensor n1_to_2_231.pt
[LOG] Saving tensor n1_to_3_231.pt
[LOG] Saving tensor n1_to_4_231.pt
[LOG] Saving tensor n2_to_3_231.pt
[LOG] Process 49: Created combinatorial complex for file data_393.hdf5
[LOG] Saving tensor n2_to_4_231.pt
[LOG] Saving tensor n3_to_4_231.pt
[LOG] Saving tensor global_feature_231.pt
[LOG] Process 28: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_3 for num 897
[LOG] Computing n1_to_4 for num 897
[LOG] Computing n2_to_3 for num 897
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n2_to_4 for num 897
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n3_to_4 for num 897
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Global feature for num 897
[LOG] Global feature for num 897
[LOG] Saving tensor x_0_897.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor x_1_897.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor x_2_897.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor x_3_897.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor x_4_897.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n0_to_0_897.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n1_to_1_897.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n2_to_2_897.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n3_to_3_897.pt
[LOG] Saving tensor n4_to_4_897.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n0_to_1_897.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n0_to_2_897.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n0_to_3_897.pt
[LOG] Saving tensor n0_to_4_897.pt
[LOG] Saving tensor n1_to_2_897.pt
[LOG] Saving tensor n1_to_3_897.pt
[LOG] Computing n2_to_2 (adjacency) for num 794
[LOG] Saving tensor n1_to_4_897.pt
[LOG] Saving tensor n2_to_3_897.pt
[LOG] Saving tensor n2_to_4_897.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n3_to_4_897.pt
[LOG] Saving tensor global_feature_897.pt
[LOG] Process 113: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 638 Tetrahedra.
    [LOG] Generated 23 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.217391304347826
    [LOG] Max number of nodes per cluster is 37 and the number is 16
[LOG] We will select 315 edges and 638 tetra
[LOG] Edges from tetra 0 and KDTree 507 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Process 49: Calculating Neighbors
[LOG] Loading pickle file data_393.pickle
[LOG] Processing node features for num 393
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Processing edge features for num 393
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing tetra features for num 393
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 0 subset clusters.
[LOG] Process 5: Created combinatorial complex for file data_44.hdf5
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 5: Calculating Neighbors
[LOG] Loading pickle file data_44.pickle
[LOG] Processing node features for num 44
[LOG] Processing edge features for num 44
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing tetra features for num 44
[LOG] Processing cluster features for num 393
[LOG] Processing cluster features for num 44
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 44
[LOG] Processing adjacency and incidence matrices for num 44
[LOG] Computing n0_to_0 for num 44
[LOG] Computing n1_to_1 for num 44
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing cluster features for num 393
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n2_to_2 (adjacency) for num 44
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 44
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n4_to_4 (coadjacency) for num 44
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n0_to_1 for num 44
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] GENERATED TETRA
[LOG] Processing adjacency and incidence matrices for num 393
[LOG] Computing n0_to_0 for num 393
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n0_to_2 for num 44
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 794
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n4_to_4 (coadjacency) for num 794
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_1 for num 794
[LOG] Computing n0_to_3 for num 44
[LOG] Computing n0_to_4 for num 44
[LOG] Computing n1_to_2 for num 44
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_3 for num 44
[LOG] Computing n1_to_4 for num 44
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_3 for num 44
[LOG] Computing n2_to_4 for num 44
[LOG] Computing n3_to_4 for num 44
[LOG] Global feature for num 44
[LOG] Global feature for num 44
[LOG] Saving tensor x_0_44.pt
[LOG] Saving tensor x_1_44.pt
[LOG] Saving tensor x_2_44.pt
[LOG] Saving tensor x_3_44.pt
[LOG] Saving tensor x_4_44.pt
[LOG] Saving tensor n0_to_0_44.pt
[LOG] Saving tensor n1_to_1_44.pt
[LOG] Saving tensor n2_to_2_44.pt
[LOG] Saving tensor n3_to_3_44.pt
[LOG] Saving tensor n4_to_4_44.pt
[LOG] Saving tensor n0_to_1_44.pt
[LOG] Saving tensor n0_to_2_44.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n0_to_3_44.pt
[LOG] Saving tensor n0_to_4_44.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n1_to_2_44.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n1_to_3_44.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n1_to_4_44.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n2_to_3_44.pt
[LOG] Saving tensor n2_to_4_44.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n3_to_4_44.pt
[LOG] Saving tensor global_feature_44.pt
[LOG] Process 5: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n0_to_2 for num 794
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1909 Tetrahedra.
    [LOG] Generated 58 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.948275862068966
    [LOG] Max number of nodes per cluster is 51 and the number is 57
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 5995 Tetrahedra.
    [LOG] Generated 149 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.87248322147651
    [LOG] Max number of nodes per cluster is 93 and the number is 100
[LOG] We will select 740 edges and 1909 tetra
[LOG] Edges from tetra 0 and KDTree 1442 with 0 edges in common.
[LOG] Computing n1_to_1 for num 393
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] We will select 1748 edges and 5995 tetra
[LOG] Edges from tetra 0 and KDTree 1748 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n0_to_3 for num 794
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n0_to_4 for num 794
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n1_to_2 for num 794
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1057 Tetrahedra.
    [LOG] Generated 41 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.341463414634147
    [LOG] Max number of nodes per cluster is 53 and the number is 23
[LOG] Process 74: Created combinatorial complex for file data_594.hdf5
[LOG] We will select 202 edges and 1057 tetra
[LOG] Edges from tetra 0 and KDTree 2023 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 74: Calculating Neighbors
[LOG] Loading pickle file data_594.pickle
[LOG] Processing node features for num 594
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing edge features for num 594
[LOG] Computing n1_to_3 for num 794
[LOG] Processing tetra features for num 594
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1660 Tetrahedra.
    [LOG] Generated 52 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.75
    [LOG] Max number of nodes per cluster is 31 and the number is 7
[LOG] Computing n1_to_4 for num 794
[LOG] Processing cluster features for num 594
[LOG] Removed 0 subset clusters.
[LOG] Computing n2_to_3 for num 794
[LOG] Processing cluster features for num 594
[LOG] Processing adjacency and incidence matrices for num 594
[LOG] Computing n0_to_0 for num 594
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_4 for num 794
[LOG] Process 63: Created combinatorial complex for file data_507.hdf5
[LOG] Computing n1_to_1 for num 594
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 63: Calculating Neighbors
[LOG] Loading pickle file data_507.pickle
[LOG] Processing node features for num 507
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing edge features for num 507
[LOG] Computing n3_to_4 for num 794
[LOG] Global feature for num 794
[LOG] Global feature for num 794
[LOG] Saving tensor x_0_794.pt
[LOG] Processing tetra features for num 507
[LOG] Processing cluster features for num 507
[LOG] Saving tensor x_1_794.pt
[LOG] Saving tensor x_2_794.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1602 Tetrahedra.
    [LOG] Generated 49 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.183673469387756
    [LOG] Max number of nodes per cluster is 44 and the number is 23
[LOG] Saving tensor x_3_794.pt
[LOG] Saving tensor x_4_794.pt
[LOG] Saving tensor n0_to_0_794.pt
[LOG] Saving tensor n1_to_1_794.pt
[LOG] Processing cluster features for num 507
[LOG] Saving tensor n2_to_2_794.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n3_to_3_794.pt
[LOG] Saving tensor n4_to_4_794.pt
[LOG] Processing adjacency and incidence matrices for num 507
[LOG] Computing n0_to_0 for num 507
[LOG] Saving tensor n0_to_1_794.pt
[LOG] Saving tensor n0_to_2_794.pt
[LOG] Saving tensor n0_to_3_794.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n0_to_4_794.pt
[LOG] Saving tensor n1_to_2_794.pt
[LOG] Saving tensor n1_to_3_794.pt
[LOG] Saving tensor n1_to_4_794.pt
[LOG] Saving tensor n2_to_3_794.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n2_to_4_794.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_1 for num 507
[LOG] Saving tensor n3_to_4_794.pt
[LOG] Saving tensor global_feature_794.pt
[LOG] Computing n2_to_2 (adjacency) for num 507
[LOG] Process 99: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_2 (adjacency) for num 594
[LOG] Computing n3_to_3 (adjacency) for num 507
[LOG] Computing n4_to_4 (coadjacency) for num 507
[LOG] Computing n0_to_1 for num 507
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_2 for num 507
[LOG] Calculating for cell ranks 4 and 4
[LOG] We will select 193 edges and 1660 tetra
[LOG] Edges from tetra 0 and KDTree 590 with 0 edges in common.
[LOG] Computing n3_to_3 (adjacency) for num 594
[LOG] Computing n4_to_4 (coadjacency) for num 594
[LOG] Computing n0_to_1 for num 594
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_2 for num 594
[LOG] We will select 261 edges and 1602 tetra
[LOG] Edges from tetra 0 and KDTree 525 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_3 for num 507
[LOG] Computing n0_to_3 for num 594
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_4 for num 507
[LOG] Computing n0_to_4 for num 594
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_2 for num 507
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_2 for num 594
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n1_to_3 for num 507
[LOG] Computing n1_to_4 for num 507
[LOG] Computing n2_to_3 for num 507
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_4 for num 507
[LOG] Computing n3_to_4 for num 507
[LOG] Global feature for num 507
[LOG] Global feature for num 507
[LOG] Saving tensor x_0_507.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 0: Created combinatorial complex for file data_6.hdf5
[LOG] Saving tensor x_1_507.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor x_2_507.pt
[LOG] Saving tensor x_3_507.pt
[LOG] Saving tensor x_4_507.pt
[LOG] Saving tensor n0_to_0_507.pt
[LOG] Saving tensor n1_to_1_507.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n2_to_2_507.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 3 subset clusters.
[LOG] Saving tensor n3_to_3_507.pt
[LOG] Saving tensor n4_to_4_507.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n0_to_1_507.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_3 for num 594
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_4 for num 594
[LOG] Process 0: Calculating Neighbors
[LOG] Loading pickle file data_6.pickle
[LOG] Processing node features for num 6
[LOG] Processing edge features for num 6
[LOG] Computing n2_to_3 for num 594
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n0_to_2_507.pt
[LOG] Processing tetra features for num 6
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n0_to_3_507.pt
[LOG] Computing n2_to_4 for num 594
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n0_to_4_507.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n1_to_2_507.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n1_to_3_507.pt
[LOG] Processing cluster features for num 6
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Process 119: Created combinatorial complex for file data_942.hdf5
[LOG] Saving tensor n1_to_4_507.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n3_to_4 for num 594
[LOG] Processing cluster features for num 6
[LOG] Global feature for num 594
[LOG] Global feature for num 594
[LOG] Saving tensor x_0_594.pt
[LOG] Processing adjacency and incidence matrices for num 6
[LOG] Computing n0_to_0 for num 6
[LOG] Computing n1_to_1 for num 6
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Process 119: Calculating Neighbors
[LOG] Loading pickle file data_942.pickle
[LOG] Processing node features for num 942
[LOG] Processing edge features for num 942
[LOG] Saving tensor x_1_594.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n2_to_3_507.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor x_2_594.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor x_3_594.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n2_to_4_507.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 6
[LOG] Processing tetra features for num 942
[LOG] Saving tensor x_4_594.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n0_to_0_594.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n1_to_1_594.pt
[LOG] Saving tensor n3_to_4_507.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor global_feature_507.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n2_to_2_594.pt
[LOG] Process 63: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n3_to_3_594.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Processing cluster features for num 942
[LOG] Processing cluster features for num 942
[LOG] Processing adjacency and incidence matrices for num 942
[LOG] Computing n0_to_0 for num 942
[LOG] Removed 1 subset clusters.
[LOG] Computing n3_to_3 (adjacency) for num 6
[LOG] Computing n1_to_1 for num 942
[LOG] Computing n4_to_4 (coadjacency) for num 6
[LOG] Computing n0_to_1 for num 6
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n4_to_4_594.pt
[LOG] Computing n0_to_2 for num 6
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_2 (adjacency) for num 942
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n0_to_1_594.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n0_to_2_594.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n0_to_3_594.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n0_to_4_594.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n1_to_2_594.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n1_to_3_594.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n1_to_4_594.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n2_to_3_594.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n2_to_4_594.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n3_to_4_594.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n3_to_3 (adjacency) for num 942
[LOG] Saving tensor global_feature_594.pt
[LOG] Computing n4_to_4 (coadjacency) for num 942
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Computing n0_to_1 for num 942
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Process 74: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 6
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n0_to_4 for num 6
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n1_to_2 for num 6
[LOG] Computing n0_to_2 for num 942
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n1_to_3 for num 6
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_4 for num 6
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Computing n2_to_3 for num 6
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n2_to_4 for num 6
[LOG] Computing n3_to_4 for num 6
[LOG] Global feature for num 6
[LOG] Global feature for num 6
[LOG] Saving tensor x_0_6.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_3 for num 942
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_4 for num 942
[LOG] Computing n1_to_2 for num 942
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1261 Tetrahedra.
    [LOG] Generated 48 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 10.583333333333334
    [LOG] Max number of nodes per cluster is 27 and the number is 38
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor x_1_6.pt
[LOG] Saving tensor x_2_6.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor x_3_6.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor x_4_6.pt
[LOG] Saving tensor n0_to_0_6.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n1_to_1_6.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n2_to_2_6.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n3_to_3_6.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n4_to_4_6.pt
[LOG] Saving tensor n0_to_1_6.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n0_to_2_6.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n0_to_3_6.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] We will select 73 edges and 1261 tetra
[LOG] Edges from tetra 0 and KDTree 302 with 0 edges in common.
[LOG] Saving tensor n0_to_4_6.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n1_to_2_6.pt
[LOG] Saving tensor n1_to_3_6.pt
[LOG] Saving tensor n1_to_4_6.pt
[LOG] Saving tensor n2_to_3_6.pt
[LOG] Saving tensor n2_to_4_6.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n1_to_3 for num 942
[LOG] Computing n1_to_4 for num 942
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_3 for num 942
[LOG] Saving tensor n3_to_4_6.pt
[LOG] Saving tensor global_feature_6.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 0: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 22: Created combinatorial complex for file data_177.hdf5
[LOG] Computing n2_to_4 for num 942
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n3_to_4 for num 942
[LOG] Global feature for num 942
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Global feature for num 942
[LOG] Saving tensor x_0_942.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor x_1_942.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor x_2_942.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor x_3_942.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor x_4_942.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n0_to_0_942.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n1_to_1_942.pt
[LOG] Saving tensor n2_to_2_942.pt
[LOG] Saving tensor n3_to_3_942.pt
[LOG] Saving tensor n4_to_4_942.pt
[LOG] Saving tensor n0_to_1_942.pt
[LOG] Saving tensor n0_to_2_942.pt
[LOG] Saving tensor n0_to_3_942.pt
[LOG] Saving tensor n0_to_4_942.pt
[LOG] Saving tensor n1_to_2_942.pt
[LOG] Saving tensor n1_to_3_942.pt
[LOG] Saving tensor n1_to_4_942.pt
[LOG] Saving tensor n2_to_3_942.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n2_to_4_942.pt
[LOG] Saving tensor n3_to_4_942.pt
[LOG] Saving tensor global_feature_942.pt
[LOG] Process 119: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 34: Created combinatorial complex for file data_274.hdf5
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 34: Calculating Neighbors
[LOG] Loading pickle file data_274.pickle
[LOG] Processing node features for num 274
[LOG] Process 22: Calculating Neighbors
[LOG] Loading pickle file data_177.pickle
[LOG] Processing node features for num 177
[LOG] Processing edge features for num 274
[LOG] GENERATED TETRA
[LOG] Processing edge features for num 177
[LOG] Processing tetra features for num 274
[LOG] Processing cluster features for num 274
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing cluster features for num 274
[LOG] Processing adjacency and incidence matrices for num 274
[LOG] Computing n0_to_0 for num 274
[LOG] Computing n1_to_1 for num 274
[LOG] Processing tetra features for num 177
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_2 (adjacency) for num 274
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_3 (adjacency) for num 274
[LOG] Computing n4_to_4 (coadjacency) for num 274
[LOG] Computing n0_to_1 for num 274
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_2 for num 274
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1715 Tetrahedra.
    [LOG] Generated 48 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.583333333333334
    [LOG] Max number of nodes per cluster is 52 and the number is 46
[LOG] Processing cluster features for num 177
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1284 Tetrahedra.
    [LOG] Generated 43 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.837209302325581
    [LOG] Max number of nodes per cluster is 38 and the number is 33
[LOG] Processing cluster features for num 177
[LOG] We will select 405 edges and 1715 tetra
[LOG] Edges from tetra 0 and KDTree 1272 with 0 edges in common.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_3 for num 274
[LOG] We will select 281 edges and 1284 tetra
[LOG] Edges from tetra 0 and KDTree 1851 with 0 edges in common.
[LOG] Processing adjacency and incidence matrices for num 177
[LOG] Computing n0_to_0 for num 177
[LOG] Computing n0_to_4 for num 274
[LOG] Computing n1_to_2 for num 274
[LOG] Computing n1_to_3 for num 274
[LOG] Computing n1_to_4 for num 274
[LOG] Computing n2_to_3 for num 274
[LOG] Computing n2_to_4 for num 274
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_4 for num 274
[LOG] Global feature for num 274
[LOG] Global feature for num 274
[LOG] Saving tensor x_0_274.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor x_1_274.pt
[LOG] Saving tensor x_2_274.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor x_3_274.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor x_4_274.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n0_to_0_274.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n1_to_1_274.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n2_to_2_274.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n3_to_3_274.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n4_to_4_274.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n0_to_1_274.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n0_to_2_274.pt
[LOG] Saving tensor n0_to_3_274.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n0_to_4_274.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n1_to_2_274.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n1_to_3_274.pt
[LOG] Saving tensor n1_to_4_274.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n2_to_3_274.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n2_to_4_274.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n3_to_4_274.pt
[LOG] Saving tensor global_feature_274.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Process 34: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n2_to_2 (adjacency) for num 393
[LOG] Computing n1_to_1 for num 177
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 56: Created combinatorial complex for file data_453.hdf5
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Process 56: Calculating Neighbors
[LOG] Loading pickle file data_453.pickle
[LOG] Processing node features for num 453
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Processing edge features for num 453
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Processing tetra features for num 453
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Process 11: Created combinatorial complex for file data_92.hdf5
[LOG] Processing cluster features for num 453
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing cluster features for num 453
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 453
[LOG] Computing n0_to_0 for num 453
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_1 for num 453
[LOG] Process 11: Calculating Neighbors
[LOG] Loading pickle file data_92.pickle
[LOG] Processing node features for num 92
[LOG] Processing edge features for num 92
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 2449 Tetrahedra.
    [LOG] Generated 77 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.7012987012987
    [LOG] Max number of nodes per cluster is 39 and the number is 9
[LOG] Processing tetra features for num 92
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2934 Tetrahedra.
    [LOG] Generated 77 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.064935064935066
    [LOG] Max number of nodes per cluster is 49 and the number is 30
[LOG] Processing cluster features for num 92
[LOG] Computing n2_to_2 (adjacency) for num 453
[LOG] Processing cluster features for num 92
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing adjacency and incidence matrices for num 92
[LOG] Computing n0_to_0 for num 92
[LOG] Calculating for cell ranks 2 and 4
[LOG] We will select 600 edges and 2449 tetra
[LOG] Edges from tetra 0 and KDTree 2561 with 0 edges in common.
[LOG] Computing n3_to_3 (adjacency) for num 453
[LOG] Computing n4_to_4 (coadjacency) for num 453
[LOG] Computing n0_to_1 for num 453
[LOG] We will select 1136 edges and 2934 tetra
[LOG] Edges from tetra 0 and KDTree 2091 with 0 edges in common.
[LOG] Computing n1_to_1 for num 92
[LOG] Computing n0_to_2 for num 453
[LOG] Computing n2_to_2 (adjacency) for num 92
[LOG] Computing n0_to_3 for num 453
[LOG] Computing n3_to_3 (adjacency) for num 92
[LOG] Computing n4_to_4 (coadjacency) for num 92
[LOG] Computing n0_to_1 for num 92
[LOG] Computing n0_to_4 for num 453
[LOG] GENERATED TETRA
[LOG] Computing n1_to_2 for num 453
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_2 for num 92
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_3 for num 453
[LOG] Computing n1_to_4 for num 453
[LOG] Computing n2_to_3 for num 453
[LOG] Computing n2_to_4 for num 453
[LOG] Computing n3_to_4 for num 453
[LOG] Global feature for num 453
[LOG] Global feature for num 453
[LOG] Saving tensor x_0_453.pt
[LOG] Saving tensor x_1_453.pt
[LOG] Saving tensor x_2_453.pt
[LOG] Saving tensor x_3_453.pt
[LOG] Saving tensor x_4_453.pt
[LOG] Saving tensor n0_to_0_453.pt
[LOG] Saving tensor n1_to_1_453.pt
[LOG] Saving tensor n2_to_2_453.pt
[LOG] Saving tensor n3_to_3_453.pt
[LOG] Saving tensor n4_to_4_453.pt
[LOG] Saving tensor n0_to_1_453.pt
[LOG] Saving tensor n0_to_2_453.pt
[LOG] Saving tensor n0_to_3_453.pt
[LOG] Saving tensor n0_to_4_453.pt
[LOG] Saving tensor n1_to_2_453.pt
[LOG] Saving tensor n1_to_3_453.pt
[LOG] Saving tensor n1_to_4_453.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1009 Tetrahedra.
    [LOG] Generated 31 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.96774193548387
    [LOG] Max number of nodes per cluster is 26 and the number is 8
[LOG] Saving tensor n2_to_3_453.pt
[LOG] Saving tensor n2_to_4_453.pt
[LOG] Saving tensor n3_to_4_453.pt
[LOG] Saving tensor global_feature_453.pt
[LOG] Process 56: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] We will select 183 edges and 1009 tetra
[LOG] Edges from tetra 0 and KDTree 315 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_3 for num 92
[LOG] Computing n0_to_4 for num 92
[LOG] Computing n1_to_2 for num 92
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 0 subset clusters.
[LOG] Removed 2 subset clusters.
[LOG] Computing n1_to_3 for num 92
[LOG] Process 92: Created combinatorial complex for file data_739.hdf5
[LOG] Computing n1_to_4 for num 92
[LOG] Computing n2_to_3 for num 92
[LOG] Computing n2_to_4 for num 92
[LOG] GENERATED TETRA
[LOG] Computing n3_to_4 for num 92
[LOG] Process 92: Calculating Neighbors
[LOG] Loading pickle file data_739.pickle
[LOG] Processing node features for num 739
[LOG] Global feature for num 92
[LOG] Global feature for num 92
[LOG] Saving tensor x_0_92.pt
[LOG] Processing edge features for num 739
[LOG] Saving tensor x_1_92.pt
[LOG] Saving tensor x_2_92.pt
[LOG] Saving tensor x_3_92.pt
[LOG] Saving tensor x_4_92.pt
[LOG] Processing tetra features for num 739
[LOG] Saving tensor n0_to_0_92.pt
[LOG] Saving tensor n1_to_1_92.pt
[LOG] Saving tensor n2_to_2_92.pt
[LOG] Saving tensor n3_to_3_92.pt
[LOG] Saving tensor n4_to_4_92.pt
[LOG] Processing cluster features for num 739
[LOG] Saving tensor n0_to_1_92.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n0_to_2_92.pt
[LOG] Processing cluster features for num 739
[LOG] Saving tensor n0_to_3_92.pt
[LOG] Saving tensor n0_to_4_92.pt
[LOG] Saving tensor n1_to_2_92.pt
[LOG] Processing adjacency and incidence matrices for num 739
[LOG] Computing n0_to_0 for num 739
[LOG] Saving tensor n1_to_3_92.pt
[LOG] Saving tensor n1_to_4_92.pt
[LOG] Saving tensor n2_to_3_92.pt
[LOG] Saving tensor n2_to_4_92.pt
[LOG] Computing n1_to_1 for num 739
[LOG] Process 67: Created combinatorial complex for file data_538.hdf5
[LOG] Saving tensor n3_to_4_92.pt
[LOG] Saving tensor global_feature_92.pt
[LOG] Process 11: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1370 Tetrahedra.
    [LOG] Generated 48 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.458333333333334
    [LOG] Max number of nodes per cluster is 51 and the number is 39
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_2 (adjacency) for num 739
[LOG] Removed 1 subset clusters.
[LOG] Computing n3_to_3 (adjacency) for num 739
[LOG] Computing n4_to_4 (coadjacency) for num 739
[LOG] Computing n0_to_1 for num 739
[LOG] Calculating for cell ranks 2 and 4
[LOG] We will select 156 edges and 1370 tetra
[LOG] Edges from tetra 0 and KDTree 1152 with 0 edges in common.
[LOG] Computing n0_to_2 for num 739
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_3 for num 739
[LOG] Computing n0_to_4 for num 739
[LOG] Computing n1_to_2 for num 739
[LOG] Computing n1_to_3 for num 739
[LOG] Computing n1_to_4 for num 739
[LOG] Process 67: Calculating Neighbors
[LOG] Loading pickle file data_538.pickle
[LOG] Processing node features for num 538
[LOG] Computing n2_to_3 for num 739
[LOG] Computing n2_to_4 for num 739
[LOG] Processing edge features for num 538
[LOG] Computing n3_to_4 for num 739
[LOG] Global feature for num 739
[LOG] Global feature for num 739
[LOG] Saving tensor x_0_739.pt
[LOG] Saving tensor x_1_739.pt
[LOG] Saving tensor x_2_739.pt
[LOG] Saving tensor x_3_739.pt
[LOG] Saving tensor x_4_739.pt
[LOG] Saving tensor n0_to_0_739.pt
[LOG] Saving tensor n1_to_1_739.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1298 Tetrahedra.
    [LOG] Generated 52 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.134615384615385
    [LOG] Max number of nodes per cluster is 53 and the number is 5
[LOG] Process 86: Created combinatorial complex for file data_691.hdf5
[LOG] Saving tensor n2_to_2_739.pt
[LOG] Saving tensor n3_to_3_739.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n4_to_4_739.pt
[LOG] Saving tensor n0_to_1_739.pt
[LOG] Saving tensor n0_to_2_739.pt
[LOG] Processing tetra features for num 538
[LOG] GENERATED TETRA
[LOG] Saving tensor n0_to_3_739.pt
[LOG] Saving tensor n0_to_4_739.pt
[LOG] Saving tensor n1_to_2_739.pt
[LOG] Saving tensor n1_to_3_739.pt
[LOG] We will select 616 edges and 1298 tetra
[LOG] Edges from tetra 0 and KDTree 664 with 0 edges in common.
[LOG] Saving tensor n1_to_4_739.pt
[LOG] Saving tensor n2_to_3_739.pt
[LOG] Saving tensor n2_to_4_739.pt
[LOG] Processing cluster features for num 538
[LOG] Saving tensor n3_to_4_739.pt
[LOG] Saving tensor global_feature_739.pt
[LOG] Process 92: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 0 subset clusters.
[LOG] Processing cluster features for num 538
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing adjacency and incidence matrices for num 538
[LOG] Computing n0_to_0 for num 538
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 86: Calculating Neighbors
[LOG] Loading pickle file data_691.pickle
[LOG] Processing node features for num 691
[LOG] Processing edge features for num 691
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 75: Created combinatorial complex for file data_605.hdf5
[LOG] Processing tetra features for num 691
[LOG] Processing cluster features for num 691
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Processing cluster features for num 691
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Process 75: Calculating Neighbors
[LOG] Loading pickle file data_605.pickle
[LOG] Processing node features for num 605
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Processing adjacency and incidence matrices for num 691
[LOG] Computing n0_to_0 for num 691
[LOG] Processing edge features for num 605
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Processing tetra features for num 605
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Processing cluster features for num 605
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Processing cluster features for num 605
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 605
[LOG] Computing n0_to_0 for num 605
[LOG] Computing n1_to_1 for num 691
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_1 for num 538
[LOG] Computing n2_to_2 (adjacency) for num 177
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Removed 0 subset clusters.
[LOG] Computing n1_to_1 for num 605
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_2 (adjacency) for num 605
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 104: Created combinatorial complex for file data_835.hdf5
[LOG] Computing n3_to_3 (adjacency) for num 605
[LOG] Computing n4_to_4 (coadjacency) for num 605
[LOG] Computing n0_to_1 for num 605
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_2 for num 605
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 104: Calculating Neighbors
[LOG] Loading pickle file data_835.pickle
[LOG] Processing node features for num 835
[LOG] Processing edge features for num 835
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing tetra features for num 835
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 3973 Tetrahedra.
    [LOG] Generated 102 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.705882352941176
    [LOG] Max number of nodes per cluster is 63 and the number is 97
[LOG] Processing cluster features for num 835
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_2 (adjacency) for num 691
[LOG] Processing cluster features for num 835
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing adjacency and incidence matrices for num 835
[LOG] Computing n0_to_0 for num 835
[LOG] GENERATED TETRA
[LOG] Computing n1_to_1 for num 835
[LOG] Calculating for cell ranks 0 and 4
[LOG] We will select 573 edges and 3973 tetra
[LOG] Edges from tetra 0 and KDTree 573 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_3 for num 605
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_4 for num 605
[LOG] Computing n3_to_3 (adjacency) for num 691
[LOG] Computing n1_to_2 for num 605
[LOG] Computing n4_to_4 (coadjacency) for num 691
[LOG] Computing n0_to_1 for num 691
[LOG] Computing n2_to_2 (adjacency) for num 835
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_3 for num 605
[LOG] Computing n1_to_4 for num 605
[LOG] Computing n2_to_3 for num 605
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_4 for num 605
[LOG] Computing n3_to_3 (adjacency) for num 835
[LOG] Computing n0_to_2 for num 691
[LOG] Computing n4_to_4 (coadjacency) for num 835
[LOG] Computing n3_to_4 for num 605
[LOG] Global feature for num 605
[LOG] Global feature for num 605
[LOG] Saving tensor x_0_605.pt
[LOG] Computing n0_to_1 for num 835
[LOG] Saving tensor x_1_605.pt
[LOG] Saving tensor x_2_605.pt
[LOG] Saving tensor x_3_605.pt
[LOG] Saving tensor x_4_605.pt
[LOG] Saving tensor n0_to_0_605.pt
[LOG] Saving tensor n1_to_1_605.pt
[LOG] Saving tensor n2_to_2_605.pt
[LOG] Computing n2_to_2 (adjacency) for num 538
[LOG] Saving tensor n3_to_3_605.pt
[LOG] Saving tensor n4_to_4_605.pt
[LOG] Saving tensor n0_to_1_605.pt
[LOG] Saving tensor n0_to_2_605.pt
[LOG] Saving tensor n0_to_3_605.pt
[LOG] Saving tensor n0_to_4_605.pt
[LOG] Saving tensor n1_to_2_605.pt
[LOG] Saving tensor n1_to_3_605.pt
[LOG] Saving tensor n1_to_4_605.pt
[LOG] Saving tensor n2_to_3_605.pt
[LOG] Saving tensor n2_to_4_605.pt
[LOG] Saving tensor n3_to_4_605.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor global_feature_605.pt
[LOG] Process 75: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_2 for num 835
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1990 Tetrahedra.
    [LOG] Generated 55 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.272727272727273
    [LOG] Max number of nodes per cluster is 61 and the number is 54
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] We will select 897 edges and 1990 tetra
[LOG] Edges from tetra 0 and KDTree 897 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_3 for num 835
[LOG] Computing n0_to_4 for num 835
[LOG] Computing n1_to_2 for num 835
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n0_to_3 for num 691
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n1_to_3 for num 835
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_4 for num 835
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n0_to_4 for num 691
[LOG] Computing n2_to_3 for num 835
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n3_to_3 (adjacency) for num 538
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n4_to_4 (coadjacency) for num 538
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n2_to_4 for num 835
[LOG] Computing n0_to_1 for num 538
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n1_to_2 for num 691
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n3_to_4 for num 835
[LOG] Global feature for num 835
[LOG] Global feature for num 835
[LOG] Saving tensor x_0_835.pt
[LOG] Computing n3_to_3 (adjacency) for num 393
[LOG] Saving tensor x_1_835.pt
[LOG] Saving tensor x_2_835.pt
[LOG] Saving tensor x_3_835.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor x_4_835.pt
[LOG] Saving tensor n0_to_0_835.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n4_to_4 (coadjacency) for num 393
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n0_to_1 for num 393
[LOG] Saving tensor n1_to_1_835.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n2_to_2_835.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n3_to_3_835.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n4_to_4_835.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n0_to_1_835.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n0_to_2_835.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n0_to_3_835.pt
[LOG] Saving tensor n0_to_4_835.pt
[LOG] Saving tensor n1_to_2_835.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n1_to_3_835.pt
[LOG] Saving tensor n1_to_4_835.pt
[LOG] Saving tensor n2_to_3_835.pt
[LOG] Saving tensor n2_to_4_835.pt
[LOG] Saving tensor n3_to_4_835.pt
[LOG] Saving tensor global_feature_835.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 104: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_2 for num 538
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_3 for num 691
[LOG] Computing n1_to_4 for num 691
[LOG] Computing n2_to_3 for num 691
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_4 for num 691
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n3_to_4 for num 691
[LOG] Global feature for num 691
[LOG] Global feature for num 691
[LOG] Saving tensor x_0_691.pt
[LOG] Process 3: Created combinatorial complex for file data_27.hdf5
[LOG] Saving tensor x_1_691.pt
[LOG] Saving tensor x_2_691.pt
[LOG] Saving tensor x_3_691.pt
[LOG] Saving tensor x_4_691.pt
[LOG] Saving tensor n0_to_0_691.pt
[LOG] Saving tensor n1_to_1_691.pt
[LOG] Saving tensor n2_to_2_691.pt
[LOG] Saving tensor n3_to_3_691.pt
[LOG] Saving tensor n4_to_4_691.pt
[LOG] Saving tensor n0_to_1_691.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n0_to_2_691.pt
[LOG] Saving tensor n0_to_3_691.pt
[LOG] Saving tensor n0_to_4_691.pt
[LOG] Saving tensor n1_to_2_691.pt
[LOG] Saving tensor n1_to_3_691.pt
[LOG] Saving tensor n1_to_4_691.pt
[LOG] Saving tensor n2_to_3_691.pt
[LOG] Saving tensor n2_to_4_691.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n3_to_4_691.pt
[LOG] Saving tensor global_feature_691.pt
[LOG] Process 86: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 3: Calculating Neighbors
[LOG] Loading pickle file data_27.pickle
[LOG] Processing node features for num 27
[LOG] Processing edge features for num 27
[LOG] Processing tetra features for num 27
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing cluster features for num 27
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing cluster features for num 27
[LOG] Processing adjacency and incidence matrices for num 27
[LOG] Computing n0_to_0 for num 27
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_2 for num 393
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 3074 Tetrahedra.
    [LOG] Generated 77 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.285714285714286
    [LOG] Max number of nodes per cluster is 82 and the number is 76
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_3 (adjacency) for num 177
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n4_to_4 (coadjacency) for num 177
[LOG] Computing n0_to_1 for num 177
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n1_to_1 for num 27
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] We will select 1021 edges and 3074 tetra
[LOG] Edges from tetra 0 and KDTree 1658 with 0 edges in common.
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1713 Tetrahedra.
    [LOG] Generated 44 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.704545454545455
    [LOG] Max number of nodes per cluster is 74 and the number is 22
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 3436 Tetrahedra.
    [LOG] Generated 96 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.59375
    [LOG] Max number of nodes per cluster is 49 and the number is 8
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] We will select 270 edges and 1713 tetra
[LOG] Edges from tetra 0 and KDTree 1076 with 0 edges in common.
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] We will select 593 edges and 3436 tetra
[LOG] Edges from tetra 0 and KDTree 1165 with 0 edges in common.
[LOG] Computing n0_to_3 for num 538
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Computing n0_to_4 for num 538
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n0_to_2 for num 177
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n1_to_2 for num 538
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Process 71: Created combinatorial complex for file data_569.hdf5
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n2_to_2 (adjacency) for num 27
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n3_to_3 (adjacency) for num 27
[LOG] Computing n4_to_4 (coadjacency) for num 27
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n0_to_1 for num 27
[LOG] Process 71: Calculating Neighbors
[LOG] Loading pickle file data_569.pickle
[LOG] Processing node features for num 569
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Processing edge features for num 569
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1346 Tetrahedra.
    [LOG] Generated 37 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.72972972972973
    [LOG] Max number of nodes per cluster is 39 and the number is 31
[LOG] Process 79: Created combinatorial complex for file data_636.hdf5
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Processing tetra features for num 569
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] We will select 390 edges and 1346 tetra
[LOG] Edges from tetra 0 and KDTree 390 with 0 edges in common.
[LOG] Computing n0_to_2 for num 27
[LOG] Processing cluster features for num 569
[LOG] Process 79: Calculating Neighbors
[LOG] Loading pickle file data_636.pickle
[LOG] Processing node features for num 636
[LOG] Processing edge features for num 636
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing tetra features for num 636
[LOG] Processing cluster features for num 569
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 636
[LOG] Processing adjacency and incidence matrices for num 569
[LOG] Computing n0_to_0 for num 569
[LOG] Processing cluster features for num 636
[LOG] Processing adjacency and incidence matrices for num 636
[LOG] Computing n0_to_0 for num 636
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_1 for num 636
[LOG] Computing n1_to_1 for num 569
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_2 (adjacency) for num 636
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_3 for num 538
[LOG] Computing n1_to_4 for num 538
[LOG] Computing n0_to_3 for num 27
[LOG] Computing n2_to_3 for num 538
[LOG] Computing n0_to_4 for num 27
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_2 for num 27
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_3 (adjacency) for num 636
[LOG] Computing n4_to_4 (coadjacency) for num 636
[LOG] Removed 2 subset clusters.
[LOG] Computing n0_to_1 for num 636
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_4 for num 538
[LOG] Computing n0_to_2 for num 636
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 940 Tetrahedra.
    [LOG] Generated 40 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.125
    [LOG] Max number of nodes per cluster is 29 and the number is 39
[LOG] Computing n3_to_4 for num 538
[LOG] Global feature for num 538
[LOG] Global feature for num 538
[LOG] Saving tensor x_0_538.pt
[LOG] Removed 2 subset clusters.
[LOG] Saving tensor x_1_538.pt
[LOG] Saving tensor x_2_538.pt
[LOG] Saving tensor x_3_538.pt
[LOG] Saving tensor x_4_538.pt
[LOG] Saving tensor n0_to_0_538.pt
[LOG] Saving tensor n1_to_1_538.pt
[LOG] Saving tensor n2_to_2_538.pt
[LOG] Saving tensor n3_to_3_538.pt
[LOG] Saving tensor n4_to_4_538.pt
[LOG] Saving tensor n0_to_1_538.pt
[LOG] Saving tensor n0_to_2_538.pt
[LOG] Saving tensor n0_to_3_538.pt
[LOG] Saving tensor n0_to_4_538.pt
[LOG] Saving tensor n1_to_2_538.pt
[LOG] We will select 96 edges and 940 tetra
[LOG] Edges from tetra 0 and KDTree 955 with 0 edges in common.
[LOG] Saving tensor n1_to_3_538.pt
[LOG] Saving tensor n1_to_4_538.pt
[LOG] Saving tensor n2_to_3_538.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n2_to_4_538.pt
[LOG] Saving tensor n3_to_4_538.pt
[LOG] Saving tensor global_feature_538.pt
[LOG] Process 67: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 39: Created combinatorial complex for file data_314.hdf5
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Computing n2_to_2 (adjacency) for num 569
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Process 39: Calculating Neighbors
[LOG] Loading pickle file data_314.pickle
[LOG] Processing node features for num 314
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Processing edge features for num 314
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Processing tetra features for num 314
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Removed 0 subset clusters.
[LOG] Processing cluster features for num 314
[LOG] Processing cluster features for num 314
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Processing adjacency and incidence matrices for num 314
[LOG] Computing n0_to_0 for num 314
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n1_to_1 for num 314
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_3 for num 636
[LOG] Process 101: Created combinatorial complex for file data_811.hdf5
[LOG] Computing n1_to_3 for num 27
[LOG] Computing n0_to_4 for num 636
[LOG] Computing n1_to_4 for num 27
[LOG] Computing n1_to_2 for num 636
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_3 for num 27
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_4 for num 27
[LOG] Computing n2_to_2 (adjacency) for num 314
[LOG] Process 97: Created combinatorial complex for file data_782.hdf5
[LOG] Computing n3_to_4 for num 27
[LOG] Global feature for num 27
[LOG] Global feature for num 27
[LOG] Saving tensor x_0_27.pt
[LOG] Process 32: Created combinatorial complex for file data_258.hdf5
[LOG] Computing n3_to_3 (adjacency) for num 314
[LOG] Computing n1_to_3 for num 636
[LOG] Computing n4_to_4 (coadjacency) for num 314
[LOG] Computing n1_to_4 for num 636
[LOG] Computing n0_to_1 for num 314
[LOG] Computing n2_to_3 for num 636
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_2 for num 314
[LOG] Computing n2_to_4 for num 636
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_4 for num 636
[LOG] Global feature for num 636
[LOG] Global feature for num 636
[LOG] Saving tensor x_0_636.pt
[LOG] Computing n0_to_3 for num 177
[LOG] Process 101: Calculating Neighbors
[LOG] Loading pickle file data_811.pickle
[LOG] Processing node features for num 811
[LOG] Processing edge features for num 811
[LOG] Computing n0_to_4 for num 177
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_3 for num 314
[LOG] Computing n0_to_4 for num 314
[LOG] Computing n1_to_2 for num 314
[LOG] Processing tetra features for num 811
[LOG] Computing n1_to_2 for num 177
[LOG] Processing cluster features for num 811
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing cluster features for num 811
[LOG] Computing n1_to_3 for num 314
[LOG] Computing n1_to_4 for num 314
[LOG] Computing n2_to_3 for num 314
[LOG] Processing adjacency and incidence matrices for num 811
[LOG] Computing n0_to_0 for num 811
[LOG] Computing n2_to_4 for num 314
[LOG] Computing n3_to_4 for num 314
[LOG] Global feature for num 314
[LOG] Global feature for num 314
[LOG] Saving tensor x_0_314.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_1 for num 811
[LOG] Computing n3_to_3 (adjacency) for num 569
[LOG] Computing n4_to_4 (coadjacency) for num 569
[LOG] Computing n0_to_1 for num 569
[LOG] Computing n0_to_3 for num 393
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_4 for num 393
[LOG] Computing n0_to_2 for num 569
[LOG] Computing n1_to_2 for num 393
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1461 Tetrahedra.
    [LOG] Generated 46 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.521739130434783
    [LOG] Max number of nodes per cluster is 30 and the number is 20
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor x_1_27.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 97: Calculating Neighbors
[LOG] Loading pickle file data_782.pickle
[LOG] Processing node features for num 782
[LOG] We will select 178 edges and 1461 tetra
[LOG] Edges from tetra 0 and KDTree 344 with 0 edges in common.
[LOG] Processing edge features for num 782
[LOG] Processing tetra features for num 782
[LOG] Processing cluster features for num 782
[LOG] Saving tensor x_1_636.pt
[LOG] Processing cluster features for num 782
[LOG] Saving tensor x_2_27.pt
[LOG] Saving tensor x_1_314.pt
[LOG] Saving tensor x_2_636.pt
[LOG] Saving tensor x_3_27.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 782
[LOG] Computing n0_to_0 for num 782
[LOG] Computing n1_to_1 for num 782
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_2 (adjacency) for num 782
[LOG] Computing n3_to_3 (adjacency) for num 782
[LOG] Computing n4_to_4 (coadjacency) for num 782
[LOG] Computing n0_to_1 for num 782
[LOG] Computing n0_to_2 for num 782
[LOG] Saving tensor x_2_314.pt
[LOG] Saving tensor x_3_636.pt
[LOG] Saving tensor x_4_636.pt
[LOG] Saving tensor x_4_27.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor x_3_314.pt
[LOG] Saving tensor n0_to_0_636.pt
[LOG] Saving tensor n0_to_0_27.pt
[LOG] Saving tensor x_4_314.pt
[LOG] Saving tensor n0_to_0_314.pt
[LOG] Saving tensor n1_to_1_636.pt
[LOG] Saving tensor n1_to_1_27.pt
[LOG] Saving tensor n1_to_1_314.pt
[LOG] Saving tensor n2_to_2_636.pt
[LOG] Saving tensor n2_to_2_27.pt
[LOG] Saving tensor n2_to_2_314.pt
[LOG] Saving tensor n3_to_3_27.pt
[LOG] Saving tensor n3_to_3_314.pt
[LOG] Saving tensor n3_to_3_636.pt
[LOG] Saving tensor n4_to_4_27.pt
[LOG] Saving tensor n4_to_4_314.pt
[LOG] Saving tensor n4_to_4_636.pt
[LOG] Saving tensor n0_to_1_27.pt
[LOG] Saving tensor n0_to_1_636.pt
[LOG] Saving tensor n0_to_1_314.pt
[LOG] Saving tensor n0_to_2_27.pt
[LOG] Saving tensor n0_to_2_636.pt
[LOG] Computing n2_to_2 (adjacency) for num 811
[LOG] Saving tensor n0_to_2_314.pt
[LOG] Saving tensor n0_to_3_27.pt
[LOG] Saving tensor n0_to_3_636.pt
[LOG] Saving tensor n0_to_3_314.pt
[LOG] Saving tensor n0_to_4_27.pt
[LOG] Saving tensor n0_to_4_636.pt
[LOG] Saving tensor n0_to_4_314.pt
[LOG] Saving tensor n1_to_2_27.pt
[LOG] Saving tensor n1_to_2_636.pt
[LOG] Saving tensor n1_to_2_314.pt
[LOG] Saving tensor n1_to_3_27.pt
[LOG] Saving tensor n1_to_3_636.pt
[LOG] Saving tensor n1_to_3_314.pt
[LOG] Saving tensor n1_to_4_27.pt
[LOG] Saving tensor n1_to_4_314.pt
[LOG] Saving tensor n1_to_4_636.pt
[LOG] Saving tensor n2_to_3_27.pt
[LOG] Saving tensor n2_to_3_636.pt
[LOG] Saving tensor n2_to_3_314.pt
[LOG] Saving tensor n2_to_4_27.pt
[LOG] Saving tensor n2_to_4_636.pt
[LOG] Saving tensor n2_to_4_314.pt
[LOG] Saving tensor n3_to_4_27.pt
[LOG] Saving tensor n3_to_4_636.pt
[LOG] Saving tensor global_feature_636.pt
[LOG] Saving tensor n3_to_4_314.pt
[LOG] Saving tensor global_feature_27.pt
[LOG] Process 79: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor global_feature_314.pt
[LOG] Process 3: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 39: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 782
[LOG] Computing n0_to_4 for num 782
[LOG] Computing n1_to_2 for num 782
[LOG] Process 32: Calculating Neighbors
[LOG] Loading pickle file data_258.pickle
[LOG] Processing node features for num 258
[LOG] Processing edge features for num 258
[LOG] Computing n1_to_3 for num 782
[LOG] Computing n1_to_4 for num 782
[LOG] Computing n2_to_3 for num 782
[LOG] Computing n2_to_4 for num 782
[LOG] Computing n3_to_4 for num 782
[LOG] Global feature for num 782
[LOG] Global feature for num 782
[LOG] Saving tensor x_0_782.pt
[LOG] Saving tensor x_1_782.pt
[LOG] Saving tensor x_2_782.pt
[LOG] Saving tensor x_3_782.pt
[LOG] Saving tensor x_4_782.pt
[LOG] Processing tetra features for num 258
[LOG] Saving tensor n0_to_0_782.pt
[LOG] Saving tensor n1_to_1_782.pt
[LOG] Saving tensor n2_to_2_782.pt
[LOG] Saving tensor n3_to_3_782.pt
[LOG] Saving tensor n4_to_4_782.pt
[LOG] Saving tensor n0_to_1_782.pt
[LOG] Saving tensor n0_to_2_782.pt
[LOG] Saving tensor n0_to_3_782.pt
[LOG] Saving tensor n0_to_4_782.pt
[LOG] Saving tensor n1_to_2_782.pt
[LOG] Saving tensor n1_to_3_782.pt
[LOG] Saving tensor n1_to_4_782.pt
[LOG] Saving tensor n2_to_3_782.pt
[LOG] Saving tensor n2_to_4_782.pt
[LOG] Saving tensor n3_to_4_782.pt
[LOG] Saving tensor global_feature_782.pt
[LOG] Process 97: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 0 subset clusters.
[LOG] Processing cluster features for num 258
[LOG] Processing cluster features for num 258
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing adjacency and incidence matrices for num 258
[LOG] Computing n0_to_0 for num 258
[LOG] Process 47: Created combinatorial complex for file data_380.hdf5
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 47: Calculating Neighbors
[LOG] Loading pickle file data_380.pickle
[LOG] Processing node features for num 380
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing edge features for num 380
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_3 for num 569
[LOG] Processing tetra features for num 380
[LOG] Computing n0_to_4 for num 569
[LOG] Processing cluster features for num 380
[LOG] Processing cluster features for num 380
[LOG] Processing adjacency and incidence matrices for num 380
[LOG] Computing n0_to_0 for num 380
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_2 for num 569
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_1 for num 258
[LOG] Computing n1_to_1 for num 380
[LOG] Computing n2_to_2 (adjacency) for num 380
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_3 (adjacency) for num 811
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n4_to_4 (coadjacency) for num 811
[LOG] GENERATED TETRA
[LOG] Computing n0_to_1 for num 811
[LOG] Computing n3_to_3 (adjacency) for num 380
[LOG] Computing n4_to_4 (coadjacency) for num 380
[LOG] Computing n0_to_1 for num 380
[LOG] Computing n0_to_2 for num 380
[LOG] Computing n0_to_2 for num 811
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] GENERATED TETRA
[LOG] Computing n0_to_3 for num 380
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_4 for num 380
[LOG] Computing n1_to_2 for num 380
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1228 Tetrahedra.
    [LOG] Generated 39 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.923076923076923
    [LOG] Max number of nodes per cluster is 46 and the number is 35
[LOG] Computing n1_to_3 for num 380
[LOG] Computing n1_to_4 for num 380
[LOG] Computing n2_to_3 for num 380
[LOG] Computing n2_to_4 for num 380
[LOG] We will select 349 edges and 1228 tetra
[LOG] Edges from tetra 0 and KDTree 565 with 0 edges in common.
[LOG] Computing n3_to_4 for num 380
[LOG] Global feature for num 380
[LOG] Global feature for num 380
[LOG] Saving tensor x_0_380.pt
[LOG] Saving tensor x_1_380.pt
[LOG] Saving tensor x_2_380.pt
[LOG] Saving tensor x_3_380.pt
[LOG] Saving tensor x_4_380.pt
[LOG] Saving tensor n0_to_0_380.pt
[LOG] Saving tensor n1_to_1_380.pt
[LOG] Saving tensor n2_to_2_380.pt
[LOG] Computing n1_to_3 for num 569
[LOG] Saving tensor n3_to_3_380.pt
[LOG] Saving tensor n4_to_4_380.pt
[LOG] Saving tensor n0_to_1_380.pt
[LOG] Saving tensor n0_to_2_380.pt
[LOG] Saving tensor n0_to_3_380.pt
[LOG] Computing n1_to_4 for num 569
[LOG] Saving tensor n0_to_4_380.pt
[LOG] Saving tensor n1_to_2_380.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n1_to_3_380.pt
[LOG] Saving tensor n1_to_4_380.pt
[LOG] Saving tensor n2_to_3_380.pt
[LOG] Computing n2_to_3 for num 569
[LOG] Saving tensor n2_to_4_380.pt
[LOG] Saving tensor n3_to_4_380.pt
[LOG] Saving tensor global_feature_380.pt
[LOG] Process 47: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_4 for num 569
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_2 (adjacency) for num 258
[LOG] Computing n3_to_4 for num 569
[LOG] Global feature for num 569
[LOG] Global feature for num 569
[LOG] Saving tensor x_0_569.pt
[LOG] Saving tensor x_1_569.pt
[LOG] Saving tensor x_2_569.pt
[LOG] Saving tensor x_3_569.pt
[LOG] Saving tensor x_4_569.pt
[LOG] Saving tensor n0_to_0_569.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n1_to_1_569.pt
[LOG] Saving tensor n2_to_2_569.pt
[LOG] Saving tensor n3_to_3_569.pt
[LOG] Saving tensor n4_to_4_569.pt
[LOG] Saving tensor n0_to_1_569.pt
[LOG] Saving tensor n0_to_2_569.pt
[LOG] Saving tensor n0_to_3_569.pt
[LOG] Saving tensor n0_to_4_569.pt
[LOG] Saving tensor n1_to_2_569.pt
[LOG] Process 77: Created combinatorial complex for file data_619.hdf5
[LOG] Saving tensor n1_to_3_569.pt
[LOG] Saving tensor n1_to_4_569.pt
[LOG] Saving tensor n2_to_3_569.pt
[LOG] Saving tensor n2_to_4_569.pt
[LOG] Saving tensor n3_to_4_569.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor global_feature_569.pt
[LOG] Process 71: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_3 for num 811
[LOG] Process 77: Calculating Neighbors
[LOG] Loading pickle file data_619.pickle
[LOG] Processing node features for num 619
[LOG] Computing n0_to_4 for num 811
[LOG] Processing edge features for num 619
[LOG] Processing tetra features for num 619
[LOG] Computing n1_to_2 for num 811
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1353 Tetrahedra.
    [LOG] Generated 58 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.310344827586206
    [LOG] Max number of nodes per cluster is 46 and the number is 38
[LOG] Processing cluster features for num 619
[LOG] Processing cluster features for num 619
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing adjacency and incidence matrices for num 619
[LOG] Computing n0_to_0 for num 619
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_1 for num 619
[LOG] We will select 201 edges and 1353 tetra
[LOG] Edges from tetra 0 and KDTree 1634 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_3 for num 177
[LOG] Computing n2_to_2 (adjacency) for num 619
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n3_to_3 (adjacency) for num 258
[LOG] Computing n4_to_4 (coadjacency) for num 258
[LOG] Computing n0_to_1 for num 258
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_3 (adjacency) for num 619
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n4_to_4 (coadjacency) for num 619
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_1 for num 619
[LOG] Computing n1_to_4 for num 177
[LOG] Computing n0_to_2 for num 619
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n2_to_3 for num 177
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n0_to_2 for num 258
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n0_to_3 for num 619
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n1_to_3 for num 811
[LOG] Computing n0_to_4 for num 619
[LOG] Process 10: Created combinatorial complex for file data_84.hdf5
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n1_to_2 for num 619
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n1_to_4 for num 811
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n2_to_3 for num 811
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n2_to_4 for num 177
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 1928 Tetrahedra.
    [LOG] Generated 40 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.475
    [LOG] Max number of nodes per cluster is 36 and the number is 5
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n2_to_4 for num 811
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n1_to_3 for num 619
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n1_to_4 for num 619
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n2_to_3 for num 619
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Computing n2_to_4 for num 619
[LOG] We will select 548 edges and 1928 tetra
[LOG] Edges from tetra 0 and KDTree 548 with 0 edges in common.
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n3_to_4 for num 619
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Global feature for num 619
[LOG] Global feature for num 619
[LOG] Saving tensor x_0_619.pt
[LOG] Saving tensor x_1_619.pt
[LOG] Saving tensor x_2_619.pt
[LOG] Saving tensor x_3_619.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor x_4_619.pt
[LOG] Saving tensor n0_to_0_619.pt
[LOG] Saving tensor n1_to_1_619.pt
[LOG] Saving tensor n2_to_2_619.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n3_to_3_619.pt
[LOG] Saving tensor n4_to_4_619.pt
[LOG] Saving tensor n0_to_1_619.pt
[LOG] Saving tensor n0_to_2_619.pt
[LOG] Computing n3_to_4 for num 811
[LOG] Saving tensor n0_to_3_619.pt
[LOG] Saving tensor n0_to_4_619.pt
[LOG] Global feature for num 811
[LOG] Global feature for num 811
[LOG] Saving tensor x_0_811.pt
[LOG] Saving tensor n1_to_2_619.pt
[LOG] Saving tensor x_1_811.pt
[LOG] Saving tensor x_2_811.pt
[LOG] Saving tensor n1_to_3_619.pt
[LOG] Saving tensor x_3_811.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor x_4_811.pt
[LOG] Saving tensor n1_to_4_619.pt
[LOG] Saving tensor n0_to_0_811.pt
[LOG] Saving tensor n2_to_3_619.pt
[LOG] Saving tensor n1_to_1_811.pt
[LOG] Saving tensor n2_to_4_619.pt
[LOG] Saving tensor n2_to_2_811.pt
[LOG] Saving tensor n3_to_4_619.pt
[LOG] Saving tensor global_feature_619.pt
[LOG] Saving tensor n3_to_3_811.pt
[LOG] Process 77: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n4_to_4_811.pt
[LOG] Saving tensor n0_to_1_811.pt
[LOG] Saving tensor n0_to_2_811.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n0_to_3_811.pt
[LOG] Saving tensor n0_to_4_811.pt
[LOG] Saving tensor n1_to_2_811.pt
[LOG] Saving tensor n1_to_3_811.pt
[LOG] Saving tensor n1_to_4_811.pt
[LOG] Saving tensor n2_to_3_811.pt
[LOG] Saving tensor n2_to_4_811.pt
[LOG] Saving tensor n3_to_4_811.pt
[LOG] Saving tensor global_feature_811.pt
[LOG] Process 101: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n3_to_4 for num 177
[LOG] Global feature for num 177
[LOG] Global feature for num 177
[LOG] Saving tensor x_0_177.pt
[LOG] Saving tensor x_1_177.pt
[LOG] Saving tensor x_2_177.pt
[LOG] Saving tensor x_3_177.pt
[LOG] Saving tensor x_4_177.pt
[LOG] Saving tensor n0_to_0_177.pt
[LOG] Saving tensor n1_to_1_177.pt
[LOG] Saving tensor n2_to_2_177.pt
[LOG] Saving tensor n3_to_3_177.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n4_to_4_177.pt
[LOG] Saving tensor n0_to_1_177.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n0_to_2_177.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n0_to_3_177.pt
[LOG] Saving tensor n0_to_4_177.pt
[LOG] Saving tensor n1_to_2_177.pt
[LOG] Saving tensor n1_to_3_177.pt
[LOG] Saving tensor n1_to_4_177.pt
[LOG] Saving tensor n2_to_3_177.pt
[LOG] Saving tensor n2_to_4_177.pt
[LOG] Saving tensor n3_to_4_177.pt
[LOG] Saving tensor global_feature_177.pt
[LOG] Process 22: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 10: Calculating Neighbors
[LOG] Loading pickle file data_84.pickle
[LOG] Processing node features for num 84
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing edge features for num 84
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Processing tetra features for num 84
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Processing cluster features for num 84
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Processing cluster features for num 84
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Processing adjacency and incidence matrices for num 84
[LOG] Computing n0_to_0 for num 84
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_1 for num 84
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n0_to_3 for num 258
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n0_to_4 for num 258
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 84
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n1_to_2 for num 258
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 84
[LOG] Computing n4_to_4 (coadjacency) for num 84
[LOG] Computing n0_to_1 for num 84
[LOG] Computing n0_to_2 for num 84
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 14: Created combinatorial complex for file data_114.hdf5
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n0_to_3 for num 84
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n0_to_4 for num 84
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n1_to_2 for num 84
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_3 for num 84
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_4 for num 84
[LOG] Computing n2_to_3 for num 84
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n2_to_4 for num 84
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_4 for num 84
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Global feature for num 84
[LOG] Global feature for num 84
[LOG] Saving tensor x_0_84.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor x_1_84.pt
[LOG] Saving tensor x_2_84.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor x_3_84.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor x_4_84.pt
[LOG] Saving tensor n0_to_0_84.pt
[LOG] Computing n1_to_3 for num 258
[LOG] Saving tensor n1_to_1_84.pt
[LOG] Saving tensor n2_to_2_84.pt
[LOG] Computing n1_to_4 for num 258
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n3_to_3_84.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Process 14: Calculating Neighbors
[LOG] Loading pickle file data_114.pickle
[LOG] Processing node features for num 114
[LOG] Computing n2_to_3 for num 258
[LOG] Processing edge features for num 114
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n4_to_4_84.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n0_to_1_84.pt
[LOG] Processing tetra features for num 114
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n0_to_2_84.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n0_to_3_84.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n0_to_4_84.pt
[LOG] Computing n2_to_4 for num 258
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n1_to_2_84.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Processing cluster features for num 114
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n1_to_3_84.pt
[LOG] Processing cluster features for num 114
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n1_to_4_84.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Processing adjacency and incidence matrices for num 114
[LOG] Computing n0_to_0 for num 114
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n2_to_3_84.pt
[LOG] Computing n3_to_4 for num 258
[LOG] Calculating for cell ranks 1 and 1
[LOG] Global feature for num 258
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Global feature for num 258
[LOG] Saving tensor x_0_258.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n2_to_4_84.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor x_1_258.pt
[LOG] Saving tensor n3_to_4_84.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n1_to_1 for num 114
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor x_2_258.pt
[LOG] Saving tensor global_feature_84.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor x_3_258.pt
[LOG] Process 10: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor x_4_258.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n0_to_0_258.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n1_to_1_258.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n2_to_2_258.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n3_to_3_258.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n4_to_4_258.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n0_to_1_258.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n0_to_2_258.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n0_to_3_258.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n0_to_4_258.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n1_to_2_258.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n1_to_3_258.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n1_to_4_258.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n2_to_3_258.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n2_to_4_258.pt
[LOG] Saving tensor n3_to_4_258.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor global_feature_258.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Process 32: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 114
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 114
[LOG] Computing n4_to_4 (coadjacency) for num 114
[LOG] Computing n0_to_1 for num 114
[LOG] Computing n0_to_2 for num 114
[LOG] Computing n1_to_3 for num 393
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n1_to_4 for num 393
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n0_to_3 for num 114
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n0_to_4 for num 114
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n2_to_3 for num 393
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Computing n1_to_2 for num 114
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_4 for num 393
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_3 for num 114
[LOG] Computing n1_to_4 for num 114
[LOG] Computing n2_to_3 for num 114
[LOG] Computing n2_to_4 for num 114
[LOG] Computing n3_to_4 for num 114
[LOG] Global feature for num 114
[LOG] Global feature for num 114
[LOG] Saving tensor x_0_114.pt
[LOG] Saving tensor x_1_114.pt
[LOG] Saving tensor x_2_114.pt
[LOG] Saving tensor x_3_114.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_4 for num 393
[LOG] Calculating for cell ranks 2 and 3
[LOG] Global feature for num 393
[LOG] Global feature for num 393
[LOG] Saving tensor x_0_393.pt
[LOG] Saving tensor x_4_114.pt
[LOG] Saving tensor n0_to_0_114.pt
[LOG] Saving tensor x_1_393.pt
[LOG] Saving tensor x_2_393.pt
[LOG] Saving tensor x_3_393.pt
[LOG] Saving tensor n1_to_1_114.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor x_4_393.pt
[LOG] Saving tensor n0_to_0_393.pt
[LOG] Saving tensor n2_to_2_114.pt
[LOG] Saving tensor n1_to_1_393.pt
[LOG] Saving tensor n3_to_3_114.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n4_to_4_114.pt
[LOG] Saving tensor n2_to_2_393.pt
[LOG] Saving tensor n0_to_1_114.pt
[LOG] Saving tensor n0_to_2_114.pt
[LOG] Saving tensor n0_to_3_114.pt
[LOG] Saving tensor n0_to_4_114.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n1_to_2_114.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n1_to_3_114.pt
[LOG] Saving tensor n1_to_4_114.pt
[LOG] Saving tensor n2_to_3_114.pt
[LOG] Saving tensor n2_to_4_114.pt
[LOG] Saving tensor n3_to_4_114.pt
[LOG] Saving tensor global_feature_114.pt
[LOG] Process 14: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n3_to_3_393.pt
[LOG] Saving tensor n4_to_4_393.pt
[LOG] Saving tensor n0_to_1_393.pt
[LOG] Saving tensor n0_to_2_393.pt
[LOG] Saving tensor n0_to_3_393.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n0_to_4_393.pt
[LOG] Saving tensor n1_to_2_393.pt
[LOG] Saving tensor n1_to_3_393.pt
[LOG] Saving tensor n1_to_4_393.pt
[LOG] Saving tensor n2_to_3_393.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n2_to_4_393.pt
[LOG] Saving tensor n3_to_4_393.pt
[LOG] Saving tensor global_feature_393.pt
[LOG] Process 49: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2592 Tetrahedra.
    [LOG] Generated 58 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.206896551724139
    [LOG] Max number of nodes per cluster is 30 and the number is 56
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] We will select 433 edges and 2592 tetra
[LOG] Edges from tetra 0 and KDTree 582 with 0 edges in common.
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1672 Tetrahedra.
    [LOG] Generated 43 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.0
    [LOG] Max number of nodes per cluster is 47 and the number is 32
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] We will select 887 edges and 1672 tetra
[LOG] Edges from tetra 0 and KDTree 887 with 0 edges in common.
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 2
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 35: Created combinatorial complex for file data_283.hdf5
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 915 Tetrahedra.
    [LOG] Generated 32 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.625
    [LOG] Max number of nodes per cluster is 32 and the number is 18
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 35: Calculating Neighbors
[LOG] Loading pickle file data_283.pickle
[LOG] Processing node features for num 283
[LOG] Processing edge features for num 283
[LOG] We will select 81 edges and 915 tetra
[LOG] Edges from tetra 0 and KDTree 263 with 0 edges in common.
[LOG] Processing tetra features for num 283
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Processing cluster features for num 283
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Processing cluster features for num 283
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Process 54: Created combinatorial complex for file data_436.hdf5
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 283
[LOG] Computing n0_to_0 for num 283
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1627 Tetrahedra.
    [LOG] Generated 49 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.612244897959183
    [LOG] Max number of nodes per cluster is 43 and the number is 45
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_1 for num 283
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 42: Created combinatorial complex for file data_341.hdf5
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1484 Tetrahedra.
    [LOG] Generated 52 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.23076923076923
    [LOG] Max number of nodes per cluster is 77 and the number is 50
[LOG] Process 54: Calculating Neighbors
[LOG] Loading pickle file data_436.pickle
[LOG] Processing node features for num 436
[LOG] Processing edge features for num 436
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing tetra features for num 436
[LOG] Process 42: Calculating Neighbors
[LOG] Loading pickle file data_341.pickle
[LOG] Processing node features for num 341
[LOG] Processing edge features for num 341
[LOG] Processing tetra features for num 341
[LOG] Processing cluster features for num 341
[LOG] We will select 228 edges and 1484 tetra
[LOG] Edges from tetra 0 and KDTree 4116 with 0 edges in common.
[LOG] Processing cluster features for num 341
[LOG] Processing cluster features for num 436
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing adjacency and incidence matrices for num 341
[LOG] Computing n0_to_0 for num 341
[LOG] Computing n1_to_1 for num 341
[LOG] Processing cluster features for num 436
[LOG] Computing n2_to_2 (adjacency) for num 341
[LOG] Processing adjacency and incidence matrices for num 436
[LOG] Computing n0_to_0 for num 436
[LOG] Computing n3_to_3 (adjacency) for num 341
[LOG] Computing n4_to_4 (coadjacency) for num 341
[LOG] Computing n0_to_1 for num 341
[LOG] Computing n0_to_2 for num 341
[LOG] Computing n1_to_1 for num 436
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_3 for num 341
[LOG] Computing n0_to_4 for num 341
[LOG] Computing n2_to_2 (adjacency) for num 283
[LOG] Computing n1_to_2 for num 341
[LOG] Computing n1_to_3 for num 341
[LOG] Computing n1_to_4 for num 341
[LOG] Computing n2_to_3 for num 341
[LOG] Computing n2_to_4 for num 341
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_4 for num 341
[LOG] Global feature for num 341
[LOG] Global feature for num 341
[LOG] Saving tensor x_0_341.pt
[LOG] Saving tensor x_1_341.pt
[LOG] Saving tensor x_2_341.pt
[LOG] Saving tensor x_3_341.pt
[LOG] Saving tensor x_4_341.pt
[LOG] Saving tensor n0_to_0_341.pt
[LOG] Saving tensor n1_to_1_341.pt
[LOG] Saving tensor n2_to_2_341.pt
[LOG] Saving tensor n3_to_3_341.pt
[LOG] Saving tensor n4_to_4_341.pt
[LOG] Saving tensor n0_to_1_341.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n0_to_2_341.pt
[LOG] Saving tensor n0_to_3_341.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n0_to_4_341.pt
[LOG] Saving tensor n1_to_2_341.pt
[LOG] Computing n3_to_3 (adjacency) for num 283
[LOG] Saving tensor n1_to_3_341.pt
[LOG] Computing n4_to_4 (coadjacency) for num 283
[LOG] Saving tensor n1_to_4_341.pt
[LOG] Computing n0_to_1 for num 283
[LOG] GENERATED TETRA
[LOG] Saving tensor n2_to_3_341.pt
[LOG] Saving tensor n2_to_4_341.pt
[LOG] Saving tensor n3_to_4_341.pt
[LOG] Saving tensor global_feature_341.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 42: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] We will select 144 edges and 1627 tetra
[LOG] Edges from tetra 0 and KDTree 982 with 0 edges in common.
[LOG] Computing n2_to_2 (adjacency) for num 436
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1401 Tetrahedra.
    [LOG] Generated 47 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.872340425531915
    [LOG] Max number of nodes per cluster is 39 and the number is 16
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_2 for num 283
[LOG] Process 33: Created combinatorial complex for file data_267.hdf5
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] We will select 753 edges and 1401 tetra
[LOG] Calculating for cell ranks 1 and 3
[LOG] Edges from tetra 0 and KDTree 1287 with 0 edges in common.
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Process 33: Calculating Neighbors
[LOG] Loading pickle file data_267.pickle
[LOG] Processing node features for num 267
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Processing edge features for num 267
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 1588 Tetrahedra.
    [LOG] Generated 47 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.617021276595745
    [LOG] Max number of nodes per cluster is 53 and the number is 40
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Processing tetra features for num 267
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Computing n3_to_3 (adjacency) for num 436
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n4_to_4 (coadjacency) for num 436
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n0_to_1 for num 436
[LOG] Processing cluster features for num 267
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] We will select 235 edges and 1588 tetra
[LOG] Edges from tetra 0 and KDTree 320 with 0 edges in common.
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 267
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Processing adjacency and incidence matrices for num 267
[LOG] Computing n0_to_0 for num 267
[LOG] Computing n0_to_2 for num 436
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n0_to_3 for num 283
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_4 for num 283
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n1_to_2 for num 283
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_1 for num 267
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1379 Tetrahedra.
    [LOG] Generated 41 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.439024390243903
    [LOG] Max number of nodes per cluster is 62 and the number is 39
[LOG] Process 13: Created combinatorial complex for file data_108.hdf5
[LOG] We will select 326 edges and 1379 tetra
[LOG] Edges from tetra 0 and KDTree 3123 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Computing n2_to_2 (adjacency) for num 267
[LOG] GENERATED TETRA
[LOG] Computing n3_to_3 (adjacency) for num 267
[LOG] Computing n4_to_4 (coadjacency) for num 267
[LOG] Process 26: Created combinatorial complex for file data_211.hdf5
[LOG] Computing n0_to_1 for num 267
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_2 for num 267
[LOG] Computing n0_to_3 for num 436
[LOG] Computing n1_to_3 for num 283
[LOG] Computing n0_to_4 for num 436
[LOG] Computing n1_to_4 for num 283
[LOG] Computing n1_to_2 for num 436
[LOG] Computing n2_to_3 for num 283
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_4 for num 283
[LOG] Computing n3_to_4 for num 283
[LOG] Global feature for num 283
[LOG] Global feature for num 283
[LOG] Saving tensor x_0_283.pt
[LOG] Removed 4 subset clusters.
[LOG] Process 26: Calculating Neighbors
[LOG] Loading pickle file data_211.pickle
[LOG] Processing node features for num 211
[LOG] Saving tensor x_1_283.pt
[LOG] Saving tensor x_2_283.pt
[LOG] Removed 1 subset clusters.
[LOG] Process 13: Calculating Neighbors
[LOG] Loading pickle file data_108.pickle
[LOG] Processing node features for num 108
[LOG] Processing edge features for num 211
[LOG] Processing edge features for num 108
[LOG] Processing tetra features for num 108
[LOG] Processing tetra features for num 211
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing cluster features for num 108
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing cluster features for num 211
[LOG] Processing cluster features for num 108
[LOG] Process 19: Created combinatorial complex for file data_156.hdf5
[LOG] Processing cluster features for num 211
[LOG] Process 12: Created combinatorial complex for file data_102.hdf5
[LOG] Processing adjacency and incidence matrices for num 108
[LOG] Computing n0_to_0 for num 108
[LOG] Saving tensor x_3_283.pt
[LOG] Processing adjacency and incidence matrices for num 211
[LOG] Computing n0_to_0 for num 211
[LOG] Saving tensor x_4_283.pt
[LOG] Saving tensor n0_to_0_283.pt
[LOG] Computing n1_to_1 for num 108
[LOG] Computing n1_to_3 for num 436
[LOG] Computing n1_to_4 for num 436
[LOG] Saving tensor n1_to_1_283.pt
[LOG] Saving tensor n2_to_2_283.pt
[LOG] Computing n2_to_3 for num 436
[LOG] Saving tensor n3_to_3_283.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n4_to_4_283.pt
[LOG] Saving tensor n0_to_1_283.pt
[LOG] Saving tensor n0_to_2_283.pt
[LOG] Saving tensor n0_to_3_283.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n0_to_4_283.pt
[LOG] Saving tensor n1_to_2_283.pt
[LOG] Saving tensor n1_to_3_283.pt
[LOG] Saving tensor n1_to_4_283.pt
[LOG] Saving tensor n2_to_3_283.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 12: Calculating Neighbors
[LOG] Loading pickle file data_102.pickle
[LOG] Processing node features for num 102
[LOG] Saving tensor n2_to_4_283.pt
[LOG] Saving tensor n3_to_4_283.pt
[LOG] Computing n2_to_4 for num 436
[LOG] Processing edge features for num 102
[LOG] Saving tensor global_feature_283.pt
[LOG] Computing n2_to_2 (adjacency) for num 108
[LOG] Process 35: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 19: Calculating Neighbors
[LOG] Loading pickle file data_156.pickle
[LOG] Processing node features for num 156
[LOG] Processing tetra features for num 102
[LOG] Processing edge features for num 156
[LOG] Processing tetra features for num 156
[LOG] Computing n3_to_4 for num 436
[LOG] Global feature for num 436
[LOG] Global feature for num 436
[LOG] Saving tensor x_0_436.pt
[LOG] Processing cluster features for num 102
[LOG] Saving tensor x_1_436.pt
[LOG] Saving tensor x_2_436.pt
[LOG] Saving tensor x_3_436.pt
[LOG] Computing n1_to_1 for num 211
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor x_4_436.pt
[LOG] Saving tensor n0_to_0_436.pt
[LOG] Processing cluster features for num 102
[LOG] Processing cluster features for num 156
[LOG] Processing adjacency and incidence matrices for num 102
[LOG] Computing n0_to_0 for num 102
[LOG] Processing cluster features for num 156
[LOG] Processing adjacency and incidence matrices for num 156
[LOG] Computing n0_to_0 for num 156
[LOG] GENERATED TETRA
[LOG] Computing n1_to_1 for num 102
[LOG] Computing n1_to_1 for num 156
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n3_to_3 (adjacency) for num 108
[LOG] Computing n4_to_4 (coadjacency) for num 108
[LOG] Computing n0_to_1 for num 108
[LOG] Computing n0_to_3 for num 267
[LOG] Computing n0_to_2 for num 108
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n0_to_4 for num 267
[LOG] Computing n2_to_2 (adjacency) for num 156
[LOG] Computing n1_to_2 for num 267
[LOG] Computing n2_to_2 (adjacency) for num 102
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n1_to_1_436.pt
[LOG] Computing n3_to_3 (adjacency) for num 156
[LOG] Computing n2_to_2 (adjacency) for num 211
[LOG] Computing n4_to_4 (coadjacency) for num 156
[LOG] Computing n3_to_3 (adjacency) for num 102
[LOG] Computing n1_to_3 for num 267
[LOG] Computing n0_to_1 for num 156
[LOG] Computing n4_to_4 (coadjacency) for num 102
[LOG] Computing n1_to_4 for num 267
[LOG] Computing n0_to_1 for num 102
[LOG] Computing n2_to_3 for num 267
[LOG] Computing n0_to_2 for num 156
[LOG] Computing n2_to_4 for num 267
[LOG] Computing n0_to_2 for num 102
[LOG] Computing n3_to_4 for num 267
[LOG] Global feature for num 267
[LOG] Global feature for num 267
[LOG] Saving tensor x_0_267.pt
[LOG] Saving tensor x_1_267.pt
[LOG] Saving tensor x_2_267.pt
[LOG] Saving tensor n2_to_2_436.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n3_to_3 (adjacency) for num 211
[LOG] Computing n4_to_4 (coadjacency) for num 211
[LOG] GENERATED TETRA
[LOG] Computing n0_to_1 for num 211
[LOG] Saving tensor x_3_267.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor x_4_267.pt
[LOG] Saving tensor n3_to_3_436.pt
[LOG] Saving tensor n0_to_0_267.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1834 Tetrahedra.
    [LOG] Generated 51 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.215686274509803
    [LOG] Max number of nodes per cluster is 72 and the number is 49
[LOG] Computing n0_to_3 for num 156
[LOG] Computing n0_to_4 for num 156
[LOG] Computing n0_to_3 for num 108
[LOG] Computing n1_to_2 for num 156
[LOG] Computing n0_to_4 for num 108
[LOG] Computing n0_to_2 for num 211
[LOG] Computing n0_to_3 for num 102
[LOG] Computing n0_to_4 for num 102
[LOG] Computing n1_to_2 for num 108
[LOG] Computing n1_to_2 for num 102
[LOG] We will select 139 edges and 1834 tetra
[LOG] Edges from tetra 0 and KDTree 2717 with 0 edges in common.
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n4_to_4_436.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n1_to_1_267.pt
[LOG] Saving tensor n0_to_1_436.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_3 for num 108
[LOG] Computing n1_to_3 for num 156
[LOG] Computing n1_to_4 for num 108
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n2_to_2_267.pt
[LOG] Computing n1_to_4 for num 156
[LOG] Computing n2_to_3 for num 108
[LOG] Saving tensor n0_to_2_436.pt
[LOG] Computing n2_to_3 for num 156
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n2_to_4 for num 108
[LOG] Computing n2_to_4 for num 156
[LOG] Computing n3_to_4 for num 108
[LOG] Global feature for num 108
[LOG] Computing n1_to_3 for num 102
[LOG] Global feature for num 108
[LOG] Computing n3_to_4 for num 156
[LOG] Saving tensor x_0_108.pt
[LOG] Global feature for num 156
[LOG] Global feature for num 156
[LOG] Saving tensor x_0_156.pt
[LOG] Computing n1_to_4 for num 102
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_3 for num 102
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n2_to_4 for num 102
[LOG] Computing n3_to_4 for num 102
[LOG] Global feature for num 102
[LOG] Global feature for num 102
[LOG] Saving tensor x_0_102.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor x_1_108.pt
[LOG] Saving tensor n0_to_3_436.pt
[LOG] Saving tensor x_1_156.pt
[LOG] Saving tensor x_1_102.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor x_2_156.pt
[LOG] Saving tensor x_2_102.pt
[LOG] Saving tensor x_2_108.pt
[LOG] Saving tensor n0_to_4_436.pt
[LOG] Saving tensor x_3_102.pt
[LOG] Saving tensor x_3_156.pt
[LOG] Saving tensor x_4_102.pt
[LOG] Saving tensor n3_to_3_267.pt
[LOG] Saving tensor x_4_156.pt
[LOG] Saving tensor x_3_108.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n1_to_2_436.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1272 Tetrahedra.
    [LOG] Generated 41 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.658536585365853
    [LOG] Max number of nodes per cluster is 63 and the number is 37
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 638 Tetrahedra.
    [LOG] Generated 13 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 18.46153846153846
    [LOG] Max number of nodes per cluster is 65 and the number is 3
[LOG] Saving tensor n0_to_0_102.pt
[LOG] Saving tensor n0_to_0_156.pt
[LOG] Saving tensor x_4_108.pt
[LOG] Saving tensor n4_to_4_267.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n0_to_0_108.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n1_to_3_436.pt
[LOG] Saving tensor n1_to_1_102.pt
[LOG] Saving tensor n1_to_1_156.pt
[LOG] Saving tensor n0_to_1_267.pt
[LOG] Saving tensor n1_to_1_108.pt
[LOG] Saving tensor n1_to_4_436.pt
[LOG] We will select 315 edges and 638 tetra
[LOG] Edges from tetra 0 and KDTree 3777 with 0 edges in common.
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n0_to_3 for num 211
[LOG] Saving tensor n2_to_2_102.pt
[LOG] Saving tensor n2_to_2_108.pt
[LOG] Saving tensor n0_to_2_267.pt
[LOG] Saving tensor n2_to_2_156.pt
[LOG] Computing n0_to_4 for num 211
[LOG] We will select 271 edges and 1272 tetra
[LOG] Edges from tetra 0 and KDTree 858 with 0 edges in common.
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1711 Tetrahedra.
    [LOG] Generated 36 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.11111111111111
    [LOG] Max number of nodes per cluster is 44 and the number is 27
[LOG] Computing n1_to_2 for num 211
[LOG] We will select 267 edges and 1711 tetra
[LOG] Edges from tetra 0 and KDTree 785 with 0 edges in common.
[LOG] Saving tensor n2_to_3_436.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n3_to_3_108.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n3_to_3_102.pt
[LOG] Saving tensor n0_to_3_267.pt
[LOG] Saving tensor n2_to_4_436.pt
[LOG] Saving tensor n3_to_3_156.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n4_to_4_108.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n4_to_4_102.pt
[LOG] Saving tensor n0_to_4_267.pt
[LOG] Saving tensor n3_to_4_436.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n4_to_4_156.pt
[LOG] Saving tensor n0_to_1_108.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 5: Created combinatorial complex for file data_45.hdf5
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_3 for num 211
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n1_to_4 for num 211
[LOG] Saving tensor n0_to_1_102.pt
[LOG] Saving tensor global_feature_436.pt
[LOG] Saving tensor n1_to_2_267.pt
[LOG] Process 114: Created combinatorial complex for file data_905.hdf5
[LOG] Computing n2_to_3 for num 211
[LOG] Removed 0 subset clusters.
[LOG] Computing n2_to_4 for num 211
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 5: Calculating Neighbors
[LOG] Loading pickle file data_45.pickle
[LOG] Processing node features for num 45
[LOG] Processing edge features for num 45
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_4 for num 211
[LOG] Global feature for num 211
[LOG] Global feature for num 211
[LOG] Saving tensor x_0_211.pt
[LOG] Processing tetra features for num 45
[LOG] Processing cluster features for num 45
[LOG] Processing cluster features for num 45
[LOG] Processing adjacency and incidence matrices for num 45
[LOG] Computing n0_to_0 for num 45
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n0_to_1_156.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Process 54: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_2_108.pt
[LOG] Saving tensor n0_to_2_102.pt
[LOG] Saving tensor x_1_211.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n1_to_3_267.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n0_to_2_156.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n0_to_3_108.pt
[LOG] Saving tensor n0_to_3_102.pt
[LOG] Computing n1_to_1 for num 45
[LOG] Process 7: Created combinatorial complex for file data_61.hdf5
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n2_to_2 (adjacency) for num 45
[LOG] Computing n3_to_3 (adjacency) for num 45
[LOG] Computing n4_to_4 (coadjacency) for num 45
[LOG] Computing n0_to_1 for num 45
[LOG] Saving tensor x_2_211.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n1_to_4_267.pt
[LOG] Computing n0_to_2 for num 45
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2097 Tetrahedra.
    [LOG] Generated 53 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.79245283018868
    [LOG] Max number of nodes per cluster is 51 and the number is 28
[LOG] Process 7: Calculating Neighbors
[LOG] Loading pickle file data_61.pickle
[LOG] Processing node features for num 61
[LOG] Computing n0_to_3 for num 45
[LOG] Processing edge features for num 61
[LOG] Computing n0_to_4 for num 45
[LOG] Computing n1_to_2 for num 45
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n0_to_3_156.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Processing tetra features for num 61
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.
[LOG] Processing cluster features for num 61
[LOG] Computing n1_to_3 for num 45
[LOG] Processing cluster features for num 61
[LOG] Computing n1_to_4 for num 45
[LOG] Computing n2_to_3 for num 45
[LOG] We will select 404 edges and 2097 tetra
[LOG] Edges from tetra 0 and KDTree 404 with 0 edges in common.
[LOG] Computing n2_to_4 for num 45
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1261 Tetrahedra.
    [LOG] Generated 49 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.0
    [LOG] Max number of nodes per cluster is 29 and the number is 42
[LOG] Processing adjacency and incidence matrices for num 61
[LOG] Computing n0_to_0 for num 61
[LOG] Computing n3_to_4 for num 45
[LOG] Global feature for num 45
[LOG] Global feature for num 45
[LOG] Saving tensor x_0_45.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n0_to_4_108.pt
[LOG] Computing n1_to_1 for num 61
[LOG] We will select 73 edges and 1261 tetra
[LOG] Edges from tetra 0 and KDTree 1178 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 46: Created combinatorial complex for file data_374.hdf5
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 4261 Tetrahedra.
    [LOG] Generated 126 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.936507936507937
    [LOG] Max number of nodes per cluster is 43 and the number is 22
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n0_to_4_102.pt
[LOG] Saving tensor x_3_211.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n0_to_4_156.pt
[LOG] Saving tensor n2_to_3_267.pt
[LOG] Computing n2_to_2 (adjacency) for num 61
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n3_to_3 (adjacency) for num 61
[LOG] Computing n4_to_4 (coadjacency) for num 61
[LOG] Process 46: Calculating Neighbors
[LOG] Loading pickle file data_374.pickle
[LOG] Processing node features for num 374
[LOG] Computing n0_to_1 for num 61
[LOG] Process 114: Calculating Neighbors
[LOG] Loading pickle file data_905.pickle
[LOG] Processing node features for num 905
[LOG] Processing edge features for num 374
[LOG] Processing edge features for num 905
[LOG] Processing tetra features for num 374
[LOG] Saving tensor x_1_45.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Processing tetra features for num 905
[LOG] Saving tensor n1_to_2_108.pt
[LOG] Computing n0_to_2 for num 61
[LOG] Saving tensor n1_to_2_102.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing cluster features for num 374
[LOG] Processing cluster features for num 905
[LOG] Processing cluster features for num 374
[LOG] Processing cluster features for num 905
[LOG] Processing adjacency and incidence matrices for num 374
[LOG] Computing n0_to_0 for num 374
[LOG] Processing adjacency and incidence matrices for num 905
[LOG] Computing n0_to_0 for num 905
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_1 for num 374
[LOG] We will select 903 edges and 4261 tetra
[LOG] Edges from tetra 0 and KDTree 2902 with 0 edges in common.
[LOG] Saving tensor x_4_211.pt
[LOG] Saving tensor n0_to_0_211.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n1_to_1 for num 905
[LOG] Saving tensor n2_to_4_267.pt
[LOG] Saving tensor n1_to_2_156.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor x_2_45.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 3 subset clusters.
[LOG] Computing n2_to_2 (adjacency) for num 905
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_2 (adjacency) for num 374
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n1_to_3_108.pt
[LOG] Saving tensor n1_to_3_102.pt
[LOG] Saving tensor n3_to_4_267.pt
[LOG] Saving tensor n1_to_1_211.pt
[LOG] Saving tensor n1_to_3_156.pt
[LOG] Saving tensor x_3_45.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n1_to_4_102.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor global_feature_267.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n1_to_4_108.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor x_4_45.pt
[LOG] Saving tensor n2_to_3_102.pt
[LOG] Computing n0_to_3 for num 61
[LOG] Saving tensor n2_to_2_211.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Process 33: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n1_to_4_156.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n0_to_0_45.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n2_to_4_102.pt
[LOG] Saving tensor n2_to_3_108.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n2_to_3_156.pt
[LOG] Saving tensor n3_to_3_211.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n2_to_4_108.pt
[LOG] Computing n0_to_4 for num 61
[LOG] Saving tensor n3_to_4_102.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n1_to_1_45.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n2_to_4_156.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor global_feature_102.pt
[LOG] Saving tensor n4_to_4_211.pt
[LOG] Saving tensor n3_to_4_108.pt
[LOG] Computing n1_to_2 for num 61
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Process 12: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n2_to_2_45.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor global_feature_108.pt
[LOG] Saving tensor n3_to_4_156.pt
[LOG] Saving tensor n0_to_1_211.pt
[LOG] Process 34: Created combinatorial complex for file data_275.hdf5
[LOG] Computing n3_to_3 (adjacency) for num 374
[LOG] Computing n4_to_4 (coadjacency) for num 374
[LOG] Computing n0_to_1 for num 374
[LOG] Computing n3_to_3 (adjacency) for num 905
[LOG] Computing n4_to_4 (coadjacency) for num 905
[LOG] Computing n0_to_1 for num 905
[LOG] Computing n0_to_2 for num 374
[LOG] Computing n0_to_2 for num 905
[LOG] Computing n1_to_3 for num 61
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_4 for num 61
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n2_to_3 for num 61
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Process 13: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor global_feature_156.pt
[LOG] Saving tensor n3_to_3_45.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n0_to_2_211.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n2_to_4 for num 61
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Process 19: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n4_to_4_45.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n0_to_1_45.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n0_to_3_211.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n0_to_2_45.pt
[LOG] Computing n3_to_4 for num 61
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n0_to_4_211.pt
[LOG] Global feature for num 61
[LOG] Global feature for num 61
[LOG] Saving tensor x_0_61.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor x_1_61.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n0_to_3_45.pt
[LOG] Saving tensor n1_to_2_211.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor x_2_61.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n0_to_4_45.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor x_3_61.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n1_to_3_211.pt
[LOG] Saving tensor x_4_61.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n1_to_2_45.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Process 34: Calculating Neighbors
[LOG] Loading pickle file data_275.pickle
[LOG] Processing node features for num 275
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing edge features for num 275
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing tetra features for num 275
[LOG] Processing cluster features for num 275
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing cluster features for num 275
[LOG] Saving tensor n0_to_0_61.pt
[LOG] Processing adjacency and incidence matrices for num 275
[LOG] Computing n0_to_0 for num 275
[LOG] Saving tensor n1_to_4_211.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n1_to_3_45.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n1_to_1_61.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n0_to_3 for num 374
[LOG] Saving tensor n2_to_3_211.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n1_to_4_45.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n1_to_1 for num 275
[LOG] Saving tensor n2_to_2_61.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n2_to_4_211.pt
[LOG] Computing n0_to_4 for num 374
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n2_to_3_45.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n3_to_4_211.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor global_feature_211.pt
[LOG] Computing n1_to_2 for num 374
[LOG] Saving tensor n2_to_4_45.pt
[LOG] Saving tensor n3_to_3_61.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Process 26: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n4_to_4_61.pt
[LOG] Saving tensor n3_to_4_45.pt
[LOG] Saving tensor global_feature_45.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Process 5: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_1_61.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n0_to_2_61.pt
[LOG] Computing n2_to_2 (adjacency) for num 275
[LOG] Saving tensor n0_to_3_61.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n0_to_4_61.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n1_to_2_61.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n1_to_3_61.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n1_to_4_61.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n2_to_3_61.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n2_to_4_61.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n3_to_4_61.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor global_feature_61.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 275
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n4_to_4 (coadjacency) for num 275
[LOG] Process 7: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n0_to_1 for num 275
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_2 for num 275
[LOG] Computing n1_to_3 for num 374
[LOG] Computing n1_to_4 for num 374
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_3 for num 374
[LOG] Computing n2_to_4 for num 374
[LOG] Computing n3_to_4 for num 374
[LOG] Global feature for num 374
[LOG] Global feature for num 374
[LOG] Saving tensor x_0_374.pt
[LOG] Saving tensor x_1_374.pt
[LOG] Saving tensor x_2_374.pt
[LOG] Saving tensor x_3_374.pt
[LOG] Saving tensor x_4_374.pt
[LOG] Saving tensor n0_to_0_374.pt
[LOG] Saving tensor n1_to_1_374.pt
[LOG] Saving tensor n2_to_2_374.pt
[LOG] Saving tensor n3_to_3_374.pt
[LOG] Computing n0_to_3 for num 905
[LOG] Saving tensor n4_to_4_374.pt
[LOG] Saving tensor n0_to_1_374.pt
[LOG] Saving tensor n0_to_2_374.pt
[LOG] Saving tensor n0_to_3_374.pt
[LOG] Computing n0_to_4 for num 905
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n0_to_4_374.pt
[LOG] Saving tensor n1_to_2_374.pt
[LOG] Saving tensor n1_to_3_374.pt
[LOG] Computing n0_to_3 for num 275
[LOG] Saving tensor n1_to_4_374.pt
[LOG] Computing n1_to_2 for num 905
[LOG] Saving tensor n2_to_3_374.pt
[LOG] Computing n0_to_4 for num 275
[LOG] Saving tensor n2_to_4_374.pt
[LOG] Process 124: Created combinatorial complex for file data_975.hdf5
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n3_to_4_374.pt
[LOG] Saving tensor global_feature_374.pt
[LOG] Computing n1_to_2 for num 275
[LOG] Process 46: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_3 for num 275
[LOG] Computing n1_to_4 for num 275
[LOG] Computing n2_to_3 for num 275
[LOG] Computing n2_to_4 for num 275
[LOG] Computing n1_to_3 for num 905
[LOG] Computing n1_to_4 for num 905
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_3 for num 905
[LOG] Computing n3_to_4 for num 275
[LOG] Global feature for num 275
[LOG] Global feature for num 275
[LOG] Saving tensor x_0_275.pt
[LOG] Saving tensor x_1_275.pt
[LOG] Saving tensor x_2_275.pt
[LOG] Saving tensor x_3_275.pt
[LOG] Saving tensor x_4_275.pt
[LOG] Saving tensor n0_to_0_275.pt
[LOG] Computing n2_to_4 for num 905
[LOG] Saving tensor n1_to_1_275.pt
[LOG] Saving tensor n2_to_2_275.pt
[LOG] Saving tensor n3_to_3_275.pt
[LOG] Saving tensor n4_to_4_275.pt
[LOG] Saving tensor n0_to_1_275.pt
[LOG] Computing n3_to_4 for num 905
[LOG] Global feature for num 905
[LOG] Global feature for num 905
[LOG] Saving tensor x_0_905.pt
[LOG] Saving tensor x_1_905.pt
[LOG] Saving tensor n0_to_2_275.pt
[LOG] Saving tensor x_2_905.pt
[LOG] Saving tensor n0_to_3_275.pt
[LOG] Saving tensor x_3_905.pt
[LOG] Saving tensor n0_to_4_275.pt
[LOG] Process 124: Calculating Neighbors
[LOG] Loading pickle file data_975.pickle
[LOG] Processing node features for num 975
[LOG] Saving tensor x_4_905.pt
[LOG] Processing edge features for num 975
[LOG] Saving tensor n1_to_2_275.pt
[LOG] Saving tensor n0_to_0_905.pt
[LOG] Saving tensor n1_to_1_905.pt
[LOG] Saving tensor n1_to_3_275.pt
[LOG] Saving tensor n2_to_2_905.pt
[LOG] Saving tensor n1_to_4_275.pt
[LOG] Saving tensor n2_to_3_275.pt
[LOG] Saving tensor n2_to_4_275.pt
[LOG] Saving tensor n3_to_3_905.pt
[LOG] Saving tensor n3_to_4_275.pt
[LOG] Saving tensor n4_to_4_905.pt
[LOG] Processing tetra features for num 975
[LOG] Saving tensor global_feature_275.pt
[LOG] Process 34: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_1_905.pt
[LOG] Saving tensor n0_to_2_905.pt
[LOG] Saving tensor n0_to_3_905.pt
[LOG] Saving tensor n0_to_4_905.pt
[LOG] Saving tensor n1_to_2_905.pt
[LOG] Saving tensor n1_to_3_905.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n1_to_4_905.pt
[LOG] Processing cluster features for num 975
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 975
[LOG] Processing adjacency and incidence matrices for num 975
[LOG] Computing n0_to_0 for num 975
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_1 for num 975
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n2_to_3_905.pt
[LOG] Saving tensor n2_to_4_905.pt
[LOG] Saving tensor n3_to_4_905.pt
[LOG] Saving tensor global_feature_905.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 114: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_2 (adjacency) for num 975
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 4593 Tetrahedra.
    [LOG] Generated 118 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.084745762711865
    [LOG] Max number of nodes per cluster is 134 and the number is 105
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 975
[LOG] Computing n4_to_4 (coadjacency) for num 975
[LOG] Computing n0_to_1 for num 975
[LOG] Calculating for cell ranks 0 and 3
[LOG] We will select 769 edges and 4593 tetra
[LOG] Edges from tetra 0 and KDTree 2858 with 0 edges in common.
[LOG] Computing n0_to_2 for num 975
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 6373 Tetrahedra.
    [LOG] Generated 160 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.6
    [LOG] Max number of nodes per cluster is 73 and the number is 159
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_3 for num 975
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n0_to_4 for num 975
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n1_to_2 for num 975
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Process 53: Created combinatorial complex for file data_426.hdf5
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_3 for num 975
[LOG] Computing n1_to_4 for num 975
[LOG] Computing n2_to_3 for num 975
[LOG] We will select 2218 edges and 6373 tetra
[LOG] Edges from tetra 0 and KDTree 2218 with 0 edges in common.
[LOG] Computing n2_to_4 for num 975
[LOG] Computing n3_to_4 for num 975
[LOG] Global feature for num 975
[LOG] Global feature for num 975
[LOG] Saving tensor x_0_975.pt
[LOG] Saving tensor x_1_975.pt
[LOG] Saving tensor x_2_975.pt
[LOG] Saving tensor x_3_975.pt
[LOG] Saving tensor x_4_975.pt
[LOG] Saving tensor n0_to_0_975.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n1_to_1_975.pt
[LOG] Saving tensor n2_to_2_975.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n3_to_3_975.pt
[LOG] Saving tensor n4_to_4_975.pt
[LOG] Saving tensor n0_to_1_975.pt
[LOG] Saving tensor n0_to_2_975.pt
[LOG] Saving tensor n0_to_3_975.pt
[LOG] Saving tensor n0_to_4_975.pt
[LOG] Saving tensor n1_to_2_975.pt
[LOG] Saving tensor n1_to_3_975.pt
[LOG] Saving tensor n1_to_4_975.pt
[LOG] Saving tensor n2_to_3_975.pt
[LOG] Saving tensor n2_to_4_975.pt
[LOG] Saving tensor n3_to_4_975.pt
[LOG] Saving tensor global_feature_975.pt
[LOG] Process 124: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 53: Calculating Neighbors
[LOG] Loading pickle file data_426.pickle
[LOG] Processing node features for num 426
[LOG] Processing edge features for num 426
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing tetra features for num 426
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing cluster features for num 426
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 426
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing adjacency and incidence matrices for num 426
[LOG] Computing n0_to_0 for num 426
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 1862 Tetrahedra.
    [LOG] Generated 56 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.964285714285714
    [LOG] Max number of nodes per cluster is 33 and the number is 25
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] We will select 520 edges and 1862 tetra
[LOG] Edges from tetra 0 and KDTree 662 with 0 edges in common.
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n1_to_1 for num 426
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Process 115: Created combinatorial complex for file data_911.hdf5
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1009 Tetrahedra.
    [LOG] Generated 37 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.2972972972973
    [LOG] Max number of nodes per cluster is 44 and the number is 25
[LOG] Removed 5 subset clusters.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] We will select 183 edges and 1009 tetra
[LOG] Edges from tetra 0 and KDTree 2718 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_2 (adjacency) for num 426
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 115: Calculating Neighbors
[LOG] Loading pickle file data_911.pickle
[LOG] Processing node features for num 911
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing edge features for num 911
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Process 120: Created combinatorial complex for file data_948.hdf5
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Processing tetra features for num 911
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing cluster features for num 911
[LOG] Process 92: Created combinatorial complex for file data_740.hdf5
[LOG] Process 120: Calculating Neighbors
[LOG] Loading pickle file data_948.pickle
[LOG] Processing node features for num 948
[LOG] Processing edge features for num 948
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing tetra features for num 948
[LOG] Processing cluster features for num 911
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 0 and 3

    [LOG] We Currently have 1702 Tetrahedra.
    [LOG] Generated 48 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.291666666666666
    [LOG] Max number of nodes per cluster is 45 and the number is 41
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing cluster features for num 948
[LOG] Process 92: Calculating Neighbors
[LOG] Loading pickle file data_740.pickle
[LOG] Processing node features for num 740
[LOG] Processing adjacency and incidence matrices for num 911
[LOG] Computing n0_to_0 for num 911
[LOG] Processing cluster features for num 948
[LOG] Processing edge features for num 740
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing adjacency and incidence matrices for num 948
[LOG] Computing n0_to_0 for num 948
[LOG] We will select 425 edges and 1702 tetra
[LOG] Edges from tetra 0 and KDTree 425 with 0 edges in common.
[LOG] Processing tetra features for num 740
[LOG] Processing cluster features for num 740
[LOG] Computing n1_to_1 for num 948
[LOG] Processing cluster features for num 740
[LOG] Processing adjacency and incidence matrices for num 740
[LOG] Computing n0_to_0 for num 740
[LOG] Computing n1_to_1 for num 740
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_2 (adjacency) for num 740
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_1 for num 911
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n3_to_3 (adjacency) for num 740
[LOG] Computing n4_to_4 (coadjacency) for num 740
[LOG] Computing n0_to_1 for num 740
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_2 (adjacency) for num 948
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_2 for num 740
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_3 (adjacency) for num 948
[LOG] Computing n4_to_4 (coadjacency) for num 948
[LOG] Computing n0_to_1 for num 948
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_2 for num 948
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 15: Created combinatorial complex for file data_125.hdf5
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_3 for num 740
[LOG] Computing n0_to_4 for num 740
[LOG] Computing n3_to_3 (adjacency) for num 426
[LOG] Computing n4_to_4 (coadjacency) for num 426
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_1 for num 426
[LOG] Computing n1_to_2 for num 740
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 839 Tetrahedra.
    [LOG] Generated 28 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.285714285714286
    [LOG] Max number of nodes per cluster is 26 and the number is 14
[LOG] Computing n0_to_3 for num 948
[LOG] GENERATED TETRA
[LOG] Computing n0_to_4 for num 948
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_2 for num 948
[LOG] Computing n1_to_3 for num 740
[LOG] Computing n1_to_4 for num 740
[LOG] GENERATED TETRA
[LOG] Computing n2_to_3 for num 740
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 15: Calculating Neighbors
[LOG] Loading pickle file data_125.pickle
[LOG] Processing node features for num 125
[LOG] Calculating for cell ranks 4 and 4
[LOG] We will select 61 edges and 839 tetra
[LOG] Edges from tetra 0 and KDTree 267 with 0 edges in common.
[LOG] Processing edge features for num 125
[LOG] Computing n2_to_4 for num 740
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_4 for num 740
[LOG] Global feature for num 740
[LOG] Global feature for num 740
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor x_0_740.pt
[LOG] Saving tensor x_1_740.pt
[LOG] Saving tensor x_2_740.pt
[LOG] Processing tetra features for num 125
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor x_3_740.pt
[LOG] Saving tensor x_4_740.pt
[LOG] Saving tensor n0_to_0_740.pt
[LOG] Saving tensor n1_to_1_740.pt
[LOG] Saving tensor n2_to_2_740.pt
[LOG] Saving tensor n3_to_3_740.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n4_to_4_740.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n0_to_1_740.pt
[LOG] Saving tensor n0_to_2_740.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n0_to_3_740.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n0_to_4_740.pt
[LOG] Processing cluster features for num 125
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n1_to_2_740.pt
[LOG] Saving tensor n1_to_3_740.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n1_to_4_740.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n2_to_3_740.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n2_to_4_740.pt
[LOG] Processing cluster features for num 125
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n3_to_4_740.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor global_feature_740.pt
[LOG] Process 92: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Processing adjacency and incidence matrices for num 125
[LOG] Computing n0_to_0 for num 125
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n0_to_2 for num 426
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n1_to_1 for num 125
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_3 for num 948
[LOG] Computing n1_to_4 for num 948
[LOG] Computing n2_to_3 for num 948
[LOG] Process 105: Created combinatorial complex for file data_845.hdf5
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_3_to_4.pt

    [LOG] We Currently have 1370 Tetrahedra.
    [LOG] Generated 44 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.659090909090908
    [LOG] Max number of nodes per cluster is 36 and the number is 21
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n2_to_4 for num 948
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_4 for num 948
[LOG] Global feature for num 948
[LOG] Global feature for num 948
[LOG] Saving tensor x_0_948.pt
[LOG] Saving tensor x_1_948.pt
[LOG] Process 105: Calculating Neighbors
[LOG] Loading pickle file data_845.pickle
[LOG] Processing node features for num 845
[LOG] Saving tensor x_2_948.pt
[LOG] Saving tensor x_3_948.pt
[LOG] Processing edge features for num 845
[LOG] Saving tensor x_4_948.pt
[LOG] Saving tensor n0_to_0_948.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n1_to_1_948.pt
[LOG] Computing n2_to_2 (adjacency) for num 911
[LOG] Processing tetra features for num 845
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n2_to_2_948.pt
[LOG] We will select 213 edges and 1370 tetra
[LOG] Edges from tetra 0 and KDTree 515 with 0 edges in common.
[LOG] Saving tensor n3_to_3_948.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Removed 0 subset clusters.
[LOG] Computing n2_to_2 (adjacency) for num 125
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n4_to_4_948.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Processing cluster features for num 845
[LOG] Saving tensor n0_to_1_948.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n0_to_2_948.pt
[LOG] Saving tensor n0_to_3_948.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n0_to_4_948.pt
[LOG] Processing cluster features for num 845
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n1_to_2_948.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n1_to_3_948.pt
[LOG] Saving tensor n1_to_4_948.pt
[LOG] Processing adjacency and incidence matrices for num 845
[LOG] Computing n0_to_0 for num 845
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n2_to_3_948.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n2_to_4_948.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n3_to_4_948.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n1_to_1 for num 845
[LOG] Saving tensor global_feature_948.pt
[LOG] Process 120: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1861 Tetrahedra.
    [LOG] Generated 55 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.181818181818182
    [LOG] Max number of nodes per cluster is 60 and the number is 11
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 845
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 845
[LOG] Computing n4_to_4 (coadjacency) for num 845
[LOG] Computing n0_to_1 for num 845
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n0_to_2 for num 845
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 125
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n4_to_4 (coadjacency) for num 125
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n0_to_1 for num 125
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] We will select 233 edges and 1861 tetra
[LOG] Edges from tetra 0 and KDTree 557 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_2 for num 125
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_3 for num 845
[LOG] Computing n0_to_4 for num 845
[LOG] Computing n1_to_2 for num 845
[LOG] Computing n1_to_3 for num 845
[LOG] Computing n1_to_4 for num 845
[LOG] Computing n2_to_3 for num 845
[LOG] Computing n2_to_4 for num 845
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_4 for num 845
[LOG] Global feature for num 845
[LOG] Global feature for num 845
[LOG] Saving tensor x_0_845.pt
[LOG] Saving tensor x_1_845.pt
[LOG] Saving tensor x_2_845.pt
[LOG] Saving tensor x_3_845.pt
[LOG] Saving tensor x_4_845.pt
[LOG] Saving tensor n0_to_0_845.pt
[LOG] Saving tensor n1_to_1_845.pt
[LOG] Saving tensor n2_to_2_845.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n3_to_3_845.pt
[LOG] Saving tensor n4_to_4_845.pt
[LOG] Saving tensor n0_to_1_845.pt
[LOG] Saving tensor n0_to_2_845.pt
[LOG] Saving tensor n0_to_3_845.pt
[LOG] Saving tensor n0_to_4_845.pt
[LOG] Saving tensor n1_to_2_845.pt
[LOG] Saving tensor n1_to_3_845.pt
[LOG] Saving tensor n1_to_4_845.pt
[LOG] Saving tensor n2_to_3_845.pt
[LOG] Saving tensor n2_to_4_845.pt
[LOG] Saving tensor n3_to_4_845.pt
[LOG] Saving tensor global_feature_845.pt
[LOG] Process 105: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_3 for num 125
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_4 for num 125
[LOG] Computing n1_to_2 for num 125
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 8: Created combinatorial complex for file data_68.hdf5
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] GENERATED TETRA
[LOG] Process 8: Calculating Neighbors
[LOG] Loading pickle file data_68.pickle
[LOG] Processing node features for num 68
[LOG] Processing edge features for num 68
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing tetra features for num 68
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 1 subset clusters.
[LOG] Processing cluster features for num 68
[LOG] Computing n1_to_3 for num 125
[LOG] Processing cluster features for num 68
[LOG] GENERATED TETRA
[LOG] Computing n1_to_4 for num 125
[LOG] Processing adjacency and incidence matrices for num 68
[LOG] Computing n0_to_0 for num 68
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_3 for num 125
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_1 for num 68
[LOG] Computing n2_to_4 for num 125
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n3_to_4 for num 125
[LOG] Global feature for num 125
[LOG] Global feature for num 125
[LOG] Saving tensor x_0_125.pt
[LOG] Saving tensor x_1_125.pt
[LOG] Saving tensor x_2_125.pt
[LOG] Saving tensor x_3_125.pt
[LOG] Saving tensor x_4_125.pt
[LOG] Saving tensor n0_to_0_125.pt
[LOG] Saving tensor n1_to_1_125.pt
[LOG] Saving tensor n2_to_2_125.pt
[LOG] Saving tensor n3_to_3_125.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n4_to_4_125.pt
[LOG] Saving tensor n0_to_1_125.pt
[LOG] Saving tensor n0_to_2_125.pt
[LOG] Saving tensor n0_to_3_125.pt
[LOG] Saving tensor n0_to_4_125.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_2 (adjacency) for num 68
[LOG] Saving tensor n1_to_2_125.pt
[LOG] Saving tensor n1_to_3_125.pt
[LOG] Saving tensor n1_to_4_125.pt
[LOG] Saving tensor n2_to_3_125.pt
[LOG] Process 65: Created combinatorial complex for file data_524.hdf5
[LOG] Saving tensor n2_to_4_125.pt
[LOG] Saving tensor n3_to_4_125.pt
[LOG] Saving tensor global_feature_125.pt
[LOG] Process 15: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 68
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n4_to_4 (coadjacency) for num 68
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n0_to_1 for num 68
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Process 122: Created combinatorial complex for file data_959.hdf5
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n0_to_2 for num 68
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_3 for num 426
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n0_to_4 for num 426
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_3 for num 68
[LOG] Computing n1_to_2 for num 426
[LOG] Computing n0_to_4 for num 68
[LOG] Computing n1_to_2 for num 68
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 2587 Tetrahedra.
    [LOG] Generated 57 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.526315789473685
    [LOG] Max number of nodes per cluster is 74 and the number is 46
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_3 for num 68
[LOG] Computing n1_to_4 for num 68
[LOG] Computing n2_to_3 for num 68
[LOG] Computing n2_to_4 for num 68
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] We will select 501 edges and 2587 tetra
[LOG] Edges from tetra 0 and KDTree 501 with 0 edges in common.
[LOG] Computing n3_to_4 for num 68
[LOG] Global feature for num 68
[LOG] Global feature for num 68
[LOG] Saving tensor x_0_68.pt
[LOG] Saving tensor x_1_68.pt
[LOG] Saving tensor x_2_68.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 122: Calculating Neighbors
[LOG] Loading pickle file data_959.pickle
[LOG] Processing node features for num 959
[LOG] Saving tensor x_3_68.pt
[LOG] Saving tensor x_4_68.pt
[LOG] Saving tensor n0_to_0_68.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Processing edge features for num 959
[LOG] Saving tensor n1_to_1_68.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n2_to_2_68.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n3_to_3_68.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n4_to_4_68.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n0_to_1_68.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n0_to_2_68.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n0_to_3_68.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 911
[LOG] Saving tensor n0_to_4_68.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n1_to_2_68.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n4_to_4 (coadjacency) for num 911
[LOG] Saving tensor n1_to_3_68.pt
[LOG] Saving tensor n1_to_4_68.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n2_to_3_68.pt
[LOG] Computing n0_to_1 for num 911
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n2_to_4_68.pt
[LOG] Saving tensor n3_to_4_68.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 3484 Tetrahedra.
    [LOG] Generated 89 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.337078651685394
    [LOG] Max number of nodes per cluster is 107 and the number is 87
[LOG] Processing tetra features for num 959
[LOG] Process 65: Calculating Neighbors
[LOG] Loading pickle file data_524.pickle
[LOG] Processing node features for num 524
[LOG] Processing edge features for num 524
[LOG] Processing tetra features for num 524
[LOG] Saving tensor global_feature_68.pt
[LOG] Process 8: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Processing cluster features for num 524
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 524
[LOG] Processing adjacency and incidence matrices for num 524
[LOG] Computing n0_to_0 for num 524
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing cluster features for num 959
[LOG] Computing n1_to_1 for num 524
[LOG] Computing n0_to_2 for num 911
[LOG] We will select 377 edges and 3484 tetra
[LOG] Edges from tetra 0 and KDTree 1293 with 0 edges in common.
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Processing cluster features for num 959
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 524
[LOG] Processing adjacency and incidence matrices for num 959
[LOG] Computing n0_to_0 for num 959
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 524
[LOG] Computing n4_to_4 (coadjacency) for num 524
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_1 for num 524
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_2 for num 524
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_3 for num 426
[LOG] Calculating for cell ranks 0 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_4 for num 426
[LOG] Computing n2_to_3 for num 426
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_3 for num 524
[LOG] Computing n1_to_1 for num 959
[LOG] Computing n0_to_4 for num 524
[LOG] Computing n2_to_4 for num 426
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_2 for num 524
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_3_to_3.pt

    [LOG] We Currently have 940 Tetrahedra.
    [LOG] Generated 32 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.65625
    [LOG] Max number of nodes per cluster is 48 and the number is 30
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_3 for num 524
[LOG] Computing n1_to_4 for num 524
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n2_to_3 for num 524
[LOG] Computing n3_to_4 for num 426
[LOG] Global feature for num 426
[LOG] Global feature for num 426
[LOG] Saving tensor x_0_426.pt
[LOG] We will select 96 edges and 940 tetra
[LOG] Edges from tetra 0 and KDTree 1212 with 0 edges in common.
[LOG] Computing n2_to_4 for num 524
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_4 for num 524
[LOG] Global feature for num 524
[LOG] Global feature for num 524
[LOG] Saving tensor x_0_524.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2112 Tetrahedra.
    [LOG] Generated 47 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.106382978723405
    [LOG] Max number of nodes per cluster is 42 and the number is 43
[LOG] Process 45: Created combinatorial complex for file data_363.hdf5
[LOG] Saving tensor x_1_524.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor x_2_524.pt
[LOG] Saving tensor x_1_426.pt
[LOG] Saving tensor x_3_524.pt
[LOG] Saving tensor x_4_524.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor x_2_426.pt
[LOG] Saving tensor n0_to_0_524.pt
[LOG] Saving tensor x_3_426.pt
[LOG] Saving tensor n1_to_1_524.pt
[LOG] Saving tensor x_4_426.pt
[LOG] Saving tensor n0_to_0_426.pt
[LOG] Saving tensor n1_to_1_426.pt
[LOG] Saving tensor n2_to_2_426.pt
[LOG] Saving tensor n3_to_3_426.pt
[LOG] Saving tensor n4_to_4_426.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n0_to_1_426.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n0_to_2_426.pt
[LOG] Saving tensor n2_to_2_524.pt
[LOG] Saving tensor n0_to_3_426.pt
[LOG] We will select 503 edges and 2112 tetra
[LOG] Edges from tetra 0 and KDTree 593 with 0 edges in common.
[LOG] Saving tensor n0_to_4_426.pt
[LOG] Saving tensor n3_to_3_524.pt
[LOG] Saving tensor n1_to_2_426.pt
[LOG] Saving tensor n4_to_4_524.pt
[LOG] Removed 0 subset clusters.
[LOG] Process 45: Calculating Neighbors
[LOG] Loading pickle file data_363.pickle
[LOG] Processing node features for num 363
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Processing edge features for num 363
[LOG] Saving tensor n1_to_3_426.pt
[LOG] Saving tensor n0_to_1_524.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n1_to_4_426.pt
[LOG] Saving tensor n0_to_2_524.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n2_to_3_426.pt
[LOG] Saving tensor n0_to_3_524.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n2_to_4_426.pt
[LOG] Saving tensor n0_to_4_524.pt
[LOG] Saving tensor n3_to_4_426.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n1_to_2_524.pt
[LOG] Saving tensor global_feature_426.pt
[LOG] Processing tetra features for num 363
[LOG] Process 53: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n1_to_3_524.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n1_to_4_524.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n2_to_3_524.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n2_to_4_524.pt
[LOG] Saving tensor n3_to_4_524.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor global_feature_524.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Process 97: Created combinatorial complex for file data_783.hdf5
[LOG] Process 65: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Processing cluster features for num 363
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Processing cluster features for num 363
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing adjacency and incidence matrices for num 363
[LOG] Computing n0_to_0 for num 363
[LOG] Process 97: Calculating Neighbors
[LOG] Loading pickle file data_783.pickle
[LOG] Processing node features for num 783
[LOG] Processing edge features for num 783
[LOG] Processing tetra features for num 783
[LOG] Processing cluster features for num 783
[LOG] Computing n1_to_1 for num 363
[LOG] Processing cluster features for num 783
[LOG] Processing adjacency and incidence matrices for num 783
[LOG] Computing n0_to_0 for num 783
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n1_to_1 for num 783
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 783
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 783
[LOG] Computing n4_to_4 (coadjacency) for num 783
[LOG] Computing n0_to_1 for num 783
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_2 for num 783
[LOG] Process 116: Created combinatorial complex for file data_919.hdf5
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_3 for num 783
[LOG] Computing n0_to_4 for num 783
[LOG] Computing n1_to_2 for num 783
[LOG] Computing n2_to_2 (adjacency) for num 363
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_3 for num 783
[LOG] Computing n1_to_4 for num 783
[LOG] Computing n2_to_3 for num 783
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_3 for num 911
[LOG] Computing n2_to_4 for num 783
[LOG] Computing n3_to_4 for num 783
[LOG] Global feature for num 783
[LOG] Global feature for num 783
[LOG] Saving tensor x_0_783.pt
[LOG] Saving tensor x_1_783.pt
[LOG] Saving tensor x_2_783.pt
[LOG] Process 116: Calculating Neighbors
[LOG] Loading pickle file data_919.pickle
[LOG] Processing node features for num 919
[LOG] Saving tensor x_3_783.pt
[LOG] Saving tensor x_4_783.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing edge features for num 919
[LOG] Saving tensor n0_to_0_783.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_4 for num 911
[LOG] Processing tetra features for num 919
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_2 for num 911
[LOG] Saving tensor n1_to_1_783.pt
[LOG] Saving tensor n2_to_2_783.pt
[LOG] Processing cluster features for num 919
[LOG] Saving tensor n3_to_3_783.pt
[LOG] Saving tensor n4_to_4_783.pt
[LOG] Saving tensor n0_to_1_783.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n0_to_2_783.pt
[LOG] Saving tensor n0_to_3_783.pt
[LOG] Processing cluster features for num 919
[LOG] Removed 1 subset clusters.
[LOG] Processing adjacency and incidence matrices for num 919
[LOG] Computing n0_to_0 for num 919
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n0_to_4_783.pt
[LOG] Computing n1_to_1 for num 919
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n1_to_2_783.pt
[LOG] Saving tensor n1_to_3_783.pt
[LOG] Saving tensor n1_to_4_783.pt
[LOG] Saving tensor n2_to_3_783.pt
[LOG] GENERATED TETRA
[LOG] Computing n3_to_3 (adjacency) for num 363
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n4_to_4 (coadjacency) for num 363
[LOG] Computing n0_to_1 for num 363
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 17: Created combinatorial complex for file data_139.hdf5
[LOG] Calculating for cell ranks 1 and 1
[LOG] GENERATED TETRA
[LOG] Computing n0_to_2 for num 363
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n2_to_4_783.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 17: Calculating Neighbors
[LOG] Loading pickle file data_139.pickle
[LOG] Processing node features for num 139
[LOG] Processing edge features for num 139
[LOG] Saving tensor n3_to_4_783.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor global_feature_783.pt
[LOG] Process 97: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Processing tetra features for num 139
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 919
[LOG] Processing cluster features for num 139
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 139
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Processing adjacency and incidence matrices for num 139
[LOG] Computing n0_to_0 for num 139
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n1_to_1 for num 139
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_3 for num 363
[LOG] Computing n0_to_4 for num 363
[LOG] Computing n1_to_2 for num 363
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1833 Tetrahedra.
    [LOG] Generated 67 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.253731343283581
    [LOG] Max number of nodes per cluster is 34 and the number is 63
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 977 Tetrahedra.
    [LOG] Generated 29 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.551724137931034
    [LOG] Max number of nodes per cluster is 44 and the number is 27
[LOG] We will select 164 edges and 977 tetra
[LOG] Edges from tetra 0 and KDTree 1332 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] We will select 658 edges and 1833 tetra
[LOG] Edges from tetra 0 and KDTree 658 with 0 edges in common.
[LOG] Computing n2_to_2 (adjacency) for num 139
[LOG] Computing n1_to_3 for num 911
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_4 for num 911
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_3 for num 911
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_3 for num 363
[LOG] Removed 0 subset clusters.
[LOG] Computing n1_to_4 for num 363
[LOG] Computing n2_to_3 for num 363
[LOG] Computing n3_to_3 (adjacency) for num 139
[LOG] Computing n4_to_4 (coadjacency) for num 139
[LOG] Computing n0_to_1 for num 139
[LOG] Computing n2_to_4 for num 911
[LOG] Computing n2_to_4 for num 363
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_2 for num 139
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 100: Created combinatorial complex for file data_807.hdf5
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_4 for num 363
[LOG] Calculating for cell ranks 3 and 3
[LOG] Global feature for num 363
[LOG] Global feature for num 363
[LOG] Saving tensor x_0_363.pt
[LOG] Saving tensor x_1_363.pt
[LOG] Saving tensor x_2_363.pt
[LOG] Saving tensor x_3_363.pt
[LOG] Saving tensor x_4_363.pt
[LOG] Saving tensor n0_to_0_363.pt
[LOG] Saving tensor n1_to_1_363.pt
[LOG] Saving tensor n2_to_2_363.pt
[LOG] Saving tensor n3_to_3_363.pt
[LOG] Saving tensor n4_to_4_363.pt
[LOG] Saving tensor n0_to_1_363.pt
[LOG] Saving tensor n0_to_2_363.pt
[LOG] Saving tensor n0_to_3_363.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n0_to_4_363.pt
[LOG] Saving tensor n1_to_2_363.pt
[LOG] Saving tensor n1_to_3_363.pt
[LOG] Saving tensor n1_to_4_363.pt
[LOG] Saving tensor n2_to_3_363.pt
[LOG] Process 100: Calculating Neighbors
[LOG] Loading pickle file data_807.pickle
[LOG] Processing node features for num 807
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n2_to_4_363.pt
[LOG] Processing edge features for num 807
[LOG] Saving tensor n3_to_4_363.pt
[LOG] Saving tensor global_feature_363.pt
[LOG] Process 45: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing tetra features for num 807
[LOG] Computing n3_to_4 for num 911
[LOG] Global feature for num 911
[LOG] Global feature for num 911
[LOG] Computing n3_to_3 (adjacency) for num 919
[LOG] Saving tensor x_0_911.pt
[LOG] Saving tensor x_1_911.pt
[LOG] Saving tensor x_2_911.pt
[LOG] Computing n4_to_4 (coadjacency) for num 919
[LOG] Saving tensor x_3_911.pt
[LOG] Computing n0_to_1 for num 919
[LOG] Processing cluster features for num 807
[LOG] Saving tensor x_4_911.pt
[LOG] Saving tensor n0_to_0_911.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n1_to_1_911.pt
[LOG] Saving tensor n2_to_2_911.pt
[LOG] Processing cluster features for num 807
[LOG] Processing adjacency and incidence matrices for num 807
[LOG] Computing n0_to_0 for num 807
[LOG] GENERATED TETRA
[LOG] Computing n1_to_1 for num 807
[LOG] Computing n0_to_2 for num 919
[LOG] Saving tensor n3_to_3_911.pt
[LOG] Saving tensor n4_to_4_911.pt
[LOG] Saving tensor n0_to_1_911.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n0_to_2_911.pt
[LOG] Computing n2_to_2 (adjacency) for num 807
[LOG] Computing n0_to_3 for num 139
[LOG] Computing n0_to_4 for num 139
[LOG] Computing n3_to_3 (adjacency) for num 807
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n4_to_4 (coadjacency) for num 807
[LOG] Computing n0_to_1 for num 807
[LOG] Computing n1_to_2 for num 139
[LOG] Computing n0_to_2 for num 807
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n0_to_3_911.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n0_to_4_911.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n1_to_2_911.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n1_to_3_911.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n1_to_4_911.pt
[LOG] Saving tensor n2_to_3_911.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n2_to_4_911.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n3_to_4_911.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor global_feature_911.pt
[LOG] Process 115: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_3 for num 807
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n0_to_4 for num 807
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_2 for num 807
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_3 for num 807
[LOG] Computing n1_to_4 for num 807
[LOG] Computing n2_to_3 for num 807
[LOG] Computing n1_to_3 for num 139
[LOG] Computing n2_to_4 for num 807
[LOG] Computing n1_to_4 for num 139
[LOG] Removed 0 subset clusters.
[LOG] Computing n2_to_3 for num 139
[LOG] Computing n3_to_4 for num 807
[LOG] Global feature for num 807
[LOG] Global feature for num 807
[LOG] Saving tensor x_0_807.pt
[LOG] Saving tensor x_1_807.pt
[LOG] Saving tensor x_2_807.pt
[LOG] Saving tensor x_3_807.pt
[LOG] Saving tensor x_4_807.pt
[LOG] Saving tensor n0_to_0_807.pt
[LOG] Saving tensor n1_to_1_807.pt
[LOG] Saving tensor n2_to_2_807.pt
[LOG] Saving tensor n3_to_3_807.pt
[LOG] Saving tensor n4_to_4_807.pt
[LOG] Saving tensor n0_to_1_807.pt
[LOG] Computing n2_to_4 for num 139
[LOG] Saving tensor n0_to_2_807.pt
[LOG] Saving tensor n0_to_3_807.pt
[LOG] Saving tensor n0_to_4_807.pt
[LOG] Saving tensor n1_to_2_807.pt
[LOG] Saving tensor n1_to_3_807.pt
[LOG] Saving tensor n1_to_4_807.pt
[LOG] Computing n3_to_4 for num 139
[LOG] Saving tensor n2_to_3_807.pt
[LOG] Global feature for num 139
[LOG] Global feature for num 139
[LOG] Saving tensor x_0_139.pt
[LOG] Saving tensor n2_to_4_807.pt
[LOG] Saving tensor x_1_139.pt
[LOG] Saving tensor x_2_139.pt
[LOG] Saving tensor n3_to_4_807.pt
[LOG] Saving tensor x_3_139.pt
[LOG] Saving tensor global_feature_807.pt
[LOG] Saving tensor x_4_139.pt
[LOG] Process 100: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_0_139.pt
[LOG] Saving tensor n1_to_1_139.pt
[LOG] Saving tensor n2_to_2_139.pt
[LOG] Saving tensor n3_to_3_139.pt
[LOG] Saving tensor n4_to_4_139.pt
[LOG] Saving tensor n0_to_1_139.pt
[LOG] Saving tensor n0_to_2_139.pt
[LOG] Saving tensor n0_to_3_139.pt
[LOG] Saving tensor n0_to_4_139.pt
[LOG] Saving tensor n1_to_2_139.pt
[LOG] Saving tensor n1_to_3_139.pt
[LOG] Saving tensor n1_to_4_139.pt
[LOG] Saving tensor n2_to_3_139.pt
[LOG] Saving tensor n2_to_4_139.pt
[LOG] Saving tensor n3_to_4_139.pt
[LOG] Saving tensor global_feature_139.pt
[LOG] Process 17: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] Process 73: Created combinatorial complex for file data_587.hdf5
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_3 for num 919
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 73: Calculating Neighbors
[LOG] Loading pickle file data_587.pickle
[LOG] Processing node features for num 587
[LOG] Processing edge features for num 587
[LOG] Computing n0_to_4 for num 919
[LOG] Processing tetra features for num 587
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_2 for num 919
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing cluster features for num 587
[LOG] Processing cluster features for num 587
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing adjacency and incidence matrices for num 587
[LOG] Computing n0_to_0 for num 587
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_2 (adjacency) for num 959
[LOG] Computing n1_to_1 for num 587
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n1_to_3 for num 919
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_4 for num 919
[LOG] Computing n2_to_3 for num 919
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_2 (adjacency) for num 587
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n2_to_4 for num 919
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_4 for num 919
[LOG] Global feature for num 919
[LOG] Global feature for num 919
[LOG] Saving tensor x_0_919.pt
[LOG] Saving tensor x_1_919.pt
[LOG] Saving tensor x_2_919.pt
[LOG] Saving tensor x_3_919.pt
[LOG] Saving tensor x_4_919.pt
[LOG] Saving tensor n0_to_0_919.pt
[LOG] Saving tensor n1_to_1_919.pt
[LOG] Saving tensor n2_to_2_919.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n3_to_3_919.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n3_to_3 (adjacency) for num 587
[LOG] Computing n4_to_4 (coadjacency) for num 587
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n4_to_4_919.pt
[LOG] Computing n0_to_1 for num 587
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n0_to_1_919.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n0_to_2_919.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n0_to_3_919.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n0_to_4_919.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n1_to_2_919.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n1_to_3_919.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n1_to_4_919.pt
[LOG] Saving tensor n2_to_3_919.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n2_to_4_919.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n3_to_4_919.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor global_feature_919.pt
[LOG] Computing n0_to_2 for num 587
[LOG] Process 116: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n0_to_3 for num 587
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_4 for num 587
[LOG] Computing n1_to_2 for num 587
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n1_to_3 for num 587
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n1_to_4 for num 587
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n2_to_3 for num 587
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 3033 Tetrahedra.
    [LOG] Generated 86 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.348837209302326
    [LOG] Max number of nodes per cluster is 53 and the number is 2
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_4 for num 587
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_4 for num 587
[LOG] Global feature for num 587
[LOG] Global feature for num 587
[LOG] Saving tensor x_0_587.pt
[LOG] Saving tensor x_1_587.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor x_2_587.pt
[LOG] Saving tensor x_3_587.pt
[LOG] Saving tensor x_4_587.pt
[LOG] Saving tensor n0_to_0_587.pt
[LOG] Saving tensor n1_to_1_587.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n2_to_2_587.pt
[LOG] Saving tensor n3_to_3_587.pt
[LOG] Saving tensor n4_to_4_587.pt
[LOG] Saving tensor n0_to_1_587.pt
[LOG] Saving tensor n0_to_2_587.pt
[LOG] Saving tensor n0_to_3_587.pt
[LOG] Saving tensor n0_to_4_587.pt
[LOG] Saving tensor n1_to_2_587.pt
[LOG] Saving tensor n1_to_3_587.pt
[LOG] Saving tensor n1_to_4_587.pt
[LOG] Saving tensor n2_to_3_587.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n2_to_4_587.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n3_to_4_587.pt
[LOG] Saving tensor global_feature_587.pt
[LOG] Process 73: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] We will select 643 edges and 3033 tetra
[LOG] Edges from tetra 0 and KDTree 1277 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1631 Tetrahedra.
    [LOG] Generated 50 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.36
    [LOG] Max number of nodes per cluster is 88 and the number is 7
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] We will select 272 edges and 1631 tetra
[LOG] Edges from tetra 0 and KDTree 5286 with 0 edges in common.
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1280 Tetrahedra.
    [LOG] Generated 40 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.4
    [LOG] Max number of nodes per cluster is 24 and the number is 15
[LOG] Calculating for cell ranks 2 and 3
[LOG] We will select 142 edges and 1280 tetra
[LOG] Edges from tetra 0 and KDTree 142 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1661 Tetrahedra.
    [LOG] Generated 46 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.543478260869565
    [LOG] Max number of nodes per cluster is 57 and the number is 44
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] We will select 147 edges and 1661 tetra
[LOG] Edges from tetra 0 and KDTree 1039 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1193 Tetrahedra.
    [LOG] Generated 40 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.175
    [LOG] Max number of nodes per cluster is 34 and the number is 6
[LOG] Removed 1 subset clusters.
[LOG] We will select 178 edges and 1193 tetra
[LOG] Edges from tetra 0 and KDTree 951 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 25: Created combinatorial complex for file data_203.hdf5
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 25: Calculating Neighbors
[LOG] Loading pickle file data_203.pickle
[LOG] Processing node features for num 203
[LOG] Process 60: Created combinatorial complex for file data_482.hdf5
[LOG] Processing edge features for num 203
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 104: Created combinatorial complex for file data_836.hdf5
[LOG] Processing tetra features for num 203
[LOG] Processing cluster features for num 203
[LOG] Removed 0 subset clusters.
[LOG] Process 104: Calculating Neighbors
[LOG] Loading pickle file data_836.pickle
[LOG] Processing node features for num 836
[LOG] Processing edge features for num 836
[LOG] Processing cluster features for num 203
[LOG] Processing tetra features for num 836
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing adjacency and incidence matrices for num 203
[LOG] Computing n0_to_0 for num 203
[LOG] Processing cluster features for num 836
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 836
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 7378 Tetrahedra.
    [LOG] Generated 166 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.5
    [LOG] Max number of nodes per cluster is 325 and the number is 164
[LOG] Processing adjacency and incidence matrices for num 836
[LOG] Computing n0_to_0 for num 836
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n1_to_1 for num 836
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Removed 3 subset clusters.
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Process 60: Calculating Neighbors
[LOG] Loading pickle file data_482.pickle
[LOG] Processing node features for num 482
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Processing edge features for num 482
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Process 95: Created combinatorial complex for file data_766.hdf5
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 836
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing tetra features for num 482
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 836
[LOG] Computing n1_to_1 for num 203
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n4_to_4 (coadjacency) for num 836
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n0_to_1 for num 836
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n0_to_2 for num 836
[LOG] Process 47: Created combinatorial complex for file data_381.hdf5
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 482
[LOG] Process 95: Calculating Neighbors
[LOG] Loading pickle file data_766.pickle
[LOG] Processing node features for num 766
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing edge features for num 766
[LOG] Computing n3_to_3 (adjacency) for num 959
[LOG] Processing tetra features for num 766
[LOG] Processing cluster features for num 482
[LOG] Computing n4_to_4 (coadjacency) for num 959
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_1 for num 959
[LOG] Processing adjacency and incidence matrices for num 482
[LOG] Computing n0_to_0 for num 482
[LOG] Processing cluster features for num 766
[LOG] Process 47: Calculating Neighbors
[LOG] Loading pickle file data_381.pickle
[LOG] Processing node features for num 381
[LOG] Processing edge features for num 381
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing cluster features for num 766
[LOG] Processing tetra features for num 381
[LOG] Computing n2_to_2 (adjacency) for num 203
[LOG] Processing adjacency and incidence matrices for num 766
[LOG] Computing n0_to_0 for num 766
[LOG] Computing n0_to_3 for num 836
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_4 for num 836
[LOG] Processing cluster features for num 381
[LOG] Computing n1_to_2 for num 836
[LOG] Processing cluster features for num 381
[LOG] Computing n1_to_1 for num 766
[LOG] Processing adjacency and incidence matrices for num 381
[LOG] Computing n0_to_0 for num 381
[LOG] Computing n1_to_1 for num 381
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Computing n1_to_3 for num 836
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n1_to_4 for num 836
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n2_to_3 for num 836
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n2_to_4 for num 836
[LOG] Computing n2_to_2 (adjacency) for num 766
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n1_to_1 for num 482
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n3_to_4 for num 836
[LOG] Computing n2_to_2 (adjacency) for num 381
[LOG] We will select 2998 edges and 7378 tetra
[LOG] Edges from tetra 0 and KDTree 6346 with 0 edges in common.
[LOG] Global feature for num 836
[LOG] Global feature for num 836
[LOG] Saving tensor x_0_836.pt
[LOG] Computing n3_to_3 (adjacency) for num 203
[LOG] Computing n4_to_4 (coadjacency) for num 203
[LOG] Computing n0_to_1 for num 203
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1057 Tetrahedra.
    [LOG] Generated 27 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.333333333333332
    [LOG] Max number of nodes per cluster is 76 and the number is 25
[LOG] Computing n3_to_3 (adjacency) for num 381
[LOG] Computing n4_to_4 (coadjacency) for num 381
[LOG] Computing n0_to_1 for num 381
[LOG] Computing n0_to_2 for num 381
[LOG] We will select 202 edges and 1057 tetra
[LOG] Edges from tetra 0 and KDTree 2862 with 0 edges in common.
[LOG] Saving tensor x_1_836.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor x_2_836.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor x_3_836.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor x_4_836.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n0_to_0_836.pt
[LOG] Saving tensor n1_to_1_836.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n2_to_2_836.pt
[LOG] Computing n3_to_3 (adjacency) for num 766
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n3_to_3_836.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n4_to_4 (coadjacency) for num 766
[LOG] Computing n0_to_2 for num 203
[LOG] Saving tensor n4_to_4_836.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n0_to_1 for num 766
[LOG] Saving tensor n0_to_1_836.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n0_to_2_836.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n0_to_3_836.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n0_to_4_836.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n1_to_2_836.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n1_to_3_836.pt
[LOG] Computing n0_to_2 for num 766
[LOG] Saving tensor n1_to_4_836.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n2_to_3_836.pt
[LOG] Saving tensor n2_to_4_836.pt
[LOG] Saving tensor n3_to_4_836.pt
[LOG] Saving tensor global_feature_836.pt
[LOG] Process 104: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 381
[LOG] Computing n0_to_4 for num 381
[LOG] Computing n1_to_2 for num 381
[LOG] Computing n1_to_3 for num 381
[LOG] Computing n1_to_4 for num 381
[LOG] Computing n2_to_3 for num 381
[LOG] Computing n2_to_4 for num 381
[LOG] Computing n3_to_4 for num 381
[LOG] Global feature for num 381
[LOG] Global feature for num 381
[LOG] Saving tensor x_0_381.pt
[LOG] Saving tensor x_1_381.pt
[LOG] Saving tensor x_2_381.pt
[LOG] Saving tensor x_3_381.pt
[LOG] Saving tensor x_4_381.pt
[LOG] Saving tensor n0_to_0_381.pt
[LOG] Saving tensor n1_to_1_381.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n2_to_2_381.pt
[LOG] Saving tensor n3_to_3_381.pt
[LOG] Saving tensor n4_to_4_381.pt
[LOG] Saving tensor n0_to_1_381.pt
[LOG] Saving tensor n0_to_2_381.pt
[LOG] Saving tensor n0_to_3_381.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n0_to_4_381.pt
[LOG] Saving tensor n1_to_2_381.pt
[LOG] Computing n0_to_2 for num 959
[LOG] Saving tensor n1_to_3_381.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n1_to_4_381.pt
[LOG] Saving tensor n2_to_3_381.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n2_to_4_381.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n3_to_4_381.pt
[LOG] Saving tensor global_feature_381.pt
[LOG] Process 47: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_3 for num 766
[LOG] Process 63: Created combinatorial complex for file data_508.hdf5
[LOG] Computing n2_to_2 (adjacency) for num 482
[LOG] Computing n0_to_4 for num 766
[LOG] Computing n1_to_2 for num 766
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 63: Calculating Neighbors
[LOG] Loading pickle file data_508.pickle
[LOG] Processing node features for num 508
[LOG] Processing edge features for num 508
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing tetra features for num 508
[LOG] Processing cluster features for num 508
[LOG] Processing cluster features for num 508
[LOG] Processing adjacency and incidence matrices for num 508
[LOG] Computing n0_to_0 for num 508
[LOG] Computing n1_to_1 for num 508
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_3 for num 766
[LOG] Computing n1_to_4 for num 766
[LOG] Computing n2_to_3 for num 766
[LOG] Computing n2_to_4 for num 766
[LOG] Computing n3_to_4 for num 766
[LOG] Global feature for num 766
[LOG] Global feature for num 766
[LOG] Saving tensor x_0_766.pt
[LOG] Saving tensor x_1_766.pt
[LOG] Saving tensor x_2_766.pt
[LOG] Saving tensor x_3_766.pt
[LOG] Saving tensor x_4_766.pt
[LOG] Saving tensor n0_to_0_766.pt
[LOG] Saving tensor n1_to_1_766.pt
[LOG] Saving tensor n2_to_2_766.pt
[LOG] Saving tensor n3_to_3_766.pt
[LOG] Saving tensor n4_to_4_766.pt
[LOG] Saving tensor n0_to_1_766.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 3053 Tetrahedra.
    [LOG] Generated 62 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.838709677419354
    [LOG] Max number of nodes per cluster is 67 and the number is 58
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_2 (adjacency) for num 508
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_3 (adjacency) for num 508
[LOG] Computing n4_to_4 (coadjacency) for num 508
[LOG] Computing n0_to_1 for num 508
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n0_to_2_766.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1966 Tetrahedra.
    [LOG] Generated 61 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.459016393442623
    [LOG] Max number of nodes per cluster is 43 and the number is 42
[LOG] Saving tensor n0_to_3_766.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n0_to_4_766.pt
[LOG] Computing n0_to_2 for num 508
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n1_to_2_766.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n1_to_3_766.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n1_to_4_766.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n2_to_3_766.pt
[LOG] We will select 517 edges and 3053 tetra
[LOG] Edges from tetra 0 and KDTree 1829 with 0 edges in common.
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] We will select 297 edges and 1966 tetra
[LOG] Edges from tetra 0 and KDTree 1182 with 0 edges in common.
[LOG] Computing n0_to_3 for num 203
[LOG] Saving tensor n2_to_4_766.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n3_to_4_766.pt
[LOG] Computing n0_to_4 for num 203
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_2 for num 203
[LOG] Computing n0_to_3 for num 508
[LOG] Computing n0_to_4 for num 508
[LOG] Computing n1_to_2 for num 508
[LOG] Computing n3_to_3 (adjacency) for num 482
[LOG] Computing n4_to_4 (coadjacency) for num 482
[LOG] Computing n0_to_1 for num 482
[LOG] Saving tensor global_feature_766.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Process 95: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n1_to_3 for num 508
[LOG] Computing n1_to_4 for num 508
[LOG] Computing n2_to_3 for num 508
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_4 for num 508
[LOG] Computing n3_to_4 for num 508
[LOG] Global feature for num 508
[LOG] Global feature for num 508
[LOG] Saving tensor x_0_508.pt
[LOG] Computing n1_to_3 for num 203
[LOG] Computing n1_to_4 for num 203
[LOG] Computing n2_to_3 for num 203
[LOG] Computing n2_to_4 for num 203
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor x_1_508.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor x_2_508.pt
[LOG] Saving tensor x_3_508.pt
[LOG] Computing n0_to_2 for num 482
[LOG] Saving tensor x_4_508.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n0_to_0_508.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n3_to_4 for num 203
[LOG] Global feature for num 203
[LOG] Global feature for num 203
[LOG] Saving tensor x_0_203.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor x_1_203.pt
[LOG] Saving tensor n1_to_1_508.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor x_2_203.pt
[LOG] Saving tensor x_3_203.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n2_to_2_508.pt
[LOG] Saving tensor x_4_203.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n3_to_3_508.pt
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n0_to_0_203.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n4_to_4_508.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n0_to_1_508.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n1_to_1_203.pt
[LOG] Saving tensor n0_to_2_508.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n2_to_2_203.pt
[LOG] Saving tensor n0_to_3_508.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n0_to_4_508.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n1_to_2_508.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n1_to_3_508.pt
[LOG] Saving tensor n3_to_3_203.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n1_to_4_508.pt
[LOG] Saving tensor n4_to_4_203.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n2_to_3_508.pt
[LOG] Saving tensor n0_to_1_203.pt
[LOG] Saving tensor n2_to_4_508.pt
[LOG] Saving tensor n3_to_4_508.pt
[LOG] Process 64: Created combinatorial complex for file data_516.hdf5
[LOG] Saving tensor n0_to_2_203.pt
[LOG] Saving tensor global_feature_508.pt
[LOG] GENERATED TETRA
[LOG] Process 63: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_3_203.pt
[LOG] Saving tensor n0_to_4_203.pt
[LOG] Saving tensor n1_to_2_203.pt
[LOG] Saving tensor n1_to_3_203.pt
[LOG] Saving tensor n1_to_4_203.pt
[LOG] Saving tensor n2_to_3_203.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n2_to_4_203.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n3_to_4_203.pt
[LOG] Saving tensor global_feature_203.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Process 25: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1346 Tetrahedra.
    [LOG] Generated 43 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.023255813953488
    [LOG] Max number of nodes per cluster is 65 and the number is 39
[LOG] Process 64: Calculating Neighbors
[LOG] Loading pickle file data_516.pickle
[LOG] Processing node features for num 516
[LOG] We will select 390 edges and 1346 tetra
[LOG] Edges from tetra 0 and KDTree 1098 with 0 edges in common.
[LOG] Processing edge features for num 516
[LOG] Removed 1 subset clusters.
[LOG] Processing tetra features for num 516
[LOG] Processing cluster features for num 516
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 516
[LOG] Processing adjacency and incidence matrices for num 516
[LOG] Computing n0_to_0 for num 516
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_1 for num 516
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_3 for num 482
[LOG] Computing n0_to_4 for num 482
[LOG] Process 123: Created combinatorial complex for file data_967.hdf5
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_2 for num 482
[LOG] Removed 0 subset clusters.
[LOG] Computing n2_to_2 (adjacency) for num 516
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 123: Calculating Neighbors
[LOG] Loading pickle file data_967.pickle
[LOG] Processing node features for num 967
[LOG] Process 39: Created combinatorial complex for file data_315.hdf5
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing edge features for num 967
[LOG] Computing n3_to_3 (adjacency) for num 516
[LOG] Computing n4_to_4 (coadjacency) for num 516
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_1 for num 516
[LOG] Processing tetra features for num 967
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1660 Tetrahedra.
    [LOG] Generated 36 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.38888888888889
    [LOG] Max number of nodes per cluster is 54 and the number is 13
[LOG] Computing n0_to_2 for num 516
[LOG] Process 39: Calculating Neighbors
[LOG] Loading pickle file data_315.pickle
[LOG] Processing node features for num 315
[LOG] Processing edge features for num 315
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing cluster features for num 967
[LOG] Processing tetra features for num 315
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_3 for num 959
[LOG] We will select 193 edges and 1660 tetra
[LOG] Edges from tetra 0 and KDTree 977 with 0 edges in common.
[LOG] Processing cluster features for num 967
[LOG] Processing cluster features for num 315
[LOG] Processing cluster features for num 315
[LOG] Processing adjacency and incidence matrices for num 967
[LOG] Computing n0_to_0 for num 967
[LOG] Processing adjacency and incidence matrices for num 315
[LOG] Computing n0_to_0 for num 315
[LOG] Computing n0_to_4 for num 959
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_1 for num 315
[LOG] Computing n1_to_2 for num 959
[LOG] Computing n1_to_1 for num 967
[LOG] Computing n1_to_3 for num 482
[LOG] Computing n1_to_4 for num 482
[LOG] Computing n2_to_3 for num 482
[LOG] Computing n2_to_2 (adjacency) for num 315
[LOG] Computing n2_to_4 for num 482
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 315
[LOG] Computing n4_to_4 (coadjacency) for num 315
[LOG] Computing n0_to_1 for num 315
[LOG] Computing n3_to_4 for num 482
[LOG] Global feature for num 482
[LOG] Global feature for num 482
[LOG] Saving tensor x_0_482.pt
[LOG] Saving tensor x_1_482.pt
[LOG] Saving tensor x_2_482.pt
[LOG] Saving tensor x_3_482.pt
[LOG] Saving tensor x_4_482.pt
[LOG] Saving tensor n0_to_0_482.pt
[LOG] Saving tensor n1_to_1_482.pt
[LOG] Saving tensor n2_to_2_482.pt
[LOG] Saving tensor n3_to_3_482.pt
[LOG] Saving tensor n4_to_4_482.pt
[LOG] Saving tensor n0_to_1_482.pt
[LOG] Saving tensor n0_to_2_482.pt
[LOG] Computing n0_to_2 for num 315
[LOG] Saving tensor n0_to_3_482.pt
[LOG] Saving tensor n0_to_4_482.pt
[LOG] Saving tensor n1_to_2_482.pt
[LOG] Saving tensor n1_to_3_482.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n1_to_4_482.pt
[LOG] Saving tensor n2_to_3_482.pt
[LOG] Saving tensor n2_to_4_482.pt
[LOG] Saving tensor n3_to_4_482.pt
[LOG] Removed 2 subset clusters.
[LOG] Saving tensor global_feature_482.pt
[LOG] Process 60: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_3 for num 516
[LOG] Computing n0_to_4 for num 516
[LOG] Computing n1_to_2 for num 516
[LOG] Computing n2_to_2 (adjacency) for num 967
[LOG] Process 0: Created combinatorial complex for file data_7.hdf5
[LOG] Calculating for cell ranks 0 and 2
[LOG] GENERATED TETRA
[LOG] Computing n0_to_3 for num 315
[LOG] Computing n1_to_3 for num 516
[LOG] Computing n1_to_4 for num 516
[LOG] Process 0: Calculating Neighbors
[LOG] Loading pickle file data_7.pickle
[LOG] Processing node features for num 7
[LOG] Computing n0_to_4 for num 315
[LOG] Computing n2_to_3 for num 516
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing edge features for num 7
[LOG] Computing n1_to_2 for num 315
[LOG] Processing tetra features for num 7
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_4 for num 516
[LOG] Processing cluster features for num 7
[LOG] Computing n3_to_4 for num 516
[LOG] Global feature for num 516
[LOG] Global feature for num 516
[LOG] Saving tensor x_0_516.pt
[LOG] Processing cluster features for num 7
[LOG] Saving tensor x_1_516.pt
[LOG] Saving tensor x_2_516.pt
[LOG] Saving tensor x_3_516.pt
[LOG] Saving tensor x_4_516.pt
[LOG] Saving tensor n0_to_0_516.pt
[LOG] Saving tensor n1_to_1_516.pt
[LOG] Saving tensor n2_to_2_516.pt
[LOG] Processing adjacency and incidence matrices for num 7
[LOG] Computing n0_to_0 for num 7
[LOG] Saving tensor n3_to_3_516.pt
[LOG] Saving tensor n4_to_4_516.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n0_to_1_516.pt
[LOG] Saving tensor n0_to_2_516.pt
[LOG] Saving tensor n0_to_3_516.pt
[LOG] Saving tensor n0_to_4_516.pt
[LOG] Saving tensor n1_to_2_516.pt
[LOG] Saving tensor n1_to_3_516.pt
[LOG] Saving tensor n1_to_4_516.pt
[LOG] Computing n1_to_1 for num 7
[LOG] Saving tensor n2_to_3_516.pt
[LOG] Saving tensor n2_to_4_516.pt
[LOG] Removed 4 subset clusters.
[LOG] Saving tensor n3_to_4_516.pt
[LOG] Saving tensor global_feature_516.pt
[LOG] Process 64: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_3 for num 315
[LOG] Computing n1_to_4 for num 315
[LOG] Computing n2_to_3 for num 315
[LOG] Computing n2_to_4 for num 315
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_4 for num 315
[LOG] Global feature for num 315
[LOG] Global feature for num 315
[LOG] Saving tensor x_0_315.pt
[LOG] Saving tensor x_1_315.pt
[LOG] Saving tensor x_2_315.pt
[LOG] Computing n2_to_2 (adjacency) for num 7
[LOG] Saving tensor x_3_315.pt
[LOG] Saving tensor x_4_315.pt
[LOG] Saving tensor n0_to_0_315.pt
[LOG] Saving tensor n1_to_1_315.pt
[LOG] Saving tensor n2_to_2_315.pt
[LOG] Saving tensor n3_to_3_315.pt
[LOG] Saving tensor n4_to_4_315.pt
[LOG] Saving tensor n0_to_1_315.pt
[LOG] Saving tensor n0_to_2_315.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1315 Tetrahedra.
    [LOG] Generated 29 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 20.96551724137931
    [LOG] Max number of nodes per cluster is 125 and the number is 27
[LOG] Saving tensor n0_to_3_315.pt
[LOG] Saving tensor n0_to_4_315.pt
[LOG] Saving tensor n1_to_2_315.pt
[LOG] Saving tensor n1_to_3_315.pt
[LOG] Computing n3_to_3 (adjacency) for num 7
[LOG] Saving tensor n1_to_4_315.pt
[LOG] Computing n4_to_4 (coadjacency) for num 7
[LOG] Saving tensor n2_to_3_315.pt
[LOG] Computing n0_to_1 for num 7
[LOG] Saving tensor n2_to_4_315.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n3_to_4_315.pt
[LOG] Saving tensor global_feature_315.pt
[LOG] Process 39: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_2 for num 7
[LOG] We will select 91 edges and 1315 tetra
[LOG] Edges from tetra 0 and KDTree 5098 with 0 edges in common.
[LOG] Computing n3_to_3 (adjacency) for num 967
[LOG] Computing n4_to_4 (coadjacency) for num 967
[LOG] Computing n0_to_1 for num 967
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 915 Tetrahedra.
    [LOG] Generated 24 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.833333333333334
    [LOG] Max number of nodes per cluster is 37 and the number is 19
[LOG] GENERATED TETRA
[LOG] Computing n0_to_2 for num 967
[LOG] We will select 81 edges and 915 tetra
[LOG] Edges from tetra 0 and KDTree 979 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_3 for num 7
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_4 for num 7
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 0 subset clusters.
[LOG] Computing n1_to_2 for num 7
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_3 for num 7
[LOG] Computing n1_to_4 for num 7
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_3 for num 7
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_4 for num 7
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 42: Created combinatorial complex for file data_342.hdf5
[LOG] Process 69: Created combinatorial complex for file data_559.hdf5
[LOG] Computing n3_to_4 for num 7
[LOG] Global feature for num 7
[LOG] Global feature for num 7
[LOG] Saving tensor x_0_7.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor x_1_7.pt
[LOG] Saving tensor x_2_7.pt
[LOG] Saving tensor x_3_7.pt
[LOG] Saving tensor x_4_7.pt
[LOG] Saving tensor n0_to_0_7.pt
[LOG] Saving tensor n1_to_1_7.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n2_to_2_7.pt
[LOG] Saving tensor n3_to_3_7.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n4_to_4_7.pt
[LOG] Saving tensor n0_to_1_7.pt
[LOG] Saving tensor n0_to_2_7.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n0_to_3_7.pt
[LOG] Saving tensor n0_to_4_7.pt
[LOG] Saving tensor n1_to_2_7.pt
[LOG] Saving tensor n1_to_3_7.pt
[LOG] Saving tensor n1_to_4_7.pt
[LOG] Saving tensor n2_to_3_7.pt
[LOG] Process 42: Calculating Neighbors
[LOG] Loading pickle file data_342.pickle
[LOG] Processing node features for num 342
[LOG] Saving tensor n2_to_4_7.pt
[LOG] Processing edge features for num 342
[LOG] Saving tensor n3_to_4_7.pt
[LOG] Saving tensor global_feature_7.pt
[LOG] Process 0: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing tetra features for num 342
[LOG] Process 69: Calculating Neighbors
[LOG] Loading pickle file data_559.pickle
[LOG] Processing node features for num 559
[LOG] Processing cluster features for num 342
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Processing edge features for num 559
[LOG] Processing cluster features for num 342
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Processing adjacency and incidence matrices for num 342
[LOG] Computing n0_to_0 for num 342
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Processing tetra features for num 559
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n1_to_1 for num 342
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Process 70: Created combinatorial complex for file data_561.hdf5
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Processing cluster features for num 559
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n2_to_2 (adjacency) for num 342
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 559
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 559
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n0_to_0 for num 559
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 342
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Computing n4_to_4 (coadjacency) for num 342
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Computing n0_to_1 for num 342
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n0_to_2 for num 342
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Computing n1_to_1 for num 559
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Computing n2_to_2 (adjacency) for num 559
[LOG] Computing n0_to_3 for num 342
[LOG] Computing n0_to_4 for num 342
[LOG] Computing n1_to_2 for num 342
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_3 for num 342
[LOG] Computing n1_to_4 for num 342
[LOG] Computing n2_to_3 for num 342
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_4 for num 342
[LOG] Computing n3_to_3 (adjacency) for num 559
[LOG] Computing n3_to_4 for num 342
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Global feature for num 342
[LOG] Global feature for num 342
[LOG] Saving tensor x_0_342.pt
[LOG] Computing n4_to_4 (coadjacency) for num 559
[LOG] Computing n0_to_1 for num 559
[LOG] Saving tensor x_1_342.pt
[LOG] Saving tensor x_2_342.pt
[LOG] Saving tensor x_3_342.pt
[LOG] Saving tensor x_4_342.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n0_to_0_342.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n1_to_1_342.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n2_to_2_342.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n3_to_3_342.pt
[LOG] Computing n0_to_2 for num 559
[LOG] Saving tensor n4_to_4_342.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n0_to_1_342.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n0_to_2_342.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n0_to_3_342.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n0_to_4_342.pt
[LOG] Saving tensor n1_to_2_342.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n1_to_3_342.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 3379 Tetrahedra.
    [LOG] Generated 116 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.405172413793103
    [LOG] Max number of nodes per cluster is 30 and the number is 8
[LOG] Saving tensor n1_to_4_342.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n0_to_3 for num 967
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_4 for num 967
[LOG] Saving tensor n2_to_3_342.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n1_to_2 for num 967
[LOG] Saving tensor n2_to_4_342.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n3_to_4_342.pt
[LOG] Saving tensor global_feature_342.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Process 42: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] We will select 1063 edges and 3379 tetra
[LOG] Edges from tetra 0 and KDTree 1063 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Process 70: Calculating Neighbors
[LOG] Loading pickle file data_561.pickle
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing node features for num 561
[LOG] Removed 4 subset clusters.

    [LOG] We Currently have 3522 Tetrahedra.
    [LOG] Generated 109 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.110091743119266
    [LOG] Max number of nodes per cluster is 40 and the number is 44
[LOG] Processing edge features for num 561
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing tetra features for num 561
[LOG] Computing n0_to_3 for num 559
[LOG] Computing n0_to_4 for num 559
[LOG] We will select 560 edges and 3522 tetra
[LOG] Edges from tetra 0 and KDTree 1851 with 0 edges in common.
[LOG] Computing n1_to_3 for num 967
[LOG] Computing n1_to_2 for num 559
[LOG] Computing n1_to_4 for num 967
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_3 for num 967
[LOG] Computing n1_to_3 for num 559
[LOG] Computing n1_to_4 for num 559
[LOG] Computing n2_to_3 for num 559
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_4 for num 559
[LOG] Computing n2_to_4 for num 967
[LOG] Computing n3_to_4 for num 559
[LOG] Global feature for num 559
[LOG] Global feature for num 559
[LOG] Saving tensor x_0_559.pt
[LOG] Saving tensor x_1_559.pt
[LOG] Saving tensor x_2_559.pt
[LOG] Saving tensor x_3_559.pt
[LOG] Saving tensor x_4_559.pt
[LOG] Saving tensor n0_to_0_559.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing cluster features for num 561
[LOG] Saving tensor n1_to_1_559.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_4 for num 967
[LOG] Global feature for num 967
[LOG] Global feature for num 967
[LOG] Saving tensor x_0_967.pt
[LOG] Processing cluster features for num 561
[LOG] Saving tensor n2_to_2_559.pt
[LOG] Saving tensor x_1_967.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing adjacency and incidence matrices for num 561
[LOG] Computing n0_to_0 for num 561
[LOG] Saving tensor x_2_967.pt
[LOG] Saving tensor x_3_967.pt
[LOG] Saving tensor x_4_967.pt
[LOG] Saving tensor n0_to_0_967.pt
[LOG] Saving tensor n1_to_1_967.pt
[LOG] Saving tensor n3_to_3_559.pt
[LOG] Saving tensor n4_to_4_559.pt
[LOG] Saving tensor n2_to_2_967.pt
[LOG] Saving tensor n0_to_1_559.pt
[LOG] Saving tensor n0_to_2_559.pt
[LOG] Saving tensor n0_to_3_559.pt
[LOG] Saving tensor n3_to_3_967.pt
[LOG] Saving tensor n0_to_4_559.pt
[LOG] Saving tensor n4_to_4_967.pt
[LOG] Saving tensor n1_to_2_559.pt
[LOG] Saving tensor n0_to_1_967.pt
[LOG] Saving tensor n1_to_3_559.pt
[LOG] Saving tensor n1_to_4_559.pt
[LOG] Saving tensor n0_to_2_967.pt
[LOG] Saving tensor n2_to_3_559.pt
[LOG] Saving tensor n0_to_3_967.pt
[LOG] Saving tensor n2_to_4_559.pt
[LOG] Saving tensor n0_to_4_967.pt
[LOG] Saving tensor n3_to_4_559.pt
[LOG] Saving tensor n1_to_2_967.pt
[LOG] Saving tensor global_feature_559.pt
[LOG] Process 69: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n1_to_3_967.pt
[LOG] Saving tensor n1_to_4_967.pt
[LOG] Saving tensor n2_to_3_967.pt
[LOG] Saving tensor n2_to_4_967.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n3_to_4_967.pt
[LOG] Saving tensor global_feature_967.pt
[LOG] Process 123: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 3075 Tetrahedra.
    [LOG] Generated 66 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.181818181818182
    [LOG] Max number of nodes per cluster is 170 and the number is 59
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n1_to_3 for num 959
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] We will select 636 edges and 3075 tetra
[LOG] Edges from tetra 0 and KDTree 4076 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_4 for num 959
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 3 subset clusters.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_3 for num 959
[LOG] Computing n1_to_1 for num 561
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 117: Created combinatorial complex for file data_925.hdf5
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_4 for num 959
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 96: Created combinatorial complex for file data_770.hdf5
[LOG] Process 117: Calculating Neighbors
[LOG] Loading pickle file data_925.pickle
[LOG] Processing node features for num 925
[LOG] Processing edge features for num 925
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing tetra features for num 925
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2111 Tetrahedra.
    [LOG] Generated 51 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.313725490196079
    [LOG] Max number of nodes per cluster is 42 and the number is 31
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing cluster features for num 925
[LOG] We will select 227 edges and 2111 tetra
[LOG] Edges from tetra 0 and KDTree 227 with 0 edges in common.
[LOG] Processing cluster features for num 925
[LOG] Processing adjacency and incidence matrices for num 925
[LOG] Computing n0_to_0 for num 925
[LOG] Process 96: Calculating Neighbors
[LOG] Loading pickle file data_770.pickle
[LOG] Processing node features for num 770
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing edge features for num 770
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing tetra features for num 770
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_1 for num 925
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing cluster features for num 770
[LOG] Removed 0 subset clusters.
[LOG] Processing cluster features for num 770
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing adjacency and incidence matrices for num 770
[LOG] Computing n0_to_0 for num 770
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_1 for num 770
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Process 82: Created combinatorial complex for file data_660.hdf5
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n3_to_4 for num 959
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Global feature for num 959
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Global feature for num 959
[LOG] Saving tensor x_0_959.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor x_1_959.pt
[LOG] Saving tensor x_2_959.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor x_3_959.pt
[LOG] Saving tensor x_4_959.pt
[LOG] Saving tensor n0_to_0_959.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n1_to_1_959.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n2_to_2_959.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n3_to_3_959.pt
[LOG] Computing n2_to_2 (adjacency) for num 925
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n4_to_4_959.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n0_to_1_959.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n0_to_2_959.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n0_to_3_959.pt
[LOG] Saving tensor n0_to_4_959.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n1_to_2_959.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n1_to_3_959.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Process 82: Calculating Neighbors
[LOG] Loading pickle file data_660.pickle
[LOG] Processing node features for num 660
[LOG] Saving tensor n1_to_4_959.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n2_to_3_959.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n2_to_4_959.pt
[LOG] Saving tensor n3_to_4_959.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Processing edge features for num 660
[LOG] Saving tensor global_feature_959.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Process 122: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Processing tetra features for num 660
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing cluster features for num 660
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 660
[LOG] Processing adjacency and incidence matrices for num 660
[LOG] Computing n0_to_0 for num 660
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] GENERATED TETRA
[LOG] Computing n1_to_1 for num 660
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_2 (adjacency) for num 770
[LOG] Computing n3_to_3 (adjacency) for num 925
[LOG] Computing n4_to_4 (coadjacency) for num 925
[LOG] Computing n0_to_1 for num 925
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 58: Created combinatorial complex for file data_468.hdf5
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_2 for num 925
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 58: Calculating Neighbors
[LOG] Loading pickle file data_468.pickle
[LOG] Processing node features for num 468
[LOG] Processing edge features for num 468
[LOG] Processing tetra features for num 468
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n2_to_2 (adjacency) for num 660
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Processing cluster features for num 468
[LOG] Processing cluster features for num 468
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing adjacency and incidence matrices for num 468
[LOG] Computing n0_to_0 for num 468
[LOG] Computing n1_to_1 for num 468
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1524 Tetrahedra.
    [LOG] Generated 74 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.932432432432432
    [LOG] Max number of nodes per cluster is 26 and the number is 67
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_2 (adjacency) for num 468
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] We will select 249 edges and 1524 tetra
[LOG] Edges from tetra 0 and KDTree 1432 with 0 edges in common.
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n3_to_3 (adjacency) for num 770
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n4_to_4 (coadjacency) for num 770
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n0_to_1 for num 770
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_3 (adjacency) for num 468
[LOG] Computing n4_to_4 (coadjacency) for num 468
[LOG] Computing n0_to_1 for num 468
[LOG] Computing n0_to_2 for num 770
[LOG] Computing n0_to_2 for num 468
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_3 (adjacency) for num 660
[LOG] Computing n4_to_4 (coadjacency) for num 660
[LOG] Computing n0_to_1 for num 660
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_3 for num 468
[LOG] Computing n0_to_3 for num 925
[LOG] Computing n0_to_4 for num 468
[LOG] Process 76: Created combinatorial complex for file data_614.hdf5
[LOG] Computing n1_to_2 for num 468
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_4 for num 925
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_2 for num 925
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3931 Tetrahedra.
    [LOG] Generated 93 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.408602150537636
    [LOG] Max number of nodes per cluster is 61 and the number is 90
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_2 for num 660
[LOG] Computing n1_to_3 for num 468
[LOG] Process 76: Calculating Neighbors
[LOG] Loading pickle file data_614.pickle
[LOG] Processing node features for num 614
[LOG] Computing n1_to_4 for num 468
[LOG] Processing edge features for num 614
[LOG] Computing n2_to_3 for num 468
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing tetra features for num 614
[LOG] Computing n2_to_4 for num 468
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing cluster features for num 614
[LOG] Computing n3_to_4 for num 468
[LOG] Global feature for num 468
[LOG] Global feature for num 468
[LOG] Saving tensor x_0_468.pt
[LOG] Saving tensor x_1_468.pt
[LOG] Saving tensor x_2_468.pt
[LOG] Saving tensor x_3_468.pt
[LOG] Saving tensor x_4_468.pt
[LOG] Saving tensor n0_to_0_468.pt
[LOG] Saving tensor n1_to_1_468.pt
[LOG] Processing cluster features for num 614
[LOG] Processing adjacency and incidence matrices for num 614
[LOG] Computing n0_to_0 for num 614
[LOG] We will select 771 edges and 3931 tetra
[LOG] Edges from tetra 0 and KDTree 771 with 0 edges in common.
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1261 Tetrahedra.
    [LOG] Generated 36 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.555555555555555
    [LOG] Max number of nodes per cluster is 32 and the number is 32
[LOG] Computing n0_to_3 for num 770
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_1 for num 614
[LOG] Computing n0_to_4 for num 770
[LOG] Saving tensor n2_to_2_468.pt
[LOG] We will select 73 edges and 1261 tetra
[LOG] Edges from tetra 0 and KDTree 691 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n3_to_3_468.pt
[LOG] Saving tensor n4_to_4_468.pt
[LOG] Saving tensor n0_to_1_468.pt
[LOG] Saving tensor n0_to_2_468.pt
[LOG] Saving tensor n0_to_3_468.pt
[LOG] Saving tensor n0_to_4_468.pt
[LOG] Computing n1_to_2 for num 770
[LOG] Saving tensor n1_to_2_468.pt
[LOG] Saving tensor n1_to_3_468.pt
[LOG] Computing n2_to_2 (adjacency) for num 614
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n1_to_4_468.pt
[LOG] Saving tensor n2_to_3_468.pt
[LOG] Saving tensor n2_to_4_468.pt
[LOG] Saving tensor n3_to_4_468.pt
[LOG] Saving tensor global_feature_468.pt
[LOG] Process 58: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n3_to_3 (adjacency) for num 614
[LOG] Computing n4_to_4 (coadjacency) for num 614
[LOG] Computing n0_to_1 for num 614
[LOG] Computing n1_to_3 for num 925
[LOG] Computing n1_to_4 for num 925
[LOG] Computing n2_to_3 for num 925
[LOG] Computing n0_to_2 for num 614
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_4 for num 925
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_4 for num 925
[LOG] Global feature for num 925
[LOG] Global feature for num 925
[LOG] Saving tensor x_0_925.pt
[LOG] Saving tensor x_1_925.pt
[LOG] Saving tensor x_2_925.pt
[LOG] Saving tensor x_3_925.pt
[LOG] Saving tensor x_4_925.pt
[LOG] Saving tensor n0_to_0_925.pt
[LOG] Saving tensor n1_to_1_925.pt
[LOG] Process 34: Created combinatorial complex for file data_276.hdf5
[LOG] Saving tensor n2_to_2_925.pt
[LOG] Saving tensor n3_to_3_925.pt
[LOG] Saving tensor n4_to_4_925.pt
[LOG] Saving tensor n0_to_1_925.pt
[LOG] Saving tensor n0_to_2_925.pt
[LOG] Saving tensor n0_to_3_925.pt
[LOG] Saving tensor n0_to_4_925.pt
[LOG] Saving tensor n1_to_2_925.pt
[LOG] Saving tensor n1_to_3_925.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n1_to_4_925.pt
[LOG] Saving tensor n2_to_3_925.pt
[LOG] Saving tensor n2_to_4_925.pt
[LOG] Saving tensor n3_to_4_925.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor global_feature_925.pt
[LOG] Process 117: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 34: Calculating Neighbors
[LOG] Loading pickle file data_276.pickle
[LOG] Processing node features for num 276
[LOG] Processing edge features for num 276
[LOG] Processing tetra features for num 276
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 276
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing cluster features for num 276
[LOG] Processing adjacency and incidence matrices for num 276
[LOG] Computing n0_to_0 for num 276
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_1 for num 276
[LOG] Computing n2_to_2 (adjacency) for num 276
[LOG] Computing n0_to_3 for num 614
[LOG] Computing n3_to_3 (adjacency) for num 276
[LOG] Computing n4_to_4 (coadjacency) for num 276
[LOG] Computing n0_to_4 for num 614
[LOG] Computing n0_to_1 for num 276
[LOG] Computing n0_to_2 for num 276
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_2 for num 614
[LOG] Computing n0_to_3 for num 660
[LOG] Computing n0_to_4 for num 660
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_2 for num 660
[LOG] Computing n1_to_3 for num 614
[LOG] Computing n1_to_4 for num 614
[LOG] Computing n0_to_3 for num 276
[LOG] Computing n2_to_3 for num 614
[LOG] Computing n0_to_4 for num 276
[LOG] Computing n1_to_2 for num 276
[LOG] Computing n1_to_3 for num 770
[LOG] Computing n2_to_4 for num 614
[LOG] Computing n1_to_3 for num 276
[LOG] Computing n1_to_4 for num 276
[LOG] Computing n2_to_3 for num 276
[LOG] Computing n2_to_4 for num 276
[LOG] Computing n1_to_4 for num 770
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n3_to_4 for num 614
[LOG] Global feature for num 614
[LOG] Global feature for num 614
[LOG] Saving tensor x_0_614.pt
[LOG] Computing n3_to_4 for num 276
[LOG] Saving tensor x_1_614.pt
[LOG] Global feature for num 276
[LOG] Global feature for num 276
[LOG] Saving tensor x_0_276.pt
[LOG] Saving tensor x_2_614.pt
[LOG] Saving tensor x_3_614.pt
[LOG] Saving tensor x_4_614.pt
[LOG] Saving tensor x_1_276.pt
[LOG] Saving tensor n0_to_0_614.pt
[LOG] Saving tensor x_2_276.pt
[LOG] Saving tensor x_3_276.pt
[LOG] Saving tensor n1_to_1_614.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_3 for num 770
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor x_4_276.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_4 for num 770
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n0_to_0_276.pt
[LOG] Saving tensor n2_to_2_614.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n3_to_4 for num 770
[LOG] Calculating for cell ranks 2 and 4
[LOG] Global feature for num 770
[LOG] Global feature for num 770
[LOG] Saving tensor x_0_770.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n1_to_1_276.pt
[LOG] Saving tensor x_1_770.pt
[LOG] Saving tensor x_2_770.pt
[LOG] Saving tensor n3_to_3_614.pt
[LOG] Saving tensor n2_to_2_276.pt
[LOG] Saving tensor x_3_770.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor x_4_770.pt
[LOG] Saving tensor n4_to_4_614.pt
[LOG] Saving tensor n0_to_0_770.pt
[LOG] Saving tensor n3_to_3_276.pt
[LOG] Saving tensor n0_to_1_614.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n1_to_1_770.pt
[LOG] Saving tensor n0_to_2_614.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n4_to_4_276.pt
[LOG] Saving tensor n2_to_2_770.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n0_to_3_614.pt
[LOG] Saving tensor n3_to_3_770.pt
[LOG] Saving tensor n0_to_1_276.pt
[LOG] Saving tensor n4_to_4_770.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n0_to_4_614.pt
[LOG] Saving tensor n0_to_2_276.pt
[LOG] Saving tensor n0_to_1_770.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n0_to_3_276.pt
[LOG] Saving tensor n1_to_2_614.pt
[LOG] Computing n1_to_3 for num 660
[LOG] Computing n1_to_4 for num 660
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n0_to_2_770.pt
[LOG] Computing n2_to_3 for num 660
[LOG] Saving tensor n0_to_4_276.pt
[LOG] Saving tensor n1_to_3_614.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n0_to_3_770.pt
[LOG] Saving tensor n1_to_4_614.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n1_to_2_276.pt
[LOG] Saving tensor n0_to_4_770.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n2_to_3_614.pt
[LOG] Saving tensor n1_to_3_276.pt
[LOG] Saving tensor n1_to_2_770.pt
[LOG] Saving tensor n2_to_4_614.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n1_to_4_276.pt
[LOG] Saving tensor n1_to_3_770.pt
[LOG] Saving tensor n3_to_4_614.pt
[LOG] Saving tensor n2_to_3_276.pt
[LOG] Saving tensor n1_to_4_770.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor global_feature_614.pt
[LOG] Saving tensor n2_to_4_276.pt
[LOG] Saving tensor n2_to_3_770.pt
[LOG] Process 76: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n3_to_4_276.pt
[LOG] Saving tensor n2_to_4_770.pt
[LOG] Saving tensor global_feature_276.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n3_to_4_770.pt
[LOG] Process 34: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor global_feature_770.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Process 96: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n2_to_4 for num 660
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n3_to_4 for num 660
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Global feature for num 660
[LOG] Global feature for num 660
[LOG] Saving tensor x_0_660.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor x_1_660.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor x_2_660.pt
[LOG] Saving tensor x_3_660.pt
[LOG] Saving tensor x_4_660.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n0_to_0_660.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n1_to_1_660.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n2_to_2_660.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor n3_to_3_660.pt
[LOG] Saving tensor n4_to_4_660.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n0_to_1_660.pt
[LOG] Saving tensor n0_to_2_660.pt
[LOG] Saving tensor n0_to_3_660.pt
[LOG] Saving tensor n0_to_4_660.pt
[LOG] Saving tensor n1_to_2_660.pt
[LOG] Saving tensor n1_to_3_660.pt
[LOG] Saving tensor n1_to_4_660.pt
[LOG] Saving tensor n2_to_3_660.pt
[LOG] Saving tensor n2_to_4_660.pt
[LOG] Saving tensor n3_to_4_660.pt
[LOG] Saving tensor global_feature_660.pt
[LOG] Process 82: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 111: Created combinatorial complex for file data_883.hdf5
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1602 Tetrahedra.
    [LOG] Generated 60 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.216666666666665
    [LOG] Max number of nodes per cluster is 47 and the number is 36
[LOG] Calculating for cell ranks 2 and 4
[LOG] We will select 261 edges and 1602 tetra
[LOG] Edges from tetra 0 and KDTree 3733 with 0 edges in common.
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3016 Tetrahedra.
    [LOG] Generated 86 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.162790697674419
    [LOG] Max number of nodes per cluster is 67 and the number is 18
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] We will select 537 edges and 3016 tetra
[LOG] Edges from tetra 0 and KDTree 954 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 111: Calculating Neighbors
[LOG] Loading pickle file data_883.pickle
[LOG] Processing node features for num 883
[LOG] Processing edge features for num 883
[LOG] Removed 0 subset clusters.
[LOG] Computing n2_to_2 (adjacency) for num 561
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Processing tetra features for num 883
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Processing cluster features for num 883
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Process 119: Created combinatorial complex for file data_943.hdf5
[LOG] Processing cluster features for num 883
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Processing adjacency and incidence matrices for num 883
[LOG] Computing n0_to_0 for num 883
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Process 119: Calculating Neighbors
[LOG] Loading pickle file data_943.pickle
[LOG] Processing node features for num 943
[LOG] Processing edge features for num 943
[LOG] Computing n1_to_1 for num 883
[LOG] Processing tetra features for num 943
[LOG] Processing cluster features for num 943
[LOG] Processing cluster features for num 943
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Processing adjacency and incidence matrices for num 943
[LOG] Computing n0_to_0 for num 943
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_1 for num 943
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1064 Tetrahedra.
    [LOG] Generated 38 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.31578947368421
    [LOG] Max number of nodes per cluster is 52 and the number is 37
[LOG] We will select 107 edges and 1064 tetra
[LOG] Edges from tetra 0 and KDTree 3881 with 0 edges in common.
[LOG] Computing n2_to_2 (adjacency) for num 943
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 1 subset clusters.
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n3_to_3 (adjacency) for num 943
[LOG] Computing n4_to_4 (coadjacency) for num 943
[LOG] Computing n0_to_1 for num 943
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1056 Tetrahedra.
    [LOG] Generated 37 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.91891891891892
    [LOG] Max number of nodes per cluster is 45 and the number is 13
[LOG] Removed 0 subset clusters.
[LOG] We will select 422 edges and 1056 tetra
[LOG] Edges from tetra 0 and KDTree 2167 with 0 edges in common.
[LOG] Computing n0_to_2 for num 943
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 31: Created combinatorial complex for file data_255.hdf5
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n2_to_2 (adjacency) for num 883
[LOG] Process 72: Created combinatorial complex for file data_579.hdf5
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 31: Calculating Neighbors
[LOG] Loading pickle file data_255.pickle
[LOG] Processing node features for num 255
[LOG] Processing edge features for num 255
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing tetra features for num 255
[LOG] Processing cluster features for num 255
[LOG] Processing cluster features for num 255
[LOG] Processing adjacency and incidence matrices for num 255
[LOG] Computing n0_to_0 for num 255
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n1_to_1 for num 255
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 72: Calculating Neighbors
[LOG] Loading pickle file data_579.pickle
[LOG] Processing node features for num 579
[LOG] Processing edge features for num 579
[LOG] Computing n2_to_2 (adjacency) for num 255
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing tetra features for num 579
[LOG] Computing n3_to_3 (adjacency) for num 255
[LOG] Computing n4_to_4 (coadjacency) for num 255
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n0_to_1 for num 255
[LOG] Process 37: Created combinatorial complex for file data_301.hdf5
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n0_to_2 for num 255
[LOG] Processing cluster features for num 579
[LOG] Processing cluster features for num 579
[LOG] Process 37: Calculating Neighbors
[LOG] Loading pickle file data_301.pickle
[LOG] Processing node features for num 301
[LOG] Processing edge features for num 301
[LOG] Processing adjacency and incidence matrices for num 579
[LOG] Computing n0_to_0 for num 579
[LOG] Processing tetra features for num 301
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Processing cluster features for num 301
[LOG] Processing cluster features for num 301
[LOG] Processing adjacency and incidence matrices for num 301
[LOG] Computing n0_to_0 for num 301
[LOG] Computing n1_to_1 for num 579
[LOG] Computing n1_to_1 for num 301
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n0_to_3 for num 943
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_4 for num 943
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_2 (adjacency) for num 301
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_2 for num 943
[LOG] Computing n3_to_3 (adjacency) for num 301
[LOG] Computing n4_to_4 (coadjacency) for num 301
[LOG] Computing n0_to_1 for num 301
[LOG] Computing n0_to_3 for num 255
[LOG] Computing n0_to_2 for num 301
[LOG] Computing n0_to_4 for num 255
[LOG] Computing n1_to_3 for num 943
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_2 for num 255
[LOG] Computing n1_to_4 for num 943
[LOG] Computing n2_to_3 for num 943
[LOG] Removed 0 subset clusters.
[LOG] Computing n1_to_3 for num 255

    [LOG] We Currently have 2159 Tetrahedra.
    [LOG] Generated 64 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.8125
    [LOG] Max number of nodes per cluster is 91 and the number is 60
[LOG] Computing n1_to_4 for num 255
[LOG] Computing n2_to_3 for num 255
[LOG] Computing n2_to_4 for num 943
[LOG] Computing n2_to_4 for num 255
[LOG] Computing n3_to_4 for num 255
[LOG] Global feature for num 255
[LOG] Global feature for num 255
[LOG] Saving tensor x_0_255.pt
[LOG] Saving tensor x_1_255.pt
[LOG] Saving tensor x_2_255.pt
[LOG] Saving tensor x_3_255.pt
[LOG] Saving tensor x_4_255.pt
[LOG] Saving tensor n0_to_0_255.pt
[LOG] Computing n3_to_4 for num 943
[LOG] Saving tensor n1_to_1_255.pt
[LOG] Global feature for num 943
[LOG] Saving tensor n2_to_2_255.pt
[LOG] Global feature for num 943
[LOG] Saving tensor x_0_943.pt
[LOG] Saving tensor n3_to_3_255.pt
[LOG] Saving tensor x_1_943.pt
[LOG] Computing n3_to_3 (adjacency) for num 883
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n4_to_4 (coadjacency) for num 883
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_1 for num 883
[LOG] Computing n2_to_2 (adjacency) for num 579
[LOG] Calculating for cell ranks 0 and 4
[LOG] We will select 471 edges and 2159 tetra
[LOG] Edges from tetra 0 and KDTree 2503 with 0 edges in common.
[LOG] Computing n0_to_3 for num 301
[LOG] Computing n0_to_4 for num 301
[LOG] Computing n1_to_2 for num 301
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor x_2_943.pt
[LOG] Saving tensor n4_to_4_255.pt
[LOG] Saving tensor x_3_943.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n0_to_1_255.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n0_to_2_255.pt
[LOG] Saving tensor x_4_943.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n0_to_0_943.pt
[LOG] Saving tensor n0_to_3_255.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n1_to_1_943.pt
[LOG] Saving tensor n0_to_4_255.pt
[LOG] Computing n0_to_2 for num 883
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n2_to_2_943.pt
[LOG] Saving tensor n1_to_2_255.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n1_to_3_255.pt
[LOG] Saving tensor n1_to_4_255.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n3_to_3_943.pt
[LOG] Saving tensor n2_to_3_255.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n2_to_4_255.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n4_to_4_943.pt
[LOG] Saving tensor n3_to_4_255.pt
[LOG] Saving tensor n0_to_1_943.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor global_feature_255.pt
[LOG] Saving tensor n0_to_2_943.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_3 for num 301
[LOG] Computing n1_to_4 for num 301
[LOG] Computing n2_to_3 for num 301
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n2_to_4 for num 301
[LOG] Computing n3_to_4 for num 301
[LOG] Global feature for num 301
[LOG] Global feature for num 301
[LOG] Saving tensor x_0_301.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 31: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor x_1_301.pt
[LOG] Saving tensor x_2_301.pt
[LOG] Saving tensor n0_to_3_943.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor x_3_301.pt
[LOG] Saving tensor x_4_301.pt
[LOG] Saving tensor n0_to_4_943.pt
[LOG] Saving tensor n0_to_0_301.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n1_to_2_943.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n1_to_1_301.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n1_to_3_943.pt
[LOG] Saving tensor n2_to_2_301.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n1_to_4_943.pt
[LOG] Saving tensor n2_to_3_943.pt
[LOG] Saving tensor n3_to_3_301.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n4_to_4_301.pt
[LOG] Saving tensor n2_to_4_943.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n0_to_1_301.pt
[LOG] Saving tensor n3_to_4_943.pt
[LOG] Saving tensor global_feature_943.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n0_to_2_301.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Process 119: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n0_to_3_301.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n0_to_4_301.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n1_to_2_301.pt
[LOG] Saving tensor n1_to_3_301.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n1_to_4_301.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n2_to_3_301.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n2_to_4_301.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n3_to_4_301.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor global_feature_301.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Process 37: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 579
[LOG] Computing n4_to_4 (coadjacency) for num 579
[LOG] Computing n0_to_1 for num 579
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_2 for num 579
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Process 83: Created combinatorial complex for file data_667.hdf5
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Computing n0_to_3 for num 883
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_4 for num 883
[LOG] Process 83: Calculating Neighbors
[LOG] Loading pickle file data_667.pickle
[LOG] Processing node features for num 667
[LOG] GENERATED TETRA
[LOG] Processing edge features for num 667
[LOG] Computing n1_to_2 for num 883
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing tetra features for num 667
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing cluster features for num 667
[LOG] Processing cluster features for num 667
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing adjacency and incidence matrices for num 667
[LOG] Computing n0_to_0 for num 667
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n0_to_3 for num 579
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_4 for num 579
[LOG] Computing n1_to_1 for num 667
[LOG] Computing n1_to_2 for num 579
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 667
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_3 for num 579
[LOG] Computing n1_to_4 for num 579
[LOG] Computing n2_to_3 for num 579
[LOG] Computing n1_to_3 for num 883
[LOG] Computing n1_to_4 for num 883
[LOG] Computing n3_to_3 (adjacency) for num 667
[LOG] Computing n4_to_4 (coadjacency) for num 667
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_1 for num 667
[LOG] Computing n2_to_4 for num 579
[LOG] Computing n2_to_3 for num 883
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_4 for num 579
[LOG] Global feature for num 579
[LOG] Global feature for num 579
[LOG] Saving tensor x_0_579.pt
[LOG] Computing n2_to_4 for num 883
[LOG] Computing n0_to_2 for num 667
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor x_1_579.pt
[LOG] Computing n3_to_4 for num 883
[LOG] Global feature for num 883
[LOG] Global feature for num 883
[LOG] Saving tensor x_0_883.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor x_2_579.pt
[LOG] Saving tensor x_1_883.pt
[LOG] Saving tensor x_3_579.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor x_2_883.pt
[LOG] Saving tensor x_4_579.pt
[LOG] Saving tensor x_3_883.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1284 Tetrahedra.
    [LOG] Generated 25 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 21.72
    [LOG] Max number of nodes per cluster is 70 and the number is 21
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n0_to_0_579.pt
[LOG] We will select 281 edges and 1284 tetra
[LOG] Edges from tetra 0 and KDTree 3616 with 0 edges in common.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor x_4_883.pt
[LOG] Saving tensor n0_to_0_883.pt
[LOG] Saving tensor n1_to_1_579.pt
[LOG] Saving tensor n2_to_2_579.pt
[LOG] Saving tensor n1_to_1_883.pt
[LOG] Saving tensor n2_to_2_883.pt
[LOG] Saving tensor n3_to_3_579.pt
[LOG] Saving tensor n4_to_4_579.pt
[LOG] Saving tensor n3_to_3_883.pt
[LOG] Saving tensor n0_to_1_579.pt
[LOG] Saving tensor n4_to_4_883.pt
[LOG] Saving tensor n0_to_2_579.pt
[LOG] Saving tensor n0_to_1_883.pt
[LOG] Saving tensor n0_to_3_579.pt
[LOG] Saving tensor n0_to_2_883.pt
[LOG] Saving tensor n0_to_4_579.pt
[LOG] Saving tensor n0_to_3_883.pt
[LOG] Saving tensor n1_to_2_579.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n0_to_4_883.pt
[LOG] Saving tensor n1_to_3_579.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n1_to_4_579.pt
[LOG] Saving tensor n1_to_2_883.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n2_to_3_579.pt
[LOG] Saving tensor n1_to_3_883.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n2_to_4_579.pt
[LOG] Saving tensor n1_to_4_883.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_3 for num 667
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n3_to_4_579.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n2_to_3_883.pt
[LOG] Saving tensor global_feature_579.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n2_to_4_883.pt
[LOG] Process 72: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n3_to_4_883.pt
[LOG] Computing n0_to_4 for num 667
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_2 for num 667
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor global_feature_883.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Process 111: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Process 56: Created combinatorial complex for file data_454.hdf5
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Computing n3_to_3 (adjacency) for num 561
[LOG] Computing n4_to_4 (coadjacency) for num 561
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_1 for num 561
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_3 for num 667
[LOG] Computing n1_to_4 for num 667
[LOG] Process 56: Calculating Neighbors
[LOG] Loading pickle file data_454.pickle
[LOG] Processing node features for num 454
[LOG] Computing n2_to_3 for num 667
[LOG] Processing edge features for num 454
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing tetra features for num 454
[LOG] Computing n2_to_4 for num 667
[LOG] Processing cluster features for num 454
[LOG] Computing n3_to_4 for num 667
[LOG] Global feature for num 667
[LOG] Global feature for num 667
[LOG] Saving tensor x_0_667.pt
[LOG] Processing cluster features for num 454
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing adjacency and incidence matrices for num 454
[LOG] Computing n0_to_0 for num 454
[LOG] Computing n1_to_1 for num 454
[LOG] Computing n2_to_2 (adjacency) for num 454
[LOG] Computing n3_to_3 (adjacency) for num 454
[LOG] Computing n4_to_4 (coadjacency) for num 454
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n0_to_1 for num 454
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor x_1_667.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor x_2_667.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor x_3_667.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor x_4_667.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n0_to_0_667.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n1_to_1_667.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n2_to_2_667.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n0_to_2 for num 454
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n3_to_3_667.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n4_to_4_667.pt
[LOG] Saving tensor n0_to_1_667.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n0_to_2_667.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n0_to_3_667.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n0_to_4_667.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n1_to_2_667.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n1_to_3_667.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n1_to_4_667.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n2_to_3_667.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n2_to_4_667.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n0_to_3 for num 454
[LOG] Computing n0_to_4 for num 454
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n3_to_4_667.pt
[LOG] Computing n1_to_2 for num 454
[LOG] Saving tensor global_feature_667.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Process 83: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n1_to_3 for num 454
[LOG] Computing n1_to_4 for num 454
[LOG] Computing n2_to_3 for num 454
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n2_to_4 for num 454
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n3_to_4 for num 454
[LOG] Global feature for num 454
[LOG] Global feature for num 454
[LOG] Saving tensor x_0_454.pt
[LOG] Computing n0_to_2 for num 561
[LOG] Saving tensor x_1_454.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor x_2_454.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor x_3_454.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor x_4_454.pt
[LOG] Saving tensor n0_to_0_454.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n1_to_1_454.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n2_to_2_454.pt
[LOG] Saving tensor n3_to_3_454.pt
[LOG] Saving tensor n4_to_4_454.pt
[LOG] Saving tensor n0_to_1_454.pt
[LOG] Saving tensor n0_to_2_454.pt
[LOG] Saving tensor n0_to_3_454.pt
[LOG] Saving tensor n0_to_4_454.pt
[LOG] Saving tensor n1_to_2_454.pt
[LOG] Saving tensor n1_to_3_454.pt
[LOG] Saving tensor n1_to_4_454.pt
[LOG] Saving tensor n2_to_3_454.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n2_to_4_454.pt
[LOG] Saving tensor n3_to_4_454.pt
[LOG] Saving tensor global_feature_454.pt
[LOG] Process 56: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1372 Tetrahedra.
    [LOG] Generated 52 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.384615384615385
    [LOG] Max number of nodes per cluster is 34 and the number is 38
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] We will select 245 edges and 1372 tetra
[LOG] Edges from tetra 0 and KDTree 861 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Process 118: Created combinatorial complex for file data_936.hdf5
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 118: Calculating Neighbors
[LOG] Loading pickle file data_936.pickle
[LOG] Processing node features for num 936
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1370 Tetrahedra.
    [LOG] Generated 43 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.651162790697674
    [LOG] Max number of nodes per cluster is 50 and the number is 4
[LOG] Processing edge features for num 936
[LOG] Processing tetra features for num 936
[LOG] Processing cluster features for num 936
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1228 Tetrahedra.
    [LOG] Generated 42 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.0
    [LOG] Max number of nodes per cluster is 32 and the number is 29
[LOG] We will select 156 edges and 1370 tetra
[LOG] Edges from tetra 0 and KDTree 1759 with 0 edges in common.
[LOG] Processing cluster features for num 936
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing adjacency and incidence matrices for num 936
[LOG] Computing n0_to_0 for num 936
[LOG] Calculating for cell ranks 0 and 3
[LOG] We will select 349 edges and 1228 tetra
[LOG] Edges from tetra 0 and KDTree 564 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] Computing n1_to_1 for num 936
[LOG] Computing n2_to_2 (adjacency) for num 936
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n3_to_3 (adjacency) for num 936
[LOG] Computing n4_to_4 (coadjacency) for num 936
[LOG] Computing n0_to_1 for num 936
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_2 for num 936
[LOG] Removed 0 subset clusters.
[LOG] Process 75: Created combinatorial complex for file data_606.hdf5
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 77: Created combinatorial complex for file data_620.hdf5
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 77: Calculating Neighbors
[LOG] Loading pickle file data_620.pickle
[LOG] Processing node features for num 620
[LOG] Processing edge features for num 620
[LOG] Processing tetra features for num 620
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing cluster features for num 620
[LOG] Processing cluster features for num 620
[LOG] Processing adjacency and incidence matrices for num 620
[LOG] Computing n0_to_0 for num 620
[LOG] Computing n0_to_3 for num 936
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1909 Tetrahedra.
    [LOG] Generated 63 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.158730158730158
    [LOG] Max number of nodes per cluster is 48 and the number is 61
[LOG] Computing n0_to_4 for num 936
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_1 for num 620
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_2 for num 936
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] GENERATED TETRA
[LOG] We will select 740 edges and 1909 tetra
[LOG] Edges from tetra 0 and KDTree 1076 with 0 edges in common.
[LOG] Computing n1_to_3 for num 936
[LOG] Computing n1_to_4 for num 936
[LOG] Computing n2_to_3 for num 936
[LOG] Calculating for cell ranks 4 and 4
[LOG] GENERATED TETRA
[LOG] Computing n2_to_2 (adjacency) for num 620
[LOG] Computing n2_to_4 for num 936
[LOG] GENERATED TETRA
[LOG] Computing n3_to_4 for num 936
[LOG] Global feature for num 936
[LOG] Global feature for num 936
[LOG] Saving tensor x_0_936.pt
[LOG] Saving tensor x_1_936.pt
[LOG] Saving tensor x_2_936.pt
[LOG] Saving tensor x_3_936.pt
[LOG] Saving tensor x_4_936.pt
[LOG] Saving tensor n0_to_0_936.pt
[LOG] Saving tensor n1_to_1_936.pt
[LOG] Saving tensor n2_to_2_936.pt
[LOG] Computing n3_to_3 (adjacency) for num 620
[LOG] Saving tensor n3_to_3_936.pt
[LOG] Computing n4_to_4 (coadjacency) for num 620
[LOG] Saving tensor n4_to_4_936.pt
[LOG] Computing n0_to_1 for num 620
[LOG] Saving tensor n0_to_1_936.pt
[LOG] Saving tensor n0_to_2_936.pt
[LOG] Saving tensor n0_to_3_936.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n0_to_4_936.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n1_to_2_936.pt
[LOG] Saving tensor n1_to_3_936.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n1_to_4_936.pt
[LOG] Saving tensor n2_to_3_936.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n2_to_4_936.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n3_to_4_936.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor global_feature_936.pt
[LOG] Process 118: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n0_to_2 for num 620
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Process 75: Calculating Neighbors
[LOG] Loading pickle file data_606.pickle
[LOG] Processing node features for num 606
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing edge features for num 606
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing tetra features for num 606
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing cluster features for num 606
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Processing cluster features for num 606
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Processing adjacency and incidence matrices for num 606
[LOG] Computing n0_to_0 for num 606
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n0_to_3 for num 620
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n1_to_1 for num 606
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n0_to_4 for num 620
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_2 for num 620
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1280 Tetrahedra.
    [LOG] Generated 63 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.492063492063492
    [LOG] Max number of nodes per cluster is 31 and the number is 46
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 606
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_3 for num 620
[LOG] Computing n1_to_4 for num 620
[LOG] We will select 142 edges and 1280 tetra
[LOG] Edges from tetra 0 and KDTree 816 with 0 edges in common.
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 1928 Tetrahedra.
    [LOG] Generated 56 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.071428571428571
    [LOG] Max number of nodes per cluster is 27 and the number is 8
[LOG] Computing n2_to_3 for num 620
[LOG] Computing n2_to_4 for num 620
[LOG] Removed 2 subset clusters.
[LOG] Computing n3_to_4 for num 620
[LOG] Computing n3_to_3 (adjacency) for num 606
[LOG] Calculating for cell ranks 2 and 4
[LOG] Global feature for num 620
[LOG] Global feature for num 620
[LOG] Saving tensor x_0_620.pt
[LOG] Saving tensor x_1_620.pt
[LOG] Computing n4_to_4 (coadjacency) for num 606
[LOG] Saving tensor x_2_620.pt
[LOG] Computing n0_to_1 for num 606
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1862 Tetrahedra.
    [LOG] Generated 52 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.153846153846153
    [LOG] Max number of nodes per cluster is 44 and the number is 17
[LOG] We will select 548 edges and 1928 tetra
[LOG] Edges from tetra 0 and KDTree 662 with 0 edges in common.
[LOG] Computing n0_to_2 for num 606
[LOG] Saving tensor x_3_620.pt
[LOG] Saving tensor x_4_620.pt
[LOG] Saving tensor n0_to_0_620.pt
[LOG] Saving tensor n1_to_1_620.pt
[LOG] Saving tensor n2_to_2_620.pt
[LOG] Saving tensor n3_to_3_620.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n4_to_4_620.pt
[LOG] Saving tensor n0_to_1_620.pt
[LOG] Saving tensor n0_to_2_620.pt
[LOG] Saving tensor n0_to_3_620.pt
[LOG] Saving tensor n0_to_4_620.pt
[LOG] Saving tensor n1_to_2_620.pt
[LOG] Saving tensor n1_to_3_620.pt
[LOG] Saving tensor n1_to_4_620.pt
[LOG] Saving tensor n2_to_3_620.pt
[LOG] We will select 520 edges and 1862 tetra
[LOG] Edges from tetra 0 and KDTree 1112 with 0 edges in common.
[LOG] Saving tensor n2_to_4_620.pt
[LOG] Saving tensor n3_to_4_620.pt
[LOG] Saving tensor global_feature_620.pt
[LOG] Process 77: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 74: Created combinatorial complex for file data_595.hdf5
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 74: Calculating Neighbors
[LOG] Loading pickle file data_595.pickle
[LOG] Processing node features for num 595
[LOG] Processing edge features for num 595
[LOG] Process 104: Created combinatorial complex for file data_837.hdf5
[LOG] Processing tetra features for num 595
[LOG] Processing cluster features for num 595
[LOG] Processing cluster features for num 595
[LOG] Computing n0_to_3 for num 606
[LOG] Processing adjacency and incidence matrices for num 595
[LOG] Computing n0_to_0 for num 595
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_4 for num 606
[LOG] Process 104: Calculating Neighbors
[LOG] Loading pickle file data_837.pickle
[LOG] Processing node features for num 837
[LOG] Processing edge features for num 837
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_2 for num 606
[LOG] Processing tetra features for num 837
[LOG] Processing cluster features for num 837
[LOG] Computing n1_to_3 for num 606
[LOG] Computing n1_to_4 for num 606
[LOG] Processing cluster features for num 837
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_3 for num 606
[LOG] Processing adjacency and incidence matrices for num 837
[LOG] Computing n0_to_0 for num 837
[LOG] Computing n2_to_4 for num 606
[LOG] Computing n3_to_4 for num 606
[LOG] Global feature for num 606
[LOG] Global feature for num 606
[LOG] Saving tensor x_0_606.pt
[LOG] Saving tensor x_1_606.pt
[LOG] Saving tensor x_2_606.pt
[LOG] Saving tensor x_3_606.pt
[LOG] Saving tensor x_4_606.pt
[LOG] Computing n1_to_1 for num 837
[LOG] Saving tensor n0_to_0_606.pt
[LOG] Saving tensor n1_to_1_606.pt
[LOG] Computing n1_to_1 for num 595
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n2_to_2_606.pt
[LOG] Saving tensor n3_to_3_606.pt
[LOG] Saving tensor n4_to_4_606.pt
[LOG] Saving tensor n0_to_1_606.pt
[LOG] Saving tensor n0_to_2_606.pt
[LOG] Saving tensor n0_to_3_606.pt
[LOG] Saving tensor n0_to_4_606.pt
[LOG] Saving tensor n1_to_2_606.pt
[LOG] Saving tensor n1_to_3_606.pt
[LOG] Saving tensor n1_to_4_606.pt
[LOG] Saving tensor n2_to_3_606.pt
[LOG] Saving tensor n2_to_4_606.pt
[LOG] Saving tensor n3_to_4_606.pt
[LOG] Saving tensor global_feature_606.pt
[LOG] Computing n2_to_2 (adjacency) for num 837
[LOG] Process 75: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 837
[LOG] Computing n4_to_4 (coadjacency) for num 837
[LOG] Computing n0_to_1 for num 837
[LOG] Computing n0_to_3 for num 561
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_2 for num 837
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 120: Created combinatorial complex for file data_949.hdf5
[LOG] Computing n0_to_4 for num 561
[LOG] Computing n1_to_2 for num 561
[LOG] Computing n2_to_2 (adjacency) for num 595
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 120: Calculating Neighbors
[LOG] Loading pickle file data_949.pickle
[LOG] Processing node features for num 949
[LOG] Processing edge features for num 949
[LOG] Process 14: Created combinatorial complex for file data_115.hdf5
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing tetra features for num 949
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 5395 Tetrahedra.
    [LOG] Generated 140 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.9
    [LOG] Max number of nodes per cluster is 50 and the number is 138
[LOG] Processing cluster features for num 949
[LOG] Computing n0_to_3 for num 837
[LOG] Computing n0_to_4 for num 837
[LOG] Processing cluster features for num 949
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing adjacency and incidence matrices for num 949
[LOG] Computing n0_to_0 for num 949
[LOG] Computing n1_to_2 for num 837
[LOG] Computing n3_to_3 (adjacency) for num 595
[LOG] Computing n4_to_4 (coadjacency) for num 595
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 14: Calculating Neighbors
[LOG] Loading pickle file data_115.pickle
[LOG] Processing node features for num 115
[LOG] Computing n0_to_1 for num 595
[LOG] Processing edge features for num 115
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_3 for num 837
[LOG] Processing tetra features for num 115
[LOG] Computing n1_to_4 for num 837
[LOG] Computing n2_to_3 for num 837
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_1 for num 949
[LOG] Computing n2_to_4 for num 837
[LOG] Processing cluster features for num 115
[LOG] Computing n3_to_4 for num 837
[LOG] Global feature for num 837
[LOG] Global feature for num 837
[LOG] Saving tensor x_0_837.pt
[LOG] Saving tensor x_1_837.pt
[LOG] Saving tensor x_2_837.pt
[LOG] Saving tensor x_3_837.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing cluster features for num 115
[LOG] Saving tensor x_4_837.pt
[LOG] Saving tensor n0_to_0_837.pt
[LOG] Saving tensor n1_to_1_837.pt
[LOG] Saving tensor n2_to_2_837.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n3_to_3_837.pt
[LOG] Saving tensor n4_to_4_837.pt
[LOG] Processing adjacency and incidence matrices for num 115
[LOG] Computing n0_to_0 for num 115
[LOG] Saving tensor n0_to_1_837.pt
[LOG] Saving tensor n0_to_2_837.pt
[LOG] Saving tensor n0_to_3_837.pt
[LOG] Saving tensor n0_to_4_837.pt
[LOG] Saving tensor n1_to_2_837.pt
[LOG] Saving tensor n1_to_3_837.pt
[LOG] Saving tensor n1_to_4_837.pt
[LOG] Saving tensor n2_to_3_837.pt
[LOG] Computing n0_to_2 for num 595
[LOG] Saving tensor n2_to_4_837.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n3_to_4_837.pt
[LOG] Saving tensor global_feature_837.pt
[LOG] Process 104: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_1 for num 115
[LOG] We will select 1307 edges and 5395 tetra
[LOG] Edges from tetra 0 and KDTree 1307 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n2_to_2 (adjacency) for num 949
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_3 (adjacency) for num 949
[LOG] Computing n4_to_4 (coadjacency) for num 949
[LOG] Computing n2_to_2 (adjacency) for num 115
[LOG] Computing n0_to_1 for num 949
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_2 for num 949
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 115
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n4_to_4 (coadjacency) for num 115
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n0_to_1 for num 115
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n0_to_3 for num 595
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_2 for num 115
[LOG] Computing n0_to_4 for num 595
[LOG] Computing n1_to_2 for num 595
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n0_to_3 for num 949
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_4 for num 949
[LOG] Computing n1_to_2 for num 949
[LOG] Computing n0_to_3 for num 115
[LOG] Computing n0_to_4 for num 115
[LOG] Computing n1_to_2 for num 115
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_3 for num 595
[LOG] Computing n1_to_4 for num 595
[LOG] Computing n2_to_3 for num 595
[LOG] Computing n1_to_3 for num 949
[LOG] Computing n2_to_4 for num 595
[LOG] Computing n1_to_4 for num 949
[LOG] Computing n2_to_3 for num 949
[LOG] GENERATED TETRA
[LOG] Computing n3_to_4 for num 595
[LOG] Global feature for num 595
[LOG] Global feature for num 595
[LOG] Saving tensor x_0_595.pt
[LOG] Saving tensor x_1_595.pt
[LOG] Saving tensor x_2_595.pt
[LOG] GENERATED TETRA
[LOG] Computing n2_to_4 for num 949
[LOG] Saving tensor x_3_595.pt
[LOG] Saving tensor x_4_595.pt
[LOG] Saving tensor n0_to_0_595.pt
[LOG] Saving tensor n1_to_1_595.pt
[LOG] Saving tensor n2_to_2_595.pt
[LOG] Saving tensor n3_to_3_595.pt
[LOG] Computing n3_to_4 for num 949
[LOG] Saving tensor n4_to_4_595.pt
[LOG] Global feature for num 949
[LOG] Global feature for num 949
[LOG] Saving tensor x_0_949.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n0_to_1_595.pt
[LOG] Computing n1_to_3 for num 115
[LOG] Computing n1_to_4 for num 115
[LOG] Computing n2_to_3 for num 115
[LOG] Computing n2_to_4 for num 115
[LOG] Saving tensor x_1_949.pt
[LOG] Computing n3_to_4 for num 115
[LOG] Saving tensor n0_to_2_595.pt
[LOG] Global feature for num 115
[LOG] Global feature for num 115
[LOG] Saving tensor x_0_115.pt
[LOG] Saving tensor x_2_949.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor x_1_115.pt
[LOG] Saving tensor n0_to_3_595.pt
[LOG] Saving tensor x_3_949.pt
[LOG] Saving tensor x_2_115.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor x_3_115.pt
[LOG] Saving tensor n0_to_4_595.pt
[LOG] Saving tensor x_4_949.pt
[LOG] Saving tensor x_4_115.pt
[LOG] Saving tensor n0_to_0_949.pt
[LOG] Saving tensor n0_to_0_115.pt
[LOG] Saving tensor n1_to_2_595.pt
[LOG] Saving tensor n1_to_1_949.pt
[LOG] Saving tensor n1_to_1_115.pt
[LOG] Saving tensor n1_to_3_595.pt
[LOG] Saving tensor n2_to_2_115.pt
[LOG] Saving tensor n2_to_2_949.pt
[LOG] Saving tensor n1_to_4_595.pt
[LOG] Saving tensor n3_to_3_115.pt
[LOG] Saving tensor n3_to_3_949.pt
[LOG] Saving tensor n4_to_4_115.pt
[LOG] Saving tensor n2_to_3_595.pt
[LOG] Saving tensor n4_to_4_949.pt
[LOG] Saving tensor n0_to_1_115.pt
[LOG] Saving tensor n2_to_4_595.pt
[LOG] Saving tensor n0_to_1_949.pt
[LOG] Saving tensor n0_to_2_115.pt
[LOG] Saving tensor n3_to_4_595.pt
[LOG] Saving tensor n0_to_2_949.pt
[LOG] Saving tensor global_feature_595.pt
[LOG] Saving tensor n0_to_3_115.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1588 Tetrahedra.
    [LOG] Generated 44 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.659090909090908
    [LOG] Max number of nodes per cluster is 39 and the number is 42
[LOG] Process 74: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_3_949.pt
[LOG] Saving tensor n0_to_4_115.pt
[LOG] Saving tensor n0_to_4_949.pt
[LOG] Saving tensor n1_to_2_115.pt
[LOG] Saving tensor n1_to_2_949.pt
[LOG] Saving tensor n1_to_3_115.pt
[LOG] Saving tensor n1_to_4_115.pt
[LOG] Saving tensor n1_to_3_949.pt
[LOG] Saving tensor n2_to_3_115.pt
[LOG] Saving tensor n1_to_4_949.pt
[LOG] Saving tensor n2_to_4_115.pt
[LOG] Saving tensor n2_to_3_949.pt
[LOG] Saving tensor n3_to_4_115.pt
[LOG] Saving tensor n2_to_4_949.pt
[LOG] Saving tensor global_feature_115.pt
[LOG] Saving tensor n3_to_4_949.pt
[LOG] Process 14: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] We will select 235 edges and 1588 tetra
[LOG] Edges from tetra 0 and KDTree 351 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor global_feature_949.pt
[LOG] Process 120: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1832 Tetrahedra.
    [LOG] Generated 36 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 18.555555555555557
    [LOG] Max number of nodes per cluster is 102 and the number is 33
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] GENERATED TETRA
[LOG] We will select 246 edges and 1832 tetra
[LOG] Edges from tetra 0 and KDTree 1515 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 19: Created combinatorial complex for file data_157.hdf5
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1075 Tetrahedra.
    [LOG] Generated 35 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.485714285714286
    [LOG] Max number of nodes per cluster is 23 and the number is 17
[LOG] Calculating for cell ranks 4 and 4
[LOG] We will select 415 edges and 1075 tetra
[LOG] Edges from tetra 0 and KDTree 415 with 0 edges in common.
[LOG] Process 19: Calculating Neighbors
[LOG] Loading pickle file data_157.pickle
[LOG] Processing node features for num 157
[LOG] Processing edge features for num 157
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Processing tetra features for num 157
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Processing cluster features for num 157
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Processing cluster features for num 157
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Processing adjacency and incidence matrices for num 157
[LOG] Computing n0_to_0 for num 157
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_1 for num 157
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 0 subset clusters.
[LOG] Computing n2_to_2 (adjacency) for num 157
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n3_to_3 (adjacency) for num 157
[LOG] Computing n4_to_4 (coadjacency) for num 157
[LOG] Computing n0_to_1 for num 157
[LOG] Computing n0_to_2 for num 157
[LOG] Process 102: Created combinatorial complex for file data_819.hdf5
[LOG] Calculating for cell ranks 0 and 1
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Removed 2 subset clusters.
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 102: Calculating Neighbors
[LOG] Loading pickle file data_819.pickle
[LOG] Processing node features for num 819
[LOG] Processing edge features for num 819
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing tetra features for num 819
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 54: Created combinatorial complex for file data_437.hdf5
[LOG] Computing n0_to_3 for num 157
[LOG] Processing cluster features for num 819
[LOG] Computing n0_to_4 for num 157
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing cluster features for num 819
[LOG] Computing n1_to_2 for num 157
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing adjacency and incidence matrices for num 819
[LOG] Computing n0_to_0 for num 819
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n1_to_1 for num 819
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_3 for num 157
[LOG] Computing n1_to_4 for num 157
[LOG] Computing n2_to_3 for num 157
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Process 54: Calculating Neighbors
[LOG] Loading pickle file data_437.pickle
[LOG] Processing node features for num 437
[LOG] Computing n2_to_4 for num 157
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Processing edge features for num 437
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Processing tetra features for num 437
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n3_to_4 for num 157
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Global feature for num 157
[LOG] Global feature for num 157
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor x_0_157.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor x_1_157.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor x_2_157.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor x_3_157.pt
[LOG] Saving tensor x_4_157.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n0_to_0_157.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n1_to_1_157.pt
[LOG] Processing cluster features for num 437
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n2_to_2_157.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n3_to_3_157.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n4_to_4_157.pt
[LOG] Processing cluster features for num 437
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1009 Tetrahedra.
    [LOG] Generated 37 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.702702702702704
    [LOG] Max number of nodes per cluster is 33 and the number is 6
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 819
[LOG] Saving tensor n0_to_1_157.pt
[LOG] Saving tensor n0_to_2_157.pt
[LOG] Processing adjacency and incidence matrices for num 437
[LOG] Computing n0_to_0 for num 437
[LOG] Saving tensor n0_to_3_157.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_1 for num 437
[LOG] Calculating for cell ranks 4 and 4
[LOG] We will select 183 edges and 1009 tetra
[LOG] Edges from tetra 0 and KDTree 935 with 0 edges in common.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n0_to_4_157.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n2_to_2 (adjacency) for num 437
[LOG] Computing n3_to_3 (adjacency) for num 819
[LOG] Computing n4_to_4 (coadjacency) for num 819
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_1 for num 819
[LOG] Computing n3_to_3 (adjacency) for num 437
[LOG] Computing n4_to_4 (coadjacency) for num 437
[LOG] Computing n0_to_1 for num 437
[LOG] Computing n0_to_2 for num 819
[LOG] Saving tensor n1_to_2_157.pt
[LOG] Computing n0_to_2 for num 437
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_3 for num 437
[LOG] Computing n0_to_4 for num 437
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Computing n1_to_2 for num 437
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] GENERATED TETRA
[LOG] Process 81: Created combinatorial complex for file data_649.hdf5
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 92: Created combinatorial complex for file data_741.hdf5
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_3 for num 437
[LOG] Computing n1_to_4 for num 437
[LOG] Computing n2_to_3 for num 437
[LOG] Computing n2_to_4 for num 437
[LOG] Computing n3_to_4 for num 437
[LOG] Global feature for num 437
[LOG] Global feature for num 437
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor x_0_437.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n1_to_3_157.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor x_1_437.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n0_to_3 for num 819
[LOG] Process 92: Calculating Neighbors
[LOG] Loading pickle file data_741.pickle
[LOG] Processing node features for num 741
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing edge features for num 741
[LOG] Computing n0_to_4 for num 819
[LOG] Processing tetra features for num 741
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n1_to_4_157.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor x_2_437.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n2_to_3_157.pt
[LOG] Saving tensor x_3_437.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n1_to_2 for num 819
[LOG] Saving tensor x_4_437.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n2_to_4_157.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n0_to_0_437.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n3_to_4_157.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Processing cluster features for num 741
[LOG] Saving tensor n1_to_1_437.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor global_feature_157.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Processing cluster features for num 741
[LOG] Processing adjacency and incidence matrices for num 741
[LOG] Computing n0_to_0 for num 741
[LOG] Computing n1_to_1 for num 741
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_2 (adjacency) for num 741
[LOG] Computing n1_to_3 for num 819
[LOG] Computing n1_to_4 for num 819
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n2_to_3 for num 819
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n3_to_3 (adjacency) for num 741
[LOG] Computing n2_to_4 for num 819
[LOG] Computing n4_to_4 (coadjacency) for num 741
[LOG] Computing n0_to_1 for num 741
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_2 for num 741
[LOG] Computing n3_to_4 for num 819
[LOG] Global feature for num 819
[LOG] Global feature for num 819
[LOG] Process 81: Calculating Neighbors
[LOG] Loading pickle file data_649.pickle
[LOG] Processing node features for num 649
[LOG] Saving tensor x_0_819.pt
[LOG] Processing edge features for num 649
[LOG] Saving tensor n2_to_2_437.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing tetra features for num 649
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_3 for num 741
[LOG] Computing n0_to_4 for num 741
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n1_to_2 for num 741
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing cluster features for num 649
[LOG] Computing n1_to_3 for num 741
[LOG] Computing n1_to_4 for num 741
[LOG] Computing n2_to_3 for num 741
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n2_to_4 for num 741
[LOG] Process 19: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n3_to_4 for num 741
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Global feature for num 741
[LOG] Global feature for num 741
[LOG] Saving tensor x_0_741.pt
[LOG] Processing cluster features for num 649
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing adjacency and incidence matrices for num 649
[LOG] Computing n0_to_0 for num 649
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor x_1_819.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n3_to_3_437.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1370 Tetrahedra.
    [LOG] Generated 48 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.541666666666666
    [LOG] Max number of nodes per cluster is 62 and the number is 9
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor x_1_741.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor x_2_741.pt
[LOG] Saving tensor x_3_741.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] We will select 213 edges and 1370 tetra
[LOG] Edges from tetra 0 and KDTree 2382 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_1 for num 649
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor x_2_819.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n4_to_4_437.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor x_4_741.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor x_3_819.pt
[LOG] Saving tensor n0_to_0_741.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n0_to_1_437.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor x_4_819.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n1_to_1_741.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n0_to_0_819.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n0_to_2_437.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n1_to_1_819.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n2_to_2_741.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n2_to_2_819.pt
[LOG] Saving tensor n0_to_3_437.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n0_to_4_437.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n3_to_3_741.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n1_to_2_437.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n1_to_3_437.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n4_to_4_741.pt
[LOG] Saving tensor n1_to_4_437.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n3_to_3_819.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n2_to_3_437.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n0_to_1_741.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n4_to_4_819.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n2_to_4_437.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n0_to_1_819.pt
[LOG] Saving tensor n0_to_2_741.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n3_to_4_437.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n0_to_2_819.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n0_to_3_741.pt
[LOG] Saving tensor global_feature_437.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Process 54: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n0_to_4_741.pt
[LOG] Saving tensor n0_to_3_819.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 982 Tetrahedra.
    [LOG] Generated 23 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 20.608695652173914
    [LOG] Max number of nodes per cluster is 70 and the number is 14
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 8: Created combinatorial complex for file data_69.hdf5
[LOG] We will select 119 edges and 982 tetra
[LOG] Edges from tetra 0 and KDTree 2280 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 3
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n1_to_2_741.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n0_to_4_819.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n1_to_3_741.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Process 8: Calculating Neighbors
[LOG] Loading pickle file data_69.pickle
[LOG] Processing node features for num 69
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing edge features for num 69
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n1_to_2_819.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n1_to_4_741.pt
[LOG] Saving tensor n1_to_3_819.pt
[LOG] Saving tensor n2_to_3_741.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Processing tetra features for num 69
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n1_to_4_819.pt
[LOG] Saving tensor n2_to_4_741.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n2_to_3_819.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n2_to_4_819.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n3_to_4_741.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n3_to_4_819.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor global_feature_741.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor global_feature_819.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Process 92: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 102: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing cluster features for num 69
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Processing cluster features for num 69
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing adjacency and incidence matrices for num 69
[LOG] Computing n0_to_0 for num 69
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_1 for num 69
[LOG] Process 23: Created combinatorial complex for file data_190.hdf5
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_2 (adjacency) for num 69
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 23: Calculating Neighbors
[LOG] Loading pickle file data_190.pickle
[LOG] Processing node features for num 190
[LOG] Processing edge features for num 190
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Processing tetra features for num 190
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Processing cluster features for num 190
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 69
[LOG] Processing cluster features for num 190
[LOG] Computing n4_to_4 (coadjacency) for num 69
[LOG] Computing n0_to_1 for num 69
[LOG] Processing adjacency and incidence matrices for num 190
[LOG] Computing n0_to_0 for num 190
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2210 Tetrahedra.
    [LOG] Generated 42 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.047619047619047
    [LOG] Max number of nodes per cluster is 86 and the number is 36
[LOG] Computing n1_to_1 for num 190
[LOG] Computing n0_to_2 for num 69
[LOG] Computing n1_to_3 for num 561
[LOG] Computing n2_to_2 (adjacency) for num 190
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] We will select 600 edges and 2210 tetra
[LOG] Edges from tetra 0 and KDTree 782 with 0 edges in common.
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 190
[LOG] Computing n4_to_4 (coadjacency) for num 190
[LOG] Computing n0_to_1 for num 190
[LOG] Computing n0_to_2 for num 190
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_4 for num 561
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_3 for num 561
[LOG] Computing n0_to_3 for num 190
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_4 for num 190
[LOG] Computing n0_to_3 for num 69
[LOG] Computing n1_to_2 for num 190
[LOG] Computing n0_to_4 for num 69
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_3 for num 190
[LOG] Computing n1_to_4 for num 190
[LOG] Computing n2_to_3 for num 190
[LOG] Computing n1_to_2 for num 69
[LOG] Computing n2_to_4 for num 190
[LOG] Computing n3_to_4 for num 190
[LOG] Global feature for num 190
[LOG] Global feature for num 190
[LOG] Saving tensor x_0_190.pt
[LOG] Saving tensor x_1_190.pt
[LOG] Saving tensor x_2_190.pt
[LOG] Saving tensor x_3_190.pt
[LOG] Saving tensor x_4_190.pt
[LOG] Saving tensor n0_to_0_190.pt
[LOG] Saving tensor n1_to_1_190.pt
[LOG] Saving tensor n2_to_2_190.pt
[LOG] Saving tensor n3_to_3_190.pt
[LOG] Saving tensor n4_to_4_190.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n0_to_1_190.pt
[LOG] Saving tensor n0_to_2_190.pt
[LOG] Saving tensor n0_to_3_190.pt
[LOG] Saving tensor n0_to_4_190.pt
[LOG] Saving tensor n1_to_2_190.pt
[LOG] Saving tensor n1_to_3_190.pt
[LOG] Saving tensor n1_to_4_190.pt
[LOG] Saving tensor n2_to_3_190.pt
[LOG] Saving tensor n2_to_4_190.pt
[LOG] Saving tensor n3_to_4_190.pt
[LOG] Saving tensor global_feature_190.pt
[LOG] Process 23: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_3 for num 69
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_4 for num 69
[LOG] Computing n2_to_3 for num 69
[LOG] Computing n2_to_4 for num 69
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_4 for num 69
[LOG] Global feature for num 69
[LOG] Global feature for num 69
[LOG] Saving tensor x_0_69.pt
[LOG] Saving tensor x_1_69.pt
[LOG] Saving tensor x_2_69.pt
[LOG] Saving tensor x_3_69.pt
[LOG] Saving tensor x_4_69.pt
[LOG] Saving tensor n0_to_0_69.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n1_to_1_69.pt
[LOG] Saving tensor n2_to_2_69.pt
[LOG] Saving tensor n3_to_3_69.pt
[LOG] Saving tensor n4_to_4_69.pt
[LOG] Saving tensor n0_to_1_69.pt
[LOG] Saving tensor n0_to_2_69.pt
[LOG] Saving tensor n0_to_3_69.pt
[LOG] Saving tensor n0_to_4_69.pt
[LOG] Saving tensor n1_to_2_69.pt
[LOG] Saving tensor n1_to_3_69.pt
[LOG] Saving tensor n1_to_4_69.pt
[LOG] Saving tensor n2_to_3_69.pt
[LOG] Saving tensor n2_to_4_69.pt
[LOG] Saving tensor n3_to_4_69.pt
[LOG] Saving tensor global_feature_69.pt
[LOG] Process 8: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n2_to_4 for num 561
[LOG] Calculating for cell ranks 1 and 1
[LOG] GENERATED TETRA
[LOG] Computing n2_to_2 (adjacency) for num 649
[LOG] Removed 0 subset clusters.
[LOG] Computing n3_to_4 for num 561
[LOG] Global feature for num 561
[LOG] Global feature for num 561
[LOG] Saving tensor x_0_561.pt
[LOG] Saving tensor x_1_561.pt
[LOG] Saving tensor x_2_561.pt
[LOG] Saving tensor x_3_561.pt
[LOG] Saving tensor x_4_561.pt
[LOG] Saving tensor n0_to_0_561.pt
[LOG] Saving tensor n1_to_1_561.pt
[LOG] Saving tensor n2_to_2_561.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 86: Created combinatorial complex for file data_692.hdf5
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n3_to_3_561.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n4_to_4_561.pt
[LOG] Saving tensor n0_to_1_561.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n0_to_2_561.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n0_to_3_561.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n0_to_4_561.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n1_to_2_561.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n1_to_3_561.pt
[LOG] Saving tensor n1_to_4_561.pt
[LOG] Saving tensor n2_to_3_561.pt
[LOG] Saving tensor n2_to_4_561.pt
[LOG] Saving tensor n3_to_4_561.pt
[LOG] Saving tensor global_feature_561.pt
[LOG] Process 70: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 86: Calculating Neighbors
[LOG] Loading pickle file data_692.pickle
[LOG] Processing node features for num 692
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing edge features for num 692
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] GENERATED TETRA
[LOG] Processing tetra features for num 692
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing cluster features for num 692
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Processing cluster features for num 692
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 692
[LOG] Computing n0_to_0 for num 692
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_1 for num 692
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1588 Tetrahedra.
    [LOG] Generated 40 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.55
    [LOG] Max number of nodes per cluster is 56 and the number is 31
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] We will select 267 edges and 1588 tetra
[LOG] Edges from tetra 0 and KDTree 343 with 0 edges in common.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_2 (adjacency) for num 692
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 692
[LOG] Computing n4_to_4 (coadjacency) for num 692
[LOG] Computing n0_to_1 for num 692
[LOG] Removed 4 subset clusters.

    [LOG] We Currently have 3312 Tetrahedra.
    [LOG] Generated 95 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.357894736842105
    [LOG] Max number of nodes per cluster is 57 and the number is 48
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_2 for num 692
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 1 subset clusters.
[LOG] We will select 553 edges and 3312 tetra
[LOG] Edges from tetra 0 and KDTree 2253 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_3 for num 692
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_4 for num 692
[LOG] Process 46: Created combinatorial complex for file data_375.hdf5
[LOG] Computing n1_to_2 for num 692
[LOG] Process 46: Calculating Neighbors
[LOG] Loading pickle file data_375.pickle
[LOG] Processing node features for num 375
[LOG] Processing edge features for num 375
[LOG] Processing tetra features for num 375
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 2108 Tetrahedra.
    [LOG] Generated 48 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.666666666666668
    [LOG] Max number of nodes per cluster is 49 and the number is 21
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing cluster features for num 375
[LOG] Processing cluster features for num 375
[LOG] Processing adjacency and incidence matrices for num 375
[LOG] Computing n0_to_0 for num 375
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_1 for num 375
[LOG] We will select 349 edges and 2108 tetra
[LOG] Edges from tetra 0 and KDTree 349 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n3_to_3 (adjacency) for num 649
[LOG] Computing n2_to_2 (adjacency) for num 375
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n4_to_4 (coadjacency) for num 649
[LOG] Computing n0_to_1 for num 649
[LOG] Computing n1_to_3 for num 692
[LOG] Computing n1_to_4 for num 692
[LOG] Computing n2_to_3 for num 692
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_4 for num 692
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_3 (adjacency) for num 375
[LOG] Computing n4_to_4 (coadjacency) for num 375
[LOG] Computing n0_to_1 for num 375
[LOG] Computing n3_to_4 for num 692
[LOG] Global feature for num 692
[LOG] Global feature for num 692
[LOG] Saving tensor x_0_692.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor x_1_692.pt
[LOG] Computing n0_to_2 for num 375
[LOG] Saving tensor x_2_692.pt
[LOG] Saving tensor x_3_692.pt
[LOG] Saving tensor x_4_692.pt
[LOG] Saving tensor n0_to_0_692.pt
[LOG] Saving tensor n1_to_1_692.pt
[LOG] Saving tensor n2_to_2_692.pt
[LOG] Saving tensor n3_to_3_692.pt
[LOG] Saving tensor n4_to_4_692.pt
[LOG] Saving tensor n0_to_1_692.pt
[LOG] Saving tensor n0_to_2_692.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n0_to_3_692.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n0_to_4_692.pt
[LOG] Saving tensor n1_to_2_692.pt
[LOG] Saving tensor n1_to_3_692.pt
[LOG] Saving tensor n1_to_4_692.pt
[LOG] Saving tensor n2_to_3_692.pt
[LOG] Saving tensor n2_to_4_692.pt
[LOG] Saving tensor n3_to_4_692.pt
[LOG] Saving tensor global_feature_692.pt
[LOG] Process 86: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_3 for num 375
[LOG] Computing n0_to_4 for num 375
[LOG] Computing n0_to_2 for num 649
[LOG] GENERATED TETRA
[LOG] Computing n1_to_2 for num 375
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_3 for num 375
[LOG] Computing n1_to_4 for num 375
[LOG] Computing n2_to_3 for num 375
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n2_to_4 for num 375
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n3_to_4 for num 375
[LOG] Global feature for num 375
[LOG] Global feature for num 375
[LOG] Saving tensor x_0_375.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor x_1_375.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor x_2_375.pt
[LOG] Saving tensor x_3_375.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor x_4_375.pt
[LOG] Saving tensor n0_to_0_375.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n1_to_1_375.pt
[LOG] Saving tensor n2_to_2_375.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n3_to_3_375.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n4_to_4_375.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n0_to_1_375.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n0_to_2_375.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n0_to_3_375.pt
[LOG] Saving tensor n0_to_4_375.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n1_to_2_375.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n1_to_3_375.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n1_to_4_375.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n2_to_3_375.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n2_to_4_375.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n3_to_4_375.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor global_feature_375.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Process 46: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1003 Tetrahedra.
    [LOG] Generated 32 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.25
    [LOG] Max number of nodes per cluster is 51 and the number is 18
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] We will select 106 edges and 1003 tetra
[LOG] Edges from tetra 0 and KDTree 891 with 0 edges in common.
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1193 Tetrahedra.
    [LOG] Generated 44 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.522727272727273
    [LOG] Max number of nodes per cluster is 72 and the number is 40
[LOG] Removed 5 subset clusters.
[LOG] We will select 178 edges and 1193 tetra
[LOG] Edges from tetra 0 and KDTree 1631 with 0 edges in common.
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 93: Created combinatorial complex for file data_746.hdf5
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 93: Calculating Neighbors
[LOG] Loading pickle file data_746.pickle
[LOG] Processing node features for num 746
[LOG] Processing edge features for num 746
[LOG] GENERATED TETRA
[LOG] Processing tetra features for num 746
[LOG] Removed 4 subset clusters.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Removed 0 subset clusters.
[LOG] Processing cluster features for num 746
[LOG] GENERATED TETRA
[LOG] Processing cluster features for num 746
[LOG] Processing adjacency and incidence matrices for num 746
[LOG] Computing n0_to_0 for num 746
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 90: Created combinatorial complex for file data_722.hdf5
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_1 for num 746
[LOG] Process 48: Created combinatorial complex for file data_388.hdf5
[LOG] Process 47: Created combinatorial complex for file data_382.hdf5
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 48: Calculating Neighbors
[LOG] Loading pickle file data_388.pickle
[LOG] Processing node features for num 388
[LOG] Processing edge features for num 388
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing tetra features for num 388
[LOG] Processing cluster features for num 388
[LOG] Process 47: Calculating Neighbors
[LOG] Loading pickle file data_382.pickle
[LOG] Processing node features for num 382
[LOG] Processing cluster features for num 388
[LOG] Processing edge features for num 382
[LOG] Processing adjacency and incidence matrices for num 388
[LOG] Computing n0_to_0 for num 388
[LOG] Computing n1_to_1 for num 388
[LOG] Processing tetra features for num 382
[LOG] Computing n2_to_2 (adjacency) for num 388
[LOG] Processing cluster features for num 382
[LOG] Computing n2_to_2 (adjacency) for num 746
[LOG] Processing cluster features for num 382
[LOG] Process 90: Calculating Neighbors
[LOG] Loading pickle file data_722.pickle
[LOG] Processing node features for num 722
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing edge features for num 722
[LOG] Processing adjacency and incidence matrices for num 382
[LOG] Computing n0_to_0 for num 382
[LOG] Computing n3_to_3 (adjacency) for num 388
[LOG] Computing n4_to_4 (coadjacency) for num 388
[LOG] Computing n0_to_1 for num 388
[LOG] Computing n0_to_2 for num 388
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing tetra features for num 722
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_1 for num 382
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_3 for num 388
[LOG] Computing n0_to_4 for num 388
[LOG] Computing n1_to_2 for num 388
[LOG] Processing cluster features for num 722
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1353 Tetrahedra.
    [LOG] Generated 37 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.08108108108108
    [LOG] Max number of nodes per cluster is 52 and the number is 13
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_2 (adjacency) for num 382
[LOG] Computing n1_to_3 for num 388
[LOG] Computing n1_to_4 for num 388
[LOG] Computing n2_to_3 for num 388
[LOG] Processing cluster features for num 722
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_4 for num 388
[LOG] Computing n3_to_4 for num 388
[LOG] Global feature for num 388
[LOG] Global feature for num 388
[LOG] Saving tensor x_0_388.pt
[LOG] Saving tensor x_1_388.pt
[LOG] We will select 201 edges and 1353 tetra
[LOG] Edges from tetra 0 and KDTree 959 with 0 edges in common.
[LOG] Saving tensor x_2_388.pt
[LOG] Processing adjacency and incidence matrices for num 722
[LOG] Computing n0_to_0 for num 722
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor x_3_388.pt
[LOG] Saving tensor x_4_388.pt
[LOG] Saving tensor n0_to_0_388.pt
[LOG] Saving tensor n1_to_1_388.pt
[LOG] Computing n3_to_3 (adjacency) for num 382
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n2_to_2_388.pt
[LOG] Computing n4_to_4 (coadjacency) for num 382
[LOG] Saving tensor n3_to_3_388.pt
[LOG] Computing n3_to_3 (adjacency) for num 746
[LOG] Saving tensor n4_to_4_388.pt
[LOG] Computing n0_to_1 for num 382
[LOG] Saving tensor n0_to_1_388.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n0_to_2_388.pt
[LOG] Computing n4_to_4 (coadjacency) for num 746
[LOG] Saving tensor n0_to_3_388.pt
[LOG] Saving tensor n0_to_4_388.pt
[LOG] Computing n0_to_1 for num 746
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n1_to_2_388.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n1_to_3_388.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n1_to_4_388.pt
[LOG] Saving tensor n2_to_3_388.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n2_to_4_388.pt
[LOG] Saving tensor n3_to_4_388.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor global_feature_388.pt
[LOG] Computing n0_to_2 for num 746
[LOG] Process 48: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n0_to_2 for num 382
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n1_to_1 for num 722
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n0_to_3 for num 649
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n0_to_4 for num 649
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n1_to_2 for num 649
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1353 Tetrahedra.
    [LOG] Generated 39 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.307692307692307
    [LOG] Max number of nodes per cluster is 57 and the number is 29
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n0_to_3 for num 746
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_4 for num 746
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_2 for num 746
[LOG] We will select 171 edges and 1353 tetra
[LOG] Edges from tetra 0 and KDTree 171 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_3 for num 382
[LOG] Computing n0_to_4 for num 382
[LOG] Process 10: Created combinatorial complex for file data_85.hdf5
[LOG] Computing n1_to_2 for num 382
[LOG] GENERATED TETRA
[LOG] Computing n1_to_3 for num 382
[LOG] Computing n1_to_4 for num 382
[LOG] Computing n2_to_3 for num 382
[LOG] Computing n2_to_2 (adjacency) for num 722
[LOG] Process 10: Calculating Neighbors
[LOG] Loading pickle file data_85.pickle
[LOG] Processing node features for num 85
[LOG] Computing n1_to_3 for num 746
[LOG] Processing edge features for num 85
[LOG] Computing n1_to_4 for num 746
[LOG] Computing n2_to_4 for num 382
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_3 for num 746
[LOG] Processing tetra features for num 85
[LOG] Computing n3_to_4 for num 382
[LOG] Global feature for num 382
[LOG] Global feature for num 382
[LOG] Saving tensor x_0_382.pt
[LOG] Saving tensor x_1_382.pt
[LOG] Saving tensor x_2_382.pt
[LOG] Saving tensor x_3_382.pt
[LOG] Computing n2_to_4 for num 746
[LOG] Saving tensor x_4_382.pt
[LOG] Saving tensor n0_to_0_382.pt
[LOG] Saving tensor n1_to_1_382.pt
[LOG] Saving tensor n2_to_2_382.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing cluster features for num 85
[LOG] Saving tensor n3_to_3_382.pt
[LOG] Saving tensor n4_to_4_382.pt
[LOG] Saving tensor n0_to_1_382.pt
[LOG] Saving tensor n0_to_2_382.pt
[LOG] Saving tensor n0_to_3_382.pt
[LOG] Processing cluster features for num 85
[LOG] Computing n3_to_4 for num 746
[LOG] Global feature for num 746
[LOG] Saving tensor n0_to_4_382.pt
[LOG] Global feature for num 746
[LOG] Saving tensor x_0_746.pt
[LOG] Saving tensor x_1_746.pt
[LOG] Saving tensor n1_to_2_382.pt
[LOG] Saving tensor x_2_746.pt
[LOG] Saving tensor x_3_746.pt
[LOG] Saving tensor x_4_746.pt
[LOG] Saving tensor n1_to_3_382.pt
[LOG] Saving tensor n0_to_0_746.pt
[LOG] Saving tensor n1_to_1_746.pt
[LOG] Processing adjacency and incidence matrices for num 85
[LOG] Computing n0_to_0 for num 85
[LOG] Saving tensor n1_to_4_382.pt
[LOG] Saving tensor n2_to_2_746.pt
[LOG] Saving tensor n2_to_3_382.pt
[LOG] Saving tensor n3_to_3_746.pt
[LOG] Saving tensor n2_to_4_382.pt
[LOG] Saving tensor n4_to_4_746.pt
[LOG] Saving tensor n0_to_1_746.pt
[LOG] Saving tensor n3_to_4_382.pt
[LOG] Saving tensor global_feature_382.pt
[LOG] Saving tensor n0_to_2_746.pt
[LOG] Process 47: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_3_746.pt
[LOG] Saving tensor n0_to_4_746.pt
[LOG] Saving tensor n1_to_2_746.pt
[LOG] Saving tensor n1_to_3_746.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n1_to_4_746.pt
[LOG] Computing n1_to_1 for num 85
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_2 (adjacency) for num 85
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n2_to_3_746.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n2_to_4_746.pt
[LOG] Saving tensor n3_to_4_746.pt
[LOG] Saving tensor global_feature_746.pt
[LOG] Process 93: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 85
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n4_to_4 (coadjacency) for num 85
[LOG] Computing n0_to_1 for num 85
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n0_to_2 for num 85
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1715 Tetrahedra.
    [LOG] Generated 53 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.30188679245283
    [LOG] Max number of nodes per cluster is 77 and the number is 29
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] We will select 405 edges and 1715 tetra
[LOG] Edges from tetra 0 and KDTree 3694 with 0 edges in common.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 73: Created combinatorial complex for file data_588.hdf5
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1401 Tetrahedra.
    [LOG] Generated 44 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.909090909090908
    [LOG] Max number of nodes per cluster is 52 and the number is 29
[LOG] Computing n3_to_3 (adjacency) for num 722
[LOG] Computing n4_to_4 (coadjacency) for num 722
[LOG] Computing n0_to_1 for num 722
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] We will select 753 edges and 1401 tetra
[LOG] Edges from tetra 0 and KDTree 1322 with 0 edges in common.
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n0_to_2 for num 722
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n0_to_3 for num 85
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_4 for num 85
[LOG] Computing n1_to_2 for num 85
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_3 for num 85
[LOG] Computing n1_to_4 for num 85
[LOG] Computing n2_to_3 for num 85
[LOG] Computing n2_to_4 for num 85
[LOG] Computing n3_to_4 for num 85
[LOG] Global feature for num 85
[LOG] Global feature for num 85
[LOG] Saving tensor x_0_85.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor x_1_85.pt
[LOG] Saving tensor x_2_85.pt
[LOG] Saving tensor x_3_85.pt
[LOG] Saving tensor x_4_85.pt
[LOG] Saving tensor n0_to_0_85.pt
[LOG] Saving tensor n1_to_1_85.pt
[LOG] Saving tensor n2_to_2_85.pt
[LOG] Saving tensor n3_to_3_85.pt
[LOG] Saving tensor n4_to_4_85.pt
[LOG] Saving tensor n0_to_1_85.pt
[LOG] Saving tensor n0_to_2_85.pt
[LOG] Saving tensor n0_to_3_85.pt
[LOG] Saving tensor n0_to_4_85.pt
[LOG] Saving tensor n1_to_2_85.pt
[LOG] Saving tensor n1_to_3_85.pt
[LOG] Saving tensor n1_to_4_85.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n2_to_3_85.pt
[LOG] Saving tensor n2_to_4_85.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n3_to_4_85.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor global_feature_85.pt
[LOG] Process 10: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 11: Created combinatorial complex for file data_93.hdf5
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 73: Calculating Neighbors
[LOG] Loading pickle file data_588.pickle
[LOG] Processing node features for num 588
[LOG] Processing edge features for num 588
[LOG] Processing tetra features for num 588
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing cluster features for num 588
[LOG] Process 26: Created combinatorial complex for file data_212.hdf5
[LOG] GENERATED TETRA
[LOG] Processing cluster features for num 588
[LOG] Process 11: Calculating Neighbors
[LOG] Loading pickle file data_93.pickle
[LOG] Processing node features for num 93
[LOG] Processing adjacency and incidence matrices for num 588
[LOG] Computing n0_to_0 for num 588
[LOG] GENERATED TETRA
[LOG] Processing edge features for num 93
[LOG] Computing n1_to_1 for num 588
[LOG] Computing n0_to_3 for num 722
[LOG] Processing tetra features for num 93
[LOG] Computing n0_to_4 for num 722
[LOG] Computing n2_to_2 (adjacency) for num 588
[LOG] Processing cluster features for num 93
[LOG] Process 26: Calculating Neighbors
[LOG] Loading pickle file data_212.pickle
[LOG] Processing node features for num 212
[LOG] Computing n1_to_2 for num 722
[LOG] Processing edge features for num 212
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing cluster features for num 93
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing adjacency and incidence matrices for num 93
[LOG] Computing n0_to_0 for num 93
[LOG] Processing tetra features for num 212
[LOG] Computing n3_to_3 (adjacency) for num 588
[LOG] Computing n4_to_4 (coadjacency) for num 588
[LOG] Computing n0_to_1 for num 588
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_2 for num 588
[LOG] Processing cluster features for num 212
[LOG] Processing cluster features for num 212
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing adjacency and incidence matrices for num 212
[LOG] Computing n0_to_0 for num 212
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1609 Tetrahedra.
    [LOG] Generated 39 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.974358974358974
    [LOG] Max number of nodes per cluster is 32 and the number is 34
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_3 for num 588
[LOG] Computing n0_to_4 for num 588
[LOG] GENERATED TETRA
[LOG] We will select 232 edges and 1609 tetra
[LOG] Edges from tetra 0 and KDTree 232 with 0 edges in common.
[LOG] Computing n1_to_1 for num 93
[LOG] Computing n1_to_2 for num 588
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_1 for num 212
[LOG] Computing n1_to_3 for num 588
[LOG] Computing n1_to_4 for num 588
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_3 for num 588
[LOG] Computing n1_to_3 for num 649
[LOG] Computing n2_to_4 for num 588
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n3_to_4 for num 588
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Global feature for num 588
[LOG] Global feature for num 588
[LOG] Saving tensor x_0_588.pt
[LOG] Saving tensor x_1_588.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor x_2_588.pt
[LOG] Saving tensor x_3_588.pt
[LOG] Saving tensor x_4_588.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n0_to_0_588.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n1_to_1_588.pt
[LOG] Computing n1_to_4 for num 649
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n2_to_2_588.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n3_to_3_588.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n4_to_4_588.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n0_to_1_588.pt
[LOG] Computing n2_to_2 (adjacency) for num 93
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n0_to_2_588.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n0_to_3_588.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n2_to_3 for num 649
[LOG] Saving tensor n0_to_4_588.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n1_to_2_588.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n1_to_3_588.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n1_to_4_588.pt
[LOG] Saving tensor n2_to_3_588.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n2_to_4_588.pt
[LOG] Saving tensor n3_to_4_588.pt
[LOG] Saving tensor global_feature_588.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n1_to_3 for num 722
[LOG] Computing n1_to_4 for num 722
[LOG] Computing n2_to_3 for num 722
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n3_to_3 (adjacency) for num 93
[LOG] Removed 4 subset clusters.

    [LOG] We Currently have 2732 Tetrahedra.
    [LOG] Generated 75 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.173333333333334
    [LOG] Max number of nodes per cluster is 49 and the number is 34
[LOG] Computing n4_to_4 (coadjacency) for num 93
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n0_to_1 for num 93
[LOG] Process 73: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n2_to_2 (adjacency) for num 212
[LOG] Computing n2_to_4 for num 722
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1464 Tetrahedra.
    [LOG] Generated 36 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 18.61111111111111
    [LOG] Max number of nodes per cluster is 52 and the number is 15
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_4 for num 649
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] We will select 586 edges and 1464 tetra
[LOG] Edges from tetra 0 and KDTree 1651 with 0 edges in common.
[LOG] Computing n3_to_4 for num 722
[LOG] Computing n3_to_3 (adjacency) for num 212
[LOG] Global feature for num 722
[LOG] Global feature for num 722
[LOG] Saving tensor x_0_722.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n4_to_4 (coadjacency) for num 212
[LOG] Saving tensor x_1_722.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n0_to_1 for num 212
[LOG] Saving tensor x_2_722.pt
[LOG] Saving tensor x_3_722.pt
[LOG] We will select 492 edges and 2732 tetra
[LOG] Edges from tetra 0 and KDTree 492 with 0 edges in common.
[LOG] Computing n0_to_2 for num 93
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor x_4_722.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n0_to_0_722.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n1_to_1_722.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n2_to_2_722.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n3_to_3_722.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n4_to_4_722.pt
[LOG] Saving tensor n0_to_1_722.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n0_to_2_722.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n0_to_3_722.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n0_to_4_722.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n1_to_2_722.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n1_to_3_722.pt
[LOG] Saving tensor n1_to_4_722.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n2_to_3_722.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n2_to_4_722.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n3_to_4_722.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n0_to_2 for num 212
[LOG] Saving tensor global_feature_722.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Process 90: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Computing n3_to_4 for num 649
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Global feature for num 649
[LOG] Global feature for num 649
[LOG] Saving tensor x_0_649.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor x_1_649.pt
[LOG] Saving tensor x_2_649.pt
[LOG] Saving tensor x_3_649.pt
[LOG] Saving tensor x_4_649.pt
[LOG] Saving tensor n0_to_0_649.pt
[LOG] Saving tensor n1_to_1_649.pt
[LOG] Saving tensor n2_to_2_649.pt
[LOG] Saving tensor n3_to_3_649.pt
[LOG] Saving tensor n4_to_4_649.pt
[LOG] Saving tensor n0_to_1_649.pt
[LOG] Saving tensor n0_to_2_649.pt
[LOG] Saving tensor n0_to_3_649.pt
[LOG] Saving tensor n0_to_4_649.pt
[LOG] Saving tensor n1_to_2_649.pt
[LOG] Saving tensor n1_to_3_649.pt
[LOG] Saving tensor n1_to_4_649.pt
[LOG] Saving tensor n2_to_3_649.pt
[LOG] Saving tensor n2_to_4_649.pt
[LOG] Saving tensor n3_to_4_649.pt
[LOG] Saving tensor global_feature_649.pt
[LOG] Process 81: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 55: Created combinatorial complex for file data_441.hdf5
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 55: Calculating Neighbors
[LOG] Loading pickle file data_441.pickle
[LOG] Processing node features for num 441
[LOG] Processing edge features for num 441
[LOG] Computing n0_to_3 for num 212
[LOG] Processing tetra features for num 441
[LOG] Computing n0_to_4 for num 212
[LOG] Processing cluster features for num 441
[LOG] Computing n1_to_2 for num 212
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3142 Tetrahedra.
    [LOG] Generated 70 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.385714285714286
    [LOG] Max number of nodes per cluster is 78 and the number is 69
[LOG] Process 78: Created combinatorial complex for file data_628.hdf5
[LOG] Processing cluster features for num 441
[LOG] Processing adjacency and incidence matrices for num 441
[LOG] Computing n0_to_0 for num 441
[LOG] Computing n1_to_1 for num 441
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 78: Calculating Neighbors
[LOG] Loading pickle file data_628.pickle
[LOG] Processing node features for num 628
[LOG] We will select 837 edges and 3142 tetra
[LOG] Edges from tetra 0 and KDTree 1562 with 0 edges in common.
[LOG] Processing edge features for num 628
[LOG] Computing n2_to_2 (adjacency) for num 441
[LOG] Processing tetra features for num 628
[LOG] Computing n0_to_3 for num 93
[LOG] Processing cluster features for num 628
[LOG] Computing n0_to_4 for num 93
[LOG] GENERATED TETRA
[LOG] Processing cluster features for num 628
[LOG] Processing adjacency and incidence matrices for num 628
[LOG] Computing n0_to_0 for num 628
[LOG] Computing n1_to_2 for num 93
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_3 (adjacency) for num 441
[LOG] Computing n4_to_4 (coadjacency) for num 441
[LOG] Computing n0_to_1 for num 441
[LOG] Computing n1_to_3 for num 212
[LOG] Computing n1_to_4 for num 212
[LOG] Computing n0_to_2 for num 441
[LOG] Computing n2_to_3 for num 212
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_4 for num 212
[LOG] Computing n3_to_4 for num 212
[LOG] Global feature for num 212
[LOG] Global feature for num 212
[LOG] Saving tensor x_0_212.pt
[LOG] Saving tensor x_1_212.pt
[LOG] Saving tensor x_2_212.pt
[LOG] Saving tensor x_3_212.pt
[LOG] Saving tensor x_4_212.pt
[LOG] Saving tensor n0_to_0_212.pt
[LOG] Computing n1_to_1 for num 628
[LOG] Saving tensor n1_to_1_212.pt
[LOG] Saving tensor n2_to_2_212.pt
[LOG] Saving tensor n3_to_3_212.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n4_to_4_212.pt
[LOG] Saving tensor n0_to_1_212.pt
[LOG] Saving tensor n0_to_2_212.pt
[LOG] Saving tensor n0_to_3_212.pt
[LOG] Saving tensor n0_to_4_212.pt
[LOG] Saving tensor n1_to_2_212.pt
[LOG] Saving tensor n1_to_3_212.pt
[LOG] Saving tensor n1_to_4_212.pt
[LOG] Saving tensor n2_to_3_212.pt
[LOG] Saving tensor n2_to_4_212.pt
[LOG] Saving tensor n3_to_4_212.pt
[LOG] Saving tensor global_feature_212.pt
[LOG] Process 26: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_3 for num 93
[LOG] Computing n1_to_4 for num 93
[LOG] Computing n0_to_3 for num 441
[LOG] Computing n0_to_4 for num 441
[LOG] Computing n2_to_3 for num 93
[LOG] Computing n1_to_2 for num 441
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_4 for num 93
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_4 for num 93
[LOG] Global feature for num 93
[LOG] Global feature for num 93
[LOG] Saving tensor x_0_93.pt
[LOG] Saving tensor x_1_93.pt
[LOG] Saving tensor x_2_93.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor x_3_93.pt
[LOG] Saving tensor x_4_93.pt
[LOG] Saving tensor n0_to_0_93.pt
[LOG] Saving tensor n1_to_1_93.pt
[LOG] Saving tensor n2_to_2_93.pt
[LOG] Saving tensor n3_to_3_93.pt
[LOG] Computing n1_to_3 for num 441
[LOG] Saving tensor n4_to_4_93.pt
[LOG] Computing n1_to_4 for num 441
[LOG] Saving tensor n0_to_1_93.pt
[LOG] Computing n2_to_3 for num 441
[LOG] Saving tensor n0_to_2_93.pt
[LOG] Saving tensor n0_to_3_93.pt
[LOG] Saving tensor n0_to_4_93.pt
[LOG] Computing n2_to_2 (adjacency) for num 628
[LOG] Saving tensor n1_to_2_93.pt
[LOG] Saving tensor n1_to_3_93.pt
[LOG] Computing n2_to_4 for num 441
[LOG] Saving tensor n1_to_4_93.pt
[LOG] Saving tensor n2_to_3_93.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n2_to_4_93.pt
[LOG] Saving tensor n3_to_4_93.pt
[LOG] Saving tensor global_feature_93.pt
[LOG] Computing n3_to_4 for num 441
[LOG] Global feature for num 441
[LOG] Global feature for num 441
[LOG] Saving tensor x_0_441.pt
[LOG] Process 11: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor x_1_441.pt
[LOG] Saving tensor x_2_441.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor x_3_441.pt
[LOG] Saving tensor x_4_441.pt
[LOG] Saving tensor n0_to_0_441.pt
[LOG] Saving tensor n1_to_1_441.pt
[LOG] Saving tensor n2_to_2_441.pt
[LOG] Saving tensor n3_to_3_441.pt
[LOG] Saving tensor n4_to_4_441.pt
[LOG] Saving tensor n0_to_1_441.pt
[LOG] Saving tensor n0_to_2_441.pt
[LOG] Saving tensor n0_to_3_441.pt
[LOG] Saving tensor n0_to_4_441.pt
[LOG] Saving tensor n1_to_2_441.pt
[LOG] Saving tensor n1_to_3_441.pt
[LOG] Saving tensor n1_to_4_441.pt
[LOG] Saving tensor n2_to_3_441.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n2_to_4_441.pt
[LOG] Saving tensor n3_to_4_441.pt
[LOG] Saving tensor global_feature_441.pt
[LOG] Process 55: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n3_to_3 (adjacency) for num 628
[LOG] Computing n4_to_4 (coadjacency) for num 628
[LOG] Computing n0_to_1 for num 628
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_2 for num 628
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 99: Created combinatorial complex for file data_795.hdf5
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1702 Tetrahedra.
    [LOG] Generated 51 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.352941176470589
    [LOG] Max number of nodes per cluster is 54 and the number is 49
[LOG] Computing n0_to_3 for num 628
[LOG] Process 99: Calculating Neighbors
[LOG] Loading pickle file data_795.pickle
[LOG] Processing node features for num 795
[LOG] Processing edge features for num 795
[LOG] GENERATED TETRA
[LOG] Computing n0_to_4 for num 628
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_2 for num 628
[LOG] Processing tetra features for num 795
[LOG] We will select 425 edges and 1702 tetra
[LOG] Edges from tetra 0 and KDTree 1976 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing cluster features for num 795
[LOG] GENERATED TETRA
[LOG] Processing cluster features for num 795
[LOG] Processing adjacency and incidence matrices for num 795
[LOG] Computing n0_to_0 for num 795
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1618 Tetrahedra.
    [LOG] Generated 33 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.848484848484848
    [LOG] Max number of nodes per cluster is 70 and the number is 31
[LOG] Computing n1_to_1 for num 795
[LOG] Calculating for cell ranks 0 and 1
[LOG] We will select 456 edges and 1618 tetra
[LOG] Edges from tetra 0 and KDTree 1279 with 0 edges in common.
[LOG] Computing n1_to_3 for num 628
[LOG] Computing n1_to_4 for num 628
[LOG] Computing n2_to_3 for num 628
[LOG] Computing n2_to_4 for num 628
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_4 for num 628
[LOG] Global feature for num 628
[LOG] Global feature for num 628
[LOG] Saving tensor x_0_628.pt
[LOG] Saving tensor x_1_628.pt
[LOG] Saving tensor x_2_628.pt
[LOG] Saving tensor x_3_628.pt
[LOG] Saving tensor x_4_628.pt
[LOG] Saving tensor n0_to_0_628.pt
[LOG] Saving tensor n1_to_1_628.pt
[LOG] Saving tensor n2_to_2_628.pt
[LOG] Saving tensor n3_to_3_628.pt
[LOG] Saving tensor n4_to_4_628.pt
[LOG] Saving tensor n0_to_1_628.pt
[LOG] Saving tensor n0_to_2_628.pt
[LOG] Saving tensor n0_to_3_628.pt
[LOG] Saving tensor n0_to_4_628.pt
[LOG] Saving tensor n1_to_2_628.pt
[LOG] Saving tensor n1_to_3_628.pt
[LOG] Saving tensor n1_to_4_628.pt
[LOG] Saving tensor n2_to_3_628.pt
[LOG] Saving tensor n2_to_4_628.pt
[LOG] Saving tensor n3_to_4_628.pt
[LOG] Saving tensor global_feature_628.pt
[LOG] Process 78: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_2 (adjacency) for num 795
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 638 Tetrahedra.
    [LOG] Generated 18 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.444444444444443
    [LOG] Max number of nodes per cluster is 76 and the number is 16
[LOG] Process 15: Created combinatorial complex for file data_126.hdf5
[LOG] We will select 315 edges and 638 tetra
[LOG] Edges from tetra 0 and KDTree 1376 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 15: Calculating Neighbors
[LOG] Loading pickle file data_126.pickle
[LOG] Processing node features for num 126
[LOG] Processing edge features for num 126
[LOG] Processing tetra features for num 126
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 0 subset clusters.
[LOG] Processing cluster features for num 126
[LOG] Process 24: Created combinatorial complex for file data_195.hdf5
[LOG] Processing cluster features for num 126
[LOG] Processing adjacency and incidence matrices for num 126
[LOG] Computing n0_to_0 for num 126
[LOG] Process 5: Created combinatorial complex for file data_46.hdf5
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 1 subset clusters.
[LOG] Computing n3_to_3 (adjacency) for num 795
[LOG] Computing n4_to_4 (coadjacency) for num 795
[LOG] Computing n0_to_1 for num 795
[LOG] Process 5: Calculating Neighbors
[LOG] Loading pickle file data_46.pickle
[LOG] Processing node features for num 46
[LOG] Processing edge features for num 46
[LOG] Process 24: Calculating Neighbors
[LOG] Loading pickle file data_195.pickle
[LOG] Processing node features for num 195
[LOG] Processing edge features for num 195
[LOG] Computing n1_to_1 for num 126
[LOG] Processing tetra features for num 46
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 915 Tetrahedra.
    [LOG] Generated 40 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.45
    [LOG] Max number of nodes per cluster is 33 and the number is 19
[LOG] Computing n0_to_2 for num 795
[LOG] Processing tetra features for num 195
[LOG] Processing cluster features for num 46
[LOG] Processing cluster features for num 46
[LOG] Processing adjacency and incidence matrices for num 46
[LOG] Computing n0_to_0 for num 46
[LOG] Processing cluster features for num 195
[LOG] We will select 81 edges and 915 tetra
[LOG] Edges from tetra 0 and KDTree 2686 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing cluster features for num 195
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing adjacency and incidence matrices for num 195
[LOG] Computing n0_to_0 for num 195
[LOG] Computing n1_to_1 for num 46
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_1 for num 195
[LOG] Computing n2_to_2 (adjacency) for num 46
[LOG] Computing n3_to_3 (adjacency) for num 46
[LOG] Computing n4_to_4 (coadjacency) for num 46
[LOG] Computing n2_to_2 (adjacency) for num 126
[LOG] Computing n0_to_1 for num 46
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_2 for num 46
[LOG] Removed 0 subset clusters.
[LOG] Process 50: Created combinatorial complex for file data_402.hdf5
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 126
[LOG] Computing n4_to_4 (coadjacency) for num 126
[LOG] Computing n0_to_1 for num 126
[LOG] Process 42: Created combinatorial complex for file data_343.hdf5
[LOG] Computing n2_to_2 (adjacency) for num 195
[LOG] Computing n0_to_3 for num 46
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_4 for num 46
[LOG] Computing n1_to_2 for num 46
[LOG] Computing n0_to_2 for num 126
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_3 for num 46
[LOG] Computing n1_to_4 for num 46
[LOG] Computing n2_to_3 for num 46
[LOG] Computing n2_to_4 for num 46
[LOG] Computing n0_to_3 for num 795
[LOG] Computing n3_to_4 for num 46
[LOG] Global feature for num 46
[LOG] Global feature for num 46
[LOG] Saving tensor x_0_46.pt
[LOG] Saving tensor x_1_46.pt
[LOG] Saving tensor x_2_46.pt
[LOG] Saving tensor x_3_46.pt
[LOG] Computing n0_to_4 for num 795
[LOG] Saving tensor x_4_46.pt
[LOG] Saving tensor n0_to_0_46.pt
[LOG] Saving tensor n1_to_1_46.pt
[LOG] Saving tensor n2_to_2_46.pt
[LOG] Saving tensor n3_to_3_46.pt
[LOG] Saving tensor n4_to_4_46.pt
[LOG] Saving tensor n0_to_1_46.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_3 (adjacency) for num 195
[LOG] Saving tensor n0_to_2_46.pt
[LOG] Computing n4_to_4 (coadjacency) for num 195
[LOG] Computing n1_to_2 for num 795
[LOG] Saving tensor n0_to_3_46.pt
[LOG] Computing n0_to_1 for num 195
[LOG] Saving tensor n0_to_4_46.pt
[LOG] Saving tensor n1_to_2_46.pt
[LOG] Process 50: Calculating Neighbors
[LOG] Loading pickle file data_402.pickle
[LOG] Processing node features for num 402
[LOG] Saving tensor n1_to_3_46.pt
[LOG] Saving tensor n1_to_4_46.pt
[LOG] Processing edge features for num 402
[LOG] Saving tensor n2_to_3_46.pt
[LOG] Saving tensor n2_to_4_46.pt
[LOG] Saving tensor n3_to_4_46.pt
[LOG] Saving tensor global_feature_46.pt
[LOG] Process 5: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_2 for num 195
[LOG] Processing tetra features for num 402
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] Processing cluster features for num 402
[LOG] Processing cluster features for num 402
[LOG] Processing adjacency and incidence matrices for num 402
[LOG] Computing n0_to_0 for num 402
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_3 for num 126
[LOG] Computing n1_to_1 for num 402
[LOG] Computing n0_to_3 for num 195
[LOG] Computing n0_to_4 for num 126
[LOG] Computing n0_to_4 for num 195
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_3 for num 795
[LOG] Computing n1_to_2 for num 195
[LOG] Computing n1_to_2 for num 126
[LOG] Computing n1_to_4 for num 795
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_3 for num 795
[LOG] Process 42: Calculating Neighbors
[LOG] Loading pickle file data_343.pickle
[LOG] Processing node features for num 343
[LOG] Computing n2_to_4 for num 795
[LOG] Processing edge features for num 343
[LOG] Processing tetra features for num 343
[LOG] Processing cluster features for num 343
[LOG] Computing n3_to_4 for num 795
[LOG] Global feature for num 795
[LOG] Global feature for num 795
[LOG] Saving tensor x_0_795.pt
[LOG] Processing cluster features for num 343
[LOG] Saving tensor x_1_795.pt
[LOG] Saving tensor x_2_795.pt
[LOG] Saving tensor x_3_795.pt
[LOG] Saving tensor x_4_795.pt
[LOG] Saving tensor n0_to_0_795.pt
[LOG] Processing adjacency and incidence matrices for num 343
[LOG] Computing n0_to_0 for num 343
[LOG] Saving tensor n1_to_1_795.pt
[LOG] Saving tensor n2_to_2_795.pt
[LOG] Saving tensor n3_to_3_795.pt
[LOG] Saving tensor n4_to_4_795.pt
[LOG] Computing n1_to_3 for num 126
[LOG] Saving tensor n0_to_1_795.pt
[LOG] Saving tensor n0_to_2_795.pt
[LOG] Computing n1_to_4 for num 126
[LOG] Computing n1_to_3 for num 195
[LOG] Saving tensor n0_to_3_795.pt
[LOG] Saving tensor n0_to_4_795.pt
[LOG] Computing n1_to_4 for num 195
[LOG] Computing n2_to_3 for num 126
[LOG] Saving tensor n1_to_2_795.pt
[LOG] Saving tensor n1_to_3_795.pt
[LOG] Computing n2_to_3 for num 195
[LOG] Saving tensor n1_to_4_795.pt
[LOG] Saving tensor n2_to_3_795.pt
[LOG] Saving tensor n2_to_4_795.pt
[LOG] Saving tensor n3_to_4_795.pt
[LOG] Computing n1_to_1 for num 343
[LOG] Saving tensor global_feature_795.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_4 for num 126
[LOG] Process 99: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n2_to_4 for num 195
[LOG] Computing n2_to_2 (adjacency) for num 343
[LOG] Computing n3_to_4 for num 195
[LOG] Global feature for num 195
[LOG] Global feature for num 195
[LOG] Saving tensor x_0_195.pt
[LOG] Computing n3_to_4 for num 126
[LOG] Global feature for num 126
[LOG] Global feature for num 126
[LOG] Saving tensor x_0_126.pt
[LOG] Saving tensor x_1_195.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor x_2_195.pt
[LOG] Saving tensor x_1_126.pt
[LOG] Saving tensor x_2_126.pt
[LOG] Saving tensor x_3_126.pt
[LOG] Saving tensor x_3_195.pt
[LOG] Saving tensor x_4_195.pt
[LOG] Saving tensor n0_to_0_195.pt
[LOG] Saving tensor x_4_126.pt
[LOG] Saving tensor n0_to_0_126.pt
[LOG] Saving tensor n1_to_1_195.pt
[LOG] Saving tensor n1_to_1_126.pt
[LOG] Saving tensor n2_to_2_195.pt
[LOG] GENERATED TETRA
[LOG] Computing n3_to_3 (adjacency) for num 343
[LOG] Saving tensor n2_to_2_126.pt
[LOG] Computing n4_to_4 (coadjacency) for num 343
[LOG] Computing n0_to_1 for num 343
[LOG] Saving tensor n3_to_3_195.pt
[LOG] Saving tensor n4_to_4_195.pt
[LOG] Saving tensor n3_to_3_126.pt
[LOG] Saving tensor n0_to_1_195.pt
[LOG] Saving tensor n4_to_4_126.pt
[LOG] Saving tensor n0_to_2_195.pt
[LOG] Saving tensor n0_to_1_126.pt
[LOG] Saving tensor n0_to_3_195.pt
[LOG] Saving tensor n0_to_2_126.pt
[LOG] Saving tensor n0_to_4_195.pt
[LOG] Saving tensor n1_to_2_195.pt
[LOG] Computing n0_to_2 for num 343
[LOG] Saving tensor n0_to_3_126.pt
[LOG] Saving tensor n1_to_3_195.pt
[LOG] Saving tensor n0_to_4_126.pt
[LOG] Saving tensor n1_to_4_195.pt
[LOG] Saving tensor n1_to_2_126.pt
[LOG] Saving tensor n2_to_3_195.pt
[LOG] Saving tensor n1_to_3_126.pt
[LOG] Saving tensor n2_to_4_195.pt
[LOG] Saving tensor n3_to_4_195.pt
[LOG] Saving tensor n1_to_4_126.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor global_feature_195.pt
[LOG] Process 24: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n2_to_3_126.pt
[LOG] Saving tensor n2_to_4_126.pt
[LOG] Saving tensor n3_to_4_126.pt
[LOG] Saving tensor global_feature_126.pt
[LOG] Process 15: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_2 (adjacency) for num 402
[LOG] Computing n0_to_3 for num 343
[LOG] Computing n0_to_4 for num 343
[LOG] GENERATED TETRA
[LOG] Computing n1_to_2 for num 343
[LOG] Computing n1_to_3 for num 343
[LOG] Computing n1_to_4 for num 343
[LOG] Computing n2_to_3 for num 343
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_4 for num 343
[LOG] Computing n3_to_4 for num 343
[LOG] Global feature for num 343
[LOG] Global feature for num 343
[LOG] Saving tensor x_0_343.pt
[LOG] Saving tensor x_1_343.pt
[LOG] Saving tensor x_2_343.pt
[LOG] Saving tensor x_3_343.pt
[LOG] Saving tensor x_4_343.pt
[LOG] Saving tensor n0_to_0_343.pt
[LOG] Saving tensor n1_to_1_343.pt
[LOG] Saving tensor n2_to_2_343.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n3_to_3_343.pt
[LOG] Saving tensor n4_to_4_343.pt
[LOG] Saving tensor n0_to_1_343.pt
[LOG] Saving tensor n0_to_2_343.pt
[LOG] Saving tensor n0_to_3_343.pt
[LOG] Saving tensor n0_to_4_343.pt
[LOG] Saving tensor n1_to_2_343.pt
[LOG] Saving tensor n1_to_3_343.pt
[LOG] Saving tensor n1_to_4_343.pt
[LOG] Saving tensor n2_to_3_343.pt
[LOG] Saving tensor n2_to_4_343.pt
[LOG] Saving tensor n3_to_4_343.pt
[LOG] Saving tensor global_feature_343.pt
[LOG] Process 42: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n3_to_3 (adjacency) for num 402
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n4_to_4 (coadjacency) for num 402
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n0_to_1 for num 402
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_2 for num 402
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1627 Tetrahedra.
    [LOG] Generated 43 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.790697674418606
    [LOG] Max number of nodes per cluster is 44 and the number is 42
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] We will select 144 edges and 1627 tetra
[LOG] Edges from tetra 0 and KDTree 1497 with 0 edges in common.
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_3 for num 402
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_4 for num 402
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n1_to_2 for num 402
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Process 13: Created combinatorial complex for file data_109.hdf5
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Process 13: Calculating Neighbors
[LOG] Loading pickle file data_109.pickle
[LOG] Processing node features for num 109
[LOG] Processing edge features for num 109
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Processing tetra features for num 109
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Processing cluster features for num 109
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing cluster features for num 109
[LOG] Processing adjacency and incidence matrices for num 109
[LOG] Computing n0_to_0 for num 109
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_1 for num 109
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 109
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_3 (adjacency) for num 109
[LOG] Computing n4_to_4 (coadjacency) for num 109
[LOG] Computing n0_to_1 for num 109
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n0_to_2 for num 109
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n1_to_3 for num 402
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n1_to_4 for num 402
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n2_to_3 for num 402
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n2_to_4 for num 402
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_4 for num 402
[LOG] Global feature for num 402
[LOG] Global feature for num 402
[LOG] Saving tensor x_0_402.pt
[LOG] Saving tensor x_1_402.pt
[LOG] Saving tensor x_2_402.pt
[LOG] Saving tensor x_3_402.pt
[LOG] Saving tensor x_4_402.pt
[LOG] Saving tensor n0_to_0_402.pt
[LOG] Saving tensor n1_to_1_402.pt
[LOG] Saving tensor n2_to_2_402.pt
[LOG] Saving tensor n3_to_3_402.pt
[LOG] Saving tensor n4_to_4_402.pt
[LOG] Saving tensor n0_to_1_402.pt
[LOG] Saving tensor n0_to_2_402.pt
[LOG] Saving tensor n0_to_3_402.pt
[LOG] Saving tensor n0_to_4_402.pt
[LOG] Saving tensor n1_to_2_402.pt
[LOG] Saving tensor n1_to_3_402.pt
[LOG] Saving tensor n1_to_4_402.pt
[LOG] Saving tensor n2_to_3_402.pt
[LOG] Saving tensor n2_to_4_402.pt
[LOG] Saving tensor n3_to_4_402.pt
[LOG] Saving tensor global_feature_402.pt
[LOG] Process 50: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_3 for num 109
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n0_to_4 for num 109
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_2 for num 109
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n1_to_3 for num 109
[LOG] Computing n1_to_4 for num 109
[LOG] Computing n2_to_3 for num 109
[LOG] Computing n2_to_4 for num 109
[LOG] Computing n3_to_4 for num 109
[LOG] Global feature for num 109
[LOG] Global feature for num 109
[LOG] Saving tensor x_0_109.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1452 Tetrahedra.
    [LOG] Generated 36 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 19.5
    [LOG] Max number of nodes per cluster is 162 and the number is 34
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor x_1_109.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor x_2_109.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor x_3_109.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor x_4_109.pt
[LOG] Saving tensor n0_to_0_109.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] We will select 279 edges and 1452 tetra
[LOG] Edges from tetra 0 and KDTree 8363 with 0 edges in common.
[LOG] Saving tensor n1_to_1_109.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n2_to_2_109.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n3_to_3_109.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n4_to_4_109.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n0_to_1_109.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n0_to_2_109.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n0_to_3_109.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n0_to_4_109.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n1_to_2_109.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n1_to_3_109.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n1_to_4_109.pt
[LOG] Saving tensor n2_to_3_109.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n2_to_4_109.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n3_to_4_109.pt
[LOG] Saving tensor global_feature_109.pt
[LOG] Process 13: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2513 Tetrahedra.
    [LOG] Generated 44 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 22.681818181818183
    [LOG] Max number of nodes per cluster is 178 and the number is 42
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1261 Tetrahedra.
    [LOG] Generated 37 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.324324324324323
    [LOG] Max number of nodes per cluster is 73 and the number is 29
[LOG] Removed 0 subset clusters.
[LOG] We will select 448 edges and 2513 tetra
[LOG] Edges from tetra 0 and KDTree 9098 with 0 edges in common.
[LOG] We will select 73 edges and 1261 tetra
[LOG] Edges from tetra 0 and KDTree 3147 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 108: Created combinatorial complex for file data_866.hdf5
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 108: Calculating Neighbors
[LOG] Loading pickle file data_866.pickle
[LOG] Processing node features for num 866
[LOG] Processing edge features for num 866
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing tetra features for num 866
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 866
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing cluster features for num 866
[LOG] Processing adjacency and incidence matrices for num 866
[LOG] Computing n0_to_0 for num 866
[LOG] Process 34: Created combinatorial complex for file data_277.hdf5
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 34: Calculating Neighbors
[LOG] Loading pickle file data_277.pickle
[LOG] Processing node features for num 277
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing edge features for num 277
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing tetra features for num 277
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing cluster features for num 277
[LOG] Computing n1_to_1 for num 866
[LOG] Processing cluster features for num 277
[LOG] Processing adjacency and incidence matrices for num 277
[LOG] Computing n0_to_0 for num 277
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_1 for num 277
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_2 (adjacency) for num 866
[LOG] Computing n2_to_2 (adjacency) for num 277
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 277
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n4_to_4 (coadjacency) for num 277
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n0_to_1 for num 277
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n0_to_2 for num 277
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_3 (adjacency) for num 866
[LOG] Computing n4_to_4 (coadjacency) for num 866
[LOG] Computing n0_to_1 for num 866
[LOG] GENERATED TETRA
[LOG] Process 52: Created combinatorial complex for file data_419.hdf5
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n0_to_2 for num 866
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Process 52: Calculating Neighbors
[LOG] Loading pickle file data_419.pickle
[LOG] Processing node features for num 419
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Processing edge features for num 419
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing tetra features for num 419
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing cluster features for num 419
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1379 Tetrahedra.
    [LOG] Generated 33 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.878787878787879
    [LOG] Max number of nodes per cluster is 36 and the number is 32
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_3 for num 277
[LOG] Processing cluster features for num 419
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_4 for num 277
[LOG] We will select 326 edges and 1379 tetra
[LOG] Edges from tetra 0 and KDTree 531 with 0 edges in common.
[LOG] Processing adjacency and incidence matrices for num 419
[LOG] Computing n0_to_0 for num 419
[LOG] Computing n1_to_2 for num 277
[LOG] Computing n1_to_3 for num 277
[LOG] Computing n1_to_4 for num 277
[LOG] Computing n2_to_3 for num 277
[LOG] Computing n2_to_4 for num 277
[LOG] Computing n3_to_4 for num 277
[LOG] Global feature for num 277
[LOG] Global feature for num 277
[LOG] Saving tensor x_0_277.pt
[LOG] Saving tensor x_1_277.pt
[LOG] Saving tensor x_2_277.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2097 Tetrahedra.
    [LOG] Generated 61 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.081967213114755
    [LOG] Max number of nodes per cluster is 31 and the number is 18
[LOG] Saving tensor x_3_277.pt
[LOG] Saving tensor x_4_277.pt
[LOG] Saving tensor n0_to_0_277.pt
[LOG] Saving tensor n1_to_1_277.pt
[LOG] Saving tensor n2_to_2_277.pt
[LOG] Saving tensor n3_to_3_277.pt
[LOG] Saving tensor n4_to_4_277.pt
[LOG] Saving tensor n0_to_1_277.pt
[LOG] Saving tensor n0_to_2_277.pt
[LOG] Saving tensor n0_to_3_277.pt
[LOG] Saving tensor n0_to_4_277.pt
[LOG] Saving tensor n1_to_2_277.pt
[LOG] Saving tensor n1_to_3_277.pt
[LOG] Saving tensor n1_to_4_277.pt
[LOG] Saving tensor n2_to_3_277.pt
[LOG] Saving tensor n2_to_4_277.pt
[LOG] Saving tensor n3_to_4_277.pt
[LOG] Saving tensor global_feature_277.pt
[LOG] Process 34: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] GENERATED TETRA
[LOG] We will select 404 edges and 2097 tetra
[LOG] Edges from tetra 0 and KDTree 460 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_1 for num 419
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_3 for num 866
[LOG] Computing n0_to_4 for num 866
[LOG] Removed 0 subset clusters.
[LOG] Computing n1_to_2 for num 866
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 12: Created combinatorial complex for file data_103.hdf5
[LOG] Computing n1_to_3 for num 866
[LOG] Computing n1_to_4 for num 866
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_3 for num 866
[LOG] Computing n2_to_2 (adjacency) for num 419
[LOG] Computing n2_to_4 for num 866
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n3_to_4 for num 866
[LOG] Global feature for num 866
[LOG] Global feature for num 866
[LOG] Saving tensor x_0_866.pt
[LOG] Saving tensor x_1_866.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor x_2_866.pt
[LOG] Saving tensor x_3_866.pt
[LOG] Saving tensor x_4_866.pt
[LOG] Saving tensor n0_to_0_866.pt
[LOG] Saving tensor n1_to_1_866.pt
[LOG] Process 12: Calculating Neighbors
[LOG] Loading pickle file data_103.pickle
[LOG] Processing node features for num 103
[LOG] Saving tensor n2_to_2_866.pt
[LOG] Processing edge features for num 103
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing tetra features for num 103
[LOG] Saving tensor n3_to_3_866.pt
[LOG] Saving tensor n4_to_4_866.pt
[LOG] Saving tensor n0_to_1_866.pt
[LOG] Saving tensor n0_to_2_866.pt
[LOG] Saving tensor n0_to_3_866.pt
[LOG] Saving tensor n0_to_4_866.pt
[LOG] Processing cluster features for num 103
[LOG] Saving tensor n1_to_2_866.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n1_to_3_866.pt
[LOG] Saving tensor n1_to_4_866.pt
[LOG] Saving tensor n2_to_3_866.pt
[LOG] Processing cluster features for num 103
[LOG] Saving tensor n2_to_4_866.pt
[LOG] Saving tensor n3_to_4_866.pt
[LOG] Saving tensor global_feature_866.pt
[LOG] Process 108: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing adjacency and incidence matrices for num 103
[LOG] Computing n0_to_0 for num 103
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_1 for num 103
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 0 subset clusters.
[LOG] Computing n2_to_2 (adjacency) for num 103
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3615 Tetrahedra.
    [LOG] Generated 94 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.648936170212766
    [LOG] Max number of nodes per cluster is 43 and the number is 33
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n3_to_3 (adjacency) for num 103
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n4_to_4 (coadjacency) for num 103
[LOG] Computing n0_to_1 for num 103
[LOG] Computing n0_to_2 for num 103
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2540 Tetrahedra.
    [LOG] Generated 75 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.16
    [LOG] Max number of nodes per cluster is 42 and the number is 5
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Process 124: Created combinatorial complex for file data_976.hdf5
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] We will select 680 edges and 3615 tetra
[LOG] Edges from tetra 0 and KDTree 2201 with 0 edges in common.
[LOG] Computing n3_to_3 (adjacency) for num 419
[LOG] Computing n4_to_4 (coadjacency) for num 419
[LOG] Computing n0_to_1 for num 419
[LOG] We will select 571 edges and 2540 tetra
[LOG] Edges from tetra 0 and KDTree 571 with 0 edges in common.
[LOG] Computing n0_to_3 for num 103
[LOG] Computing n0_to_4 for num 103
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_2 for num 103
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Process 124: Calculating Neighbors
[LOG] Loading pickle file data_976.pickle
[LOG] Processing node features for num 976
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Processing edge features for num 976
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Processing tetra features for num 976
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_2 for num 419
[LOG] Processing cluster features for num 976
[LOG] Computing n1_to_3 for num 103
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_4 for num 103
[LOG] Computing n2_to_3 for num 103
[LOG] Processing cluster features for num 976
[LOG] Computing n2_to_4 for num 103
[LOG] Processing adjacency and incidence matrices for num 976
[LOG] Computing n0_to_0 for num 976
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Computing n3_to_4 for num 103
[LOG] Global feature for num 103
[LOG] Global feature for num 103
[LOG] Saving tensor x_0_103.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor x_1_103.pt
[LOG] Saving tensor x_2_103.pt
[LOG] Saving tensor x_3_103.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor x_4_103.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_1 for num 976
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n0_to_0_103.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n1_to_1_103.pt
[LOG] Saving tensor n2_to_2_103.pt
[LOG] Saving tensor n3_to_3_103.pt
[LOG] Saving tensor n4_to_4_103.pt
[LOG] Saving tensor n0_to_1_103.pt
[LOG] Saving tensor n0_to_2_103.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n0_to_3_103.pt
[LOG] Saving tensor n0_to_4_103.pt
[LOG] Saving tensor n1_to_2_103.pt
[LOG] Saving tensor n1_to_3_103.pt
[LOG] Saving tensor n1_to_4_103.pt
[LOG] Saving tensor n2_to_3_103.pt
[LOG] Computing n2_to_2 (adjacency) for num 976
[LOG] Saving tensor n2_to_4_103.pt
[LOG] Saving tensor n3_to_4_103.pt
[LOG] Saving tensor global_feature_103.pt
[LOG] Process 12: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_3 (adjacency) for num 976
[LOG] Computing n4_to_4 (coadjacency) for num 976
[LOG] Computing n0_to_1 for num 976
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_2 for num 976
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3672 Tetrahedra.
    [LOG] Generated 87 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.149425287356323
    [LOG] Max number of nodes per cluster is 55 and the number is 36
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] We will select 842 edges and 3672 tetra
[LOG] Edges from tetra 0 and KDTree 842 with 0 edges in common.
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_3 for num 976
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_4 for num 976
[LOG] Computing n1_to_2 for num 976
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 85: Created combinatorial complex for file data_683.hdf5
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_3 for num 976
[LOG] Computing n1_to_4 for num 976
[LOG] Computing n2_to_3 for num 976
[LOG] Computing n2_to_4 for num 976
[LOG] Process 88: Created combinatorial complex for file data_706.hdf5
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_4 for num 976
[LOG] Global feature for num 976
[LOG] Global feature for num 976
[LOG] Saving tensor x_0_976.pt
[LOG] Computing n0_to_3 for num 419
[LOG] Saving tensor x_1_976.pt
[LOG] Saving tensor x_2_976.pt
[LOG] Saving tensor x_3_976.pt
[LOG] Saving tensor x_4_976.pt
[LOG] Saving tensor n0_to_0_976.pt
[LOG] Saving tensor n1_to_1_976.pt
[LOG] Saving tensor n2_to_2_976.pt
[LOG] Saving tensor n3_to_3_976.pt
[LOG] Saving tensor n4_to_4_976.pt
[LOG] Saving tensor n0_to_1_976.pt
[LOG] Saving tensor n0_to_2_976.pt
[LOG] Saving tensor n0_to_3_976.pt
[LOG] Computing n0_to_4 for num 419
[LOG] Saving tensor n0_to_4_976.pt
[LOG] Saving tensor n1_to_2_976.pt
[LOG] Saving tensor n1_to_3_976.pt
[LOG] Saving tensor n1_to_4_976.pt
[LOG] Saving tensor n2_to_3_976.pt
[LOG] Saving tensor n2_to_4_976.pt
[LOG] Saving tensor n3_to_4_976.pt
[LOG] Saving tensor global_feature_976.pt
[LOG] Process 85: Calculating Neighbors
[LOG] Loading pickle file data_683.pickle
[LOG] Processing node features for num 683
[LOG] Process 124: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing edge features for num 683
[LOG] Computing n1_to_2 for num 419
[LOG] Processing tetra features for num 683
[LOG] Process 88: Calculating Neighbors
[LOG] Loading pickle file data_706.pickle
[LOG] Processing node features for num 706
[LOG] Processing edge features for num 706
[LOG] Processing tetra features for num 706
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing cluster features for num 683
[LOG] Processing cluster features for num 706
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3965 Tetrahedra.
    [LOG] Generated 71 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 18.169014084507044
    [LOG] Max number of nodes per cluster is 125 and the number is 34
[LOG] Processing cluster features for num 683
[LOG] Processing cluster features for num 706
[LOG] Processing adjacency and incidence matrices for num 706
[LOG] Computing n0_to_0 for num 706
[LOG] Processing adjacency and incidence matrices for num 683
[LOG] Computing n0_to_0 for num 683
[LOG] GENERATED TETRA
[LOG] Computing n1_to_1 for num 706
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_3 for num 419
[LOG] Computing n1_to_4 for num 419
[LOG] We will select 1437 edges and 3965 tetra
[LOG] Edges from tetra 0 and KDTree 4455 with 0 edges in common.
[LOG] Computing n2_to_3 for num 419
[LOG] Computing n2_to_4 for num 419
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n3_to_4 for num 419
[LOG] Global feature for num 419
[LOG] Global feature for num 419
[LOG] Saving tensor x_0_419.pt
[LOG] Saving tensor x_1_419.pt
[LOG] Saving tensor x_2_419.pt
[LOG] Saving tensor x_3_419.pt
[LOG] Saving tensor x_4_419.pt
[LOG] Saving tensor n0_to_0_419.pt
[LOG] Saving tensor n1_to_1_419.pt
[LOG] Saving tensor n2_to_2_419.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n3_to_3_419.pt
[LOG] Saving tensor n4_to_4_419.pt
[LOG] Computing n1_to_1 for num 683
[LOG] Saving tensor n0_to_1_419.pt
[LOG] Saving tensor n0_to_2_419.pt
[LOG] Saving tensor n0_to_3_419.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n0_to_4_419.pt
[LOG] Saving tensor n1_to_2_419.pt
[LOG] Saving tensor n1_to_3_419.pt
[LOG] Saving tensor n1_to_4_419.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n2_to_3_419.pt
[LOG] Saving tensor n2_to_4_419.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n3_to_4_419.pt
[LOG] Saving tensor global_feature_419.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Process 52: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 706
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_3 (adjacency) for num 706
[LOG] Computing n4_to_4 (coadjacency) for num 706
[LOG] Computing n0_to_1 for num 706
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_2 for num 706
[LOG] Removed 2 subset clusters.
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 1861 Tetrahedra.
    [LOG] Generated 52 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.076923076923077
    [LOG] Max number of nodes per cluster is 44 and the number is 39
[LOG] Computing n2_to_2 (adjacency) for num 683
[LOG] Calculating for cell ranks 2 and 2
[LOG] We will select 233 edges and 1861 tetra
[LOG] Edges from tetra 0 and KDTree 3308 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 2218 Tetrahedra.
    [LOG] Generated 68 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.279411764705882
    [LOG] Max number of nodes per cluster is 47 and the number is 34
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_3 for num 706
[LOG] Computing n0_to_4 for num 706
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_2 for num 706
[LOG] We will select 515 edges and 2218 tetra
[LOG] Edges from tetra 0 and KDTree 515 with 0 edges in common.
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 864 Tetrahedra.
    [LOG] Generated 32 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.1875
    [LOG] Max number of nodes per cluster is 63 and the number is 30
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 66: Created combinatorial complex for file data_529.hdf5
[LOG] Calculating for cell ranks 3 and 4
[LOG] We will select 214 edges and 864 tetra
[LOG] Edges from tetra 0 and KDTree 1845 with 0 edges in common.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Process 66: Calculating Neighbors
[LOG] Loading pickle file data_529.pickle
[LOG] Processing node features for num 529
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing edge features for num 529
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Process 29: Created combinatorial complex for file data_237.hdf5
[LOG] Computing n1_to_3 for num 706
[LOG] Processing tetra features for num 529
[LOG] Computing n1_to_4 for num 706
[LOG] Computing n2_to_3 for num 706
[LOG] Process 65: Created combinatorial complex for file data_525.hdf5
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Process 29: Calculating Neighbors
[LOG] Loading pickle file data_237.pickle
[LOG] Processing node features for num 237
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Processing edge features for num 237
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n2_to_4 for num 706
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing cluster features for num 529
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n3_to_3 (adjacency) for num 683
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Processing tetra features for num 237
[LOG] Computing n4_to_4 (coadjacency) for num 683
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n0_to_1 for num 683
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Processing cluster features for num 237
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Processing cluster features for num 529
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Processing cluster features for num 237
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n3_to_4 for num 706
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Global feature for num 706
[LOG] Global feature for num 706
[LOG] Saving tensor x_0_706.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor x_1_706.pt
[LOG] Processing adjacency and incidence matrices for num 237
[LOG] Computing n0_to_0 for num 237
[LOG] Saving tensor x_2_706.pt
[LOG] Process 94: Created combinatorial complex for file data_754.hdf5
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor x_3_706.pt
[LOG] Saving tensor x_4_706.pt
[LOG] Saving tensor n0_to_0_706.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Processing adjacency and incidence matrices for num 529
[LOG] Computing n0_to_0 for num 529
[LOG] Process 65: Calculating Neighbors
[LOG] Loading pickle file data_525.pickle
[LOG] Processing node features for num 525
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n1_to_1_706.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n2_to_2_706.pt
[LOG] Processing edge features for num 525
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n3_to_3_706.pt
[LOG] Saving tensor n4_to_4_706.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n0_to_1_706.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n0_to_2_706.pt
[LOG] Processing tetra features for num 525
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n0_to_3_706.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n0_to_4_706.pt
[LOG] Computing n1_to_1 for num 237
[LOG] Saving tensor n1_to_2_706.pt
[LOG] Saving tensor n1_to_3_706.pt
[LOG] Saving tensor n1_to_4_706.pt
[LOG] Saving tensor n2_to_3_706.pt
[LOG] Saving tensor n2_to_4_706.pt
[LOG] Saving tensor n3_to_4_706.pt
[LOG] Saving tensor global_feature_706.pt
[LOG] Process 88: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing cluster features for num 525
[LOG] Computing n2_to_2 (adjacency) for num 237
[LOG] Processing cluster features for num 525
[LOG] Processing adjacency and incidence matrices for num 525
[LOG] Computing n0_to_0 for num 525
[LOG] Computing n1_to_1 for num 529
[LOG] Computing n3_to_3 (adjacency) for num 237
[LOG] Computing n4_to_4 (coadjacency) for num 237
[LOG] Computing n0_to_1 for num 237
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2174 Tetrahedra.
    [LOG] Generated 49 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.816326530612244
    [LOG] Max number of nodes per cluster is 54 and the number is 29
[LOG] Computing n0_to_2 for num 683
[LOG] Computing n1_to_1 for num 525
[LOG] Computing n0_to_2 for num 237
[LOG] Calculating for cell ranks 2 and 3
[LOG] We will select 413 edges and 2174 tetra
[LOG] Edges from tetra 0 and KDTree 413 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_2 (adjacency) for num 525
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 94: Calculating Neighbors
[LOG] Loading pickle file data_754.pickle
[LOG] Processing node features for num 754
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing edge features for num 754
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1075 Tetrahedra.
    [LOG] Generated 30 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 18.366666666666667
    [LOG] Max number of nodes per cluster is 92 and the number is 28
[LOG] Computing n0_to_3 for num 237
[LOG] Processing tetra features for num 754
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_4 for num 237
[LOG] We will select 415 edges and 1075 tetra
[LOG] Edges from tetra 0 and KDTree 6091 with 0 edges in common.
[LOG] Computing n1_to_2 for num 237
[LOG] Computing n3_to_3 (adjacency) for num 525
[LOG] Computing n4_to_4 (coadjacency) for num 525
[LOG] Computing n0_to_1 for num 525
[LOG] Computing n1_to_3 for num 237
[LOG] Computing n1_to_4 for num 237
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n2_to_3 for num 237
[LOG] Computing n2_to_4 for num 237
[LOG] Computing n0_to_2 for num 525
[LOG] Processing cluster features for num 754
[LOG] Computing n3_to_4 for num 237
[LOG] Global feature for num 237
[LOG] Global feature for num 237
[LOG] Saving tensor x_0_237.pt
[LOG] Saving tensor x_1_237.pt
[LOG] Saving tensor x_2_237.pt
[LOG] Saving tensor x_3_237.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor x_4_237.pt
[LOG] Saving tensor n0_to_0_237.pt
[LOG] Saving tensor n1_to_1_237.pt
[LOG] Saving tensor n2_to_2_237.pt
[LOG] Saving tensor n3_to_3_237.pt
[LOG] Saving tensor n4_to_4_237.pt
[LOG] Saving tensor n0_to_1_237.pt
[LOG] Saving tensor n0_to_2_237.pt
[LOG] Saving tensor n0_to_3_237.pt
[LOG] Saving tensor n0_to_4_237.pt
[LOG] Processing cluster features for num 754
[LOG] Saving tensor n1_to_2_237.pt
[LOG] Saving tensor n1_to_3_237.pt
[LOG] Processing adjacency and incidence matrices for num 754
[LOG] Computing n0_to_0 for num 754
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1280 Tetrahedra.
    [LOG] Generated 41 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.414634146341463
    [LOG] Max number of nodes per cluster is 48 and the number is 21
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n1_to_4_237.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 6733 Tetrahedra.
    [LOG] Generated 164 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.810975609756097
    [LOG] Max number of nodes per cluster is 72 and the number is 162
[LOG] Saving tensor n2_to_3_237.pt
[LOG] Saving tensor n2_to_4_237.pt
[LOG] Saving tensor n3_to_4_237.pt
[LOG] Saving tensor global_feature_237.pt
[LOG] Process 29: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 3
[LOG] We will select 142 edges and 1280 tetra
[LOG] Edges from tetra 0 and KDTree 760 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_3 for num 525
[LOG] Computing n2_to_2 (adjacency) for num 529
[LOG] Computing n0_to_4 for num 525
[LOG] Computing n1_to_2 for num 525
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 2 subset clusters.
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1672 Tetrahedra.
    [LOG] Generated 49 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.408163265306122
    [LOG] Max number of nodes per cluster is 30 and the number is 28
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] We will select 1752 edges and 6733 tetra
[LOG] Edges from tetra 0 and KDTree 1752 with 0 edges in common.
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n1_to_3 for num 525
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n1_to_4 for num 525
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n2_to_3 for num 525
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] We will select 156 edges and 1672 tetra
[LOG] Edges from tetra 0 and KDTree 156 with 0 edges in common.
[LOG] Computing n2_to_4 for num 525
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1524 Tetrahedra.
    [LOG] Generated 31 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 22.451612903225808
    [LOG] Max number of nodes per cluster is 116 and the number is 14
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Removed 2 subset clusters.
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Computing n3_to_4 for num 525
[LOG] Global feature for num 525
[LOG] Global feature for num 525
[LOG] Saving tensor x_0_525.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor x_1_525.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor x_2_525.pt
[LOG] Saving tensor x_3_525.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor x_4_525.pt
[LOG] Saving tensor n0_to_0_525.pt
[LOG] Saving tensor n1_to_1_525.pt
[LOG] Computing n1_to_1 for num 754
[LOG] Saving tensor n2_to_2_525.pt
[LOG] Process 104: Created combinatorial complex for file data_838.hdf5
[LOG] We will select 249 edges and 1524 tetra
[LOG] Edges from tetra 0 and KDTree 3754 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n3_to_3_525.pt
[LOG] Saving tensor n4_to_4_525.pt
[LOG] Saving tensor n0_to_1_525.pt
[LOG] Saving tensor n0_to_2_525.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n0_to_3_525.pt
[LOG] Saving tensor n0_to_4_525.pt
[LOG] Saving tensor n1_to_2_525.pt
[LOG] Saving tensor n1_to_3_525.pt
[LOG] Saving tensor n1_to_4_525.pt
[LOG] Saving tensor n2_to_3_525.pt
[LOG] Saving tensor n2_to_4_525.pt
[LOG] Saving tensor n3_to_4_525.pt
[LOG] Saving tensor global_feature_525.pt
[LOG] Process 65: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 101: Created combinatorial complex for file data_812.hdf5
[LOG] Process 104: Calculating Neighbors
[LOG] Loading pickle file data_838.pickle
[LOG] Processing node features for num 838
[LOG] Process 54: Created combinatorial complex for file data_438.hdf5
[LOG] Processing edge features for num 838
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing tetra features for num 838
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing cluster features for num 838
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing cluster features for num 838
[LOG] Process 43: Created combinatorial complex for file data_347.hdf5
[LOG] Process 54: Calculating Neighbors
[LOG] Loading pickle file data_438.pickle
[LOG] Processing node features for num 438
[LOG] Processing adjacency and incidence matrices for num 838
[LOG] Computing n0_to_0 for num 838
[LOG] Processing edge features for num 438
[LOG] Process 101: Calculating Neighbors
[LOG] Loading pickle file data_812.pickle
[LOG] Processing node features for num 812
[LOG] Processing edge features for num 812
[LOG] Processing tetra features for num 438
[LOG] Computing n1_to_1 for num 838
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing tetra features for num 812
[LOG] Processing cluster features for num 438
[LOG] Processing cluster features for num 438
[LOG] Computing n2_to_2 (adjacency) for num 838
[LOG] Processing adjacency and incidence matrices for num 438
[LOG] Computing n0_to_0 for num 438
[LOG] Processing cluster features for num 812
[LOG] Process 43: Calculating Neighbors
[LOG] Loading pickle file data_347.pickle
[LOG] Processing node features for num 347
[LOG] Processing cluster features for num 812
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing edge features for num 347
[LOG] Processing adjacency and incidence matrices for num 812
[LOG] Computing n0_to_0 for num 812
[LOG] Computing n3_to_3 (adjacency) for num 838
[LOG] Processing tetra features for num 347
[LOG] Computing n4_to_4 (coadjacency) for num 838
[LOG] Computing n0_to_1 for num 838
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_2 for num 838
[LOG] Computing n1_to_1 for num 812
[LOG] Processing cluster features for num 347
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1272 Tetrahedra.
    [LOG] Generated 52 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.26923076923077
    [LOG] Max number of nodes per cluster is 35 and the number is 45
[LOG] Computing n0_to_3 for num 683
[LOG] Computing n1_to_1 for num 438
[LOG] Computing n3_to_3 (adjacency) for num 529
[LOG] Processing cluster features for num 347
[LOG] Computing n4_to_4 (coadjacency) for num 529
[LOG] Computing n0_to_1 for num 529
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing adjacency and incidence matrices for num 347
[LOG] Computing n0_to_0 for num 347
[LOG] Computing n0_to_4 for num 683
[LOG] Removed 0 subset clusters.
[LOG] Process 76: Created combinatorial complex for file data_615.hdf5
[LOG] Computing n1_to_1 for num 347
[LOG] We will select 271 edges and 1272 tetra
[LOG] Edges from tetra 0 and KDTree 1313 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_2 for num 683
[LOG] Computing n2_to_2 (adjacency) for num 438
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_2 for num 529
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 438
[LOG] Computing n4_to_4 (coadjacency) for num 438
[LOG] Process 76: Calculating Neighbors
[LOG] Loading pickle file data_615.pickle
[LOG] Processing node features for num 615
[LOG] Computing n0_to_1 for num 438
[LOG] Processing edge features for num 615
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing tetra features for num 615
[LOG] Process 35: Created combinatorial complex for file data_284.hdf5
[LOG] Computing n0_to_3 for num 838
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_4 for num 838
[LOG] Processing cluster features for num 615
[LOG] Computing n2_to_2 (adjacency) for num 812
[LOG] Computing n1_to_2 for num 838
[LOG] Processing cluster features for num 615
[LOG] Computing n0_to_2 for num 438
[LOG] Computing n2_to_2 (adjacency) for num 347
[LOG] Processing adjacency and incidence matrices for num 615
[LOG] Computing n0_to_0 for num 615
[LOG] Computing n1_to_3 for num 838
[LOG] Computing n1_to_4 for num 838
[LOG] Computing n2_to_3 for num 838
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Process 35: Calculating Neighbors
[LOG] Loading pickle file data_284.pickle
[LOG] Processing node features for num 284
[LOG] Computing n2_to_4 for num 838
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Processing edge features for num 284
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_4 for num 838
[LOG] Global feature for num 838
[LOG] Processing tetra features for num 284
[LOG] Global feature for num 838
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor x_0_838.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor x_1_838.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor x_2_838.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor x_3_838.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor x_4_838.pt
[LOG] Saving tensor n0_to_0_838.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n1_to_1_838.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n2_to_2_838.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n3_to_3_838.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n4_to_4_838.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n0_to_1_838.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n0_to_2_838.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n0_to_3_838.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Processing cluster features for num 284
[LOG] Computing n1_to_1 for num 615
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n0_to_4_838.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n1_to_2_838.pt
[LOG] Saving tensor n1_to_3_838.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Processing cluster features for num 284
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n1_to_4_838.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n2_to_3_838.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n2_to_4_838.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n3_to_4_838.pt
[LOG] Saving tensor global_feature_838.pt
[LOG] Processing adjacency and incidence matrices for num 284
[LOG] Computing n0_to_0 for num 284
[LOG] Process 104: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_1 for num 284
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 7: Created combinatorial complex for file data_62.hdf5
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_3 (adjacency) for num 812
[LOG] Computing n4_to_4 (coadjacency) for num 812
[LOG] Computing n0_to_1 for num 812
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_2 (adjacency) for num 615
[LOG] Computing n3_to_3 (adjacency) for num 347
[LOG] Computing n4_to_4 (coadjacency) for num 347
[LOG] Computing n0_to_1 for num 347
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_2 (adjacency) for num 284
[LOG] Computing n0_to_2 for num 812
[LOG] Computing n0_to_2 for num 347
[LOG] Process 7: Calculating Neighbors
[LOG] Loading pickle file data_62.pickle
[LOG] Processing node features for num 62
[LOG] Processing edge features for num 62
[LOG] Processing tetra features for num 62
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_3 for num 438
[LOG] Processing cluster features for num 62
[LOG] Computing n3_to_3 (adjacency) for num 284
[LOG] Computing n4_to_4 (coadjacency) for num 284
[LOG] Computing n0_to_4 for num 438
[LOG] Computing n0_to_1 for num 284
[LOG] Processing cluster features for num 62
[LOG] Computing n3_to_3 (adjacency) for num 615
[LOG] Computing n0_to_2 for num 284
[LOG] Computing n4_to_4 (coadjacency) for num 615
[LOG] Computing n0_to_1 for num 615
[LOG] Computing n1_to_2 for num 438
[LOG] Processing adjacency and incidence matrices for num 62
[LOG] Computing n0_to_0 for num 62
[LOG] Computing n1_to_3 for num 683
[LOG] Computing n0_to_2 for num 615
[LOG] Computing n1_to_4 for num 683
[LOG] Computing n1_to_1 for num 62
[LOG] Computing n2_to_3 for num 683
[LOG] Computing n1_to_3 for num 438
[LOG] Computing n1_to_4 for num 438
[LOG] Computing n2_to_3 for num 438
[LOG] Computing n2_to_4 for num 438
[LOG] Computing n3_to_4 for num 438
[LOG] Global feature for num 438
[LOG] Global feature for num 438
[LOG] Saving tensor x_0_438.pt
[LOG] Saving tensor x_1_438.pt
[LOG] Saving tensor x_2_438.pt
[LOG] Saving tensor x_3_438.pt
[LOG] Saving tensor x_4_438.pt
[LOG] Saving tensor n0_to_0_438.pt
[LOG] Computing n0_to_3 for num 529
[LOG] Saving tensor n1_to_1_438.pt
[LOG] Saving tensor n2_to_2_438.pt
[LOG] Computing n0_to_3 for num 812
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2112 Tetrahedra.
    [LOG] Generated 61 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.032786885245901
    [LOG] Max number of nodes per cluster is 70 and the number is 60
[LOG] Computing n0_to_3 for num 347
[LOG] Saving tensor n3_to_3_438.pt
[LOG] Computing n2_to_2 (adjacency) for num 62
[LOG] Saving tensor n4_to_4_438.pt
[LOG] Saving tensor n0_to_1_438.pt
[LOG] Computing n0_to_3 for num 284
[LOG] Computing n0_to_4 for num 812
[LOG] Saving tensor n0_to_2_438.pt
[LOG] Computing n0_to_4 for num 347
[LOG] Computing n0_to_4 for num 529
[LOG] Saving tensor n0_to_3_438.pt
[LOG] Saving tensor n0_to_4_438.pt
[LOG] Computing n0_to_4 for num 284
[LOG] Computing n2_to_4 for num 683
[LOG] Computing n1_to_2 for num 812
[LOG] Computing n1_to_2 for num 347
[LOG] Saving tensor n1_to_2_438.pt
[LOG] Saving tensor n1_to_3_438.pt
[LOG] Computing n1_to_2 for num 284
[LOG] Saving tensor n1_to_4_438.pt
[LOG] Saving tensor n2_to_3_438.pt
[LOG] Saving tensor n2_to_4_438.pt
[LOG] Computing n1_to_2 for num 529
[LOG] Saving tensor n3_to_4_438.pt
[LOG] Saving tensor global_feature_438.pt
[LOG] Process 54: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 62
[LOG] Computing n4_to_4 (coadjacency) for num 62
[LOG] Computing n0_to_1 for num 62
[LOG] We will select 503 edges and 2112 tetra
[LOG] Edges from tetra 0 and KDTree 3472 with 0 edges in common.
[LOG] Computing n1_to_3 for num 284
[LOG] Computing n1_to_4 for num 284
[LOG] Computing n2_to_3 for num 284
[LOG] Computing n3_to_4 for num 683
[LOG] Global feature for num 683
[LOG] Global feature for num 683
[LOG] Saving tensor x_0_683.pt
[LOG] Saving tensor x_1_683.pt
[LOG] Saving tensor x_2_683.pt
[LOG] Saving tensor x_3_683.pt
[LOG] Saving tensor x_4_683.pt
[LOG] Saving tensor n0_to_0_683.pt
[LOG] Saving tensor n1_to_1_683.pt
[LOG] Computing n2_to_4 for num 284
[LOG] Computing n0_to_2 for num 62
[LOG] Saving tensor n2_to_2_683.pt
[LOG] Saving tensor n3_to_3_683.pt
[LOG] Saving tensor n4_to_4_683.pt
[LOG] Saving tensor n0_to_1_683.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_4 for num 284
[LOG] Saving tensor n0_to_2_683.pt
[LOG] Global feature for num 284
[LOG] Global feature for num 284
[LOG] Saving tensor x_0_284.pt
[LOG] Computing n2_to_2 (adjacency) for num 754
[LOG] Saving tensor x_1_284.pt
[LOG] Saving tensor n0_to_3_683.pt
[LOG] Saving tensor x_2_284.pt
[LOG] Saving tensor x_3_284.pt
[LOG] Saving tensor x_4_284.pt
[LOG] Saving tensor n0_to_4_683.pt
[LOG] Saving tensor n0_to_0_284.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n1_to_2_683.pt
[LOG] Saving tensor n1_to_1_284.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n2_to_2_284.pt
[LOG] Saving tensor n1_to_3_683.pt
[LOG] Saving tensor n3_to_3_284.pt
[LOG] Saving tensor n1_to_4_683.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n4_to_4_284.pt
[LOG] Saving tensor n2_to_3_683.pt
[LOG] Saving tensor n0_to_1_284.pt
[LOG] Saving tensor n2_to_4_683.pt
[LOG] Saving tensor n0_to_2_284.pt
[LOG] Saving tensor n3_to_4_683.pt
[LOG] Saving tensor n0_to_3_284.pt
[LOG] Saving tensor n0_to_4_284.pt
[LOG] Saving tensor global_feature_683.pt
[LOG] Saving tensor n1_to_2_284.pt
[LOG] Process 85: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n1_to_3_284.pt
[LOG] Saving tensor n1_to_4_284.pt
[LOG] Saving tensor n2_to_3_284.pt
[LOG] Saving tensor n2_to_4_284.pt
[LOG] Saving tensor n3_to_4_284.pt
[LOG] Saving tensor global_feature_284.pt
[LOG] Process 35: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_3 for num 347
[LOG] Computing n1_to_4 for num 347
[LOG] Computing n2_to_3 for num 347
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_4 for num 347
[LOG] Computing n1_to_3 for num 812
[LOG] Computing n1_to_4 for num 812
[LOG] Computing n3_to_4 for num 347
[LOG] Global feature for num 347
[LOG] Global feature for num 347
[LOG] Saving tensor x_0_347.pt
[LOG] Computing n2_to_3 for num 812
[LOG] Saving tensor x_1_347.pt
[LOG] Saving tensor x_2_347.pt
[LOG] Saving tensor x_3_347.pt
[LOG] Saving tensor x_4_347.pt
[LOG] Saving tensor n0_to_0_347.pt
[LOG] Saving tensor n1_to_1_347.pt
[LOG] Saving tensor n2_to_2_347.pt
[LOG] Saving tensor n3_to_3_347.pt
[LOG] Saving tensor n4_to_4_347.pt
[LOG] Saving tensor n0_to_1_347.pt
[LOG] Saving tensor n0_to_2_347.pt
[LOG] Saving tensor n0_to_3_347.pt
[LOG] Saving tensor n0_to_4_347.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_4 for num 812
[LOG] Saving tensor n1_to_2_347.pt
[LOG] Saving tensor n1_to_3_347.pt
[LOG] Saving tensor n1_to_4_347.pt
[LOG] Saving tensor n2_to_3_347.pt
[LOG] Saving tensor n2_to_4_347.pt
[LOG] Saving tensor n3_to_4_347.pt
[LOG] Saving tensor global_feature_347.pt
[LOG] Process 43: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n3_to_4 for num 812
[LOG] Computing n0_to_3 for num 615
[LOG] Global feature for num 812
[LOG] Global feature for num 812
[LOG] Saving tensor x_0_812.pt
[LOG] Saving tensor x_1_812.pt
[LOG] Saving tensor x_2_812.pt
[LOG] Saving tensor x_3_812.pt
[LOG] Saving tensor x_4_812.pt
[LOG] Saving tensor n0_to_0_812.pt
[LOG] Saving tensor n1_to_1_812.pt
[LOG] Saving tensor n2_to_2_812.pt
[LOG] Computing n0_to_4 for num 615
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n3_to_3_812.pt
[LOG] Saving tensor n4_to_4_812.pt
[LOG] Saving tensor n0_to_1_812.pt
[LOG] Saving tensor n0_to_2_812.pt
[LOG] Saving tensor n0_to_3_812.pt
[LOG] Saving tensor n0_to_4_812.pt
[LOG] Computing n1_to_2 for num 615
[LOG] Saving tensor n1_to_2_812.pt
[LOG] Saving tensor n1_to_3_812.pt
[LOG] Saving tensor n1_to_4_812.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n2_to_3_812.pt
[LOG] Saving tensor n2_to_4_812.pt
[LOG] Saving tensor n3_to_4_812.pt
[LOG] Saving tensor global_feature_812.pt
[LOG] Process 101: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 62
[LOG] GENERATED TETRA
[LOG] Computing n0_to_4 for num 62
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_2 for num 62
[LOG] Computing n1_to_3 for num 615
[LOG] Computing n1_to_4 for num 615
[LOG] Computing n2_to_3 for num 615
[LOG] Computing n2_to_4 for num 615
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n3_to_4 for num 615
[LOG] Global feature for num 615
[LOG] Global feature for num 615
[LOG] Saving tensor x_0_615.pt
[LOG] Saving tensor x_1_615.pt
[LOG] Saving tensor x_2_615.pt
[LOG] Saving tensor x_3_615.pt
[LOG] Saving tensor x_4_615.pt
[LOG] Saving tensor n0_to_0_615.pt
[LOG] Saving tensor n1_to_1_615.pt
[LOG] Saving tensor n2_to_2_615.pt
[LOG] Saving tensor n3_to_3_615.pt
[LOG] Saving tensor n4_to_4_615.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_3 for num 62
[LOG] Computing n1_to_4 for num 62
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n0_to_1_615.pt
[LOG] Saving tensor n0_to_2_615.pt
[LOG] Computing n2_to_3 for num 62
[LOG] Saving tensor n0_to_3_615.pt
[LOG] Saving tensor n0_to_4_615.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n1_to_2_615.pt
[LOG] Saving tensor n1_to_3_615.pt
[LOG] Saving tensor n1_to_4_615.pt
[LOG] Computing n2_to_4 for num 62
[LOG] Saving tensor n2_to_3_615.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n2_to_4_615.pt
[LOG] Saving tensor n3_to_4_615.pt
[LOG] Saving tensor global_feature_615.pt
[LOG] Process 76: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n3_to_4 for num 62
[LOG] Global feature for num 62
[LOG] Global feature for num 62
[LOG] Saving tensor x_0_62.pt
[LOG] Saving tensor x_1_62.pt
[LOG] Saving tensor x_2_62.pt
[LOG] Saving tensor x_3_62.pt
[LOG] Saving tensor x_4_62.pt
[LOG] Saving tensor n0_to_0_62.pt
[LOG] Saving tensor n1_to_1_62.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n2_to_2_62.pt
[LOG] Saving tensor n3_to_3_62.pt
[LOG] Saving tensor n4_to_4_62.pt
[LOG] Saving tensor n0_to_1_62.pt
[LOG] Saving tensor n0_to_2_62.pt
[LOG] Saving tensor n0_to_3_62.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n0_to_4_62.pt
[LOG] Saving tensor n1_to_2_62.pt
[LOG] Saving tensor n1_to_3_62.pt
[LOG] Computing n1_to_3 for num 529
[LOG] Saving tensor n1_to_4_62.pt
[LOG] Saving tensor n2_to_3_62.pt
[LOG] Saving tensor n2_to_4_62.pt
[LOG] Saving tensor n3_to_4_62.pt
[LOG] Saving tensor global_feature_62.pt
[LOG] Computing n1_to_4 for num 529
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Process 7: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n2_to_3 for num 529
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Removed 3 subset clusters.
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n2_to_4 for num 529
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Computing n3_to_4 for num 529
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Global feature for num 529
[LOG] Global feature for num 529
[LOG] Saving tensor x_0_529.pt
[LOG] Saving tensor x_1_529.pt
[LOG] Saving tensor x_2_529.pt
[LOG] Saving tensor x_3_529.pt
[LOG] Saving tensor x_4_529.pt
[LOG] Saving tensor n0_to_0_529.pt
[LOG] Saving tensor n1_to_1_529.pt
[LOG] Saving tensor n2_to_2_529.pt
[LOG] Saving tensor n3_to_3_529.pt
[LOG] Saving tensor n4_to_4_529.pt
[LOG] Saving tensor n0_to_1_529.pt
[LOG] Saving tensor n0_to_2_529.pt
[LOG] Saving tensor n0_to_3_529.pt
[LOG] Saving tensor n0_to_4_529.pt
[LOG] Saving tensor n1_to_2_529.pt
[LOG] Saving tensor n1_to_3_529.pt
[LOG] Saving tensor n1_to_4_529.pt
[LOG] Saving tensor n2_to_3_529.pt
[LOG] Saving tensor n2_to_4_529.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n3_to_4_529.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor global_feature_529.pt
[LOG] Process 66: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 17: Created combinatorial complex for file data_140.hdf5
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_3 (adjacency) for num 754
[LOG] Computing n4_to_4 (coadjacency) for num 754
[LOG] Computing n0_to_1 for num 754
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Process 17: Calculating Neighbors
[LOG] Loading pickle file data_140.pickle
[LOG] Processing node features for num 140
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Processing edge features for num 140
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Processing tetra features for num 140
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Processing cluster features for num 140
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Processing cluster features for num 140
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing adjacency and incidence matrices for num 140
[LOG] Computing n0_to_0 for num 140
[LOG] Computing n1_to_1 for num 140
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_2 for num 754
[LOG] Computing n2_to_2 (adjacency) for num 140
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n3_to_3 (adjacency) for num 140
[LOG] Computing n4_to_4 (coadjacency) for num 140
[LOG] Computing n0_to_1 for num 140
[LOG] Computing n0_to_2 for num 140
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2111 Tetrahedra.
    [LOG] Generated 69 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.579710144927537
    [LOG] Max number of nodes per cluster is 38 and the number is 35
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_3 for num 140
[LOG] Computing n0_to_4 for num 140
[LOG] Computing n1_to_2 for num 140
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] GENERATED TETRA
[LOG] We will select 227 edges and 2111 tetra
[LOG] Edges from tetra 0 and KDTree 305 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_3_to_4.pt

    [LOG] We Currently have 1228 Tetrahedra.
    [LOG] Generated 33 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 19.848484848484848
    [LOG] Max number of nodes per cluster is 102 and the number is 6
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_3 for num 140
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_4 for num 140
[LOG] Computing n2_to_3 for num 140
[LOG] Calculating for cell ranks 2 and 4
[LOG] We will select 349 edges and 1228 tetra
[LOG] Edges from tetra 0 and KDTree 4330 with 0 edges in common.
[LOG] Computing n2_to_4 for num 140
[LOG] Computing n3_to_4 for num 140
[LOG] Global feature for num 140
[LOG] Global feature for num 140
[LOG] Saving tensor x_0_140.pt
[LOG] Saving tensor x_1_140.pt
[LOG] Saving tensor x_2_140.pt
[LOG] Saving tensor x_3_140.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor x_4_140.pt
[LOG] Saving tensor n0_to_0_140.pt
[LOG] Saving tensor n1_to_1_140.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n2_to_2_140.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n3_to_3_140.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n4_to_4_140.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n0_to_1_140.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n0_to_2_140.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n0_to_3_140.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n0_to_4_140.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n1_to_2_140.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n1_to_3_140.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n1_to_4_140.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n2_to_3_140.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n2_to_4_140.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n3_to_4_140.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor global_feature_140.pt
[LOG] Process 17: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Process 87: Created combinatorial complex for file data_697.hdf5
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1998 Tetrahedra.
    [LOG] Generated 71 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.352112676056338
    [LOG] Max number of nodes per cluster is 41 and the number is 69
[LOG] Calculating for cell ranks 0 and 2
[LOG] GENERATED TETRA
[LOG] Process 77: Created combinatorial complex for file data_621.hdf5
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] We will select 284 edges and 1998 tetra
[LOG] Edges from tetra 0 and KDTree 1223 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 77: Calculating Neighbors
[LOG] Loading pickle file data_621.pickle
[LOG] Processing node features for num 621
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing edge features for num 621
[LOG] Processing tetra features for num 621
[LOG] Processing cluster features for num 621
[LOG] Processing cluster features for num 621
[LOG] Processing adjacency and incidence matrices for num 621
[LOG] Computing n0_to_0 for num 621
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1666 Tetrahedra.
    [LOG] Generated 51 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.764705882352942
    [LOG] Max number of nodes per cluster is 28 and the number is 9
[LOG] Process 58: Created combinatorial complex for file data_469.hdf5
[LOG] Calculating for cell ranks 0 and 3
[LOG] We will select 273 edges and 1666 tetra
[LOG] Edges from tetra 0 and KDTree 273 with 0 edges in common.
[LOG] Computing n0_to_3 for num 754
[LOG] Process 87: Calculating Neighbors
[LOG] Loading pickle file data_697.pickle
[LOG] Processing node features for num 697
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing edge features for num 697
[LOG] Computing n1_to_1 for num 621
[LOG] Computing n0_to_4 for num 754
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 58: Calculating Neighbors
[LOG] Loading pickle file data_469.pickle
[LOG] Processing node features for num 469
[LOG] Processing edge features for num 469
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing tetra features for num 469
[LOG] Computing n1_to_2 for num 754
[LOG] Processing tetra features for num 697
[LOG] Processing cluster features for num 469
[LOG] Computing n2_to_2 (adjacency) for num 621
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing cluster features for num 469
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing adjacency and incidence matrices for num 469
[LOG] Computing n0_to_0 for num 469
[LOG] Computing n1_to_1 for num 469
[LOG] Computing n3_to_3 (adjacency) for num 621
[LOG] Computing n4_to_4 (coadjacency) for num 621
[LOG] Computing n0_to_1 for num 621
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing cluster features for num 697
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_2 (adjacency) for num 469
[LOG] Computing n0_to_2 for num 621
[LOG] Processing cluster features for num 697
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 20: Created combinatorial complex for file data_164.hdf5
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing adjacency and incidence matrices for num 697
[LOG] Computing n0_to_0 for num 697
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Process 20: Calculating Neighbors
[LOG] Loading pickle file data_164.pickle
[LOG] Processing node features for num 164
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Processing edge features for num 164
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 469
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n4_to_4 (coadjacency) for num 469
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n0_to_1 for num 469
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Processing tetra features for num 164
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n0_to_2 for num 469
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Processing cluster features for num 164
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing cluster features for num 164
[LOG] Processing adjacency and incidence matrices for num 164
[LOG] Computing n0_to_0 for num 164
[LOG] Process 62: Created combinatorial complex for file data_501.hdf5
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_1 for num 164
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 62: Calculating Neighbors
[LOG] Loading pickle file data_501.pickle
[LOG] Processing node features for num 501
[LOG] Processing edge features for num 501
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing tetra features for num 501
[LOG] Computing n0_to_3 for num 621
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_4 for num 621
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing cluster features for num 501
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_2 for num 621
[LOG] Processing cluster features for num 501
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_1 for num 697
[LOG] Processing adjacency and incidence matrices for num 501
[LOG] Computing n0_to_0 for num 501
[LOG] Computing n2_to_2 (adjacency) for num 164
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_3 for num 469
[LOG] Computing n1_to_1 for num 501
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_4 for num 469
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_2 for num 469
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_3 for num 621
[LOG] Computing n1_to_4 for num 621
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_3 for num 621
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_4 for num 621
[LOG] Computing n3_to_4 for num 621
[LOG] Global feature for num 621
[LOG] Global feature for num 621
[LOG] Saving tensor x_0_621.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor x_1_621.pt
[LOG] Saving tensor x_2_621.pt
[LOG] Saving tensor x_3_621.pt
[LOG] Computing n2_to_2 (adjacency) for num 501
[LOG] Saving tensor x_4_621.pt
[LOG] Saving tensor n0_to_0_621.pt
[LOG] Saving tensor n1_to_1_621.pt
[LOG] Saving tensor n2_to_2_621.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n3_to_3_621.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n4_to_4_621.pt
[LOG] Computing n3_to_3 (adjacency) for num 164
[LOG] Saving tensor n0_to_1_621.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n0_to_2_621.pt
[LOG] Computing n4_to_4 (coadjacency) for num 164
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n0_to_3_621.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n1_to_3 for num 469
[LOG] Computing n0_to_1 for num 164
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n0_to_4_621.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n1_to_4 for num 469
[LOG] Saving tensor n1_to_2_621.pt
[LOG] Computing n2_to_3 for num 469
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n1_to_3_621.pt
[LOG] Saving tensor n1_to_4_621.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n2_to_3_621.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n2_to_4_621.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n3_to_4_621.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor global_feature_621.pt
[LOG] Process 77: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n2_to_4 for num 469
[LOG] Computing n0_to_2 for num 164
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n3_to_3 (adjacency) for num 501
[LOG] Computing n4_to_4 (coadjacency) for num 501
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n0_to_1 for num 501
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_2 for num 501
[LOG] Computing n3_to_4 for num 469
[LOG] Calculating for cell ranks 0 and 3
[LOG] Global feature for num 469
[LOG] Global feature for num 469
[LOG] Saving tensor x_0_469.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor x_1_469.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n0_to_3 for num 501
[LOG] Computing n0_to_4 for num 501
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_2 for num 501
[LOG] Saving tensor x_2_469.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor x_3_469.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor x_4_469.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n0_to_0_469.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n1_to_1_469.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n2_to_2_469.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n3_to_3_469.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n4_to_4_469.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n0_to_1_469.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n0_to_2_469.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n0_to_3_469.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n0_to_4_469.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n1_to_2_469.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n1_to_3_469.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n1_to_4_469.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n2_to_3_469.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n2_to_4_469.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n3_to_4_469.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n1_to_3 for num 501
[LOG] Computing n1_to_4 for num 501
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n2_to_3 for num 501
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor global_feature_469.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_3 for num 754
[LOG] Computing n2_to_4 for num 501
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Process 58: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n3_to_4 for num 501
[LOG] Global feature for num 501
[LOG] Computing n1_to_4 for num 754
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Global feature for num 501
[LOG] Saving tensor x_0_501.pt
[LOG] Saving tensor x_1_501.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor x_2_501.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor x_3_501.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor x_4_501.pt
[LOG] Saving tensor n0_to_0_501.pt
[LOG] Saving tensor n1_to_1_501.pt
[LOG] Saving tensor n2_to_2_501.pt
[LOG] Saving tensor n3_to_3_501.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_3 for num 754
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n4_to_4_501.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n0_to_3 for num 164
[LOG] Saving tensor n0_to_1_501.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_4 for num 164
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n0_to_2_501.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n0_to_3_501.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n0_to_4_501.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n1_to_2_501.pt
[LOG] Computing n2_to_4 for num 754
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n1_to_2 for num 164
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n1_to_3_501.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n1_to_4_501.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n2_to_3_501.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n2_to_4_501.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n3_to_4_501.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor global_feature_501.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Process 62: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n3_to_4 for num 754
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Global feature for num 754
[LOG] Global feature for num 754
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor x_0_754.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor x_1_754.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor x_2_754.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor x_3_754.pt
[LOG] Saving tensor x_4_754.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n0_to_0_754.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n1_to_1_754.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n2_to_2_754.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n1_to_3 for num 164
[LOG] Computing n1_to_4 for num 164
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n2_to_3 for num 164
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n3_to_3_754.pt
[LOG] Saving tensor n4_to_4_754.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n0_to_1_754.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n0_to_2_754.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n0_to_3_754.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n0_to_4_754.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n1_to_2_754.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_4 for num 164
[LOG] Saving tensor n1_to_3_754.pt
[LOG] Saving tensor n1_to_4_754.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n2_to_3_754.pt
[LOG] Saving tensor n2_to_4_754.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n3_to_4_754.pt
[LOG] Saving tensor global_feature_754.pt
[LOG] Process 94: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n3_to_4 for num 164
[LOG] Global feature for num 164
[LOG] Global feature for num 164
[LOG] Saving tensor x_0_164.pt
[LOG] Saving tensor x_1_164.pt
[LOG] Saving tensor x_2_164.pt
[LOG] Saving tensor x_3_164.pt
[LOG] Saving tensor x_4_164.pt
[LOG] Saving tensor n0_to_0_164.pt
[LOG] Saving tensor n1_to_1_164.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n2_to_2_164.pt
[LOG] Saving tensor n3_to_3_164.pt
[LOG] Saving tensor n4_to_4_164.pt
[LOG] Saving tensor n0_to_1_164.pt
[LOG] Saving tensor n0_to_2_164.pt
[LOG] Saving tensor n0_to_3_164.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n0_to_4_164.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n1_to_2_164.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n1_to_3_164.pt
[LOG] Saving tensor n1_to_4_164.pt
[LOG] Saving tensor n2_to_3_164.pt
[LOG] Saving tensor n2_to_4_164.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n3_to_4_164.pt
[LOG] Saving tensor global_feature_164.pt
[LOG] Process 20: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 5182 Tetrahedra.
    [LOG] Generated 119 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.134453781512605
    [LOG] Max number of nodes per cluster is 157 and the number is 118
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] GENERATED TETRA
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] We will select 1563 edges and 5182 tetra
[LOG] Edges from tetra 0 and KDTree 2344 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1588 Tetrahedra.
    [LOG] Generated 39 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.435897435897436
    [LOG] Max number of nodes per cluster is 80 and the number is 10
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] We will select 235 edges and 1588 tetra
[LOG] Edges from tetra 0 and KDTree 445 with 0 edges in common.
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_2 (adjacency) for num 697
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1009 Tetrahedra.
    [LOG] Generated 27 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 18.48148148148148
    [LOG] Max number of nodes per cluster is 99 and the number is 18
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1903 Tetrahedra.
    [LOG] Generated 50 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.76
    [LOG] Max number of nodes per cluster is 52 and the number is 25
[LOG] We will select 183 edges and 1009 tetra
[LOG] Edges from tetra 0 and KDTree 2530 with 0 edges in common.
[LOG] Removed 4 subset clusters.

    [LOG] We Currently have 1454 Tetrahedra.
    [LOG] Generated 47 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.340425531914894
    [LOG] Max number of nodes per cluster is 54 and the number is 20
[LOG] We will select 210 edges and 1903 tetra
[LOG] Edges from tetra 0 and KDTree 210 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 2
[LOG] We will select 232 edges and 1454 tetra
[LOG] Edges from tetra 0 and KDTree 1215 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 92: Created combinatorial complex for file data_742.hdf5
[LOG] Process 19: Created combinatorial complex for file data_158.hdf5
[LOG] Process 92: Calculating Neighbors
[LOG] Loading pickle file data_742.pickle
[LOG] Processing node features for num 742
[LOG] Processing edge features for num 742
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing tetra features for num 742
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing cluster features for num 742
[LOG] Processing cluster features for num 742
[LOG] Processing adjacency and incidence matrices for num 742
[LOG] Computing n0_to_0 for num 742
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 19: Calculating Neighbors
[LOG] Loading pickle file data_158.pickle
[LOG] Processing node features for num 158
[LOG] Processing edge features for num 158
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing tetra features for num 158
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_1 for num 742
[LOG] Processing cluster features for num 158
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing cluster features for num 158
[LOG] Computing n2_to_2 (adjacency) for num 742
[LOG] Processing adjacency and incidence matrices for num 158
[LOG] Computing n0_to_0 for num 158
[LOG] Computing n1_to_1 for num 158
[LOG] Computing n3_to_3 (adjacency) for num 742
[LOG] Computing n4_to_4 (coadjacency) for num 742
[LOG] Computing n0_to_1 for num 742
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_2 for num 742
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 158
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 158
[LOG] Computing n4_to_4 (coadjacency) for num 158
[LOG] Computing n0_to_1 for num 158
[LOG] Removed 0 subset clusters.
[LOG] Process 55: Created combinatorial complex for file data_442.hdf5

    [LOG] We Currently have 1761 Tetrahedra.
    [LOG] Generated 54 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.444444444444445
    [LOG] Max number of nodes per cluster is 51 and the number is 35
[LOG] Computing n0_to_2 for num 158
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 55: Calculating Neighbors
[LOG] Loading pickle file data_442.pickle
[LOG] Processing node features for num 442
[LOG] Processing edge features for num 442
[LOG] We will select 371 edges and 1761 tetra
[LOG] Edges from tetra 0 and KDTree 1440 with 0 edges in common.
[LOG] Computing n0_to_3 for num 742
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing tetra features for num 442
[LOG] Computing n0_to_4 for num 742
[LOG] Computing n1_to_2 for num 742
[LOG] Processing cluster features for num 442
[LOG] Process 14: Created combinatorial complex for file data_116.hdf5
[LOG] Processing cluster features for num 442
[LOG] Processing adjacency and incidence matrices for num 442
[LOG] Computing n0_to_0 for num 442
[LOG] Computing n1_to_3 for num 742
[LOG] Computing n1_to_4 for num 742
[LOG] Computing n2_to_3 for num 742
[LOG] Computing n1_to_1 for num 442
[LOG] Computing n2_to_4 for num 742
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n3_to_4 for num 742
[LOG] Calculating for cell ranks 1 and 3
[LOG] Global feature for num 742
[LOG] Global feature for num 742
[LOG] Saving tensor x_0_742.pt
[LOG] Saving tensor x_1_742.pt
[LOG] Saving tensor x_2_742.pt
[LOG] Saving tensor x_3_742.pt
[LOG] Saving tensor x_4_742.pt
[LOG] Saving tensor n0_to_0_742.pt
[LOG] Saving tensor n1_to_1_742.pt
[LOG] Saving tensor n2_to_2_742.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n3_to_3_742.pt
[LOG] Saving tensor n4_to_4_742.pt
[LOG] Saving tensor n0_to_1_742.pt
[LOG] Computing n0_to_3 for num 158
[LOG] Saving tensor n0_to_2_742.pt
[LOG] Saving tensor n0_to_3_742.pt
[LOG] Saving tensor n0_to_4_742.pt
[LOG] Computing n0_to_4 for num 158
[LOG] Saving tensor n1_to_2_742.pt
[LOG] Process 14: Calculating Neighbors
[LOG] Loading pickle file data_116.pickle
[LOG] Processing node features for num 116
[LOG] Computing n2_to_2 (adjacency) for num 442
[LOG] Saving tensor n1_to_3_742.pt
[LOG] Processing edge features for num 116
[LOG] Saving tensor n1_to_4_742.pt
[LOG] Computing n1_to_2 for num 158
[LOG] Saving tensor n2_to_3_742.pt
[LOG] Processing tetra features for num 116
[LOG] Saving tensor n2_to_4_742.pt
[LOG] Saving tensor n3_to_4_742.pt
[LOG] Saving tensor global_feature_742.pt
[LOG] Process 92: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing cluster features for num 116
[LOG] Processing cluster features for num 116
[LOG] Computing n3_to_3 (adjacency) for num 442
[LOG] Processing adjacency and incidence matrices for num 116
[LOG] Computing n0_to_0 for num 116
[LOG] Computing n4_to_4 (coadjacency) for num 442
[LOG] Computing n1_to_3 for num 158
[LOG] Computing n0_to_1 for num 442
[LOG] Computing n1_to_4 for num 158
[LOG] Computing n2_to_3 for num 158
[LOG] Computing n0_to_2 for num 442
[LOG] Computing n1_to_1 for num 116
[LOG] Computing n2_to_4 for num 158
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_4 for num 158
[LOG] Global feature for num 158
[LOG] Global feature for num 158
[LOG] Saving tensor x_0_158.pt
[LOG] Saving tensor x_1_158.pt
[LOG] Saving tensor x_2_158.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor x_3_158.pt
[LOG] Saving tensor x_4_158.pt
[LOG] Saving tensor n0_to_0_158.pt
[LOG] Saving tensor n1_to_1_158.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n2_to_2_158.pt
[LOG] Saving tensor n3_to_3_158.pt
[LOG] Saving tensor n4_to_4_158.pt
[LOG] Saving tensor n0_to_1_158.pt
[LOG] Saving tensor n0_to_2_158.pt
[LOG] Saving tensor n0_to_3_158.pt
[LOG] Saving tensor n0_to_4_158.pt
[LOG] Saving tensor n1_to_2_158.pt
[LOG] Computing n2_to_2 (adjacency) for num 116
[LOG] Saving tensor n1_to_3_158.pt
[LOG] Saving tensor n1_to_4_158.pt
[LOG] Saving tensor n2_to_3_158.pt
[LOG] Saving tensor n2_to_4_158.pt
[LOG] Removed 2 subset clusters.
[LOG] Saving tensor n3_to_4_158.pt
[LOG] Saving tensor global_feature_158.pt
[LOG] Computing n0_to_3 for num 442
[LOG] Process 19: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_4 for num 442
[LOG] Computing n1_to_2 for num 442
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_3 for num 442
[LOG] Computing n1_to_4 for num 442
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_3 for num 442
[LOG] Computing n3_to_3 (adjacency) for num 116
[LOG] Computing n2_to_4 for num 442
[LOG] Computing n4_to_4 (coadjacency) for num 116
[LOG] Computing n0_to_1 for num 116
[LOG] Process 38: Created combinatorial complex for file data_306.hdf5
[LOG] Computing n3_to_4 for num 442
[LOG] Computing n0_to_2 for num 116
[LOG] Global feature for num 442
[LOG] Global feature for num 442
[LOG] Saving tensor x_0_442.pt
[LOG] Saving tensor x_1_442.pt
[LOG] Saving tensor x_2_442.pt
[LOG] Saving tensor x_3_442.pt
[LOG] Saving tensor x_4_442.pt
[LOG] Saving tensor n0_to_0_442.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor n1_to_1_442.pt
[LOG] Saving tensor n2_to_2_442.pt
[LOG] Saving tensor n3_to_3_442.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n4_to_4_442.pt
[LOG] Saving tensor n0_to_1_442.pt
[LOG] Saving tensor n0_to_2_442.pt
[LOG] Saving tensor n0_to_3_442.pt
[LOG] Saving tensor n0_to_4_442.pt
[LOG] Saving tensor n1_to_2_442.pt
[LOG] Saving tensor n1_to_3_442.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n1_to_4_442.pt
[LOG] Saving tensor n2_to_3_442.pt
[LOG] Saving tensor n2_to_4_442.pt
[LOG] Saving tensor n3_to_4_442.pt
[LOG] Saving tensor global_feature_442.pt
[LOG] Process 55: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 38: Calculating Neighbors
[LOG] Loading pickle file data_306.pickle
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing node features for num 306
[LOG] Processing edge features for num 306
[LOG] Processing tetra features for num 306
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 306
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_3 for num 116
[LOG] Processing cluster features for num 306
[LOG] Computing n0_to_4 for num 116
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing adjacency and incidence matrices for num 306
[LOG] Computing n0_to_0 for num 306
[LOG] Computing n1_to_2 for num 116
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_1 for num 306
[LOG] Computing n1_to_3 for num 116
[LOG] Computing n1_to_4 for num 116
[LOG] Computing n2_to_3 for num 116
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_4 for num 116
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_4 for num 116
[LOG] Global feature for num 116
[LOG] Global feature for num 116
[LOG] Saving tensor x_0_116.pt
[LOG] Saving tensor x_1_116.pt
[LOG] Saving tensor x_2_116.pt
[LOG] Saving tensor x_3_116.pt
[LOG] Saving tensor x_4_116.pt
[LOG] Saving tensor n0_to_0_116.pt
[LOG] Saving tensor n1_to_1_116.pt
[LOG] Saving tensor n2_to_2_116.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n3_to_3_116.pt
[LOG] Saving tensor n4_to_4_116.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n0_to_1_116.pt
[LOG] Saving tensor n0_to_2_116.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n0_to_3_116.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_2 (adjacency) for num 306
[LOG] Saving tensor n0_to_4_116.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n1_to_2_116.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n1_to_3_116.pt
[LOG] Process 106: Created combinatorial complex for file data_848.hdf5
[LOG] Saving tensor n1_to_4_116.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n2_to_3_116.pt
[LOG] Saving tensor n2_to_4_116.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n3_to_4_116.pt
[LOG] Saving tensor global_feature_116.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Process 14: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_3 (adjacency) for num 306
[LOG] Computing n4_to_4 (coadjacency) for num 306
[LOG] Computing n0_to_1 for num 306
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_2 for num 306
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 106: Calculating Neighbors
[LOG] Loading pickle file data_848.pickle
[LOG] Processing node features for num 848
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing edge features for num 848
[LOG] GENERATED TETRA
[LOG] GENERATED TETRA
[LOG] Processing tetra features for num 848
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing cluster features for num 848
[LOG] Computing n0_to_3 for num 306
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing cluster features for num 848
[LOG] Computing n0_to_4 for num 306
[LOG] GENERATED TETRA
[LOG] Computing n1_to_2 for num 306
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing adjacency and incidence matrices for num 848
[LOG] Computing n0_to_0 for num 848
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n1_to_3 for num 306
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n1_to_4 for num 306
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n2_to_3 for num 306
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n2_to_4 for num 306
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_4 for num 306
[LOG] Global feature for num 306
[LOG] Global feature for num 306
[LOG] Saving tensor x_0_306.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2797 Tetrahedra.
    [LOG] Generated 63 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.380952380952381
    [LOG] Max number of nodes per cluster is 46 and the number is 60
[LOG] Saving tensor x_1_306.pt
[LOG] Saving tensor x_2_306.pt
[LOG] Saving tensor x_3_306.pt
[LOG] Saving tensor x_4_306.pt
[LOG] Saving tensor n0_to_0_306.pt
[LOG] Saving tensor n1_to_1_306.pt
[LOG] Saving tensor n2_to_2_306.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n3_to_3_306.pt
[LOG] Computing n3_to_3 (adjacency) for num 697
[LOG] Saving tensor n4_to_4_306.pt
[LOG] Saving tensor n0_to_1_306.pt
[LOG] Saving tensor n0_to_2_306.pt
[LOG] Saving tensor n0_to_3_306.pt
[LOG] Computing n4_to_4 (coadjacency) for num 697
[LOG] Saving tensor n0_to_4_306.pt
[LOG] Saving tensor n1_to_2_306.pt
[LOG] Computing n0_to_1 for num 697
[LOG] Saving tensor n1_to_3_306.pt
[LOG] Saving tensor n1_to_4_306.pt
[LOG] Saving tensor n2_to_3_306.pt
[LOG] Saving tensor n2_to_4_306.pt
[LOG] Saving tensor n3_to_4_306.pt
[LOG] Saving tensor global_feature_306.pt
[LOG] Process 38: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] We will select 484 edges and 2797 tetra
[LOG] Edges from tetra 0 and KDTree 484 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1003 Tetrahedra.
    [LOG] Generated 30 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.266666666666666
    [LOG] Max number of nodes per cluster is 62 and the number is 22
[LOG] Computing n1_to_1 for num 848
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1713 Tetrahedra.
    [LOG] Generated 63 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.603174603174603
    [LOG] Max number of nodes per cluster is 46 and the number is 61
[LOG] We will select 106 edges and 1003 tetra
[LOG] Edges from tetra 0 and KDTree 1408 with 0 edges in common.
[LOG] Calculating for cell ranks 4 and 4
[LOG] We will select 270 edges and 1713 tetra
[LOG] Edges from tetra 0 and KDTree 1314 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Computing n0_to_2 for num 697
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Process 48: Created combinatorial complex for file data_389.hdf5
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Process 48: Calculating Neighbors
[LOG] Loading pickle file data_389.pickle
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing node features for num 389
[LOG] Processing edge features for num 389
[LOG] Processing tetra features for num 389
[LOG] Processing cluster features for num 389
[LOG] Processing cluster features for num 389
[LOG] Processing adjacency and incidence matrices for num 389
[LOG] Computing n0_to_0 for num 389
[LOG] Removed 1 subset clusters.
[LOG] Computing n1_to_1 for num 389
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_2 (adjacency) for num 389
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_3 (adjacency) for num 389
[LOG] Computing n4_to_4 (coadjacency) for num 389
[LOG] Computing n0_to_1 for num 389
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_2 for num 389
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 79: Created combinatorial complex for file data_637.hdf5
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_3 for num 389
[LOG] Computing n0_to_4 for num 389
[LOG] Computing n1_to_2 for num 389
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_3 for num 389
[LOG] Computing n1_to_4 for num 389
[LOG] Computing n2_to_3 for num 389
[LOG] GENERATED TETRA
[LOG] Computing n2_to_4 for num 389
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1167 Tetrahedra.
    [LOG] Generated 29 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.413793103448278
    [LOG] Max number of nodes per cluster is 107 and the number is 27
[LOG] Computing n3_to_4 for num 389
[LOG] Calculating for cell ranks 0 and 2
[LOG] Global feature for num 389
[LOG] Global feature for num 389
[LOG] Saving tensor x_0_389.pt
[LOG] Saving tensor x_1_389.pt
[LOG] Saving tensor x_2_389.pt
[LOG] Saving tensor x_3_389.pt
[LOG] Saving tensor x_4_389.pt
[LOG] Saving tensor n0_to_0_389.pt
[LOG] Saving tensor n1_to_1_389.pt
[LOG] Saving tensor n2_to_2_389.pt
[LOG] Saving tensor n3_to_3_389.pt
[LOG] Saving tensor n4_to_4_389.pt
[LOG] Saving tensor n0_to_1_389.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n0_to_2_389.pt
[LOG] Saving tensor n0_to_3_389.pt
[LOG] Saving tensor n0_to_4_389.pt
[LOG] Saving tensor n1_to_2_389.pt
[LOG] We will select 182 edges and 1167 tetra
[LOG] Edges from tetra 0 and KDTree 2263 with 0 edges in common.
[LOG] Saving tensor n1_to_3_389.pt
[LOG] Saving tensor n1_to_4_389.pt
[LOG] Saving tensor n2_to_3_389.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n2_to_4_389.pt
[LOG] Saving tensor n3_to_4_389.pt
[LOG] Saving tensor global_feature_389.pt
[LOG] Process 48: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 79: Calculating Neighbors
[LOG] Loading pickle file data_637.pickle
[LOG] Processing node features for num 637
[LOG] Processing edge features for num 637
[LOG] Process 80: Created combinatorial complex for file data_642.hdf5
[LOG] Removed 0 subset clusters.
[LOG] Processing tetra features for num 637
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Processing cluster features for num 637
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Processing cluster features for num 637
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Processing adjacency and incidence matrices for num 637
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n0_to_0 for num 637
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 112: Created combinatorial complex for file data_893.hdf5
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_1 for num 637
[LOG] Process 80: Calculating Neighbors
[LOG] Loading pickle file data_642.pickle
[LOG] Processing node features for num 642
[LOG] Processing edge features for num 642
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 112: Calculating Neighbors
[LOG] Loading pickle file data_893.pickle
[LOG] Processing node features for num 893
[LOG] Processing edge features for num 893
[LOG] Processing tetra features for num 642
[LOG] Processing tetra features for num 893
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing cluster features for num 893
[LOG] Computing n2_to_2 (adjacency) for num 637
[LOG] Processing cluster features for num 893
[LOG] Processing cluster features for num 642
[LOG] Processing adjacency and incidence matrices for num 893
[LOG] Computing n0_to_0 for num 893
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing cluster features for num 642
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_1 for num 893
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing adjacency and incidence matrices for num 642
[LOG] Computing n0_to_0 for num 642
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_2 (adjacency) for num 893
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_1 for num 642
[LOG] Computing n3_to_3 (adjacency) for num 637
[LOG] Computing n4_to_4 (coadjacency) for num 637
[LOG] Computing n0_to_1 for num 637
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] GENERATED TETRA
[LOG] Computing n0_to_2 for num 637
[LOG] Computing n3_to_3 (adjacency) for num 893
[LOG] Computing n4_to_4 (coadjacency) for num 893
[LOG] Computing n0_to_1 for num 893
[LOG] Calculating for cell ranks 3 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1056 Tetrahedra.
    [LOG] Generated 29 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 19.82758620689655
    [LOG] Max number of nodes per cluster is 55 and the number is 3
[LOG] Computing n0_to_2 for num 893
[LOG] We will select 422 edges and 1056 tetra
[LOG] Edges from tetra 0 and KDTree 2453 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_3 for num 893
[LOG] Computing n2_to_2 (adjacency) for num 642
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_4 for num 893
[LOG] Computing n1_to_2 for num 893
[LOG] Computing n2_to_2 (adjacency) for num 848
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_3 for num 893
[LOG] Computing n1_to_4 for num 893
[LOG] Computing n2_to_3 for num 893
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_4 for num 893
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1661 Tetrahedra.
    [LOG] Generated 43 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.674418604651162
    [LOG] Max number of nodes per cluster is 41 and the number is 30
[LOG] Computing n3_to_4 for num 893
[LOG] Global feature for num 893
[LOG] Global feature for num 893
[LOG] Saving tensor x_0_893.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor x_1_893.pt
[LOG] Saving tensor x_2_893.pt
[LOG] Saving tensor x_3_893.pt
[LOG] Saving tensor x_4_893.pt
[LOG] Saving tensor n0_to_0_893.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n1_to_1_893.pt
[LOG] Saving tensor n2_to_2_893.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n3_to_3_893.pt
[LOG] We will select 147 edges and 1661 tetra
[LOG] Edges from tetra 0 and KDTree 580 with 0 edges in common.
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n4_to_4_893.pt
[LOG] Saving tensor n0_to_1_893.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n0_to_2_893.pt
[LOG] Saving tensor n0_to_3_893.pt
[LOG] Saving tensor n0_to_4_893.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n1_to_2_893.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n1_to_3_893.pt
[LOG] Saving tensor n1_to_4_893.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n2_to_3_893.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n2_to_4_893.pt
[LOG] Computing n0_to_3 for num 637
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n3_to_4_893.pt
[LOG] Saving tensor global_feature_893.pt
[LOG] Process 112: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_4 for num 637
[LOG] Process 37: Created combinatorial complex for file data_302.hdf5
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n1_to_2 for num 637
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Process 37: Calculating Neighbors
[LOG] Calculating for cell ranks 1 and 2
[LOG] Loading pickle file data_302.pickle
[LOG] Processing node features for num 302
[LOG] Processing edge features for num 302
[LOG] Computing n0_to_3 for num 697
[LOG] Processing tetra features for num 302
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_3 for num 637
[LOG] Computing n1_to_4 for num 637
[LOG] Computing n2_to_3 for num 637
[LOG] Processing cluster features for num 302
[LOG] Computing n3_to_3 (adjacency) for num 642
[LOG] Computing n4_to_4 (coadjacency) for num 642
[LOG] Computing n0_to_1 for num 642
[LOG] Processing cluster features for num 302
[LOG] Computing n0_to_4 for num 697
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_4 for num 637
[LOG] Processing adjacency and incidence matrices for num 302
[LOG] Computing n0_to_0 for num 302
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_4 for num 637
[LOG] Computing n0_to_2 for num 642
[LOG] Global feature for num 637
[LOG] Global feature for num 637
[LOG] Saving tensor x_0_637.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor x_1_637.pt
[LOG] Saving tensor x_2_637.pt
[LOG] Saving tensor x_3_637.pt
[LOG] Saving tensor x_4_637.pt
[LOG] Saving tensor n0_to_0_637.pt
[LOG] Saving tensor n1_to_1_637.pt
[LOG] Saving tensor n2_to_2_637.pt
[LOG] Computing n1_to_2 for num 697
[LOG] Saving tensor n3_to_3_637.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n4_to_4_637.pt
[LOG] Saving tensor n0_to_1_637.pt
[LOG] Saving tensor n0_to_2_637.pt
[LOG] Saving tensor n0_to_3_637.pt
[LOG] Saving tensor n0_to_4_637.pt
[LOG] Saving tensor n1_to_2_637.pt
[LOG] Saving tensor n1_to_3_637.pt
[LOG] Saving tensor n1_to_4_637.pt
[LOG] Saving tensor n2_to_3_637.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n2_to_4_637.pt
[LOG] Saving tensor n3_to_4_637.pt
[LOG] Computing n1_to_1 for num 302
[LOG] Saving tensor global_feature_637.pt
[LOG] Process 79: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 302
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n3_to_3 (adjacency) for num 302
[LOG] Computing n4_to_4 (coadjacency) for num 302
[LOG] Computing n0_to_1 for num 302
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 95: Created combinatorial complex for file data_767.hdf5
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n0_to_2 for num 302
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n0_to_3 for num 642
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_4 for num 642
[LOG] Computing n1_to_2 for num 642
[LOG] Process 95: Calculating Neighbors
[LOG] Loading pickle file data_767.pickle
[LOG] Processing node features for num 767
[LOG] Processing edge features for num 767
[LOG] Processing tetra features for num 767
[LOG] Processing cluster features for num 767
[LOG] Processing cluster features for num 767
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1606 Tetrahedra.
    [LOG] Generated 37 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.0
    [LOG] Max number of nodes per cluster is 69 and the number is 31
[LOG] Processing adjacency and incidence matrices for num 767
[LOG] Computing n0_to_0 for num 767
[LOG] Computing n1_to_1 for num 767
[LOG] We will select 573 edges and 1606 tetra
[LOG] Calculating for cell ranks 1 and 2
[LOG] Edges from tetra 0 and KDTree 1254 with 0 edges in common.
[LOG] Computing n2_to_2 (adjacency) for num 767
[LOG] Computing n0_to_3 for num 302
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_4 for num 302
[LOG] Computing n1_to_2 for num 302
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_3 for num 642
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_4 for num 642
[LOG] GENERATED TETRA
[LOG] Computing n2_to_3 for num 642
[LOG] Computing n3_to_3 (adjacency) for num 767
[LOG] Computing n4_to_4 (coadjacency) for num 767
[LOG] Computing n0_to_1 for num 767
[LOG] Computing n0_to_2 for num 767
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1990 Tetrahedra.
    [LOG] Generated 60 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.366666666666667
    [LOG] Max number of nodes per cluster is 79 and the number is 13[LOG] Calculating for cell ranks 4 and 4

[LOG] Computing n1_to_3 for num 302
[LOG] Computing n2_to_4 for num 642
[LOG] Computing n1_to_4 for num 302
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_3 for num 302
[LOG] Computing n2_to_4 for num 302
[LOG] Computing n3_to_4 for num 302
[LOG] Global feature for num 302
[LOG] Global feature for num 302
[LOG] Saving tensor x_0_302.pt
[LOG] Saving tensor x_1_302.pt
[LOG] Saving tensor x_2_302.pt
[LOG] Saving tensor x_3_302.pt
[LOG] Saving tensor x_4_302.pt
[LOG] Saving tensor n0_to_0_302.pt
[LOG] Saving tensor n1_to_1_302.pt
[LOG] Computing n3_to_4 for num 642
[LOG] Saving tensor n2_to_2_302.pt
[LOG] Global feature for num 642
[LOG] Global feature for num 642
[LOG] Saving tensor x_0_642.pt
[LOG] Saving tensor n3_to_3_302.pt
[LOG] Saving tensor n4_to_4_302.pt
[LOG] Saving tensor x_1_642.pt
[LOG] Saving tensor n0_to_1_302.pt
[LOG] Saving tensor x_2_642.pt
[LOG] Saving tensor x_3_642.pt
[LOG] Saving tensor n0_to_2_302.pt
[LOG] Saving tensor x_4_642.pt
[LOG] Saving tensor n0_to_0_642.pt
[LOG] Saving tensor n0_to_3_302.pt
[LOG] Saving tensor n0_to_4_302.pt
[LOG] Saving tensor n1_to_1_642.pt
[LOG] Saving tensor n1_to_2_302.pt
[LOG] Saving tensor n2_to_2_642.pt
[LOG] Saving tensor n1_to_3_302.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n3_to_3_642.pt
[LOG] Saving tensor n1_to_4_302.pt
[LOG] Saving tensor n2_to_3_302.pt
[LOG] Saving tensor n4_to_4_642.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n2_to_4_302.pt
[LOG] Saving tensor n0_to_1_642.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n0_to_2_642.pt
[LOG] Saving tensor n3_to_4_302.pt
[LOG] We will select 897 edges and 1990 tetra
[LOG] Edges from tetra 0 and KDTree 4690 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_3 for num 767
[LOG] Computing n0_to_4 for num 767
[LOG] Computing n1_to_2 for num 767
[LOG] GENERATED TETRA
[LOG] Computing n1_to_3 for num 767
[LOG] Computing n1_to_4 for num 767
[LOG] Computing n2_to_3 for num 767
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_4 for num 767
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor global_feature_302.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n0_to_3_642.pt
[LOG] Process 37: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_4_642.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n1_to_2_642.pt
[LOG] Computing n3_to_4 for num 767
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Global feature for num 767
[LOG] Global feature for num 767
[LOG] Saving tensor n1_to_3_642.pt
[LOG] Saving tensor x_0_767.pt
[LOG] Saving tensor n1_to_4_642.pt
[LOG] Saving tensor x_1_767.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor x_2_767.pt
[LOG] Saving tensor n2_to_3_642.pt
[LOG] Saving tensor x_3_767.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor x_4_767.pt
[LOG] Saving tensor n0_to_0_767.pt
[LOG] Saving tensor n2_to_4_642.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n1_to_1_767.pt
[LOG] Saving tensor n3_to_4_642.pt
[LOG] Saving tensor n2_to_2_767.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor global_feature_642.pt
[LOG] Process 80: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n3_to_3_767.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n4_to_4_767.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n0_to_1_767.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n0_to_2_767.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n0_to_3_767.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n0_to_4_767.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n1_to_2_767.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n1_to_3_767.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n1_to_4_767.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n2_to_3_767.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n3_to_3 (adjacency) for num 848
[LOG] Computing n4_to_4 (coadjacency) for num 848
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_1 for num 848
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 1351 Tetrahedra.
    [LOG] Generated 35 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.742857142857142
    [LOG] Max number of nodes per cluster is 43 and the number is 32
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n2_to_4_767.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n3_to_4_767.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor global_feature_767.pt
[LOG] Process 95: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] We will select 392 edges and 1351 tetra
[LOG] Edges from tetra 0 and KDTree 392 with 0 edges in common.
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Process 71: Created combinatorial complex for file data_570.hdf5
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1966 Tetrahedra.
    [LOG] Generated 79 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.113924050632912
    [LOG] Max number of nodes per cluster is 39 and the number is 26
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 71: Calculating Neighbors
[LOG] Calculating for cell ranks 1 and 1
[LOG] Loading pickle file data_570.pickle
[LOG] Processing node features for num 570
[LOG] Processing edge features for num 570
[LOG] We will select 297 edges and 1966 tetra
[LOG] Edges from tetra 0 and KDTree 1232 with 0 edges in common.
[LOG] Processing tetra features for num 570
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing cluster features for num 570
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 570
[LOG] Processing adjacency and incidence matrices for num 570
[LOG] Computing n0_to_0 for num 570
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_2 for num 848
[LOG] Process 3: Created combinatorial complex for file data_28.hdf5
[LOG] Computing n1_to_1 for num 570
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 3: Calculating Neighbors
[LOG] Removed 0 subset clusters.
[LOG] Loading pickle file data_28.pickle
[LOG] Processing node features for num 28
[LOG] Processing edge features for num 28
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_2 (adjacency) for num 570
[LOG] Processing tetra features for num 28
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing cluster features for num 28
[LOG] Process 53: Created combinatorial complex for file data_427.hdf5
[LOG] Processing cluster features for num 28
[LOG] Computing n3_to_3 (adjacency) for num 570
[LOG] Processing adjacency and incidence matrices for num 28
[LOG] Computing n0_to_0 for num 28
[LOG] Computing n4_to_4 (coadjacency) for num 570
[LOG] Computing n0_to_1 for num 570
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n0_to_2 for num 570
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Process 53: Calculating Neighbors
[LOG] Loading pickle file data_427.pickle
[LOG] Processing node features for num 427
[LOG] Processing edge features for num 427
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Processing tetra features for num 427
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Processing cluster features for num 427
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Processing cluster features for num 427
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Processing adjacency and incidence matrices for num 427
[LOG] Computing n0_to_0 for num 427
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_1 for num 427
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_3 for num 570
[LOG] Computing n0_to_4 for num 570
[LOG] Process 64: Created combinatorial complex for file data_517.hdf5
[LOG] Computing n1_to_2 for num 570
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_2 (adjacency) for num 427
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n1_to_1 for num 28
[LOG] Computing n3_to_3 (adjacency) for num 427
[LOG] Computing n4_to_4 (coadjacency) for num 427
[LOG] Computing n0_to_1 for num 427
[LOG] Calculating for cell ranks 2 and 2
[LOG] GENERATED TETRA
[LOG] Computing n0_to_2 for num 427
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n1_to_3 for num 570
[LOG] Process 64: Calculating Neighbors
[LOG] Loading pickle file data_517.pickle
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing node features for num 517
[LOG] Computing n1_to_4 for num 570
[LOG] Processing edge features for num 517
[LOG] Computing n2_to_3 for num 570
[LOG] Computing n2_to_4 for num 570
[LOG] Processing tetra features for num 517
[LOG] Computing n3_to_4 for num 570
[LOG] Global feature for num 570
[LOG] Global feature for num 570
[LOG] Saving tensor x_0_570.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_3 for num 427
[LOG] Computing n0_to_4 for num 427
[LOG] Processing cluster features for num 517
[LOG] Computing n1_to_2 for num 427
[LOG] Saving tensor x_1_570.pt
[LOG] Processing cluster features for num 517
[LOG] Saving tensor x_2_570.pt
[LOG] Saving tensor x_3_570.pt
[LOG] Saving tensor x_4_570.pt
[LOG] Saving tensor n0_to_0_570.pt
[LOG] Saving tensor n1_to_1_570.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n2_to_2_570.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Processing adjacency and incidence matrices for num 517
[LOG] Computing n0_to_0 for num 517
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n3_to_3_570.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n4_to_4_570.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n0_to_1_570.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n0_to_2_570.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n0_to_3_570.pt
[LOG] Saving tensor n0_to_4_570.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n1_to_2_570.pt
[LOG] Computing n1_to_3 for num 427
[LOG] Computing n1_to_4 for num 427
[LOG] Computing n2_to_3 for num 427
[LOG] Computing n1_to_1 for num 517
[LOG] Computing n2_to_4 for num 427
[LOG] Computing n3_to_4 for num 427
[LOG] Global feature for num 427
[LOG] Global feature for num 427
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor x_0_427.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n1_to_3_570.pt
[LOG] Saving tensor x_1_427.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor x_2_427.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n1_to_4_570.pt
[LOG] Saving tensor x_3_427.pt
[LOG] Saving tensor x_4_427.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n0_to_0_427.pt
[LOG] Saving tensor n2_to_3_570.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n1_to_1_427.pt
[LOG] Saving tensor n2_to_2_427.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n2_to_4_570.pt
[LOG] Saving tensor n3_to_3_427.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n4_to_4_427.pt
[LOG] Saving tensor n3_to_4_570.pt
[LOG] Saving tensor n0_to_1_427.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor global_feature_570.pt
[LOG] Saving tensor n0_to_2_427.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Process 71: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_3_427.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n0_to_4_427.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n1_to_2_427.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n1_to_3_427.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n1_to_4_427.pt
[LOG] Saving tensor n2_to_3_427.pt
[LOG] Computing n1_to_3 for num 697
[LOG] Computing n2_to_2 (adjacency) for num 28
[LOG] Saving tensor n2_to_4_427.pt
[LOG] Saving tensor n3_to_4_427.pt
[LOG] Saving tensor global_feature_427.pt
[LOG] Process 53: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_4 for num 697
[LOG] Computing n2_to_2 (adjacency) for num 517
[LOG] Computing n2_to_3 for num 697
[LOG] Computing n3_to_3 (adjacency) for num 28
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n4_to_4 (coadjacency) for num 28
[LOG] Computing n0_to_1 for num 28
[LOG] Computing n3_to_3 (adjacency) for num 517
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n4_to_4 (coadjacency) for num 517
[LOG] Computing n0_to_1 for num 517
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_2 for num 517
[LOG] Computing n2_to_4 for num 697
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_3 for num 848
[LOG] Computing n0_to_2 for num 28
[LOG] Computing n0_to_4 for num 848
[LOG] Computing n1_to_2 for num 848
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n3_to_4 for num 697
[LOG] Global feature for num 697
[LOG] Global feature for num 697
[LOG] Saving tensor x_0_697.pt
[LOG] Saving tensor x_1_697.pt
[LOG] Saving tensor x_2_697.pt
[LOG] Saving tensor x_3_697.pt
[LOG] Saving tensor x_4_697.pt
[LOG] Saving tensor n0_to_0_697.pt
[LOG] Saving tensor n1_to_1_697.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] GENERATED TETRA
[LOG] Saving tensor n2_to_2_697.pt
[LOG] Saving tensor n3_to_3_697.pt
[LOG] Saving tensor n4_to_4_697.pt
[LOG] Saving tensor n0_to_1_697.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n0_to_2_697.pt
[LOG] Saving tensor n0_to_3_697.pt
[LOG] Saving tensor n0_to_4_697.pt
[LOG] Saving tensor n1_to_2_697.pt
[LOG] Saving tensor n1_to_3_697.pt
[LOG] Saving tensor n1_to_4_697.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n2_to_3_697.pt
[LOG] Saving tensor n2_to_4_697.pt
[LOG] Saving tensor n3_to_4_697.pt
[LOG] Saving tensor global_feature_697.pt
[LOG] Process 87: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 517
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_4 for num 517
[LOG] Computing n1_to_2 for num 517
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1862 Tetrahedra.
    [LOG] Generated 39 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.692307692307692
    [LOG] Max number of nodes per cluster is 58 and the number is 34
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_3 for num 517
[LOG] Computing n1_to_4 for num 517
[LOG] Computing n2_to_3 for num 517
[LOG] We will select 299 edges and 1862 tetra
[LOG] Edges from tetra 0 and KDTree 299 with 0 edges in common.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n2_to_4 for num 517
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n3_to_4 for num 517
[LOG] Global feature for num 517
[LOG] Global feature for num 517
[LOG] Saving tensor x_0_517.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor x_1_517.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor x_2_517.pt
[LOG] Saving tensor x_3_517.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor x_4_517.pt
[LOG] Saving tensor n0_to_0_517.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n1_to_1_517.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n2_to_2_517.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n3_to_3_517.pt
[LOG] Saving tensor n4_to_4_517.pt
[LOG] Saving tensor n0_to_1_517.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n0_to_2_517.pt
[LOG] Saving tensor n0_to_3_517.pt
[LOG] Computing n0_to_3 for num 28
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n0_to_4_517.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n1_to_2_517.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n1_to_3_517.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n1_to_4_517.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n2_to_3_517.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n2_to_4_517.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n3_to_4_517.pt
[LOG] Computing n0_to_4 for num 28
[LOG] Saving tensor global_feature_517.pt
[LOG] Process 64: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_2 for num 28
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1490 Tetrahedra.
    [LOG] Generated 46 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.065217391304348
    [LOG] Max number of nodes per cluster is 49 and the number is 45
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 0 subset clusters.
[LOG] Removed 4 subset clusters.

    [LOG] We Currently have 2231 Tetrahedra.
    [LOG] Generated 60 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.866666666666667
    [LOG] Max number of nodes per cluster is 35 and the number is 49
[LOG] Calculating for cell ranks 2 and 2
[LOG] We will select 1747 edges and 1490 tetra
[LOG] Edges from tetra 0 and KDTree 1747 with 0 edges in common.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_3 for num 28
[LOG] Computing n1_to_4 for num 28
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_3 for num 28
[LOG] Calculating for cell ranks 1 and 4
[LOG] We will select 2223 edges and 2231 tetra
[LOG] Edges from tetra 0 and KDTree 6002 with 0 edges in common.
[LOG] Computing n2_to_4 for num 28
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 120: Created combinatorial complex for file data_950.hdf5
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n3_to_4 for num 28
[LOG] Global feature for num 28
[LOG] Global feature for num 28
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor x_0_28.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor x_1_28.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor x_2_28.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor x_3_28.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor x_4_28.pt
[LOG] Saving tensor n0_to_0_28.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n1_to_1_28.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n2_to_2_28.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n3_to_3_28.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n4_to_4_28.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n0_to_1_28.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n0_to_2_28.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n0_to_3_28.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n0_to_4_28.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n1_to_2_28.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n1_to_3_28.pt
[LOG] Saving tensor n1_to_4_28.pt
[LOG] Process 120: Calculating Neighbors
[LOG] Loading pickle file data_950.pickle
[LOG] Processing node features for num 950
[LOG] Processing edge features for num 950
[LOG] Saving tensor n2_to_3_28.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n2_to_4_28.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n3_to_4_28.pt
[LOG] Saving tensor global_feature_28.pt
[LOG] Process 3: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Processing tetra features for num 950
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing cluster features for num 950
[LOG] Processing cluster features for num 950
[LOG] Processing adjacency and incidence matrices for num 950
[LOG] Computing n0_to_0 for num 950
[LOG] Computing n1_to_1 for num 950
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_2 (adjacency) for num 950
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3379 Tetrahedra.
    [LOG] Generated 92 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.467391304347826
    [LOG] Max number of nodes per cluster is 55 and the number is 25
[LOG] Computing n3_to_3 (adjacency) for num 950
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n4_to_4 (coadjacency) for num 950
[LOG] Computing n0_to_1 for num 950
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_2 for num 950
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] We will select 1063 edges and 3379 tetra
[LOG] Edges from tetra 0 and KDTree 2919 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_3 for num 950
[LOG] Computing n0_to_4 for num 950
[LOG] Computing n1_to_2 for num 950
[LOG] Removed 3 subset clusters.
[LOG] Computing n1_to_3 for num 950
[LOG] Computing n1_to_4 for num 950
[LOG] Computing n2_to_3 for num 950
[LOG] Computing n2_to_4 for num 950
[LOG] Computing n3_to_4 for num 950
[LOG] Global feature for num 950
[LOG] Global feature for num 950
[LOG] Saving tensor x_0_950.pt
[LOG] Saving tensor x_1_950.pt
[LOG] Saving tensor x_2_950.pt
[LOG] Saving tensor x_3_950.pt
[LOG] Saving tensor x_4_950.pt
[LOG] Saving tensor n0_to_0_950.pt
[LOG] Saving tensor n1_to_1_950.pt
[LOG] Saving tensor n2_to_2_950.pt
[LOG] Saving tensor n3_to_3_950.pt
[LOG] Saving tensor n4_to_4_950.pt
[LOG] Saving tensor n0_to_1_950.pt
[LOG] Saving tensor n0_to_2_950.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n0_to_3_950.pt
[LOG] Saving tensor n0_to_4_950.pt
[LOG] Saving tensor n1_to_2_950.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n1_to_3_950.pt
[LOG] Saving tensor n1_to_4_950.pt
[LOG] Saving tensor n2_to_3_950.pt
[LOG] Saving tensor n2_to_4_950.pt
[LOG] Saving tensor n3_to_4_950.pt
[LOG] Saving tensor global_feature_950.pt
[LOG] Process 120: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_3 for num 848
[LOG] Process 30: Created combinatorial complex for file data_242.hdf5
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_4 for num 848
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_3 for num 848
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 30: Calculating Neighbors
[LOG] Loading pickle file data_242.pickle
[LOG] Processing node features for num 242
[LOG] Processing edge features for num 242
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing tetra features for num 242
[LOG] Removed 2 subset clusters.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Processing cluster features for num 242
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n2_to_4 for num 848
[LOG] Processing cluster features for num 242
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Processing adjacency and incidence matrices for num 242
[LOG] Computing n0_to_0 for num 242
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_1 for num 242
[LOG] Computing n3_to_4 for num 848
[LOG] Global feature for num 848
[LOG] Global feature for num 848
[LOG] Saving tensor x_0_848.pt
[LOG] Saving tensor x_1_848.pt
[LOG] Saving tensor x_2_848.pt
[LOG] Saving tensor x_3_848.pt
[LOG] Saving tensor x_4_848.pt
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n0_to_0_848.pt
[LOG] Saving tensor n1_to_1_848.pt
[LOG] Saving tensor n2_to_2_848.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 18: Created combinatorial complex for file data_145.hdf5
[LOG] Saving tensor n3_to_3_848.pt
[LOG] Saving tensor n4_to_4_848.pt
[LOG] Saving tensor n0_to_1_848.pt
[LOG] Saving tensor n0_to_2_848.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n0_to_3_848.pt
[LOG] Saving tensor n0_to_4_848.pt
[LOG] Saving tensor n1_to_2_848.pt
[LOG] Saving tensor n1_to_3_848.pt
[LOG] Saving tensor n1_to_4_848.pt
[LOG] Saving tensor n2_to_3_848.pt
[LOG] Saving tensor n2_to_4_848.pt
[LOG] Saving tensor n3_to_4_848.pt
[LOG] Saving tensor global_feature_848.pt
[LOG] Process 106: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 18: Calculating Neighbors
[LOG] Loading pickle file data_145.pickle
[LOG] Processing node features for num 145
[LOG] Processing edge features for num 145
[LOG] Process 96: Created combinatorial complex for file data_771.hdf5
[LOG] Processing tetra features for num 145
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 145
[LOG] Processing cluster features for num 145
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing adjacency and incidence matrices for num 145
[LOG] Computing n0_to_0 for num 145
[LOG] Process 96: Calculating Neighbors
[LOG] Loading pickle file data_771.pickle
[LOG] Processing node features for num 771
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing edge features for num 771
[LOG] Processing tetra features for num 771
[LOG] Computing n2_to_2 (adjacency) for num 242
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_1 for num 145
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing cluster features for num 771
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_3 (adjacency) for num 242
[LOG] Computing n4_to_4 (coadjacency) for num 242
[LOG] Computing n0_to_1 for num 242
[LOG] Processing cluster features for num 771
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing adjacency and incidence matrices for num 771
[LOG] Computing n0_to_0 for num 771
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n0_to_2 for num 242
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_3 for num 242
[LOG] Computing n0_to_4 for num 242
[LOG] Computing n1_to_2 for num 242
[LOG] Computing n1_to_1 for num 771
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_3 for num 242
[LOG] Computing n1_to_4 for num 242
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_3 for num 242
[LOG] Computing n2_to_4 for num 242
[LOG] Computing n3_to_4 for num 242
[LOG] Global feature for num 242
[LOG] Global feature for num 242
[LOG] Saving tensor x_0_242.pt
[LOG] Saving tensor x_1_242.pt
[LOG] Saving tensor x_2_242.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor x_3_242.pt
[LOG] Saving tensor x_4_242.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n0_to_0_242.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n1_to_1_242.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n2_to_2_242.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n3_to_3_242.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n4_to_4_242.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n0_to_1_242.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n0_to_2_242.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n0_to_3_242.pt
[LOG] Saving tensor n0_to_4_242.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n1_to_2_242.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n1_to_3_242.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n1_to_4_242.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n2_to_3_242.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n2_to_4_242.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n3_to_4_242.pt
[LOG] Saving tensor global_feature_242.pt
[LOG] Process 30: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 145
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 771
[LOG] Calculating for cell ranks 1 and 1
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_3 (adjacency) for num 145
[LOG] Computing n4_to_4 (coadjacency) for num 145
[LOG] Computing n0_to_1 for num 145
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_2 for num 145
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_3 for num 145
[LOG] Computing n0_to_4 for num 145
[LOG] Computing n1_to_2 for num 145
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n3_to_3 (adjacency) for num 771
[LOG] Computing n4_to_4 (coadjacency) for num 771
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_1 for num 771
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_2 for num 771
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 4844 Tetrahedra.
    [LOG] Generated 131 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.007633587786259
    [LOG] Max number of nodes per cluster is 62 and the number is 107
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_3 for num 145
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_4 for num 145
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_3 for num 145
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n2_to_4 for num 145
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n3_to_4 for num 145
[LOG] Global feature for num 145
[LOG] Global feature for num 145
[LOG] Saving tensor x_0_145.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor x_1_145.pt
[LOG] Saving tensor x_2_145.pt
[LOG] Saving tensor x_3_145.pt
[LOG] Saving tensor x_4_145.pt
[LOG] Saving tensor n0_to_0_145.pt
[LOG] Saving tensor n1_to_1_145.pt
[LOG] Saving tensor n2_to_2_145.pt
[LOG] Saving tensor n3_to_3_145.pt
[LOG] Saving tensor n4_to_4_145.pt
[LOG] Saving tensor n0_to_1_145.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n0_to_2_145.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n0_to_3_145.pt
[LOG] Saving tensor n0_to_4_145.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n1_to_2_145.pt
[LOG] Saving tensor n1_to_3_145.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n1_to_4_145.pt
[LOG] Saving tensor n2_to_3_145.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n2_to_4_145.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n3_to_4_145.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor global_feature_145.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Process 18: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] We will select 1663 edges and 4844 tetra
[LOG] Edges from tetra 0 and KDTree 1716 with 0 edges in common.
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_3 for num 771
[LOG] Computing n0_to_4 for num 771
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n1_to_2 for num 771
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_3 for num 771
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1353 Tetrahedra.
    [LOG] Generated 44 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.795454545454545
    [LOG] Max number of nodes per cluster is 74 and the number is 39
[LOG] Computing n1_to_4 for num 771
[LOG] Computing n2_to_3 for num 771
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1270 Tetrahedra.
    [LOG] Generated 33 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.909090909090908
    [LOG] Max number of nodes per cluster is 28 and the number is 31
[LOG] We will select 171 edges and 1353 tetra
[LOG] Edges from tetra 0 and KDTree 1578 with 0 edges in common.
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1346 Tetrahedra.
    [LOG] Generated 42 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.833333333333334
    [LOG] Max number of nodes per cluster is 52 and the number is 1
[LOG] We will select 156 edges and 1270 tetra
[LOG] Edges from tetra 0 and KDTree 630 with 0 edges in common.
[LOG] Computing n2_to_4 for num 771
[LOG] We will select 332 edges and 1346 tetra
[LOG] Edges from tetra 0 and KDTree 332 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n3_to_4 for num 771
[LOG] Global feature for num 771
[LOG] Global feature for num 771
[LOG] Saving tensor x_0_771.pt
[LOG] Saving tensor x_1_771.pt
[LOG] Saving tensor x_2_771.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor x_3_771.pt
[LOG] Saving tensor x_4_771.pt
[LOG] Saving tensor n0_to_0_771.pt
[LOG] Saving tensor n1_to_1_771.pt
[LOG] Saving tensor n2_to_2_771.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n3_to_3_771.pt
[LOG] Saving tensor n4_to_4_771.pt
[LOG] Saving tensor n0_to_1_771.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n0_to_2_771.pt
[LOG] Saving tensor n0_to_3_771.pt
[LOG] Saving tensor n0_to_4_771.pt
[LOG] Saving tensor n1_to_2_771.pt
[LOG] Saving tensor n1_to_3_771.pt
[LOG] Saving tensor n1_to_4_771.pt
[LOG] Saving tensor n2_to_3_771.pt
[LOG] Saving tensor n2_to_4_771.pt
[LOG] Saving tensor n3_to_4_771.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor global_feature_771.pt
[LOG] Process 96: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Process 73: Created combinatorial complex for file data_589.hdf5
[LOG] Removed 1 subset clusters.
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Process 73: Calculating Neighbors
[LOG] Loading pickle file data_589.pickle
[LOG] Processing node features for num 589
[LOG] Processing edge features for num 589
[LOG] Process 39: Created combinatorial complex for file data_316.hdf5
[LOG] Processing tetra features for num 589
[LOG] Process 75: Created combinatorial complex for file data_607.hdf5
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing cluster features for num 589
[LOG] Processing cluster features for num 589
[LOG] Processing adjacency and incidence matrices for num 589
[LOG] Computing n0_to_0 for num 589
[LOG] Process 75: Calculating Neighbors
[LOG] Loading pickle file data_607.pickle
[LOG] Processing node features for num 607
[LOG] Process 39: Calculating Neighbors
[LOG] Loading pickle file data_316.pickle
[LOG] Processing node features for num 316
[LOG] Processing edge features for num 607
[LOG] Processing edge features for num 316
[LOG] Computing n1_to_1 for num 589
[LOG] Processing tetra features for num 607
[LOG] Processing tetra features for num 316
[LOG] GENERATED TETRA
[LOG] Processing cluster features for num 607
[LOG] Removed 2 subset clusters.
[LOG] Processing cluster features for num 316
[LOG] Processing cluster features for num 607
[LOG] Processing adjacency and incidence matrices for num 607
[LOG] Computing n0_to_0 for num 607
[LOG] Processing cluster features for num 316
[LOG] Computing n2_to_2 (adjacency) for num 589
[LOG] Computing n1_to_1 for num 607
[LOG] Processing adjacency and incidence matrices for num 316
[LOG] Computing n0_to_0 for num 316
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_1 for num 316
[LOG] Computing n2_to_2 (adjacency) for num 607
[LOG] Computing n3_to_3 (adjacency) for num 589
[LOG] Computing n4_to_4 (coadjacency) for num 589
[LOG] Computing n0_to_1 for num 589
[LOG] Computing n3_to_3 (adjacency) for num 607
[LOG] Computing n4_to_4 (coadjacency) for num 607
[LOG] Computing n0_to_1 for num 607
[LOG] Computing n0_to_2 for num 607
[LOG] Computing n0_to_2 for num 589
[LOG] Computing n2_to_2 (adjacency) for num 316
[LOG] Computing n3_to_3 (adjacency) for num 316
[LOG] Computing n4_to_4 (coadjacency) for num 316
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_3 for num 607
[LOG] Computing n0_to_1 for num 316
[LOG] Computing n0_to_4 for num 607
[LOG] Computing n1_to_2 for num 607
[LOG] Computing n0_to_2 for num 316
[LOG] Computing n1_to_3 for num 607
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_4 for num 607
[LOG] Computing n2_to_3 for num 607
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_4 for num 607
[LOG] Computing n3_to_4 for num 607
[LOG] Global feature for num 607
[LOG] Global feature for num 607
[LOG] Saving tensor x_0_607.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1843 Tetrahedra.
    [LOG] Generated 52 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.615384615384615
    [LOG] Max number of nodes per cluster is 28 and the number is 2
[LOG] Saving tensor x_1_607.pt
[LOG] Saving tensor x_2_607.pt
[LOG] Saving tensor x_3_607.pt
[LOG] Saving tensor x_4_607.pt
[LOG] Saving tensor n0_to_0_607.pt
[LOG] Saving tensor n1_to_1_607.pt
[LOG] Saving tensor n2_to_2_607.pt
[LOG] Saving tensor n3_to_3_607.pt
[LOG] Saving tensor n4_to_4_607.pt
[LOG] Saving tensor n0_to_1_607.pt
[LOG] Saving tensor n0_to_2_607.pt
[LOG] Saving tensor n0_to_3_607.pt
[LOG] Saving tensor n0_to_4_607.pt
[LOG] Saving tensor n1_to_2_607.pt
[LOG] Saving tensor n1_to_3_607.pt
[LOG] Saving tensor n1_to_4_607.pt
[LOG] Saving tensor n2_to_3_607.pt
[LOG] Saving tensor n2_to_4_607.pt
[LOG] Saving tensor n3_to_4_607.pt
[LOG] Saving tensor global_feature_607.pt
[LOG] Process 75: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] We will select 560 edges and 1843 tetra
[LOG] Edges from tetra 0 and KDTree 653 with 0 edges in common.
[LOG] Computing n0_to_3 for num 589
[LOG] Computing n0_to_4 for num 589
[LOG] Computing n0_to_3 for num 316
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_2 for num 589
[LOG] Computing n0_to_4 for num 316
[LOG] Computing n1_to_2 for num 316
[LOG] Computing n1_to_3 for num 589
[LOG] Computing n1_to_4 for num 589
[LOG] Computing n2_to_3 for num 589
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n2_to_4 for num 589
[LOG] Process 98: Created combinatorial complex for file data_786.hdf5
[LOG] Computing n3_to_4 for num 589
[LOG] Global feature for num 589
[LOG] Global feature for num 589
[LOG] Saving tensor x_0_589.pt
[LOG] Saving tensor x_1_589.pt
[LOG] Saving tensor x_2_589.pt
[LOG] Saving tensor x_3_589.pt
[LOG] Saving tensor x_4_589.pt
[LOG] Saving tensor n0_to_0_589.pt
[LOG] Saving tensor n1_to_1_589.pt
[LOG] Saving tensor n2_to_2_589.pt
[LOG] Computing n1_to_3 for num 316
[LOG] Saving tensor n3_to_3_589.pt
[LOG] Computing n1_to_4 for num 316
[LOG] Saving tensor n4_to_4_589.pt
[LOG] Saving tensor n0_to_1_589.pt
[LOG] Computing n2_to_3 for num 316
[LOG] Saving tensor n0_to_2_589.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n0_to_3_589.pt
[LOG] Saving tensor n0_to_4_589.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n1_to_2_589.pt
[LOG] Saving tensor n1_to_3_589.pt
[LOG] Saving tensor n1_to_4_589.pt
[LOG] Computing n2_to_4 for num 316
[LOG] Saving tensor n2_to_3_589.pt
[LOG] Saving tensor n2_to_4_589.pt
[LOG] Saving tensor n3_to_4_589.pt
[LOG] Saving tensor global_feature_589.pt
[LOG] Process 73: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_4 for num 316
[LOG] Global feature for num 316
[LOG] Global feature for num 316
[LOG] Saving tensor x_0_316.pt
[LOG] Saving tensor x_1_316.pt
[LOG] Saving tensor x_2_316.pt
[LOG] Saving tensor x_3_316.pt
[LOG] Saving tensor x_4_316.pt
[LOG] Saving tensor n0_to_0_316.pt
[LOG] Saving tensor n1_to_1_316.pt
[LOG] Saving tensor n2_to_2_316.pt
[LOG] Saving tensor n3_to_3_316.pt
[LOG] Saving tensor n4_to_4_316.pt
[LOG] Saving tensor n0_to_1_316.pt
[LOG] Saving tensor n0_to_2_316.pt
[LOG] Saving tensor n0_to_3_316.pt
[LOG] Saving tensor n0_to_4_316.pt
[LOG] Saving tensor n1_to_2_316.pt
[LOG] Saving tensor n1_to_3_316.pt
[LOG] Saving tensor n1_to_4_316.pt
[LOG] Saving tensor n2_to_3_316.pt
[LOG] Saving tensor n2_to_4_316.pt
[LOG] Saving tensor n3_to_4_316.pt
[LOG] Saving tensor global_feature_316.pt
[LOG] Process 39: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1370 Tetrahedra.
    [LOG] Generated 24 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 26.666666666666668
    [LOG] Max number of nodes per cluster is 213 and the number is 20
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1672 Tetrahedra.
    [LOG] Generated 33 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 19.96969696969697
    [LOG] Max number of nodes per cluster is 112 and the number is 31
[LOG] Calculating for cell ranks 4 and 4
[LOG] We will select 213 edges and 1370 tetra
[LOG] Edges from tetra 0 and KDTree 2855 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 98: Calculating Neighbors
[LOG] Loading pickle file data_786.pickle
[LOG] Processing node features for num 786
[LOG] Processing edge features for num 786
[LOG] We will select 156 edges and 1672 tetra
[LOG] Edges from tetra 0 and KDTree 2882 with 0 edges in common.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing tetra features for num 786
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Processing cluster features for num 786
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Processing cluster features for num 786
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Processing adjacency and incidence matrices for num 786
[LOG] Computing n0_to_0 for num 786
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Process 8: Created combinatorial complex for file data_70.hdf5
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Process 117: Created combinatorial complex for file data_926.hdf5
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Process 8: Calculating Neighbors
[LOG] Loading pickle file data_70.pickle
[LOG] Processing node features for num 70
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing edge features for num 70
[LOG] Processing tetra features for num 70
[LOG] Processing cluster features for num 70
[LOG] Process 117: Calculating Neighbors
[LOG] Loading pickle file data_926.pickle
[LOG] Processing node features for num 926
[LOG] Process 35: Created combinatorial complex for file data_285.hdf5
[LOG] Processing edge features for num 926
[LOG] Processing cluster features for num 70
[LOG] Computing n1_to_1 for num 786
[LOG] Processing adjacency and incidence matrices for num 70
[LOG] Computing n0_to_0 for num 70
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing tetra features for num 926
[LOG] Processing cluster features for num 926
[LOG] Processing cluster features for num 926
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1654 Tetrahedra.
    [LOG] Generated 48 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.645833333333334
    [LOG] Max number of nodes per cluster is 29 and the number is 6
[LOG] Computing n1_to_1 for num 70
[LOG] Processing adjacency and incidence matrices for num 926
[LOG] Computing n0_to_0 for num 926
[LOG] Computing n1_to_1 for num 926
[LOG] We will select 86 edges and 1654 tetra
[LOG] Edges from tetra 0 and KDTree 86 with 0 edges in common.
[LOG] Computing n2_to_2 (adjacency) for num 70
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n3_to_3 (adjacency) for num 70
[LOG] Computing n4_to_4 (coadjacency) for num 70
[LOG] Computing n0_to_1 for num 70
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_2 for num 70
[LOG] Computing n2_to_2 (adjacency) for num 926
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 926
[LOG] Computing n4_to_4 (coadjacency) for num 926
[LOG] Computing n0_to_1 for num 926
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_2 for num 926
[LOG] Process 35: Calculating Neighbors
[LOG] Loading pickle file data_285.pickle
[LOG] Processing node features for num 285
[LOG] Processing edge features for num 285
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing tetra features for num 285
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing cluster features for num 285
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing cluster features for num 285
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing adjacency and incidence matrices for num 285
[LOG] Computing n0_to_0 for num 285
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n1_to_1 for num 285
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n0_to_3 for num 70
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n0_to_4 for num 70
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n0_to_3 for num 926
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_2 for num 70
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n2_to_2 (adjacency) for num 285
[LOG] Computing n0_to_4 for num 926
[LOG] Computing n1_to_2 for num 926
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n1_to_3 for num 70
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Computing n1_to_4 for num 70
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n2_to_3 for num 70
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_4 for num 70
[LOG] Computing n3_to_4 for num 70
[LOG] Global feature for num 70
[LOG] Global feature for num 70
[LOG] Saving tensor x_0_70.pt
[LOG] Saving tensor x_1_70.pt
[LOG] Saving tensor x_2_70.pt
[LOG] Saving tensor x_3_70.pt
[LOG] Saving tensor x_4_70.pt
[LOG] Saving tensor n0_to_0_70.pt
[LOG] Saving tensor n1_to_1_70.pt
[LOG] Saving tensor n2_to_2_70.pt
[LOG] Computing n3_to_3 (adjacency) for num 285
[LOG] Computing n4_to_4 (coadjacency) for num 285
[LOG] Process 91: Created combinatorial complex for file data_733.hdf5
[LOG] Computing n0_to_1 for num 285
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n3_to_3_70.pt
[LOG] Saving tensor n4_to_4_70.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1194 Tetrahedra.
    [LOG] Generated 33 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.666666666666666
    [LOG] Max number of nodes per cluster is 53 and the number is 14
[LOG] Saving tensor n0_to_1_70.pt
[LOG] Computing n0_to_2 for num 285
[LOG] Saving tensor n0_to_2_70.pt
[LOG] Saving tensor n0_to_3_70.pt
[LOG] Saving tensor n0_to_4_70.pt
[LOG] Saving tensor n1_to_2_70.pt
[LOG] Saving tensor n1_to_3_70.pt
[LOG] Saving tensor n1_to_4_70.pt
[LOG] Saving tensor n2_to_3_70.pt
[LOG] Saving tensor n2_to_4_70.pt
[LOG] Saving tensor n3_to_4_70.pt
[LOG] Saving tensor global_feature_70.pt
[LOG] Process 8: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] We will select 233 edges and 1194 tetra
[LOG] Edges from tetra 0 and KDTree 233 with 0 edges in common.
[LOG] Process 91: Calculating Neighbors
[LOG] Loading pickle file data_733.pickle
[LOG] Processing node features for num 733
[LOG] Processing edge features for num 733
[LOG] Processing tetra features for num 733
[LOG] Computing n1_to_3 for num 926
[LOG] Computing n1_to_4 for num 926
[LOG] Computing n2_to_3 for num 926
[LOG] Processing cluster features for num 733
[LOG] Processing cluster features for num 733
[LOG] Computing n2_to_4 for num 926
[LOG] Processing adjacency and incidence matrices for num 733
[LOG] Computing n0_to_0 for num 733
[LOG] Computing n1_to_1 for num 733
[LOG] Computing n3_to_4 for num 926
[LOG] Global feature for num 926
[LOG] Global feature for num 926
[LOG] Saving tensor x_0_926.pt
[LOG] Saving tensor x_1_926.pt
[LOG] Saving tensor x_2_926.pt
[LOG] Saving tensor x_3_926.pt
[LOG] Saving tensor x_4_926.pt
[LOG] Saving tensor n0_to_0_926.pt
[LOG] Saving tensor n1_to_1_926.pt
[LOG] Saving tensor n2_to_2_926.pt
[LOG] Computing n2_to_2 (adjacency) for num 733
[LOG] Saving tensor n3_to_3_926.pt
[LOG] Saving tensor n4_to_4_926.pt
[LOG] Saving tensor n0_to_1_926.pt
[LOG] Saving tensor n0_to_2_926.pt
[LOG] Saving tensor n0_to_3_926.pt
[LOG] Saving tensor n0_to_4_926.pt
[LOG] Saving tensor n1_to_2_926.pt
[LOG] Saving tensor n1_to_3_926.pt
[LOG] Saving tensor n1_to_4_926.pt
[LOG] Saving tensor n2_to_3_926.pt
[LOG] Saving tensor n2_to_4_926.pt
[LOG] Saving tensor n3_to_4_926.pt
[LOG] Saving tensor global_feature_926.pt
[LOG] Process 117: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] GENERATED TETRA
[LOG] Computing n3_to_3 (adjacency) for num 733
[LOG] Computing n4_to_4 (coadjacency) for num 733
[LOG] Computing n0_to_1 for num 733
[LOG] Computing n0_to_2 for num 733
[LOG] Computing n0_to_3 for num 285
[LOG] Computing n0_to_4 for num 285
[LOG] Computing n1_to_2 for num 285
[LOG] Removed 2 subset clusters.
[LOG] Computing n1_to_3 for num 285
[LOG] Computing n1_to_4 for num 285
[LOG] Computing n2_to_3 for num 285
[LOG] Computing n0_to_3 for num 733
[LOG] Computing n0_to_4 for num 733
[LOG] Computing n2_to_4 for num 285
[LOG] Computing n1_to_2 for num 733
[LOG] Computing n3_to_4 for num 285
[LOG] Global feature for num 285
[LOG] Global feature for num 285
[LOG] Saving tensor x_0_285.pt
[LOG] Saving tensor x_1_285.pt
[LOG] Saving tensor x_2_285.pt
[LOG] Saving tensor x_3_285.pt
[LOG] Saving tensor x_4_285.pt
[LOG] Saving tensor n0_to_0_285.pt
[LOG] Saving tensor n1_to_1_285.pt
[LOG] Saving tensor n2_to_2_285.pt
[LOG] Computing n1_to_3 for num 733
[LOG] Computing n1_to_4 for num 733
[LOG] Computing n2_to_3 for num 733
[LOG] Saving tensor n3_to_3_285.pt
[LOG] Saving tensor n4_to_4_285.pt
[LOG] Saving tensor n0_to_1_285.pt
[LOG] Saving tensor n0_to_2_285.pt
[LOG] Computing n2_to_4 for num 733
[LOG] Saving tensor n0_to_3_285.pt
[LOG] Saving tensor n0_to_4_285.pt
[LOG] Saving tensor n1_to_2_285.pt
[LOG] Process 67: Created combinatorial complex for file data_539.hdf5
[LOG] Saving tensor n1_to_3_285.pt
[LOG] Saving tensor n1_to_4_285.pt
[LOG] Saving tensor n2_to_3_285.pt
[LOG] Computing n3_to_4 for num 733
[LOG] Global feature for num 733
[LOG] Saving tensor n2_to_4_285.pt
[LOG] Global feature for num 733
[LOG] Saving tensor x_0_733.pt
[LOG] Saving tensor x_1_733.pt
[LOG] Saving tensor n3_to_4_285.pt
[LOG] Saving tensor x_2_733.pt
[LOG] Saving tensor global_feature_285.pt
[LOG] Saving tensor x_3_733.pt
[LOG] Process 35: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor x_4_733.pt
[LOG] Saving tensor n0_to_0_733.pt
[LOG] Saving tensor n1_to_1_733.pt
[LOG] Saving tensor n2_to_2_733.pt
[LOG] Saving tensor n3_to_3_733.pt
[LOG] Saving tensor n4_to_4_733.pt
[LOG] Saving tensor n0_to_1_733.pt
[LOG] Saving tensor n0_to_2_733.pt
[LOG] Saving tensor n0_to_3_733.pt
[LOG] Saving tensor n0_to_4_733.pt
[LOG] Saving tensor n1_to_2_733.pt
[LOG] Saving tensor n1_to_3_733.pt
[LOG] Saving tensor n1_to_4_733.pt
[LOG] Saving tensor n2_to_3_733.pt
[LOG] Saving tensor n2_to_4_733.pt
[LOG] Saving tensor n3_to_4_733.pt
[LOG] Saving tensor global_feature_733.pt
[LOG] Process 91: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 67: Calculating Neighbors
[LOG] Loading pickle file data_539.pickle
[LOG] Processing node features for num 539
[LOG] Processing edge features for num 539
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing tetra features for num 539
[LOG] Processing cluster features for num 539
[LOG] Processing cluster features for num 539
[LOG] Processing adjacency and incidence matrices for num 539
[LOG] Computing n0_to_0 for num 539
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_1 for num 539
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_2 (adjacency) for num 539
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 539
[LOG] Computing n4_to_4 (coadjacency) for num 539
[LOG] Computing n0_to_1 for num 539
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_2 for num 539
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n0_to_3 for num 539
[LOG] Computing n2_to_2 (adjacency) for num 786
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n0_to_4 for num 539
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n1_to_2 for num 539
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n1_to_3 for num 539
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n1_to_4 for num 539
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n2_to_3 for num 539
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n2_to_4 for num 539
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n3_to_4 for num 539
[LOG] Global feature for num 539
[LOG] Global feature for num 539
[LOG] Saving tensor x_0_539.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor x_1_539.pt
[LOG] Saving tensor x_2_539.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor x_3_539.pt
[LOG] Saving tensor x_4_539.pt
[LOG] Saving tensor n0_to_0_539.pt
[LOG] Saving tensor n1_to_1_539.pt
[LOG] Saving tensor n2_to_2_539.pt
[LOG] Saving tensor n3_to_3_539.pt
[LOG] Saving tensor n4_to_4_539.pt
[LOG] Saving tensor n0_to_1_539.pt
[LOG] Saving tensor n0_to_2_539.pt
[LOG] Saving tensor n0_to_3_539.pt
[LOG] Saving tensor n0_to_4_539.pt
[LOG] Saving tensor n1_to_2_539.pt
[LOG] Saving tensor n1_to_3_539.pt
[LOG] Saving tensor n1_to_4_539.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n2_to_3_539.pt
[LOG] Saving tensor n2_to_4_539.pt
[LOG] Saving tensor n3_to_4_539.pt
[LOG] Saving tensor global_feature_539.pt
[LOG] Process 67: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1229 Tetrahedra.
    [LOG] Generated 33 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.484848484848484
    [LOG] Max number of nodes per cluster is 37 and the number is 19
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] We will select 139 edges and 1229 tetra
[LOG] Edges from tetra 0 and KDTree 140 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3033 Tetrahedra.
    [LOG] Generated 52 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 19.326923076923077
    [LOG] Max number of nodes per cluster is 94 and the number is 51
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] We will select 643 edges and 3033 tetra
[LOG] Edges from tetra 0 and KDTree 2769 with 0 edges in common.
[LOG] Process 103: Created combinatorial complex for file data_828.hdf5
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 103: Calculating Neighbors
[LOG] Loading pickle file data_828.pickle
[LOG] Processing node features for num 828
[LOG] Processing edge features for num 828
[LOG] Processing tetra features for num 828
[LOG] Processing cluster features for num 828
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing cluster features for num 828
[LOG] Processing adjacency and incidence matrices for num 828
[LOG] Computing n0_to_0 for num 828
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_1 for num 828
[LOG] Computing n3_to_3 (adjacency) for num 786
[LOG] Computing n4_to_4 (coadjacency) for num 786
[LOG] Computing n0_to_1 for num 786
[LOG] Computing n2_to_2 (adjacency) for num 828
[LOG] Computing n3_to_3 (adjacency) for num 828
[LOG] Computing n4_to_4 (coadjacency) for num 828
[LOG] Computing n0_to_1 for num 828
[LOG] Computing n0_to_2 for num 828
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_3 for num 828
[LOG] Computing n0_to_4 for num 828
[LOG] Computing n1_to_2 for num 828
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_3 for num 828
[LOG] Computing n1_to_4 for num 828
[LOG] Computing n2_to_3 for num 828
[LOG] Computing n2_to_4 for num 828
[LOG] Computing n0_to_2 for num 786
[LOG] Computing n3_to_4 for num 828
[LOG] Global feature for num 828
[LOG] Global feature for num 828
[LOG] Saving tensor x_0_828.pt
[LOG] Saving tensor x_1_828.pt
[LOG] Saving tensor x_2_828.pt
[LOG] Saving tensor x_3_828.pt
[LOG] Saving tensor x_4_828.pt
[LOG] Saving tensor n0_to_0_828.pt
[LOG] Saving tensor n1_to_1_828.pt
[LOG] Saving tensor n2_to_2_828.pt
[LOG] Saving tensor n3_to_3_828.pt
[LOG] Saving tensor n4_to_4_828.pt
[LOG] Saving tensor n0_to_1_828.pt
[LOG] Saving tensor n0_to_2_828.pt
[LOG] Saving tensor n0_to_3_828.pt
[LOG] Saving tensor n0_to_4_828.pt
[LOG] Saving tensor n1_to_2_828.pt
[LOG] Saving tensor n1_to_3_828.pt
[LOG] Saving tensor n1_to_4_828.pt
[LOG] Saving tensor n2_to_3_828.pt
[LOG] Saving tensor n2_to_4_828.pt
[LOG] Saving tensor n3_to_4_828.pt
[LOG] Saving tensor global_feature_828.pt
[LOG] Process 103: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 60: Created combinatorial complex for file data_483.hdf5
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 60: Calculating Neighbors
[LOG] Loading pickle file data_483.pickle
[LOG] Processing node features for num 483
[LOG] Processing edge features for num 483
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Processing tetra features for num 483
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing cluster features for num 483
[LOG] Processing cluster features for num 483
[LOG] Processing adjacency and incidence matrices for num 483
[LOG] Computing n0_to_0 for num 483
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1666 Tetrahedra.
    [LOG] Generated 42 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.261904761904763
    [LOG] Max number of nodes per cluster is 37 and the number is 19
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] We will select 273 edges and 1666 tetra
[LOG] Edges from tetra 0 and KDTree 467 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_1 for num 483
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_3 for num 786
[LOG] Computing n0_to_4 for num 786
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_2 for num 786
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.
[LOG] Computing n2_to_2 (adjacency) for num 483
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 62: Created combinatorial complex for file data_502.hdf5
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_3 (adjacency) for num 483
[LOG] Computing n4_to_4 (coadjacency) for num 483
[LOG] Computing n0_to_1 for num 483
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 62: Calculating Neighbors
[LOG] Loading pickle file data_502.pickle
[LOG] Processing node features for num 502
[LOG] Processing edge features for num 502
[LOG] Processing tetra features for num 502
[LOG] Processing cluster features for num 502
[LOG] Computing n0_to_2 for num 483
[LOG] Processing cluster features for num 502
[LOG] Processing adjacency and incidence matrices for num 502
[LOG] Computing n0_to_0 for num 502
[LOG] Computing n1_to_1 for num 502
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1484 Tetrahedra.
    [LOG] Generated 36 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 18.11111111111111
    [LOG] Max number of nodes per cluster is 56 and the number is 19
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_2 (adjacency) for num 502
[LOG] We will select 228 edges and 1484 tetra
[LOG] Edges from tetra 0 and KDTree 1545 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n3_to_3 (adjacency) for num 502
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n4_to_4 (coadjacency) for num 502
[LOG] Computing n0_to_1 for num 502
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_2 for num 502
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_3 for num 502
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n0_to_4 for num 502
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2587 Tetrahedra.
    [LOG] Generated 86 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.523255813953488
    [LOG] Max number of nodes per cluster is 31 and the number is 84
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n1_to_2 for num 502
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 33: Created combinatorial complex for file data_268.hdf5
[LOG] Computing n1_to_3 for num 502
[LOG] Computing n1_to_4 for num 502
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_3 for num 502
[LOG] We will select 501 edges and 2587 tetra
[LOG] Edges from tetra 0 and KDTree 1767 with 0 edges in common.
[LOG] Computing n2_to_4 for num 502
[LOG] Computing n3_to_4 for num 502
[LOG] Global feature for num 502
[LOG] Global feature for num 502
[LOG] Saving tensor x_0_502.pt
[LOG] Saving tensor x_1_502.pt
[LOG] Saving tensor x_2_502.pt
[LOG] Saving tensor x_3_502.pt
[LOG] Saving tensor x_4_502.pt
[LOG] Saving tensor n0_to_0_502.pt
[LOG] Saving tensor n1_to_1_502.pt
[LOG] Saving tensor n2_to_2_502.pt
[LOG] Saving tensor n3_to_3_502.pt
[LOG] Saving tensor n4_to_4_502.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n0_to_1_502.pt
[LOG] Saving tensor n0_to_2_502.pt
[LOG] Saving tensor n0_to_3_502.pt
[LOG] Saving tensor n0_to_4_502.pt
[LOG] Process 33: Calculating Neighbors
[LOG] Loading pickle file data_268.pickle
[LOG] Processing node features for num 268
[LOG] Saving tensor n1_to_2_502.pt
[LOG] Saving tensor n1_to_3_502.pt
[LOG] Saving tensor n1_to_4_502.pt
[LOG] Processing edge features for num 268
[LOG] Saving tensor n2_to_3_502.pt
[LOG] Saving tensor n2_to_4_502.pt
[LOG] Saving tensor n3_to_4_502.pt
[LOG] Saving tensor global_feature_502.pt
[LOG] Process 62: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing tetra features for num 268
[LOG] Computing n0_to_3 for num 483
[LOG] Processing cluster features for num 268
[LOG] Computing n0_to_4 for num 483
[LOG] Processing cluster features for num 268
[LOG] Processing adjacency and incidence matrices for num 268
[LOG] Computing n0_to_0 for num 268
[LOG] Computing n1_to_2 for num 483
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_1 for num 268
[LOG] Computing n1_to_3 for num 786
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_2 (adjacency) for num 268
[LOG] Computing n1_to_4 for num 786
[LOG] Computing n2_to_3 for num 786
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n3_to_3 (adjacency) for num 268
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n4_to_4 (coadjacency) for num 268
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Computing n0_to_1 for num 268
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n0_to_2 for num 268
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_4 for num 786
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_3 for num 483
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_4 for num 483
[LOG] Computing n2_to_3 for num 483
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n3_to_4 for num 786
[LOG] Computing n2_to_4 for num 483
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Global feature for num 786
[LOG] Global feature for num 786
[LOG] Saving tensor x_0_786.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor x_1_786.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor x_2_786.pt
[LOG] Saving tensor x_3_786.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor x_4_786.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n0_to_0_786.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n3_to_4 for num 483
[LOG] Global feature for num 483
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Global feature for num 483
[LOG] Saving tensor x_0_483.pt
[LOG] Saving tensor n1_to_1_786.pt
[LOG] Saving tensor x_1_483.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor x_2_483.pt
[LOG] Saving tensor n2_to_2_786.pt
[LOG] Saving tensor x_3_483.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor x_4_483.pt
[LOG] Saving tensor n0_to_0_483.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n3_to_3_786.pt
[LOG] Saving tensor n1_to_1_483.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n2_to_2_483.pt
[LOG] Saving tensor n4_to_4_786.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n0_to_1_786.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n0_to_2_786.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n0_to_3_786.pt
[LOG] Saving tensor n0_to_4_786.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n3_to_3_483.pt
[LOG] Saving tensor n1_to_2_786.pt
[LOG] Saving tensor n4_to_4_483.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n0_to_1_483.pt
[LOG] Saving tensor n1_to_3_786.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n0_to_2_483.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n1_to_4_786.pt
[LOG] Saving tensor n0_to_3_483.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n0_to_4_483.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n2_to_3_786.pt
[LOG] Saving tensor n1_to_2_483.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Process 45: Created combinatorial complex for file data_364.hdf5
[LOG] Computing n0_to_3 for num 268
[LOG] Saving tensor n2_to_4_786.pt
[LOG] Saving tensor n1_to_3_483.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n1_to_4_483.pt
[LOG] Saving tensor n3_to_4_786.pt
[LOG] Saving tensor n2_to_3_483.pt
[LOG] Saving tensor global_feature_786.pt
[LOG] Process 98: Calculating Cross-Cell-Invariants
[LOG] Saving tensor n2_to_4_483.pt
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n3_to_4_483.pt
[LOG] Saving tensor global_feature_483.pt
[LOG] Process 60: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_4 for num 268
[LOG] GENERATED TETRA
[LOG] Computing n1_to_2 for num 268
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_3 for num 268
[LOG] Computing n1_to_4 for num 268
[LOG] Computing n2_to_3 for num 268
[LOG] Computing n2_to_4 for num 268
[LOG] Computing n3_to_4 for num 268
[LOG] Global feature for num 268
[LOG] Global feature for num 268
[LOG] Saving tensor x_0_268.pt
[LOG] Saving tensor x_1_268.pt
[LOG] Process 45: Calculating Neighbors
[LOG] Loading pickle file data_364.pickle
[LOG] Processing node features for num 364
[LOG] Saving tensor x_2_268.pt
[LOG] Saving tensor x_3_268.pt
[LOG] Saving tensor x_4_268.pt
[LOG] Processing edge features for num 364
[LOG] Saving tensor n0_to_0_268.pt
[LOG] Saving tensor n1_to_1_268.pt
[LOG] Saving tensor n2_to_2_268.pt
[LOG] Saving tensor n3_to_3_268.pt
[LOG] Saving tensor n4_to_4_268.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n0_to_1_268.pt
[LOG] Processing tetra features for num 364
[LOG] Saving tensor n0_to_2_268.pt
[LOG] Saving tensor n0_to_3_268.pt
[LOG] Saving tensor n0_to_4_268.pt
[LOG] Saving tensor n1_to_2_268.pt
[LOG] Saving tensor n1_to_3_268.pt
[LOG] Saving tensor n1_to_4_268.pt
[LOG] Saving tensor n2_to_3_268.pt
[LOG] Saving tensor n2_to_4_268.pt
[LOG] Saving tensor n3_to_4_268.pt
[LOG] Saving tensor global_feature_268.pt
[LOG] Process 33: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing cluster features for num 364
[LOG] Processing cluster features for num 364
[LOG] Processing adjacency and incidence matrices for num 364
[LOG] Computing n0_to_0 for num 364
[LOG] GENERATED TETRA
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 4
[LOG] GENERATED TETRA
[LOG] Computing n1_to_1 for num 364
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1494 Tetrahedra.
    [LOG] Generated 43 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.86046511627907
    [LOG] Max number of nodes per cluster is 21 and the number is 5
[LOG] Calculating for cell ranks 3 and 3
[LOG] We will select 109 edges and 1494 tetra
[LOG] Edges from tetra 0 and KDTree 109 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_2 (adjacency) for num 364
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1272 Tetrahedra.
    [LOG] Generated 52 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.057692307692308
    [LOG] Max number of nodes per cluster is 73 and the number is 40
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] We will select 271 edges and 1272 tetra
[LOG] Edges from tetra 0 and KDTree 2117 with 0 edges in common.
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_3 (adjacency) for num 364
[LOG] Computing n4_to_4 (coadjacency) for num 364
[LOG] Computing n0_to_1 for num 364
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 101: Created combinatorial complex for file data_813.hdf5
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Process 7: Created combinatorial complex for file data_63.hdf5
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_2 for num 364
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Process 101: Calculating Neighbors
[LOG] Loading pickle file data_813.pickle
[LOG] Processing node features for num 813
[LOG] Processing edge features for num 813
[LOG] Processing tetra features for num 813
[LOG] Process 7: Calculating Neighbors
[LOG] Loading pickle file data_63.pickle
[LOG] Processing node features for num 63
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing edge features for num 63
[LOG] Processing cluster features for num 813
[LOG] Processing tetra features for num 63
[LOG] Processing cluster features for num 813
[LOG] Processing adjacency and incidence matrices for num 813
[LOG] Computing n0_to_0 for num 813
[LOG] Processing cluster features for num 63
[LOG] Computing n1_to_1 for num 813
[LOG] Processing cluster features for num 63
[LOG] Processing adjacency and incidence matrices for num 63
[LOG] Computing n0_to_0 for num 63
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n2_to_2 (adjacency) for num 813
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_1 for num 63
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n3_to_3 (adjacency) for num 813
[LOG] Computing n4_to_4 (coadjacency) for num 813
[LOG] Computing n0_to_1 for num 813
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n0_to_2 for num 813
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_2 (adjacency) for num 63
[LOG] GENERATED TETRA
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 5502 Tetrahedra.
    [LOG] Generated 132 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.530303030303031
    [LOG] Max number of nodes per cluster is 45 and the number is 23
[LOG] Computing n3_to_3 (adjacency) for num 63
[LOG] Computing n4_to_4 (coadjacency) for num 63
[LOG] Computing n0_to_1 for num 63
[LOG] Computing n0_to_3 for num 813
[LOG] Computing n0_to_4 for num 813
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_2 for num 813
[LOG] Computing n0_to_2 for num 63
[LOG] Computing n1_to_3 for num 813
[LOG] Computing n1_to_4 for num 813
[LOG] Computing n2_to_3 for num 813
[LOG] Computing n2_to_4 for num 813
[LOG] Computing n3_to_4 for num 813
[LOG] Global feature for num 813
[LOG] Global feature for num 813
[LOG] Saving tensor x_0_813.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] GENERATED TETRA
[LOG] We will select 1262 edges and 5502 tetra
[LOG] Edges from tetra 0 and KDTree 1262 with 0 edges in common.
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2097 Tetrahedra.
    [LOG] Generated 58 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.224137931034484
    [LOG] Max number of nodes per cluster is 145 and the number is 57
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] We will select 404 edges and 2097 tetra
[LOG] Edges from tetra 0 and KDTree 4469 with 0 edges in common.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_3 for num 63
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1057 Tetrahedra.
    [LOG] Generated 27 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.703703703703704
    [LOG] Max number of nodes per cluster is 59 and the number is 3
[LOG] Computing n0_to_3 for num 364
[LOG] Computing n0_to_4 for num 63
[LOG] Computing n0_to_4 for num 364
[LOG] Computing n1_to_2 for num 63
[LOG] We will select 202 edges and 1057 tetra
[LOG] Edges from tetra 0 and KDTree 337 with 0 edges in common.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n1_to_2 for num 364
[LOG] Computing n1_to_3 for num 63
[LOG] Computing n1_to_4 for num 63
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 638 Tetrahedra.
    [LOG] Generated 30 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.4
    [LOG] Max number of nodes per cluster is 49 and the number is 26
[LOG] Computing n2_to_3 for num 63
[LOG] Computing n2_to_4 for num 63
[LOG] Computing n3_to_4 for num 63
[LOG] Global feature for num 63
[LOG] Global feature for num 63
[LOG] Saving tensor x_0_63.pt
[LOG] GENERATED TETRA
[LOG] We will select 315 edges and 638 tetra
[LOG] Edges from tetra 0 and KDTree 1997 with 0 edges in common.
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor x_1_813.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor x_1_63.pt
[LOG] Saving tensor x_2_813.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor x_3_813.pt
[LOG] Saving tensor x_2_63.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor x_3_63.pt
[LOG] Saving tensor x_4_813.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n0_to_0_813.pt
[LOG] Saving tensor x_4_63.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n1_to_1_813.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n0_to_0_63.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n1_to_1_63.pt
[LOG] Saving tensor n2_to_2_813.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n2_to_2_63.pt
[LOG] Process 63: Created combinatorial complex for file data_509.hdf5
[LOG] Process 5: Created combinatorial complex for file data_47.hdf5
[LOG] Computing n1_to_3 for num 364
[LOG] Computing n1_to_4 for num 364
[LOG] Computing n2_to_3 for num 364
[LOG] Process 5: Calculating Neighbors
[LOG] Loading pickle file data_47.pickle
[LOG] Processing node features for num 47
[LOG] Process 63: Calculating Neighbors
[LOG] Loading pickle file data_509.pickle
[LOG] Processing node features for num 509
[LOG] Processing edge features for num 509
[LOG] Processing edge features for num 47
[LOG] Removed 0 subset clusters.
[LOG] Processing tetra features for num 509
[LOG] GENERATED TETRA
[LOG] Processing tetra features for num 47
[LOG] Computing n2_to_4 for num 364
[LOG] Processing cluster features for num 509
[LOG] Processing cluster features for num 47
[LOG] Processing cluster features for num 509
[LOG] Processing cluster features for num 47
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Processing adjacency and incidence matrices for num 509
[LOG] Computing n0_to_0 for num 509
[LOG] Processing adjacency and incidence matrices for num 47
[LOG] Computing n0_to_0 for num 47
[LOG] Saving tensor n3_to_3_813.pt
[LOG] Computing n3_to_4 for num 364
[LOG] Global feature for num 364
[LOG] Global feature for num 364
[LOG] Saving tensor x_0_364.pt
[LOG] Computing n1_to_1 for num 509
[LOG] Computing n1_to_1 for num 47
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_2 (adjacency) for num 509
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n3_to_3_63.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n4_to_4_63.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n4_to_4_813.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor x_1_364.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n0_to_1_63.pt
[LOG] Saving tensor n0_to_1_813.pt
[LOG] Saving tensor x_2_364.pt
[LOG] Saving tensor n0_to_2_63.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n0_to_2_813.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n0_to_3_63.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor x_3_364.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n0_to_3_813.pt
[LOG] Saving tensor n0_to_4_63.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor x_4_364.pt
[LOG] Computing n3_to_3 (adjacency) for num 509
[LOG] Saving tensor n0_to_4_813.pt
[LOG] Saving tensor n1_to_2_63.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n4_to_4 (coadjacency) for num 509
[LOG] Computing n2_to_2 (adjacency) for num 47
[LOG] Saving tensor n0_to_0_364.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n1_to_3_63.pt
[LOG] Saving tensor n1_to_2_813.pt
[LOG] Computing n0_to_1 for num 509
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n1_to_4_63.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n1_to_1_364.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n1_to_3_813.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n2_to_3_63.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n1_to_4_813.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n3_to_3 (adjacency) for num 47
[LOG] Saving tensor n2_to_4_63.pt
[LOG] Computing n0_to_2 for num 509
[LOG] Saving tensor n2_to_3_813.pt
[LOG] Saving tensor n2_to_2_364.pt
[LOG] Saving tensor n3_to_4_63.pt
[LOG] Computing n4_to_4 (coadjacency) for num 47
[LOG] Saving tensor n2_to_4_813.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor global_feature_63.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Process 124: Created combinatorial complex for file data_977.hdf5
[LOG] Process 7: Calculating Cross-Cell-Invariants
[LOG] Computing n0_to_1 for num 47
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n3_to_4_813.pt
[LOG] Saving tensor global_feature_813.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Process 101: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n3_to_3_364.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n4_to_4_364.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n0_to_1_364.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n0_to_2_364.pt
[LOG] Computing n0_to_2 for num 47
[LOG] Computing n0_to_3 for num 509
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Computing n0_to_4 for num 509
[LOG] Saving tensor n0_to_3_364.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] GENERATED TETRA
[LOG] Computing n1_to_2 for num 509
[LOG] Process 124: Calculating Neighbors
[LOG] Loading pickle file data_977.pickle
[LOG] Processing node features for num 977
[LOG] Processing edge features for num 977
[LOG] Processing tetra features for num 977
[LOG] Computing n1_to_3 for num 509
[LOG] Computing n1_to_4 for num 509
[LOG] Computing n2_to_3 for num 509
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_4 for num 509
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_4 for num 509
[LOG] Computing n0_to_3 for num 47
[LOG] Global feature for num 509
[LOG] Global feature for num 509
[LOG] Saving tensor x_0_509.pt
[LOG] Computing n0_to_4 for num 47
[LOG] Saving tensor n0_to_4_364.pt
[LOG] Processing cluster features for num 977
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor x_1_509.pt
[LOG] Saving tensor x_2_509.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n1_to_2_364.pt
[LOG] Saving tensor x_3_509.pt
[LOG] Saving tensor x_4_509.pt
[LOG] Computing n1_to_2 for num 47
[LOG] Saving tensor n0_to_0_509.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n1_to_3_364.pt
[LOG] Saving tensor n1_to_1_509.pt
[LOG] Saving tensor n1_to_4_364.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n2_to_2_509.pt
[LOG] Saving tensor n2_to_3_364.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Processing cluster features for num 977
[LOG] Saving tensor n2_to_4_364.pt
[LOG] Saving tensor n3_to_3_509.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n4_to_4_509.pt
[LOG] Saving tensor n3_to_4_364.pt
[LOG] Saving tensor n0_to_1_509.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor global_feature_364.pt
[LOG] Saving tensor n0_to_2_509.pt
[LOG] Process 45: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n0_to_3_509.pt
[LOG] Saving tensor n0_to_4_509.pt
[LOG] Saving tensor n1_to_2_509.pt
[LOG] Saving tensor n1_to_3_509.pt
[LOG] Processing adjacency and incidence matrices for num 977
[LOG] Computing n0_to_0 for num 977
[LOG] Saving tensor n1_to_4_509.pt
[LOG] Saving tensor n2_to_3_509.pt
[LOG] Saving tensor n2_to_4_509.pt
[LOG] Computing n1_to_3 for num 47
[LOG] Computing n1_to_4 for num 47
[LOG] Saving tensor n3_to_4_509.pt
[LOG] Computing n2_to_3 for num 47
[LOG] Saving tensor global_feature_509.pt
[LOG] Process 63: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n2_to_4 for num 47
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_4 for num 47
[LOG] Global feature for num 47
[LOG] Calculating for cell ranks 3 and 3
[LOG] Global feature for num 47
[LOG] Saving tensor x_0_47.pt
[LOG] Saving tensor x_1_47.pt
[LOG] Saving tensor x_2_47.pt
[LOG] Saving tensor x_3_47.pt
[LOG] Saving tensor x_4_47.pt
[LOG] Saving tensor n0_to_0_47.pt
[LOG] Saving tensor n1_to_1_47.pt
[LOG] Saving tensor n2_to_2_47.pt
[LOG] Saving tensor n3_to_3_47.pt
[LOG] Saving tensor n4_to_4_47.pt
[LOG] Saving tensor n0_to_1_47.pt
[LOG] Saving tensor n0_to_2_47.pt
[LOG] Saving tensor n0_to_3_47.pt
[LOG] Saving tensor n0_to_4_47.pt
[LOG] Saving tensor n1_to_2_47.pt
[LOG] Saving tensor n1_to_3_47.pt
[LOG] Saving tensor n1_to_4_47.pt
[LOG] Saving tensor n2_to_3_47.pt
[LOG] Saving tensor n2_to_4_47.pt
[LOG] Saving tensor n3_to_4_47.pt
[LOG] Saving tensor global_feature_47.pt
[LOG] Process 5: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 864 Tetrahedra.
    [LOG] Generated 9 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 41.333333333333336
    [LOG] Max number of nodes per cluster is 226 and the number is 7
[LOG] Computing n1_to_1 for num 977
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] We will select 214 edges and 864 tetra
[LOG] Edges from tetra 0 and KDTree 3007 with 0 edges in common.
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 1834 Tetrahedra.
    [LOG] Generated 54 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.148148148148149
    [LOG] Max number of nodes per cluster is 34 and the number is 14
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] We will select 139 edges and 1834 tetra
[LOG] Edges from tetra 0 and KDTree 1731 with 0 edges in common.
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 977
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 29: Created combinatorial complex for file data_238.hdf5
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 29: Calculating Neighbors
[LOG] Loading pickle file data_238.pickle
[LOG] Processing node features for num 238
[LOG] Processing edge features for num 238
[LOG] Processing tetra features for num 238
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing cluster features for num 238
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 238
[LOG] Computing n3_to_3 (adjacency) for num 977
[LOG] Computing n4_to_4 (coadjacency) for num 977
[LOG] Processing adjacency and incidence matrices for num 238
[LOG] Computing n0_to_1 for num 977
[LOG] Computing n0_to_0 for num 238
[LOG] Computing n1_to_1 for num 238
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_2 (adjacency) for num 238
[LOG] Computing n0_to_2 for num 977
[LOG] Computing n3_to_3 (adjacency) for num 238
[LOG] Computing n4_to_4 (coadjacency) for num 238
[LOG] Computing n0_to_1 for num 238
[LOG] Computing n0_to_2 for num 238
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 2 subset clusters.
[LOG] Computing n0_to_3 for num 238
[LOG] Computing n0_to_4 for num 238
[LOG] Computing n1_to_2 for num 238
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 1193 Tetrahedra.
    [LOG] Generated 28 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.535714285714285
    [LOG] Max number of nodes per cluster is 79 and the number is 27
[LOG] Computing n1_to_3 for num 238
[LOG] Computing n1_to_4 for num 238
[LOG] Computing n2_to_3 for num 238
[LOG] Computing n2_to_4 for num 238
[LOG] Computing n3_to_4 for num 238
[LOG] Global feature for num 238
[LOG] Global feature for num 238
[LOG] Saving tensor x_0_238.pt
[LOG] Saving tensor x_1_238.pt
[LOG] Saving tensor x_2_238.pt
[LOG] Saving tensor x_3_238.pt
[LOG] Saving tensor x_4_238.pt
[LOG] Saving tensor n0_to_0_238.pt
[LOG] Saving tensor n1_to_1_238.pt
[LOG] We will select 178 edges and 1193 tetra
[LOG] Edges from tetra 0 and KDTree 3822 with 0 edges in common.
[LOG] Saving tensor n2_to_2_238.pt
[LOG] Process 114: Created combinatorial complex for file data_906.hdf5
[LOG] Saving tensor n3_to_3_238.pt
[LOG] Saving tensor n4_to_4_238.pt
[LOG] Saving tensor n0_to_1_238.pt
[LOG] Saving tensor n0_to_2_238.pt
[LOG] Saving tensor n0_to_3_238.pt
[LOG] Saving tensor n0_to_4_238.pt
[LOG] Saving tensor n1_to_2_238.pt
[LOG] Saving tensor n1_to_3_238.pt
[LOG] Saving tensor n1_to_4_238.pt
[LOG] Saving tensor n2_to_3_238.pt
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 1 and 2

    [LOG] We Currently have 1082 Tetrahedra.
    [LOG] Generated 33 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.909090909090908
    [LOG] Max number of nodes per cluster is 25 and the number is 12
[LOG] Saving tensor n2_to_4_238.pt
[LOG] Saving tensor n3_to_4_238.pt
[LOG] Saving tensor global_feature_238.pt
[LOG] Process 29: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] We will select 332 edges and 1082 tetra
[LOG] Edges from tetra 0 and KDTree 332 with 0 edges in common.
[LOG] Process 114: Calculating Neighbors
[LOG] Loading pickle file data_906.pickle
[LOG] Processing node features for num 906
[LOG] Processing edge features for num 906
[LOG] Processing tetra features for num 906
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing cluster features for num 906
[LOG] Processing cluster features for num 906
[LOG] Processing adjacency and incidence matrices for num 906
[LOG] Computing n0_to_0 for num 906
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_1 for num 906
[LOG] Removed 0 subset clusters.
[LOG] Computing n2_to_2 (adjacency) for num 906
[LOG] Process 47: Created combinatorial complex for file data_383.hdf5
[LOG] Computing n3_to_3 (adjacency) for num 906
[LOG] Computing n4_to_4 (coadjacency) for num 906
[LOG] Computing n0_to_1 for num 906
[LOG] Process 47: Calculating Neighbors
[LOG] Loading pickle file data_383.pickle
[LOG] Processing node features for num 383
[LOG] Processing edge features for num 383
[LOG] Process 84: Created combinatorial complex for file data_673.hdf5
[LOG] Computing n0_to_2 for num 906
[LOG] Processing tetra features for num 383
[LOG] Computing n0_to_3 for num 977
[LOG] Processing cluster features for num 383
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_4 for num 977
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing cluster features for num 383
[LOG] Processing adjacency and incidence matrices for num 383
[LOG] Computing n0_to_0 for num 383
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_2 for num 977
[LOG] Computing n1_to_1 for num 383
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_2 (adjacency) for num 383
[LOG] Process 93: Created combinatorial complex for file data_747.hdf5
[LOG] Computing n0_to_3 for num 906
[LOG] Computing n0_to_4 for num 906
[LOG] Computing n3_to_3 (adjacency) for num 383
[LOG] Computing n4_to_4 (coadjacency) for num 383
[LOG] Computing n0_to_1 for num 383
[LOG] Computing n1_to_2 for num 906
[LOG] Computing n0_to_2 for num 383
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_3 for num 906
[LOG] Computing n1_to_4 for num 906
[LOG] Computing n1_to_3 for num 977
[LOG] Computing n2_to_3 for num 906
[LOG] Computing n1_to_4 for num 977
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_3 for num 977
[LOG] Computing n2_to_4 for num 906
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1909 Tetrahedra.
    [LOG] Generated 40 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 19.725
    [LOG] Max number of nodes per cluster is 169 and the number is 38
[LOG] Process 84: Calculating Neighbors
[LOG] Loading pickle file data_673.pickle
[LOG] Processing node features for num 673
[LOG] Computing n2_to_4 for num 977
[LOG] Computing n3_to_4 for num 906
[LOG] Processing edge features for num 673
[LOG] Global feature for num 906
[LOG] Global feature for num 906
[LOG] Saving tensor x_0_906.pt
[LOG] Saving tensor x_1_906.pt
[LOG] Saving tensor x_2_906.pt
[LOG] Saving tensor x_3_906.pt
[LOG] Saving tensor x_4_906.pt
[LOG] Saving tensor n0_to_0_906.pt
[LOG] Saving tensor n1_to_1_906.pt
[LOG] Saving tensor n2_to_2_906.pt
[LOG] Computing n3_to_4 for num 977
[LOG] Saving tensor n3_to_3_906.pt
[LOG] Global feature for num 977
[LOG] Global feature for num 977
[LOG] Saving tensor x_0_977.pt
[LOG] Saving tensor n4_to_4_906.pt
[LOG] Saving tensor x_1_977.pt
[LOG] Saving tensor x_2_977.pt
[LOG] Saving tensor n0_to_1_906.pt
[LOG] Saving tensor x_3_977.pt
[LOG] Saving tensor n0_to_2_906.pt
[LOG] Saving tensor x_4_977.pt
[LOG] Saving tensor n0_to_3_906.pt
[LOG] Saving tensor n0_to_0_977.pt
[LOG] Saving tensor n0_to_4_906.pt
[LOG] Saving tensor n1_to_1_977.pt
[LOG] Saving tensor n1_to_2_906.pt
[LOG] Saving tensor n2_to_2_977.pt
[LOG] Saving tensor n1_to_3_906.pt
[LOG] Saving tensor n1_to_4_906.pt
[LOG] Processing tetra features for num 673
[LOG] Saving tensor n2_to_3_906.pt
[LOG] Saving tensor n2_to_4_906.pt
[LOG] Saving tensor n3_to_4_906.pt
[LOG] We will select 740 edges and 1909 tetra
[LOG] Edges from tetra 0 and KDTree 8997 with 0 edges in common.
[LOG] Saving tensor global_feature_906.pt
[LOG] Process 114: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 383
[LOG] Computing n0_to_4 for num 383
[LOG] Saving tensor n3_to_3_977.pt
[LOG] Computing n1_to_2 for num 383
[LOG] Saving tensor n4_to_4_977.pt
[LOG] Saving tensor n0_to_1_977.pt
[LOG] Saving tensor n0_to_2_977.pt
[LOG] Saving tensor n0_to_3_977.pt
[LOG] Saving tensor n0_to_4_977.pt
[LOG] Saving tensor n1_to_2_977.pt
[LOG] Saving tensor n1_to_3_977.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n1_to_4_977.pt
[LOG] Saving tensor n2_to_3_977.pt
[LOG] Saving tensor n2_to_4_977.pt
[LOG] Saving tensor n3_to_4_977.pt
[LOG] Saving tensor global_feature_977.pt
[LOG] Computing n1_to_3 for num 383
[LOG] Process 124: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_4 for num 383
[LOG] Computing n2_to_3 for num 383
[LOG] Computing n2_to_4 for num 383
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 673
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n3_to_4 for num 383
[LOG] Global feature for num 383
[LOG] Global feature for num 383
[LOG] Saving tensor x_0_383.pt
[LOG] Saving tensor x_1_383.pt
[LOG] Saving tensor x_2_383.pt
[LOG] Saving tensor x_3_383.pt
[LOG] Saving tensor x_4_383.pt
[LOG] Saving tensor n0_to_0_383.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n1_to_1_383.pt
[LOG] Saving tensor n2_to_2_383.pt
[LOG] Saving tensor n3_to_3_383.pt
[LOG] Saving tensor n4_to_4_383.pt
[LOG] Saving tensor n0_to_1_383.pt
[LOG] Saving tensor n0_to_2_383.pt
[LOG] Processing cluster features for num 673
[LOG] Saving tensor n0_to_3_383.pt
[LOG] Saving tensor n0_to_4_383.pt
[LOG] Saving tensor n1_to_2_383.pt
[LOG] Saving tensor n1_to_3_383.pt
[LOG] Saving tensor n1_to_4_383.pt
[LOG] Saving tensor n2_to_3_383.pt
[LOG] Saving tensor n2_to_4_383.pt
[LOG] Saving tensor n3_to_4_383.pt
[LOG] Saving tensor global_feature_383.pt
[LOG] Process 47: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing adjacency and incidence matrices for num 673
[LOG] Computing n0_to_0 for num 673
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 93: Calculating Neighbors
[LOG] Loading pickle file data_747.pickle
[LOG] Processing node features for num 747
[LOG] Processing edge features for num 747
[LOG] Processing tetra features for num 747
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing cluster features for num 747
[LOG] Processing cluster features for num 747
[LOG] Processing adjacency and incidence matrices for num 747
[LOG] Computing n0_to_0 for num 747
[LOG] GENERATED TETRA
[LOG] Computing n1_to_1 for num 747
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_2 (adjacency) for num 747
[LOG] Computing n1_to_1 for num 673
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1401 Tetrahedra.
    [LOG] Generated 40 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.725
    [LOG] Max number of nodes per cluster is 35 and the number is 13
[LOG] We will select 352 edges and 1401 tetra
[LOG] Edges from tetra 0 and KDTree 352 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.
[LOG] Process 74: Created combinatorial complex for file data_596.hdf5
[LOG] Process 74: Calculating Neighbors
[LOG] Loading pickle file data_596.pickle
[LOG] Processing node features for num 596
[LOG] Processing edge features for num 596
[LOG] Processing tetra features for num 596
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_3 (adjacency) for num 747
[LOG] Computing n4_to_4 (coadjacency) for num 747
[LOG] Computing n0_to_1 for num 747
[LOG] Computing n0_to_2 for num 747
[LOG] Computing n0_to_3 for num 747
[LOG] Computing n0_to_4 for num 747
[LOG] Computing n1_to_2 for num 747
[LOG] Computing n1_to_3 for num 747
[LOG] Computing n1_to_4 for num 747
[LOG] Computing n2_to_3 for num 747
[LOG] Computing n2_to_4 for num 747
[LOG] Computing n3_to_4 for num 747
[LOG] Global feature for num 747
[LOG] Global feature for num 747
[LOG] Saving tensor x_0_747.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing cluster features for num 596
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Processing cluster features for num 596
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 26: Created combinatorial complex for file data_213.hdf5
[LOG] Processing adjacency and incidence matrices for num 596
[LOG] Computing n0_to_0 for num 596
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor x_1_747.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor x_2_747.pt
[LOG] Saving tensor x_3_747.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor x_4_747.pt
[LOG] Saving tensor n0_to_0_747.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n1_to_1_747.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n2_to_2_747.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n3_to_3_747.pt
[LOG] Saving tensor n4_to_4_747.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n0_to_1_747.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n0_to_2_747.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n0_to_3_747.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n0_to_4_747.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2111 Tetrahedra.
    [LOG] Generated 54 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.981481481481481
    [LOG] Max number of nodes per cluster is 46 and the number is 48
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n1_to_2_747.pt
[LOG] Process 26: Calculating Neighbors
[LOG] Loading pickle file data_213.pickle
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n1_to_3_747.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing node features for num 213
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n1_to_4_747.pt
[LOG] Processing edge features for num 213
[LOG] Processing tetra features for num 213
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing cluster features for num 213
[LOG] We will select 227 edges and 2111 tetra
[LOG] Edges from tetra 0 and KDTree 838 with 0 edges in common.
[LOG] Processing cluster features for num 213
[LOG] Processing adjacency and incidence matrices for num 213
[LOG] Computing n0_to_0 for num 213
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n2_to_3_747.pt
[LOG] Saving tensor n2_to_4_747.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n3_to_4_747.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor global_feature_747.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Process 93: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n1_to_1 for num 213
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n1_to_1 for num 596
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_2 (adjacency) for num 213
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_3 (adjacency) for num 213
[LOG] Computing n4_to_4 (coadjacency) for num 213
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n0_to_1 for num 213
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n0_to_2 for num 213
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_2 (adjacency) for num 596
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n0_to_3 for num 213
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_4 for num 213
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n1_to_2 for num 213
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 673
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n3_to_3 (adjacency) for num 596
[LOG] Computing n4_to_4 (coadjacency) for num 596
[LOG] Computing n0_to_1 for num 596
[LOG] Computing n1_to_3 for num 213
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_4 for num 213
[LOG] Computing n2_to_3 for num 213
[LOG] Computing n2_to_4 for num 213
[LOG] Computing n3_to_4 for num 213
[LOG] Global feature for num 213
[LOG] Global feature for num 213
[LOG] Saving tensor x_0_213.pt
[LOG] Saving tensor x_1_213.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor x_2_213.pt
[LOG] Saving tensor x_3_213.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 58: Created combinatorial complex for file data_470.hdf5
[LOG] Saving tensor x_4_213.pt
[LOG] Saving tensor n0_to_0_213.pt
[LOG] Saving tensor n1_to_1_213.pt
[LOG] Computing n0_to_2 for num 596
[LOG] Process 58: Calculating Neighbors
[LOG] Loading pickle file data_470.pickle
[LOG] Processing node features for num 470
[LOG] Processing edge features for num 470
[LOG] Saving tensor n2_to_2_213.pt
[LOG] Saving tensor n3_to_3_213.pt
[LOG] Saving tensor n4_to_4_213.pt
[LOG] Processing tetra features for num 470
[LOG] Saving tensor n0_to_1_213.pt
[LOG] Saving tensor n0_to_2_213.pt
[LOG] Saving tensor n0_to_3_213.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n0_to_4_213.pt
[LOG] Saving tensor n1_to_2_213.pt
[LOG] Saving tensor n1_to_3_213.pt
[LOG] Saving tensor n1_to_4_213.pt
[LOG] Saving tensor n2_to_3_213.pt
[LOG] Saving tensor n2_to_4_213.pt
[LOG] Saving tensor n3_to_4_213.pt
[LOG] Processing cluster features for num 470
[LOG] Saving tensor global_feature_213.pt
[LOG] Process 26: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing cluster features for num 470
[LOG] Processing adjacency and incidence matrices for num 470
[LOG] Computing n0_to_0 for num 470
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_1 for num 470
[LOG] Computing n2_to_2 (adjacency) for num 470
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_3 (adjacency) for num 470
[LOG] Computing n4_to_4 (coadjacency) for num 470
[LOG] Computing n0_to_1 for num 470
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_2 for num 470
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n0_to_3 for num 596
[LOG] Computing n0_to_3 for num 470
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_4 for num 470
[LOG] Computing n0_to_4 for num 596
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n1_to_2 for num 470
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_2 for num 596
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_3 for num 470
[LOG] Computing n1_to_4 for num 470
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n2_to_3 for num 470
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n2_to_4 for num 470
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_4 for num 470
[LOG] Global feature for num 470
[LOG] Global feature for num 470
[LOG] Saving tensor x_0_470.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor x_1_470.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor x_2_470.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_3 for num 596
[LOG] Computing n1_to_4 for num 596
[LOG] Computing n2_to_3 for num 596
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor x_3_470.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor x_4_470.pt
[LOG] Saving tensor n0_to_0_470.pt
[LOG] Computing n2_to_4 for num 596
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n1_to_1_470.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n2_to_2_470.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n3_to_4 for num 596
[LOG] Global feature for num 596
[LOG] Global feature for num 596
[LOG] Saving tensor x_0_596.pt
[LOG] Computing n3_to_3 (adjacency) for num 673
[LOG] Computing n4_to_4 (coadjacency) for num 673
[LOG] Computing n0_to_1 for num 673
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n3_to_3_470.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] GENERATED TETRA
[LOG] Saving tensor x_1_596.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n4_to_4_470.pt
[LOG] Saving tensor x_2_596.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor x_3_596.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n0_to_1_470.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor x_4_596.pt
[LOG] Saving tensor n0_to_2_470.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n0_to_0_596.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n1_to_1_596.pt
[LOG] Saving tensor n0_to_3_470.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n0_to_4_470.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n2_to_2_596.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n1_to_2_470.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n1_to_3_470.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n1_to_4_470.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n2_to_3_470.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n2_to_4_470.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n3_to_4_470.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor global_feature_470.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Process 58: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n3_to_3_596.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n0_to_2 for num 673
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n4_to_4_596.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n0_to_1_596.pt
[LOG] Saving tensor n0_to_2_596.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n0_to_3_596.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n0_to_4_596.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n1_to_2_596.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n1_to_3_596.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n1_to_4_596.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n2_to_3_596.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n2_to_4_596.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n3_to_4_596.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor global_feature_596.pt
[LOG] Process 74: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1353 Tetrahedra.
    [LOG] Generated 34 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.38235294117647
    [LOG] Max number of nodes per cluster is 64 and the number is 9
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] We will select 201 edges and 1353 tetra
[LOG] Edges from tetra 0 and KDTree 376 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Process 10: Created combinatorial complex for file data_86.hdf5
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 10: Calculating Neighbors
[LOG] Loading pickle file data_86.pickle
[LOG] Processing node features for num 86
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Processing edge features for num 86
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing tetra features for num 86
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Processing cluster features for num 86
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Processing cluster features for num 86
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 86
[LOG] Computing n0_to_0 for num 86
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_1 for num 86
[LOG] Computing n2_to_2 (adjacency) for num 86
[LOG] Computing n3_to_3 (adjacency) for num 86
[LOG] Computing n4_to_4 (coadjacency) for num 86
[LOG] Computing n0_to_1 for num 86
[LOG] Computing n0_to_2 for num 86
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_3 for num 86
[LOG] Computing n0_to_3 for num 673
[LOG] Computing n0_to_4 for num 86
[LOG] Computing n1_to_2 for num 86
[LOG] Computing n0_to_4 for num 673
[LOG] Computing n1_to_3 for num 86
[LOG] Computing n1_to_4 for num 86
[LOG] Computing n2_to_3 for num 86
[LOG] Computing n1_to_2 for num 673
[LOG] Computing n2_to_4 for num 86
[LOG] Computing n3_to_4 for num 86
[LOG] Calculating for cell ranks 3 and 3
[LOG] Global feature for num 86
[LOG] Global feature for num 86
[LOG] Saving tensor x_0_86.pt
[LOG] Saving tensor x_1_86.pt
[LOG] Saving tensor x_2_86.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor x_3_86.pt
[LOG] Saving tensor x_4_86.pt
[LOG] Saving tensor n0_to_0_86.pt
[LOG] Saving tensor n1_to_1_86.pt
[LOG] Saving tensor n2_to_2_86.pt
[LOG] Saving tensor n3_to_3_86.pt
[LOG] Saving tensor n4_to_4_86.pt
[LOG] Saving tensor n0_to_1_86.pt
[LOG] Saving tensor n0_to_2_86.pt
[LOG] Saving tensor n0_to_3_86.pt
[LOG] Saving tensor n0_to_4_86.pt
[LOG] Saving tensor n1_to_2_86.pt
[LOG] Saving tensor n1_to_3_86.pt
[LOG] Saving tensor n1_to_4_86.pt
[LOG] Saving tensor n2_to_3_86.pt
[LOG] Saving tensor n2_to_4_86.pt
[LOG] Saving tensor n3_to_4_86.pt
[LOG] Saving tensor global_feature_86.pt
[LOG] Process 10: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1861 Tetrahedra.
    [LOG] Generated 50 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.78
    [LOG] Max number of nodes per cluster is 36 and the number is 41
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] We will select 214 edges and 1861 tetra
[LOG] Edges from tetra 0 and KDTree 214 with 0 edges in common.
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_3 for num 673
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_4 for num 673
[LOG] Process 65: Created combinatorial complex for file data_526.hdf5
[LOG] Computing n2_to_3 for num 673
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 65: Calculating Neighbors
[LOG] Loading pickle file data_526.pickle
[LOG] Processing node features for num 526
[LOG] Processing edge features for num 526
[LOG] Processing tetra features for num 526
[LOG] Processing cluster features for num 526
[LOG] Processing cluster features for num 526
[LOG] GENERATED TETRA
[LOG] Computing n2_to_4 for num 673
[LOG] Processing adjacency and incidence matrices for num 526
[LOG] Computing n0_to_0 for num 526
[LOG] Computing n1_to_1 for num 526
[LOG] Computing n2_to_2 (adjacency) for num 526
[LOG] GENERATED TETRA
[LOG] Computing n3_to_4 for num 673
[LOG] Global feature for num 673
[LOG] Global feature for num 673
[LOG] Saving tensor x_0_673.pt
[LOG] Saving tensor x_1_673.pt
[LOG] Saving tensor x_2_673.pt
[LOG] Saving tensor x_3_673.pt
[LOG] Saving tensor x_4_673.pt
[LOG] Saving tensor n0_to_0_673.pt
[LOG] Saving tensor n1_to_1_673.pt
[LOG] Saving tensor n2_to_2_673.pt
[LOG] Saving tensor n3_to_3_673.pt
[LOG] Saving tensor n4_to_4_673.pt
[LOG] Saving tensor n0_to_1_673.pt
[LOG] Saving tensor n0_to_2_673.pt
[LOG] Saving tensor n0_to_3_673.pt
[LOG] Saving tensor n0_to_4_673.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n1_to_2_673.pt
[LOG] Saving tensor n1_to_3_673.pt
[LOG] Saving tensor n1_to_4_673.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n2_to_3_673.pt
[LOG] Saving tensor n2_to_4_673.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_3 (adjacency) for num 526
[LOG] Computing n4_to_4 (coadjacency) for num 526
[LOG] Computing n0_to_1 for num 526
[LOG] Computing n0_to_2 for num 526
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n3_to_4_673.pt
[LOG] Saving tensor global_feature_673.pt
[LOG] Process 84: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_3 for num 526
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_4 for num 526
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_2 for num 526
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_3 for num 526
[LOG] Computing n1_to_4 for num 526
[LOG] Computing n2_to_3 for num 526
[LOG] Computing n2_to_4 for num 526
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n3_to_4 for num 526
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Global feature for num 526
[LOG] Global feature for num 526
[LOG] Saving tensor x_0_526.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor x_1_526.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor x_2_526.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor x_3_526.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor x_4_526.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n0_to_0_526.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n1_to_1_526.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n2_to_2_526.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n3_to_3_526.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n4_to_4_526.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n0_to_1_526.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n0_to_2_526.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n0_to_3_526.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n0_to_4_526.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n1_to_2_526.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n1_to_3_526.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n1_to_4_526.pt
[LOG] Saving tensor n2_to_3_526.pt
[LOG] Saving tensor n2_to_4_526.pt
[LOG] Saving tensor n3_to_4_526.pt
[LOG] Saving tensor global_feature_526.pt
[LOG] Process 65: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2540 Tetrahedra.
    [LOG] Generated 77 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.883116883116884
    [LOG] Max number of nodes per cluster is 47 and the number is 54
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] We will select 571 edges and 2540 tetra
[LOG] Edges from tetra 0 and KDTree 2083 with 0 edges in common.
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1702 Tetrahedra.
    [LOG] Generated 48 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.979166666666666
    [LOG] Max number of nodes per cluster is 46 and the number is 33
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] We will select 425 edges and 1702 tetra
[LOG] Edges from tetra 0 and KDTree 2675 with 0 edges in common.
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 88: Created combinatorial complex for file data_707.hdf5
[LOG] Process 15: Created combinatorial complex for file data_127.hdf5
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Process 15: Calculating Neighbors
[LOG] Loading pickle file data_127.pickle
[LOG] Processing node features for num 127
[LOG] Processing edge features for num 127
[LOG] Processing tetra features for num 127
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Process 88: Calculating Neighbors
[LOG] Loading pickle file data_707.pickle
[LOG] Processing node features for num 707
[LOG] Processing edge features for num 707
[LOG] Processing cluster features for num 127
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Processing cluster features for num 127
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Processing tetra features for num 707
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Processing adjacency and incidence matrices for num 127
[LOG] Computing n0_to_0 for num 127
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2174 Tetrahedra.
    [LOG] Generated 52 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.096153846153847
    [LOG] Max number of nodes per cluster is 75 and the number is 50
[LOG] Processing cluster features for num 707
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_1 for num 127
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Processing cluster features for num 707
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 707
[LOG] Computing n0_to_0 for num 707
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] We will select 413 edges and 2174 tetra
[LOG] Edges from tetra 0 and KDTree 1242 with 0 edges in common.
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n2_to_2 (adjacency) for num 127
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n1_to_1 for num 707
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 127
[LOG] Computing n4_to_4 (coadjacency) for num 127
[LOG] Computing n0_to_1 for num 127
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_2 for num 127
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1627 Tetrahedra.
    [LOG] Generated 42 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.30952380952381
    [LOG] Max number of nodes per cluster is 79 and the number is 40
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] We will select 144 edges and 1627 tetra
[LOG] Edges from tetra 0 and KDTree 2170 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_2 (adjacency) for num 707
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n0_to_3 for num 127
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_4 for num 127
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n1_to_2 for num 127
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 43: Created combinatorial complex for file data_348.hdf5
[LOG] Computing n1_to_3 for num 127
[LOG] Computing n1_to_4 for num 127
[LOG] Removed 2 subset clusters.
[LOG] Computing n2_to_3 for num 127
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_4 for num 127
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n3_to_4 for num 127
[LOG] Global feature for num 127
[LOG] Global feature for num 127
[LOG] Saving tensor x_0_127.pt
[LOG] Saving tensor x_1_127.pt
[LOG] Saving tensor x_2_127.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor x_3_127.pt
[LOG] Saving tensor x_4_127.pt
[LOG] Computing n3_to_3 (adjacency) for num 707
[LOG] Saving tensor n0_to_0_127.pt
[LOG] Saving tensor n1_to_1_127.pt
[LOG] Computing n4_to_4 (coadjacency) for num 707
[LOG] Saving tensor n2_to_2_127.pt
[LOG] Computing n0_to_1 for num 707
[LOG] Saving tensor n3_to_3_127.pt
[LOG] Saving tensor n4_to_4_127.pt
[LOG] Saving tensor n0_to_1_127.pt
[LOG] Saving tensor n0_to_2_127.pt
[LOG] Saving tensor n0_to_3_127.pt
[LOG] Saving tensor n0_to_4_127.pt
[LOG] Saving tensor n1_to_2_127.pt
[LOG] Saving tensor n1_to_3_127.pt
[LOG] Saving tensor n1_to_4_127.pt
[LOG] Saving tensor n2_to_3_127.pt
[LOG] Saving tensor n2_to_4_127.pt
[LOG] Saving tensor n3_to_4_127.pt
[LOG] Saving tensor global_feature_127.pt
[LOG] Process 15: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 43: Calculating Neighbors
[LOG] Loading pickle file data_348.pickle
[LOG] Processing node features for num 348
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 13: Created combinatorial complex for file data_110.hdf5
[LOG] Processing edge features for num 348
[LOG] Processing tetra features for num 348
[LOG] GENERATED TETRA
[LOG] Processing cluster features for num 348
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_2 for num 707
[LOG] Process 13: Calculating Neighbors
[LOG] Loading pickle file data_110.pickle
[LOG] Processing node features for num 110
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing cluster features for num 348
[LOG] Processing edge features for num 110
[LOG] Processing tetra features for num 110
[LOG] Processing adjacency and incidence matrices for num 348
[LOG] Computing n0_to_0 for num 348
[LOG] Processing cluster features for num 110
[LOG] Processing cluster features for num 110
[LOG] Processing adjacency and incidence matrices for num 110
[LOG] Computing n0_to_0 for num 110
[LOG] Computing n1_to_1 for num 348
[LOG] Computing n1_to_1 for num 110
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n2_to_2 (adjacency) for num 110
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_2 (adjacency) for num 348
[LOG] Computing n3_to_3 (adjacency) for num 110
[LOG] Computing n4_to_4 (coadjacency) for num 110
[LOG] Computing n0_to_1 for num 110
[LOG] Computing n0_to_2 for num 110
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 348
[LOG] Computing n4_to_4 (coadjacency) for num 348
[LOG] Computing n0_to_1 for num 348
[LOG] Computing n0_to_3 for num 110
[LOG] Computing n0_to_4 for num 110
[LOG] GENERATED TETRA
[LOG] Computing n1_to_2 for num 110
[LOG] Computing n0_to_2 for num 348
[LOG] Computing n1_to_3 for num 110
[LOG] Computing n1_to_4 for num 110
[LOG] Computing n2_to_3 for num 110
[LOG] Computing n2_to_4 for num 110
[LOG] GENERATED TETRA
[LOG] Computing n3_to_4 for num 110
[LOG] Global feature for num 110
[LOG] Global feature for num 110
[LOG] Saving tensor x_0_110.pt
[LOG] Saving tensor x_1_110.pt
[LOG] Saving tensor x_2_110.pt
[LOG] Saving tensor x_3_110.pt
[LOG] Saving tensor x_4_110.pt
[LOG] Saving tensor n0_to_0_110.pt
[LOG] Saving tensor n1_to_1_110.pt
[LOG] Saving tensor n2_to_2_110.pt
[LOG] Computing n0_to_3 for num 707
[LOG] Saving tensor n3_to_3_110.pt
[LOG] Saving tensor n4_to_4_110.pt
[LOG] Saving tensor n0_to_1_110.pt
[LOG] Saving tensor n0_to_2_110.pt
[LOG] Saving tensor n0_to_3_110.pt
[LOG] Saving tensor n0_to_4_110.pt
[LOG] Saving tensor n1_to_2_110.pt
[LOG] Saving tensor n1_to_3_110.pt
[LOG] Computing n0_to_4 for num 707
[LOG] Saving tensor n1_to_4_110.pt
[LOG] Saving tensor n2_to_3_110.pt
[LOG] Saving tensor n2_to_4_110.pt
[LOG] Saving tensor n3_to_4_110.pt
[LOG] Saving tensor global_feature_110.pt
[LOG] Process 13: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_2 for num 707
[LOG] Calculating for cell ranks 0 and 2
[LOG] GENERATED TETRA
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1234 Tetrahedra.
    [LOG] Generated 38 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.131578947368421
    [LOG] Max number of nodes per cluster is 28 and the number is 3
[LOG] We will select 86 edges and 1234 tetra
[LOG] Edges from tetra 0 and KDTree 165 with 0 edges in common.
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 963 Tetrahedra.
    [LOG] Generated 35 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.62857142857143
    [LOG] Max number of nodes per cluster is 55 and the number is 19
[LOG] Calculating for cell ranks 2 and 4
[LOG] We will select 151 edges and 963 tetra
[LOG] Edges from tetra 0 and KDTree 3797 with 0 edges in common.
[LOG] Computing n0_to_3 for num 348
[LOG] Computing n0_to_4 for num 348
[LOG] Computing n1_to_2 for num 348
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_3 for num 707
[LOG] Computing n1_to_4 for num 707
[LOG] Removed 0 subset clusters.
[LOG] Computing n2_to_3 for num 707
[LOG] Computing n2_to_4 for num 707
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 982 Tetrahedra.
    [LOG] Generated 42 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.642857142857142
    [LOG] Max number of nodes per cluster is 86 and the number is 26
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 21: Created combinatorial complex for file data_175.hdf5
[LOG] Computing n3_to_4 for num 707
[LOG] Global feature for num 707
[LOG] Global feature for num 707
[LOG] Saving tensor x_0_707.pt
[LOG] Saving tensor x_1_707.pt
[LOG] Saving tensor x_2_707.pt
[LOG] Saving tensor x_3_707.pt
[LOG] Saving tensor x_4_707.pt
[LOG] Saving tensor n0_to_0_707.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n1_to_1_707.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor n2_to_2_707.pt
[LOG] Saving tensor n3_to_3_707.pt
[LOG] Saving tensor n4_to_4_707.pt
[LOG] Saving tensor n0_to_1_707.pt
[LOG] We will select 119 edges and 982 tetra
[LOG] Edges from tetra 0 and KDTree 4004 with 0 edges in common.
[LOG] Saving tensor n0_to_2_707.pt
[LOG] Saving tensor n0_to_3_707.pt
[LOG] Saving tensor n0_to_4_707.pt
[LOG] Saving tensor n1_to_2_707.pt
[LOG] Saving tensor n1_to_3_707.pt
[LOG] Saving tensor n1_to_4_707.pt
[LOG] Saving tensor n2_to_3_707.pt
[LOG] Process 21: Calculating Neighbors
[LOG] Loading pickle file data_175.pickle
[LOG] Processing node features for num 175
[LOG] Saving tensor n2_to_4_707.pt
[LOG] Computing n1_to_3 for num 348
[LOG] Saving tensor n3_to_4_707.pt
[LOG] Saving tensor global_feature_707.pt
[LOG] Process 88: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_4 for num 348
[LOG] Processing edge features for num 175
[LOG] Computing n2_to_3 for num 348
[LOG] Processing tetra features for num 175
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_4 for num 348
[LOG] Processing cluster features for num 175
[LOG] Processing cluster features for num 175
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing adjacency and incidence matrices for num 175
[LOG] Computing n0_to_0 for num 175
[LOG] Computing n3_to_4 for num 348
[LOG] Global feature for num 348
[LOG] Global feature for num 348
[LOG] Saving tensor x_0_348.pt
[LOG] Saving tensor x_1_348.pt
[LOG] Saving tensor x_2_348.pt
[LOG] Process 91: Created combinatorial complex for file data_734.hdf5
[LOG] Saving tensor x_3_348.pt
[LOG] Saving tensor x_4_348.pt
[LOG] Saving tensor n0_to_0_348.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2732 Tetrahedra.
    [LOG] Generated 77 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.142857142857142
    [LOG] Max number of nodes per cluster is 47 and the number is 37
[LOG] Saving tensor n1_to_1_348.pt
[LOG] Saving tensor n2_to_2_348.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n3_to_3_348.pt
[LOG] Saving tensor n4_to_4_348.pt
[LOG] Saving tensor n0_to_1_348.pt
[LOG] Saving tensor n0_to_2_348.pt
[LOG] Saving tensor n0_to_3_348.pt
[LOG] Saving tensor n0_to_4_348.pt
[LOG] Saving tensor n1_to_2_348.pt
[LOG] Saving tensor n1_to_3_348.pt
[LOG] Saving tensor n1_to_4_348.pt
[LOG] Saving tensor n2_to_3_348.pt
[LOG] Saving tensor n2_to_4_348.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n3_to_4_348.pt
[LOG] Saving tensor global_feature_348.pt
[LOG] Process 43: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_1 for num 175
[LOG] Process 91: Calculating Neighbors
[LOG] Loading pickle file data_734.pickle
[LOG] Processing node features for num 734
[LOG] Processing edge features for num 734
[LOG] Processing tetra features for num 734
[LOG] Computing n2_to_2 (adjacency) for num 175
[LOG] Processing cluster features for num 734
[LOG] Processing cluster features for num 734
[LOG] Processing adjacency and incidence matrices for num 734
[LOG] Computing n0_to_0 for num 734
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] We will select 492 edges and 2732 tetra
[LOG] Edges from tetra 0 and KDTree 1742 with 0 edges in common.
[LOG] Computing n1_to_1 for num 734
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n3_to_3 (adjacency) for num 175
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Computing n4_to_4 (coadjacency) for num 175
[LOG] Computing n0_to_1 for num 175
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Process 23: Created combinatorial complex for file data_191.hdf5
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 734
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 3016 Tetrahedra.
    [LOG] Generated 92 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.402173913043478
    [LOG] Max number of nodes per cluster is 42 and the number is 59
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n0_to_2 for num 175
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n3_to_3 (adjacency) for num 734
[LOG] Computing n4_to_4 (coadjacency) for num 734
[LOG] Computing n0_to_1 for num 734
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n0_to_2 for num 734
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Process 23: Calculating Neighbors
[LOG] Loading pickle file data_191.pickle
[LOG] Processing node features for num 191
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Processing edge features for num 191
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing tetra features for num 191
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing cluster features for num 191
[LOG] Processing cluster features for num 191
[LOG] We will select 537 edges and 3016 tetra
[LOG] Edges from tetra 0 and KDTree 1357 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing adjacency and incidence matrices for num 191
[LOG] Computing n0_to_0 for num 191
[LOG] Computing n0_to_3 for num 734
[LOG] Computing n0_to_4 for num 734
[LOG] Computing n1_to_2 for num 734
[LOG] Computing n1_to_3 for num 734
[LOG] Computing n1_to_4 for num 734
[LOG] Computing n2_to_3 for num 734
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_4 for num 734
[LOG] Computing n3_to_4 for num 734
[LOG] Global feature for num 734
[LOG] Global feature for num 734
[LOG] Saving tensor x_0_734.pt
[LOG] Saving tensor x_1_734.pt
[LOG] Saving tensor x_2_734.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor x_3_734.pt
[LOG] Computing n1_to_1 for num 191
[LOG] Saving tensor x_4_734.pt
[LOG] Saving tensor n0_to_0_734.pt
[LOG] Saving tensor n1_to_1_734.pt
[LOG] Saving tensor n2_to_2_734.pt
[LOG] Saving tensor n3_to_3_734.pt
[LOG] Saving tensor n4_to_4_734.pt
[LOG] Saving tensor n0_to_1_734.pt
[LOG] Saving tensor n0_to_2_734.pt
[LOG] Saving tensor n0_to_3_734.pt
[LOG] Saving tensor n0_to_4_734.pt
[LOG] Saving tensor n1_to_2_734.pt
[LOG] Computing n2_to_2 (adjacency) for num 191
[LOG] Saving tensor n1_to_3_734.pt
[LOG] Saving tensor n1_to_4_734.pt
[LOG] Saving tensor n2_to_3_734.pt
[LOG] Saving tensor n2_to_4_734.pt
[LOG] Saving tensor n3_to_4_734.pt
[LOG] Saving tensor global_feature_734.pt
[LOG] Process 91: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_3 (adjacency) for num 191
[LOG] Computing n4_to_4 (coadjacency) for num 191
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_3 for num 175
[LOG] Computing n0_to_1 for num 191
[LOG] Computing n0_to_4 for num 175
[LOG] Computing n1_to_2 for num 175
[LOG] Computing n0_to_2 for num 191
[LOG] Computing n1_to_3 for num 175
[LOG] Computing n1_to_4 for num 175
[LOG] Computing n2_to_3 for num 175
[LOG] Computing n2_to_4 for num 175
[LOG] Computing n3_to_4 for num 175
[LOG] Global feature for num 175
[LOG] Global feature for num 175
[LOG] Saving tensor x_0_175.pt
[LOG] Saving tensor x_1_175.pt
[LOG] Saving tensor x_2_175.pt
[LOG] Saving tensor x_3_175.pt
[LOG] Saving tensor x_4_175.pt
[LOG] Saving tensor n0_to_0_175.pt
[LOG] Saving tensor n1_to_1_175.pt
[LOG] Saving tensor n2_to_2_175.pt
[LOG] Saving tensor n3_to_3_175.pt
[LOG] Saving tensor n4_to_4_175.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n0_to_1_175.pt
[LOG] Saving tensor n0_to_2_175.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n0_to_3_175.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n0_to_4_175.pt
[LOG] Saving tensor n1_to_2_175.pt
[LOG] Saving tensor n1_to_3_175.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n1_to_4_175.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n2_to_3_175.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n2_to_4_175.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n3_to_4_175.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor global_feature_175.pt
[LOG] Process 21: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_3 for num 191
[LOG] Computing n0_to_4 for num 191
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_2 for num 191
[LOG] Computing n1_to_3 for num 191
[LOG] Computing n1_to_4 for num 191
[LOG] Process 99: Created combinatorial complex for file data_796.hdf5
[LOG] Computing n2_to_3 for num 191
[LOG] Computing n2_to_4 for num 191
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_4 for num 191
[LOG] Global feature for num 191
[LOG] Global feature for num 191
[LOG] Saving tensor x_0_191.pt
[LOG] Saving tensor x_1_191.pt
[LOG] Saving tensor x_2_191.pt
[LOG] Saving tensor x_3_191.pt
[LOG] Saving tensor x_4_191.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n0_to_0_191.pt
[LOG] Saving tensor n1_to_1_191.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n2_to_2_191.pt
[LOG] Saving tensor n3_to_3_191.pt
[LOG] Saving tensor n4_to_4_191.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n0_to_1_191.pt
[LOG] Saving tensor n0_to_2_191.pt
[LOG] Saving tensor n0_to_3_191.pt
[LOG] Saving tensor n0_to_4_191.pt
[LOG] Saving tensor n1_to_2_191.pt
[LOG] Saving tensor n1_to_3_191.pt
[LOG] Saving tensor n1_to_4_191.pt
[LOG] Saving tensor n2_to_3_191.pt
[LOG] Saving tensor n2_to_4_191.pt
[LOG] Saving tensor n3_to_4_191.pt
[LOG] Saving tensor global_feature_191.pt
[LOG] Process 23: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 99: Calculating Neighbors
[LOG] Loading pickle file data_796.pickle
[LOG] Processing node features for num 796
[LOG] Processing edge features for num 796
[LOG] Processing tetra features for num 796
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Processing cluster features for num 796
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 2 subset clusters.
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Processing cluster features for num 796
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 796
[LOG] Computing n0_to_0 for num 796
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_1 for num 796
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 72: Created combinatorial complex for file data_580.hdf5
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1351 Tetrahedra.
    [LOG] Generated 39 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.76923076923077
    [LOG] Max number of nodes per cluster is 73 and the number is 33
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1454 Tetrahedra.
    [LOG] Generated 41 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.682926829268293
    [LOG] Max number of nodes per cluster is 65 and the number is 39
[LOG] Calculating for cell ranks 4 and 4
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] We will select 392 edges and 1351 tetra
[LOG] Edges from tetra 0 and KDTree 3746 with 0 edges in common.
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] We will select 232 edges and 1454 tetra
[LOG] Edges from tetra 0 and KDTree 1388 with 0 edges in common.
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Process 72: Calculating Neighbors
[LOG] Loading pickle file data_580.pickle
[LOG] Processing node features for num 580
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Processing edge features for num 580
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 796
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Processing tetra features for num 580
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing cluster features for num 580
[LOG] Processing cluster features for num 580
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing adjacency and incidence matrices for num 580
[LOG] Computing n0_to_0 for num 580
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_1 for num 580
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Process 53: Created combinatorial complex for file data_428.hdf5
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Process 55: Created combinatorial complex for file data_443.hdf5
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 796
[LOG] Computing n4_to_4 (coadjacency) for num 796
[LOG] Computing n0_to_1 for num 796
[LOG] Process 53: Calculating Neighbors
[LOG] Loading pickle file data_428.pickle
[LOG] Processing node features for num 428
[LOG] Processing edge features for num 428
[LOG] Process 55: Calculating Neighbors
[LOG] Loading pickle file data_443.pickle
[LOG] Processing node features for num 443
[LOG] Processing tetra features for num 428
[LOG] Processing edge features for num 443
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1966 Tetrahedra.
    [LOG] Generated 53 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.452830188679245
    [LOG] Max number of nodes per cluster is 34 and the number is 35
[LOG] Processing tetra features for num 443
[LOG] Processing cluster features for num 428
[LOG] Processing cluster features for num 428
[LOG] Processing cluster features for num 443
[LOG] Computing n0_to_2 for num 796
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing cluster features for num 443
[LOG] Processing adjacency and incidence matrices for num 428
[LOG] Computing n0_to_0 for num 428
[LOG] We will select 297 edges and 1966 tetra
[LOG] Edges from tetra 0 and KDTree 1341 with 0 edges in common.
[LOG] Processing adjacency and incidence matrices for num 443
[LOG] Computing n0_to_0 for num 443
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] Computing n2_to_2 (adjacency) for num 580
[LOG] Computing n1_to_1 for num 443
[LOG] Calculating for cell ranks 0 and 3
[LOG] GENERATED TETRA
[LOG] Computing n2_to_2 (adjacency) for num 443
[LOG] Computing n1_to_1 for num 428
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n3_to_3 (adjacency) for num 443
[LOG] Computing n4_to_4 (coadjacency) for num 443
[LOG] Computing n0_to_1 for num 443
[LOG] Computing n2_to_2 (adjacency) for num 428
[LOG] Computing n0_to_2 for num 443
[LOG] Computing n3_to_3 (adjacency) for num 428
[LOG] Removed 5 subset clusters.

    [LOG] We Currently have 6825 Tetrahedra.
    [LOG] Generated 155 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.683870967741935
    [LOG] Max number of nodes per cluster is 69 and the number is 137
[LOG] Computing n4_to_4 (coadjacency) for num 428
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_1 for num 428
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_3 (adjacency) for num 580
[LOG] Computing n4_to_4 (coadjacency) for num 580
[LOG] Computing n0_to_2 for num 428
[LOG] Computing n0_to_1 for num 580
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 2 subset clusters.
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_2 for num 580
[LOG] Calculating for cell ranks 3 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_3 for num 443
[LOG] We will select 2913 edges and 6825 tetra
[LOG] Edges from tetra 0 and KDTree 2913 with 0 edges in common.
[LOG] Computing n0_to_4 for num 443
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1464 Tetrahedra.
    [LOG] Generated 39 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.794871794871796
    [LOG] Max number of nodes per cluster is 95 and the number is 38
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 64: Created combinatorial complex for file data_518.hdf5
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_2 for num 443
[LOG] Calculating for cell ranks 4 and 4
[LOG] We will select 586 edges and 1464 tetra
[LOG] Edges from tetra 0 and KDTree 1664 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_3 for num 443
[LOG] Computing n1_to_4 for num 443
[LOG] Computing n2_to_3 for num 443
[LOG] Computing n2_to_4 for num 443
[LOG] Process 64: Calculating Neighbors
[LOG] Loading pickle file data_518.pickle
[LOG] Processing node features for num 518
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Processing edge features for num 518
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n3_to_4 for num 443
[LOG] Global feature for num 443
[LOG] Global feature for num 443
[LOG] Saving tensor x_0_443.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor x_1_443.pt
[LOG] Processing tetra features for num 518
[LOG] Saving tensor x_2_443.pt
[LOG] Saving tensor x_3_443.pt
[LOG] Saving tensor x_4_443.pt
[LOG] Saving tensor n0_to_0_443.pt
[LOG] Saving tensor n1_to_1_443.pt
[LOG] Saving tensor n2_to_2_443.pt
[LOG] Saving tensor n3_to_3_443.pt
[LOG] Saving tensor n4_to_4_443.pt
[LOG] Saving tensor n0_to_1_443.pt
[LOG] Saving tensor n0_to_2_443.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n0_to_3_443.pt
[LOG] Saving tensor n0_to_4_443.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n1_to_2_443.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1588 Tetrahedra.
    [LOG] Generated 48 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.979166666666666
    [LOG] Max number of nodes per cluster is 35 and the number is 39
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n1_to_3_443.pt
[LOG] Processing cluster features for num 518
[LOG] Saving tensor n1_to_4_443.pt
[LOG] Saving tensor n2_to_3_443.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n2_to_4_443.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n3_to_4_443.pt
[LOG] Saving tensor global_feature_443.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Process 55: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Processing cluster features for num 518
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n0_to_3 for num 796
[LOG] Processing adjacency and incidence matrices for num 518
[LOG] Computing n0_to_0 for num 518
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] We will select 235 edges and 1588 tetra
[LOG] Edges from tetra 0 and KDTree 400 with 0 edges in common.
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n0_to_4 for num 796
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_1 for num 518
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1229 Tetrahedra.
    [LOG] Generated 51 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.509803921568627
    [LOG] Max number of nodes per cluster is 38 and the number is 15
[LOG] Computing n0_to_3 for num 428
[LOG] Computing n1_to_2 for num 796
[LOG] Computing n0_to_4 for num 428
[LOG] Computing n1_to_2 for num 428
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] We will select 139 edges and 1229 tetra
[LOG] Edges from tetra 0 and KDTree 2285 with 0 edges in common.
[LOG] Computing n0_to_3 for num 580
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_4 for num 580
[LOG] Computing n2_to_2 (adjacency) for num 518
[LOG] Calculating for cell ranks 4 and 4
[LOG] Removed 0 subset clusters.
[LOG] Computing n1_to_2 for num 580
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_3 for num 428
[LOG] Computing n1_to_4 for num 428
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n2_to_3 for num 428
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n2_to_4 for num 428
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n3_to_4 for num 428
[LOG] Global feature for num 428
[LOG] Global feature for num 428
[LOG] Saving tensor x_0_428.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor x_1_428.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor x_2_428.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor x_3_428.pt
[LOG] Saving tensor x_4_428.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n0_to_0_428.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n1_to_1_428.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n2_to_2_428.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n3_to_3_428.pt
[LOG] Saving tensor n4_to_4_428.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n0_to_1_428.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Process 78: Created combinatorial complex for file data_629.hdf5
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n0_to_2_428.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n0_to_3_428.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n0_to_4_428.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n1_to_2_428.pt
[LOG] Saving tensor n1_to_3_428.pt
[LOG] Computing n3_to_3 (adjacency) for num 518
[LOG] Saving tensor n1_to_4_428.pt
[LOG] Saving tensor n2_to_3_428.pt
[LOG] Computing n4_to_4 (coadjacency) for num 518
[LOG] Saving tensor n2_to_4_428.pt
[LOG] Computing n0_to_1 for num 518
[LOG] Saving tensor n3_to_4_428.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor global_feature_428.pt
[LOG] Process 53: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_2 for num 518
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_3 for num 796
[LOG] Computing n1_to_4 for num 796
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_3 for num 796
[LOG] Process 78: Calculating Neighbors
[LOG] Loading pickle file data_629.pickle
[LOG] Processing node features for num 629
[LOG] Removed 0 subset clusters.
[LOG] Processing edge features for num 629
[LOG] Process 103: Created combinatorial complex for file data_829.hdf5
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing tetra features for num 629
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1998 Tetrahedra.
    [LOG] Generated 50 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.94
    [LOG] Max number of nodes per cluster is 65 and the number is 41
[LOG] Computing n2_to_4 for num 796
[LOG] Processing cluster features for num 629
[LOG] Processing cluster features for num 629
[LOG] Processing adjacency and incidence matrices for num 629
[LOG] Computing n0_to_0 for num 629
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 103: Calculating Neighbors
[LOG] Loading pickle file data_829.pickle
[LOG] Processing node features for num 829
[LOG] Computing n3_to_4 for num 796
[LOG] Global feature for num 796
[LOG] Global feature for num 796
[LOG] Saving tensor x_0_796.pt
[LOG] Saving tensor x_1_796.pt
[LOG] Saving tensor x_2_796.pt
[LOG] Processing edge features for num 829
[LOG] Saving tensor x_3_796.pt
[LOG] Saving tensor x_4_796.pt
[LOG] Saving tensor n0_to_0_796.pt
[LOG] Saving tensor n1_to_1_796.pt
[LOG] Saving tensor n2_to_2_796.pt
[LOG] We will select 284 edges and 1998 tetra
[LOG] Edges from tetra 0 and KDTree 2118 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n3_to_3_796.pt
[LOG] Processing tetra features for num 829
[LOG] Saving tensor n4_to_4_796.pt
[LOG] Saving tensor n0_to_1_796.pt
[LOG] Saving tensor n0_to_2_796.pt
[LOG] Process 19: Created combinatorial complex for file data_159.hdf5
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n0_to_3_796.pt
[LOG] Computing n1_to_3 for num 580
[LOG] Saving tensor n0_to_4_796.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n1_to_2_796.pt
[LOG] Saving tensor n1_to_3_796.pt
[LOG] Saving tensor n1_to_4_796.pt
[LOG] Saving tensor n2_to_3_796.pt
[LOG] Computing n1_to_4 for num 580
[LOG] Saving tensor n2_to_4_796.pt
[LOG] Processing cluster features for num 829
[LOG] Saving tensor n3_to_4_796.pt
[LOG] Saving tensor global_feature_796.pt
[LOG] Process 99: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Computing n2_to_3 for num 580
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Processing cluster features for num 829
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Processing adjacency and incidence matrices for num 829
[LOG] Computing n0_to_0 for num 829
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n1_to_1 for num 629
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Process 19: Calculating Neighbors
[LOG] Loading pickle file data_159.pickle
[LOG] Processing node features for num 159
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Processing edge features for num 159
[LOG] Computing n2_to_4 for num 580
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n1_to_1 for num 829
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_3 for num 518
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Processing tetra features for num 159
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n0_to_4 for num 518
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_2 for num 518
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_2 (adjacency) for num 829
[LOG] Processing cluster features for num 159
[LOG] Processing cluster features for num 159
[LOG] Computing n3_to_4 for num 580
[LOG] Global feature for num 580
[LOG] Global feature for num 580
[LOG] Saving tensor x_0_580.pt
[LOG] Saving tensor x_1_580.pt
[LOG] Saving tensor x_2_580.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing adjacency and incidence matrices for num 159
[LOG] Computing n0_to_0 for num 159
[LOG] Saving tensor x_3_580.pt
[LOG] Saving tensor x_4_580.pt
[LOG] Saving tensor n0_to_0_580.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n1_to_1_580.pt
[LOG] Computing n3_to_3 (adjacency) for num 829
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_1 for num 159
[LOG] Computing n4_to_4 (coadjacency) for num 829
[LOG] Computing n0_to_1 for num 829
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_3 for num 518
[LOG] Computing n1_to_4 for num 518
[LOG] Computing n2_to_3 for num 518
[LOG] Computing n2_to_4 for num 518
[LOG] Computing n2_to_2 (adjacency) for num 629
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n2_to_2 (adjacency) for num 159
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_2 for num 829
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_4 for num 518
[LOG] Global feature for num 518
[LOG] Global feature for num 518
[LOG] Saving tensor x_0_518.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n3_to_3 (adjacency) for num 629
[LOG] Computing n4_to_4 (coadjacency) for num 629
[LOG] Computing n0_to_1 for num 629
[LOG] Computing n3_to_3 (adjacency) for num 159
[LOG] Saving tensor n2_to_2_580.pt
[LOG] Computing n4_to_4 (coadjacency) for num 159
[LOG] Computing n0_to_1 for num 159
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_2 for num 159
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor x_1_518.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n3_to_3_580.pt
[LOG] Saving tensor x_2_518.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n4_to_4_580.pt
[LOG] Saving tensor x_3_518.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor x_4_518.pt
[LOG] Saving tensor n0_to_1_580.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n0_to_0_518.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n1_to_1_518.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n0_to_2_580.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n2_to_2_518.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n0_to_3_580.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n0_to_4_580.pt
[LOG] Saving tensor n3_to_3_518.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n1_to_2_580.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n4_to_4_518.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n1_to_3_580.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n0_to_1_518.pt
[LOG] Saving tensor n0_to_2_518.pt
[LOG] Computing n0_to_2 for num 629
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n1_to_4_580.pt
[LOG] Saving tensor n0_to_3_518.pt
[LOG] Saving tensor n0_to_4_518.pt
[LOG] Saving tensor n2_to_3_580.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n1_to_2_518.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n2_to_4_580.pt
[LOG] Saving tensor n1_to_3_518.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n1_to_4_518.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n3_to_4_580.pt
[LOG] Saving tensor n2_to_3_518.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n2_to_4_518.pt
[LOG] Saving tensor global_feature_580.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Process 72: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n3_to_4_518.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor global_feature_518.pt
[LOG] Process 64: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 20: Created combinatorial complex for file data_165.hdf5
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1843 Tetrahedra.
    [LOG] Generated 50 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.72
    [LOG] Max number of nodes per cluster is 56 and the number is 25
[LOG] Computing n0_to_3 for num 829
[LOG] Computing n0_to_3 for num 159
[LOG] Computing n0_to_4 for num 159
[LOG] Computing n0_to_4 for num 829
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_2 for num 159
[LOG] Computing n1_to_2 for num 829
[LOG] We will select 560 edges and 1843 tetra
[LOG] Edges from tetra 0 and KDTree 2214 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_3 for num 829
[LOG] Computing n1_to_4 for num 829
[LOG] Computing n2_to_3 for num 829
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_4 for num 829
[LOG] Computing n1_to_3 for num 159
[LOG] Computing n1_to_4 for num 159
[LOG] Computing n2_to_3 for num 159
[LOG] Computing n3_to_4 for num 829
[LOG] Global feature for num 829
[LOG] Global feature for num 829
[LOG] Saving tensor x_0_829.pt
[LOG] Saving tensor x_1_829.pt
[LOG] Saving tensor x_2_829.pt
[LOG] Saving tensor x_3_829.pt
[LOG] Saving tensor x_4_829.pt
[LOG] Saving tensor n0_to_0_829.pt
[LOG] Saving tensor n1_to_1_829.pt
[LOG] Computing n2_to_4 for num 159
[LOG] Saving tensor n2_to_2_829.pt
[LOG] Saving tensor n3_to_3_829.pt
[LOG] Saving tensor n4_to_4_829.pt
[LOG] Saving tensor n0_to_1_829.pt
[LOG] Saving tensor n0_to_2_829.pt
[LOG] Saving tensor n0_to_3_829.pt
[LOG] Saving tensor n0_to_4_829.pt
[LOG] Computing n3_to_4 for num 159
[LOG] Saving tensor n1_to_2_829.pt
[LOG] Global feature for num 159
[LOG] Global feature for num 159
[LOG] Saving tensor x_0_159.pt
[LOG] Saving tensor n1_to_3_829.pt
[LOG] Saving tensor n1_to_4_829.pt
[LOG] Saving tensor x_1_159.pt
[LOG] Saving tensor n2_to_3_829.pt
[LOG] Saving tensor x_2_159.pt
[LOG] Saving tensor x_3_159.pt
[LOG] Saving tensor x_4_159.pt
[LOG] Saving tensor n2_to_4_829.pt
[LOG] Saving tensor n0_to_0_159.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n3_to_4_829.pt
[LOG] Saving tensor n1_to_1_159.pt
[LOG] Saving tensor global_feature_829.pt
[LOG] Process 103: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n2_to_2_159.pt
[LOG] Saving tensor n3_to_3_159.pt
[LOG] Saving tensor n4_to_4_159.pt
[LOG] Saving tensor n0_to_1_159.pt
[LOG] Saving tensor n0_to_2_159.pt
[LOG] Saving tensor n0_to_3_159.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n0_to_4_159.pt
[LOG] Saving tensor n1_to_2_159.pt
[LOG] Saving tensor n1_to_3_159.pt
[LOG] Saving tensor n1_to_4_159.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n2_to_3_159.pt
[LOG] Saving tensor n2_to_4_159.pt
[LOG] Saving tensor n3_to_4_159.pt
[LOG] Saving tensor global_feature_159.pt
[LOG] Process 19: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 629
[LOG] Computing n0_to_4 for num 629
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_2 for num 629
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n1_to_3 for num 629
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Computing n1_to_4 for num 629
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n2_to_3 for num 629
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n2_to_4 for num 629
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n3_to_4 for num 629
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Global feature for num 629
[LOG] Calculating for cell ranks 1 and 2
[LOG] Global feature for num 629
[LOG] Saving tensor x_0_629.pt
[LOG] Process 20: Calculating Neighbors
[LOG] Loading pickle file data_165.pickle
[LOG] Processing node features for num 165
[LOG] Saving tensor x_1_629.pt
[LOG] Saving tensor x_2_629.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor x_3_629.pt
[LOG] Saving tensor x_4_629.pt
[LOG] Saving tensor n0_to_0_629.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n1_to_1_629.pt
[LOG] Processing edge features for num 165
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n2_to_2_629.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n3_to_3_629.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n4_to_4_629.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n0_to_1_629.pt
[LOG] Saving tensor n0_to_2_629.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n0_to_3_629.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Processing tetra features for num 165
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n0_to_4_629.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n1_to_2_629.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n1_to_3_629.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n1_to_4_629.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n2_to_3_629.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n2_to_4_629.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n3_to_4_629.pt
[LOG] Saving tensor global_feature_629.pt
[LOG] Processing cluster features for num 165
[LOG] Process 78: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing cluster features for num 165
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing adjacency and incidence matrices for num 165
[LOG] Computing n0_to_0 for num 165
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n1_to_1 for num 165
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n2_to_2 (adjacency) for num 165
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 165
[LOG] Computing n4_to_4 (coadjacency) for num 165
[LOG] Computing n0_to_1 for num 165
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 117: Created combinatorial complex for file data_927.hdf5
[LOG] Computing n0_to_2 for num 165
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1631 Tetrahedra.
    [LOG] Generated 47 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.382978723404255
    [LOG] Max number of nodes per cluster is 38 and the number is 34
[LOG] Process 117: Calculating Neighbors
[LOG] Loading pickle file data_927.pickle
[LOG] Processing node features for num 927
[LOG] Processing edge features for num 927
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1346 Tetrahedra.
    [LOG] Generated 25 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.28
    [LOG] Max number of nodes per cluster is 57 and the number is 20
[LOG] Processing tetra features for num 927
[LOG] We will select 272 edges and 1631 tetra
[LOG] Edges from tetra 0 and KDTree 307 with 0 edges in common.
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1903 Tetrahedra.
    [LOG] Generated 62 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.161290322580646
    [LOG] Max number of nodes per cluster is 49 and the number is 34
[LOG] We will select 332 edges and 1346 tetra
[LOG] Edges from tetra 0 and KDTree 4708 with 0 edges in common.
[LOG] Processing cluster features for num 927
[LOG] Processing cluster features for num 927
[LOG] Processing adjacency and incidence matrices for num 927
[LOG] Computing n0_to_0 for num 927
[LOG] Calculating for cell ranks 1 and 1
[LOG] We will select 210 edges and 1903 tetra
[LOG] Edges from tetra 0 and KDTree 801 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_1 for num 927
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 2 subset clusters.
[LOG] Computing n0_to_3 for num 165
[LOG] Removed 1 subset clusters.
[LOG] Computing n0_to_4 for num 165
[LOG] Computing n1_to_2 for num 165
[LOG] Removed 0 subset clusters.
[LOG] Computing n2_to_2 (adjacency) for num 927
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 39: Created combinatorial complex for file data_317.hdf5
[LOG] Removed 0 subset clusters.
[LOG] GENERATED TETRA
[LOG] Process 39: Calculating Neighbors
[LOG] Loading pickle file data_317.pickle
[LOG] Processing node features for num 317
[LOG] Computing n1_to_3 for num 165
[LOG] Processing edge features for num 317
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_4 for num 165
[LOG] Computing n2_to_3 for num 165
[LOG] Processing tetra features for num 317
[LOG] Process 25: Created combinatorial complex for file data_204.hdf5
[LOG] Computing n3_to_3 (adjacency) for num 927
[LOG] Computing n2_to_4 for num 165
[LOG] Computing n4_to_4 (coadjacency) for num 927
[LOG] Computing n0_to_1 for num 927
[LOG] Processing cluster features for num 317
[LOG] Processing cluster features for num 317
[LOG] Computing n3_to_4 for num 165
[LOG] Global feature for num 165
[LOG] Global feature for num 165
[LOG] Saving tensor x_0_165.pt
[LOG] Processing adjacency and incidence matrices for num 317
[LOG] Computing n0_to_0 for num 317
[LOG] Saving tensor x_1_165.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor x_2_165.pt
[LOG] Saving tensor x_3_165.pt
[LOG] Saving tensor x_4_165.pt
[LOG] Saving tensor n0_to_0_165.pt
[LOG] Saving tensor n1_to_1_165.pt
[LOG] Saving tensor n2_to_2_165.pt
[LOG] Process 14: Created combinatorial complex for file data_117.hdf5
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n3_to_3_165.pt
[LOG] Saving tensor n4_to_4_165.pt
[LOG] Saving tensor n0_to_1_165.pt
[LOG] Computing n1_to_1 for num 317
[LOG] Saving tensor n0_to_2_165.pt
[LOG] Saving tensor n0_to_3_165.pt
[LOG] Saving tensor n0_to_4_165.pt
[LOG] Saving tensor n1_to_2_165.pt
[LOG] Saving tensor n1_to_3_165.pt
[LOG] Process 25: Calculating Neighbors
[LOG] Loading pickle file data_204.pickle
[LOG] Processing node features for num 204
[LOG] Saving tensor n1_to_4_165.pt
[LOG] Saving tensor n2_to_3_165.pt
[LOG] Processing edge features for num 204
[LOG] Saving tensor n2_to_4_165.pt
[LOG] Saving tensor n3_to_4_165.pt
[LOG] Saving tensor global_feature_165.pt
[LOG] Process 20: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing tetra features for num 204
[LOG] Computing n0_to_2 for num 927
[LOG] Processing cluster features for num 204
[LOG] Processing cluster features for num 204
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1261 Tetrahedra.
    [LOG] Generated 32 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.34375
    [LOG] Max number of nodes per cluster is 39 and the number is 19
[LOG] Process 14: Calculating Neighbors
[LOG] Loading pickle file data_117.pickle
[LOG] Processing node features for num 117
[LOG] Processing adjacency and incidence matrices for num 204
[LOG] Computing n0_to_0 for num 204
[LOG] Processing edge features for num 117
[LOG] Computing n2_to_2 (adjacency) for num 317
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing tetra features for num 117
[LOG] We will select 73 edges and 1261 tetra
[LOG] Edges from tetra 0 and KDTree 426 with 0 edges in common.
[LOG] Computing n1_to_1 for num 204
[LOG] Processing cluster features for num 117
[LOG] Computing n3_to_3 (adjacency) for num 317
[LOG] Computing n4_to_4 (coadjacency) for num 317
[LOG] Computing n0_to_1 for num 317
[LOG] Processing cluster features for num 117
[LOG] Processing adjacency and incidence matrices for num 117
[LOG] Computing n0_to_0 for num 117
[LOG] Computing n0_to_2 for num 317
[LOG] Computing n2_to_2 (adjacency) for num 204
[LOG] Computing n1_to_1 for num 117
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_3 (adjacency) for num 204
[LOG] Computing n4_to_4 (coadjacency) for num 204
[LOG] Computing n2_to_2 (adjacency) for num 117
[LOG] Computing n0_to_1 for num 204
[LOG] Process 126: Created combinatorial complex for file data_987.hdf5
[LOG] Computing n0_to_2 for num 204
[LOG] Computing n0_to_3 for num 317
[LOG] Computing n0_to_4 for num 317
[LOG] Computing n1_to_2 for num 317
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_3 (adjacency) for num 117
[LOG] Computing n4_to_4 (coadjacency) for num 117
[LOG] Computing n0_to_1 for num 117
[LOG] Computing n1_to_3 for num 317
[LOG] Process 34: Created combinatorial complex for file data_278.hdf5
[LOG] Computing n1_to_4 for num 317
[LOG] Computing n2_to_3 for num 317
[LOG] Computing n0_to_2 for num 117
[LOG] Computing n2_to_4 for num 317
[LOG] Computing n3_to_4 for num 317
[LOG] Global feature for num 317
[LOG] Global feature for num 317
[LOG] Saving tensor x_0_317.pt
[LOG] Saving tensor x_1_317.pt
[LOG] Saving tensor x_2_317.pt
[LOG] Saving tensor x_3_317.pt
[LOG] Saving tensor x_4_317.pt
[LOG] Saving tensor n0_to_0_317.pt
[LOG] Computing n0_to_3 for num 204
[LOG] Saving tensor n1_to_1_317.pt
[LOG] Saving tensor n2_to_2_317.pt
[LOG] Computing n0_to_4 for num 204
[LOG] Saving tensor n3_to_3_317.pt
[LOG] Saving tensor n4_to_4_317.pt
[LOG] Saving tensor n0_to_1_317.pt
[LOG] Computing n1_to_2 for num 204
[LOG] Saving tensor n0_to_2_317.pt
[LOG] Computing n0_to_3 for num 927
[LOG] Saving tensor n0_to_3_317.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 34: Calculating Neighbors
[LOG] Saving tensor n0_to_4_317.pt
[LOG] Loading pickle file data_278.pickle
[LOG] Processing node features for num 278
[LOG] Saving tensor n1_to_2_317.pt
[LOG] Processing edge features for num 278
[LOG] Saving tensor n1_to_3_317.pt
[LOG] Saving tensor n1_to_4_317.pt
[LOG] Saving tensor n2_to_3_317.pt
[LOG] Computing n0_to_4 for num 927
[LOG] Processing tetra features for num 278
[LOG] Saving tensor n2_to_4_317.pt
[LOG] Saving tensor n3_to_4_317.pt
[LOG] Saving tensor global_feature_317.pt
[LOG] Process 39: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_2 for num 927
[LOG] Processing cluster features for num 278
[LOG] Processing cluster features for num 278
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing adjacency and incidence matrices for num 278
[LOG] Computing n0_to_0 for num 278
[LOG] Computing n1_to_1 for num 278
[LOG] Computing n1_to_3 for num 204
[LOG] Computing n1_to_4 for num 204
[LOG] Computing n2_to_3 for num 204
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_2 (adjacency) for num 278
[LOG] Computing n2_to_4 for num 204
[LOG] Computing n3_to_4 for num 204
[LOG] Global feature for num 204
[LOG] Global feature for num 204
[LOG] Saving tensor x_0_204.pt
[LOG] Saving tensor x_1_204.pt
[LOG] Saving tensor x_2_204.pt
[LOG] Saving tensor x_3_204.pt
[LOG] Saving tensor x_4_204.pt
[LOG] Saving tensor n0_to_0_204.pt
[LOG] Saving tensor n1_to_1_204.pt
[LOG] Computing n3_to_3 (adjacency) for num 278
[LOG] Saving tensor n2_to_2_204.pt
[LOG] Computing n4_to_4 (coadjacency) for num 278
[LOG] Saving tensor n3_to_3_204.pt
[LOG] Computing n0_to_1 for num 278
[LOG] Saving tensor n4_to_4_204.pt
[LOG] Saving tensor n0_to_1_204.pt
[LOG] Computing n0_to_2 for num 278
[LOG] Saving tensor n0_to_2_204.pt
[LOG] Saving tensor n0_to_3_204.pt
[LOG] Saving tensor n0_to_4_204.pt
[LOG] Saving tensor n1_to_2_204.pt
[LOG] Process 126: Calculating Neighbors
[LOG] Loading pickle file data_987.pickle
[LOG] Processing node features for num 987
[LOG] Saving tensor n1_to_3_204.pt
[LOG] Saving tensor n1_to_4_204.pt
[LOG] Saving tensor n2_to_3_204.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing edge features for num 987
[LOG] Saving tensor n2_to_4_204.pt
[LOG] Saving tensor n3_to_4_204.pt
[LOG] Saving tensor global_feature_204.pt
[LOG] Process 25: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_3 for num 927
[LOG] Computing n1_to_4 for num 927
[LOG] Computing n2_to_3 for num 927
[LOG] Computing n0_to_3 for num 117
[LOG] Processing tetra features for num 987
[LOG] GENERATED TETRA
[LOG] Computing n2_to_4 for num 927
[LOG] Computing n0_to_4 for num 117
[LOG] Computing n0_to_3 for num 278
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_4 for num 278
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_2 for num 278
[LOG] Computing n3_to_4 for num 927
[LOG] Computing n1_to_2 for num 117
[LOG] Global feature for num 927
[LOG] Global feature for num 927
[LOG] Saving tensor x_0_927.pt
[LOG] Saving tensor x_1_927.pt
[LOG] Saving tensor x_2_927.pt
[LOG] Saving tensor x_3_927.pt
[LOG] Saving tensor x_4_927.pt
[LOG] Saving tensor n0_to_0_927.pt
[LOG] Saving tensor n1_to_1_927.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n2_to_2_927.pt
[LOG] Computing n1_to_3 for num 278
[LOG] Computing n1_to_4 for num 278
[LOG] Computing n2_to_3 for num 278
[LOG] Saving tensor n3_to_3_927.pt
[LOG] Saving tensor n4_to_4_927.pt
[LOG] Saving tensor n0_to_1_927.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_4 for num 278
[LOG] Saving tensor n0_to_2_927.pt
[LOG] Saving tensor n0_to_3_927.pt
[LOG] Saving tensor n0_to_4_927.pt
[LOG] Saving tensor n1_to_2_927.pt
[LOG] Computing n3_to_4 for num 278
[LOG] Global feature for num 278
[LOG] Global feature for num 278
[LOG] Saving tensor x_0_278.pt
[LOG] Saving tensor n1_to_3_927.pt
[LOG] Saving tensor x_1_278.pt
[LOG] Saving tensor n1_to_4_927.pt
[LOG] Saving tensor x_2_278.pt
[LOG] Saving tensor n2_to_3_927.pt
[LOG] Saving tensor x_3_278.pt
[LOG] Saving tensor x_4_278.pt
[LOG] Saving tensor n2_to_4_927.pt
[LOG] Saving tensor n0_to_0_278.pt
[LOG] Saving tensor n3_to_4_927.pt
[LOG] Saving tensor n1_to_1_278.pt
[LOG] Saving tensor global_feature_927.pt
[LOG] Saving tensor n2_to_2_278.pt
[LOG] Process 117: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n3_to_3_278.pt
[LOG] Computing n1_to_3 for num 117
[LOG] Saving tensor n4_to_4_278.pt
[LOG] Saving tensor n0_to_1_278.pt
[LOG] Computing n1_to_4 for num 117
[LOG] Processing cluster features for num 987
[LOG] Saving tensor n0_to_2_278.pt
[LOG] Computing n2_to_3 for num 117
[LOG] Saving tensor n0_to_3_278.pt
[LOG] Saving tensor n0_to_4_278.pt
[LOG] Saving tensor n1_to_2_278.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n1_to_3_278.pt
[LOG] Saving tensor n1_to_4_278.pt
[LOG] Saving tensor n2_to_3_278.pt
[LOG] Saving tensor n2_to_4_278.pt
[LOG] Saving tensor n3_to_4_278.pt
[LOG] Computing n2_to_4 for num 117
[LOG] Saving tensor global_feature_278.pt
[LOG] Process 34: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n3_to_4 for num 117
[LOG] Global feature for num 117
[LOG] Global feature for num 117
[LOG] Saving tensor x_0_117.pt
[LOG] Processing cluster features for num 987
[LOG] Saving tensor x_1_117.pt
[LOG] Saving tensor x_2_117.pt
[LOG] Saving tensor x_3_117.pt
[LOG] Saving tensor x_4_117.pt
[LOG] Saving tensor n0_to_0_117.pt
[LOG] Saving tensor n1_to_1_117.pt
[LOG] Saving tensor n2_to_2_117.pt
[LOG] Saving tensor n3_to_3_117.pt
[LOG] Saving tensor n4_to_4_117.pt
[LOG] Saving tensor n0_to_1_117.pt
[LOG] Saving tensor n0_to_2_117.pt
[LOG] Saving tensor n0_to_3_117.pt
[LOG] Saving tensor n0_to_4_117.pt
[LOG] Saving tensor n1_to_2_117.pt
[LOG] Saving tensor n1_to_3_117.pt
[LOG] Saving tensor n1_to_4_117.pt
[LOG] Saving tensor n2_to_3_117.pt
[LOG] Saving tensor n2_to_4_117.pt
[LOG] Saving tensor n3_to_4_117.pt
[LOG] Processing adjacency and incidence matrices for num 987
[LOG] Saving tensor global_feature_117.pt
[LOG] Computing n0_to_0 for num 987
[LOG] Process 14: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 2213 Tetrahedra.
    [LOG] Generated 53 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.11320754716981
    [LOG] Max number of nodes per cluster is 41 and the number is 17
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] We will select 241 edges and 2213 tetra
[LOG] Edges from tetra 0 and KDTree 241 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_1 for num 987
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1056 Tetrahedra.
    [LOG] Generated 22 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 23.863636363636363
    [LOG] Max number of nodes per cluster is 61 and the number is 5
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] We will select 422 edges and 1056 tetra
[LOG] Edges from tetra 0 and KDTree 4014 with 0 edges in common.
[LOG] Process 125: Created combinatorial complex for file data_981.hdf5
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 125: Calculating Neighbors
[LOG] Loading pickle file data_981.pickle
[LOG] Processing node features for num 981
[LOG] Processing edge features for num 981
[LOG] Processing tetra features for num 981
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing cluster features for num 981
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing cluster features for num 981
[LOG] Processing adjacency and incidence matrices for num 981
[LOG] Computing n0_to_0 for num 981
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_1 for num 981
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1082 Tetrahedra.
    [LOG] Generated 47 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.446808510638299
    [LOG] Max number of nodes per cluster is 59 and the number is 35
[LOG] Process 37: Created combinatorial complex for file data_303.hdf5
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] We will select 332 edges and 1082 tetra
[LOG] Edges from tetra 0 and KDTree 1812 with 0 edges in common.
[LOG] Computing n2_to_2 (adjacency) for num 981
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 37: Calculating Neighbors
[LOG] Loading pickle file data_303.pickle
[LOG] Processing node features for num 303
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1494 Tetrahedra.
    [LOG] Generated 37 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 18.72972972972973
    [LOG] Max number of nodes per cluster is 98 and the number is 31
[LOG] Processing edge features for num 303
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing tetra features for num 303
[LOG] Processing cluster features for num 303
[LOG] Calculating for cell ranks 3 and 4
[LOG] We will select 109 edges and 1494 tetra
[LOG] Edges from tetra 0 and KDTree 4223 with 0 edges in common.
[LOG] Processing cluster features for num 303
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing adjacency and incidence matrices for num 303
[LOG] Computing n0_to_0 for num 303
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_3 (adjacency) for num 981
[LOG] Removed 0 subset clusters.
[LOG] Computing n4_to_4 (coadjacency) for num 981
[LOG] Computing n0_to_1 for num 981
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_2 for num 981
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_1 for num 303
[LOG] Process 93: Created combinatorial complex for file data_748.hdf5
[LOG] Computing n2_to_2 (adjacency) for num 303
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Process 93: Calculating Neighbors
[LOG] Loading pickle file data_748.pickle
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Processing node features for num 748
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing edge features for num 748
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n3_to_3 (adjacency) for num 303
[LOG] Processing tetra features for num 748
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n4_to_4 (coadjacency) for num 303
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n0_to_1 for num 303
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Processing cluster features for num 748
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Processing cluster features for num 748
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Processing adjacency and incidence matrices for num 748
[LOG] Computing n0_to_0 for num 748
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_3 for num 981
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_4 for num 981
[LOG] Process 101: Created combinatorial complex for file data_814.hdf5
[LOG] Computing n0_to_2 for num 303
[LOG] Computing n1_to_2 for num 981
[LOG] Computing n1_to_1 for num 748
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 101: Calculating Neighbors
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Loading pickle file data_814.pickle
[LOG] Processing node features for num 814
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Processing edge features for num 814
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Processing tetra features for num 814
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 748
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n1_to_3 for num 981
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n1_to_4 for num 981
[LOG] Computing n2_to_3 for num 981
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing cluster features for num 814
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 748
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Processing cluster features for num 814
[LOG] Computing n4_to_4 (coadjacency) for num 748
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n2_to_4 for num 981
[LOG] Computing n0_to_1 for num 748
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Processing adjacency and incidence matrices for num 814
[LOG] Computing n0_to_0 for num 814
[LOG] Computing n3_to_4 for num 981
[LOG] Global feature for num 981
[LOG] Global feature for num 981
[LOG] Saving tensor x_0_981.pt
[LOG] Saving tensor x_1_981.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor x_2_981.pt
[LOG] Saving tensor x_3_981.pt
[LOG] Computing n1_to_1 for num 814
[LOG] Saving tensor x_4_981.pt
[LOG] Saving tensor n0_to_0_981.pt
[LOG] Computing n0_to_2 for num 748
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n1_to_1_981.pt
[LOG] Saving tensor n2_to_2_981.pt
[LOG] Saving tensor n3_to_3_981.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n4_to_4_981.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n0_to_1_981.pt
[LOG] Computing n0_to_3 for num 303
[LOG] Computing n2_to_2 (adjacency) for num 814
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n0_to_2_981.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_4 for num 303
[LOG] Calculating for cell ranks 1 and 4

    [LOG] We Currently have 3074 Tetrahedra.
    [LOG] Generated 57 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 19.54385964912281
    [LOG] Max number of nodes per cluster is 276 and the number is 50
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n0_to_3_981.pt
[LOG] Computing n1_to_2 for num 303
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n0_to_4_981.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n1_to_2_981.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n1_to_3_981.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n1_to_4_981.pt
[LOG] Saving tensor n2_to_3_981.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n2_to_4_981.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n3_to_4_981.pt
[LOG] Saving tensor global_feature_981.pt
[LOG] Process 125: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_3 (adjacency) for num 814
[LOG] Computing n4_to_4 (coadjacency) for num 814
[LOG] Computing n0_to_1 for num 814
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n1_to_3 for num 303
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n1_to_4 for num 303
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n2_to_3 for num 303
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n0_to_2 for num 814
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] We will select 1021 edges and 3074 tetra
[LOG] Edges from tetra 0 and KDTree 5204 with 0 edges in common.
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n2_to_4 for num 303
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n3_to_4 for num 303
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Global feature for num 303
[LOG] Global feature for num 303
[LOG] Saving tensor x_0_303.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor x_1_303.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor x_2_303.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor x_3_303.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor x_4_303.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n0_to_0_303.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n1_to_1_303.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n2_to_2_303.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n3_to_3_303.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n4_to_4_303.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n0_to_1_303.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n0_to_2_303.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n0_to_3_303.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n0_to_4_303.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n1_to_2_303.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n1_to_3_303.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n1_to_4_303.pt
[LOG] Saving tensor n2_to_3_303.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_3 for num 748
[LOG] Saving tensor n2_to_4_303.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n3_to_4_303.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor global_feature_303.pt
[LOG] Process 37: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n0_to_4 for num 748
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n1_to_2 for num 748
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_3 for num 748
[LOG] Computing n1_to_4 for num 748
[LOG] Computing n2_to_3 for num 748
[LOG] Computing n2_to_4 for num 748
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_4 for num 748
[LOG] Global feature for num 748
[LOG] Global feature for num 748
[LOG] Saving tensor x_0_748.pt
[LOG] Saving tensor x_1_748.pt
[LOG] Saving tensor x_2_748.pt
[LOG] Saving tensor x_3_748.pt
[LOG] Saving tensor x_4_748.pt
[LOG] Saving tensor n0_to_0_748.pt
[LOG] Saving tensor n1_to_1_748.pt
[LOG] Saving tensor n2_to_2_748.pt
[LOG] Saving tensor n3_to_3_748.pt
[LOG] Saving tensor n4_to_4_748.pt
[LOG] Saving tensor n0_to_1_748.pt
[LOG] Saving tensor n0_to_2_748.pt
[LOG] Saving tensor n0_to_3_748.pt
[LOG] Saving tensor n0_to_4_748.pt
[LOG] Saving tensor n1_to_2_748.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n1_to_3_748.pt
[LOG] Saving tensor n1_to_4_748.pt
[LOG] Saving tensor n2_to_3_748.pt
[LOG] Saving tensor n2_to_4_748.pt
[LOG] Saving tensor n3_to_4_748.pt
[LOG] Saving tensor global_feature_748.pt
[LOG] Process 93: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_3 for num 814
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_4 for num 814
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_2 for num 814
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_3 for num 814
[LOG] Computing n1_to_4 for num 814
[LOG] Computing n2_to_3 for num 814
[LOG] Computing n2_to_4 for num 814
[LOG] Computing n3_to_4 for num 814
[LOG] Global feature for num 814
[LOG] Global feature for num 814
[LOG] Saving tensor x_0_814.pt
[LOG] Saving tensor x_1_814.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor x_2_814.pt
[LOG] Saving tensor x_3_814.pt
[LOG] Saving tensor x_4_814.pt
[LOG] Saving tensor n0_to_0_814.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n1_to_1_814.pt
[LOG] Saving tensor n2_to_2_814.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n3_to_3_814.pt
[LOG] Saving tensor n4_to_4_814.pt
[LOG] Saving tensor n0_to_1_814.pt
[LOG] Saving tensor n0_to_2_814.pt
[LOG] Saving tensor n0_to_3_814.pt
[LOG] Saving tensor n0_to_4_814.pt
[LOG] Saving tensor n1_to_2_814.pt
[LOG] Saving tensor n1_to_3_814.pt
[LOG] Saving tensor n1_to_4_814.pt
[LOG] Saving tensor n2_to_3_814.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n2_to_4_814.pt
[LOG] Saving tensor n3_to_4_814.pt
[LOG] Saving tensor global_feature_814.pt
[LOG] Process 101: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1713 Tetrahedra.
    [LOG] Generated 63 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.158730158730158
    [LOG] Max number of nodes per cluster is 52 and the number is 25
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 4
[LOG] We will select 270 edges and 1713 tetra
[LOG] Edges from tetra 0 and KDTree 2145 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 32: Created combinatorial complex for file data_259.hdf5
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 32: Calculating Neighbors
[LOG] Loading pickle file data_259.pickle
[LOG] Processing node features for num 259
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing edge features for num 259
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 79: Created combinatorial complex for file data_638.hdf5
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing tetra features for num 259
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Processing cluster features for num 259
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Process 79: Calculating Neighbors
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Loading pickle file data_638.pickle
[LOG] Processing node features for num 638
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Processing cluster features for num 259
[LOG] Processing edge features for num 638
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing tetra features for num 638
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Processing adjacency and incidence matrices for num 259
[LOG] Computing n0_to_0 for num 259
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Processing cluster features for num 638
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2253 Tetrahedra.
    [LOG] Generated 61 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.918032786885245
    [LOG] Max number of nodes per cluster is 44 and the number is 42
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Processing cluster features for num 638
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 638
[LOG] Computing n0_to_0 for num 638
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] We will select 221 edges and 2253 tetra
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Edges from tetra 0 and KDTree 221 with 0 edges in common.
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n1_to_1 for num 638
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_2 (adjacency) for num 638
[LOG] Computing n1_to_1 for num 259
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n3_to_3 (adjacency) for num 638
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n4_to_4 (coadjacency) for num 638
[LOG] Computing n0_to_1 for num 638
[LOG] Computing n0_to_2 for num 638
[LOG] Calculating for cell ranks 1 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_2 (adjacency) for num 987
[LOG] Computing n2_to_2 (adjacency) for num 259
[LOG] Computing n0_to_3 for num 638
[LOG] Computing n0_to_4 for num 638
[LOG] Computing n1_to_2 for num 638
[LOG] Process 111: Created combinatorial complex for file data_884.hdf5
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_3 for num 638
[LOG] Computing n1_to_4 for num 638
[LOG] Computing n2_to_3 for num 638
[LOG] Process 111: Calculating Neighbors
[LOG] Loading pickle file data_884.pickle
[LOG] Processing node features for num 884
[LOG] Processing edge features for num 884
[LOG] Computing n2_to_4 for num 638
[LOG] Processing tetra features for num 884
[LOG] Computing n3_to_4 for num 638
[LOG] Global feature for num 638
[LOG] Global feature for num 638
[LOG] Saving tensor x_0_638.pt
[LOG] Saving tensor x_1_638.pt
[LOG] Saving tensor x_2_638.pt
[LOG] Saving tensor x_3_638.pt
[LOG] Saving tensor x_4_638.pt
[LOG] Saving tensor n0_to_0_638.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n1_to_1_638.pt
[LOG] Saving tensor n2_to_2_638.pt
[LOG] Saving tensor n3_to_3_638.pt
[LOG] Saving tensor n4_to_4_638.pt
[LOG] Saving tensor n0_to_1_638.pt
[LOG] Processing cluster features for num 884
[LOG] Saving tensor n0_to_2_638.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n0_to_3_638.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n0_to_4_638.pt
[LOG] Saving tensor n1_to_2_638.pt
[LOG] Processing cluster features for num 884
[LOG] Saving tensor n1_to_3_638.pt
[LOG] Saving tensor n1_to_4_638.pt
[LOG] Saving tensor n2_to_3_638.pt
[LOG] Saving tensor n2_to_4_638.pt
[LOG] Saving tensor n3_to_4_638.pt
[LOG] Processing adjacency and incidence matrices for num 884
[LOG] Computing n0_to_0 for num 884
[LOG] Saving tensor global_feature_638.pt
[LOG] Process 79: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_1 for num 884
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1761 Tetrahedra.
    [LOG] Generated 59 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.440677966101696
    [LOG] Max number of nodes per cluster is 92 and the number is 52
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 3056 Tetrahedra.
    [LOG] Generated 78 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.653846153846153
    [LOG] Max number of nodes per cluster is 42 and the number is 12
[LOG] Computing n2_to_2 (adjacency) for num 884
[LOG] GENERATED TETRA
[LOG] We will select 371 edges and 1761 tetra
[LOG] Edges from tetra 0 and KDTree 2323 with 0 edges in common.
[LOG] We will select 784 edges and 3056 tetra
[LOG] Edges from tetra 0 and KDTree 784 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n3_to_3 (adjacency) for num 884
[LOG] Computing n4_to_4 (coadjacency) for num 884
[LOG] Computing n0_to_1 for num 884
[LOG] Computing n0_to_2 for num 884
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n3_to_3 (adjacency) for num 259
[LOG] Computing n4_to_4 (coadjacency) for num 259
[LOG] Computing n0_to_1 for num 259
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1003 Tetrahedra.
    [LOG] Generated 19 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 23.473684210526315
    [LOG] Max number of nodes per cluster is 86 and the number is 16
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.
[LOG] We will select 106 edges and 1003 tetra
[LOG] Edges from tetra 0 and KDTree 896 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_3 for num 884
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_4 for num 884
[LOG] Computing n1_to_2 for num 884
[LOG] Computing n0_to_2 for num 259
[LOG] Process 38: Created combinatorial complex for file data_307.hdf5
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_3 for num 884
[LOG] Computing n1_to_4 for num 884
[LOG] Computing n2_to_3 for num 884
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 0 subset clusters.
[LOG] Computing n2_to_4 for num 884
[LOG] Process 38: Calculating Neighbors
[LOG] Loading pickle file data_307.pickle
[LOG] Processing node features for num 307
[LOG] Processing edge features for num 307
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_4 for num 884
[LOG] Global feature for num 884
[LOG] Global feature for num 884
[LOG] Saving tensor x_0_884.pt
[LOG] Saving tensor x_1_884.pt
[LOG] Saving tensor x_2_884.pt
[LOG] Processing tetra features for num 307
[LOG] Saving tensor x_3_884.pt
[LOG] Saving tensor x_4_884.pt
[LOG] Saving tensor n0_to_0_884.pt
[LOG] Saving tensor n1_to_1_884.pt
[LOG] Saving tensor n2_to_2_884.pt
[LOG] Saving tensor n3_to_3_884.pt
[LOG] Saving tensor n4_to_4_884.pt
[LOG] Process 48: Created combinatorial complex for file data_390.hdf5
[LOG] Saving tensor n0_to_1_884.pt
[LOG] Saving tensor n0_to_2_884.pt
[LOG] Saving tensor n0_to_3_884.pt
[LOG] Processing cluster features for num 307
[LOG] Saving tensor n0_to_4_884.pt
[LOG] Saving tensor n1_to_2_884.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n1_to_3_884.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n1_to_4_884.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n2_to_3_884.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n2_to_4_884.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Processing cluster features for num 307
[LOG] Saving tensor n3_to_4_884.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor global_feature_884.pt
[LOG] Process 111: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Process 48: Calculating Neighbors
[LOG] Loading pickle file data_390.pickle
[LOG] Processing node features for num 390
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Processing adjacency and incidence matrices for num 307
[LOG] Computing n0_to_0 for num 307
[LOG] Processing edge features for num 390
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Processing tetra features for num 390
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Processing cluster features for num 390
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Processing cluster features for num 390
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 390
[LOG] Computing n0_to_0 for num 390
[LOG] Computing n1_to_1 for num 390
[LOG] Computing n2_to_2 (adjacency) for num 390
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2210 Tetrahedra.
    [LOG] Generated 52 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.788461538461538
    [LOG] Max number of nodes per cluster is 59 and the number is 31
[LOG] Computing n1_to_1 for num 307
[LOG] Computing n3_to_3 (adjacency) for num 390
[LOG] Computing n4_to_4 (coadjacency) for num 390
[LOG] Computing n0_to_1 for num 390
[LOG] Computing n0_to_2 for num 390
[LOG] Calculating for cell ranks 4 and 4
[LOG] We will select 600 edges and 2210 tetra
[LOG] Edges from tetra 0 and KDTree 2806 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_2 (adjacency) for num 307
[LOG] Computing n0_to_3 for num 390
[LOG] Computing n0_to_4 for num 390
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_2 for num 390
[LOG] Computing n1_to_3 for num 390
[LOG] Computing n1_to_4 for num 390
[LOG] Computing n2_to_3 for num 390
[LOG] Computing n2_to_4 for num 390
[LOG] Computing n3_to_4 for num 390
[LOG] Global feature for num 390
[LOG] Global feature for num 390
[LOG] Saving tensor x_0_390.pt
[LOG] Saving tensor x_1_390.pt
[LOG] Saving tensor x_2_390.pt
[LOG] Saving tensor x_3_390.pt
[LOG] Saving tensor x_4_390.pt
[LOG] Saving tensor n0_to_0_390.pt
[LOG] Saving tensor n1_to_1_390.pt
[LOG] Saving tensor n2_to_2_390.pt
[LOG] Saving tensor n3_to_3_390.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n4_to_4_390.pt
[LOG] Saving tensor n0_to_1_390.pt
[LOG] Saving tensor n0_to_2_390.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n0_to_3_390.pt
[LOG] Saving tensor n0_to_4_390.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n1_to_2_390.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n1_to_3_390.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n1_to_4_390.pt
[LOG] Computing n3_to_3 (adjacency) for num 307
[LOG] Saving tensor n2_to_3_390.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n4_to_4 (coadjacency) for num 307
[LOG] Saving tensor n2_to_4_390.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n0_to_1 for num 307
[LOG] Saving tensor n3_to_4_390.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor global_feature_390.pt
[LOG] Process 48: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n0_to_2 for num 307
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 61: Created combinatorial complex for file data_489.hdf5
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_3 for num 259
[LOG] Computing n0_to_4 for num 259
[LOG] Calculating for cell ranks 0 and 2
[LOG] GENERATED TETRA
[LOG] Computing n1_to_2 for num 259
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 86: Created combinatorial complex for file data_693.hdf5
[LOG] Process 61: Calculating Neighbors
[LOG] Loading pickle file data_489.pickle
[LOG] Processing node features for num 489
[LOG] Processing edge features for num 489
[LOG] Processing tetra features for num 489
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 489
[LOG] Process 86: Calculating Neighbors
[LOG] Loading pickle file data_693.pickle
[LOG] Processing node features for num 693
[LOG] Processing edge features for num 693
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing cluster features for num 489
[LOG] Processing tetra features for num 693
[LOG] Processing adjacency and incidence matrices for num 489
[LOG] Computing n0_to_0 for num 489
[LOG] Computing n0_to_3 for num 307
[LOG] Computing n0_to_4 for num 307
[LOG] Processing cluster features for num 693
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing cluster features for num 693
[LOG] Computing n1_to_2 for num 307
[LOG] Processing adjacency and incidence matrices for num 693
[LOG] Computing n0_to_0 for num 693
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_1 for num 489
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_1 for num 693
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 982 Tetrahedra.
    [LOG] Generated 20 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.6
    [LOG] Max number of nodes per cluster is 50 and the number is 1
[LOG] Computing n1_to_3 for num 307
[LOG] Computing n1_to_4 for num 307
[LOG] Computing n2_to_3 for num 307
[LOG] We will select 273 edges and 982 tetra
[LOG] Edges from tetra 0 and KDTree 1506 with 0 edges in common.
[LOG] Computing n2_to_4 for num 307
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n3_to_4 for num 307
[LOG] Global feature for num 307
[LOG] Global feature for num 307
[LOG] Saving tensor x_0_307.pt
[LOG] Saving tensor x_1_307.pt
[LOG] Saving tensor x_2_307.pt
[LOG] Saving tensor x_3_307.pt
[LOG] Saving tensor x_4_307.pt
[LOG] Saving tensor n0_to_0_307.pt
[LOG] Saving tensor n1_to_1_307.pt
[LOG] Saving tensor n2_to_2_307.pt
[LOG] Saving tensor n3_to_3_307.pt
[LOG] Saving tensor n4_to_4_307.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n0_to_1_307.pt
[LOG] Saving tensor n0_to_2_307.pt
[LOG] Saving tensor n0_to_3_307.pt
[LOG] Saving tensor n0_to_4_307.pt
[LOG] Saving tensor n1_to_2_307.pt
[LOG] Saving tensor n1_to_3_307.pt
[LOG] Saving tensor n1_to_4_307.pt
[LOG] Saving tensor n2_to_3_307.pt
[LOG] Saving tensor n2_to_4_307.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n3_to_4_307.pt
[LOG] Saving tensor global_feature_307.pt
[LOG] Process 38: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_3 for num 259
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_4 for num 259
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_3 for num 259
[LOG] Computing n3_to_3 (adjacency) for num 987
[LOG] Computing n4_to_4 (coadjacency) for num 987
[LOG] Computing n0_to_1 for num 987
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_4 for num 259
[LOG] Computing n2_to_2 (adjacency) for num 693
[LOG] Computing n3_to_4 for num 259
[LOG] Removed 1 subset clusters.
[LOG] Global feature for num 259
[LOG] Global feature for num 259
[LOG] Saving tensor x_0_259.pt
[LOG] Saving tensor x_1_259.pt
[LOG] Saving tensor x_2_259.pt
[LOG] Saving tensor x_3_259.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor x_4_259.pt
[LOG] Saving tensor n0_to_0_259.pt
[LOG] Saving tensor n1_to_1_259.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n2_to_2_259.pt
[LOG] Computing n2_to_2 (adjacency) for num 489
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 62: Created combinatorial complex for file data_503.hdf5
[LOG] Computing n3_to_3 (adjacency) for num 693
[LOG] Computing n4_to_4 (coadjacency) for num 693
[LOG] Saving tensor n3_to_3_259.pt
[LOG] Computing n0_to_1 for num 693
[LOG] Saving tensor n4_to_4_259.pt
[LOG] Saving tensor n0_to_1_259.pt
[LOG] Saving tensor n0_to_2_259.pt
[LOG] Process 62: Calculating Neighbors
[LOG] Loading pickle file data_503.pickle
[LOG] Processing node features for num 503
[LOG] Saving tensor n0_to_3_259.pt
[LOG] Processing edge features for num 503
[LOG] Saving tensor n0_to_4_259.pt
[LOG] Saving tensor n1_to_2_259.pt
[LOG] Saving tensor n1_to_3_259.pt
[LOG] Processing tetra features for num 503
[LOG] Saving tensor n1_to_4_259.pt
[LOG] Saving tensor n2_to_3_259.pt
[LOG] Saving tensor n2_to_4_259.pt
[LOG] Saving tensor n3_to_4_259.pt
[LOG] Saving tensor global_feature_259.pt
[LOG] Process 32: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing cluster features for num 503
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing cluster features for num 503
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing adjacency and incidence matrices for num 503
[LOG] Computing n0_to_0 for num 503
[LOG] Computing n1_to_1 for num 503
[LOG] Computing n0_to_2 for num 693
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_2 (adjacency) for num 503
[LOG] Computing n3_to_3 (adjacency) for num 503
[LOG] Computing n4_to_4 (coadjacency) for num 503
[LOG] Computing n0_to_1 for num 503
[LOG] Computing n0_to_2 for num 503
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_3 for num 503
[LOG] Computing n0_to_4 for num 503
[LOG] Computing n1_to_2 for num 503
[LOG] Computing n3_to_3 (adjacency) for num 489
[LOG] Computing n4_to_4 (coadjacency) for num 489
[LOG] Computing n0_to_1 for num 489
[LOG] Computing n1_to_3 for num 503
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_4 for num 503
[LOG] Computing n2_to_3 for num 503
[LOG] Computing n2_to_4 for num 503
[LOG] Computing n3_to_4 for num 503
[LOG] Global feature for num 503
[LOG] Global feature for num 503
[LOG] Saving tensor x_0_503.pt
[LOG] Saving tensor x_1_503.pt
[LOG] Computing n0_to_2 for num 489
[LOG] Saving tensor x_2_503.pt
[LOG] Saving tensor x_3_503.pt
[LOG] Saving tensor x_4_503.pt
[LOG] Saving tensor n0_to_0_503.pt
[LOG] Saving tensor n1_to_1_503.pt
[LOG] Saving tensor n2_to_2_503.pt
[LOG] Saving tensor n3_to_3_503.pt
[LOG] Saving tensor n4_to_4_503.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n0_to_1_503.pt
[LOG] Saving tensor n0_to_2_503.pt
[LOG] Saving tensor n0_to_3_503.pt
[LOG] Saving tensor n0_to_4_503.pt
[LOG] Saving tensor n1_to_2_503.pt
[LOG] Saving tensor n1_to_3_503.pt
[LOG] Saving tensor n1_to_4_503.pt
[LOG] Saving tensor n2_to_3_503.pt
[LOG] Saving tensor n2_to_4_503.pt
[LOG] Saving tensor n3_to_4_503.pt
[LOG] Saving tensor global_feature_503.pt
[LOG] Process 62: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_2 for num 987
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2460 Tetrahedra.
    [LOG] Generated 51 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.137254901960784
    [LOG] Max number of nodes per cluster is 54 and the number is 50
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] We will select 609 edges and 2460 tetra
[LOG] Edges from tetra 0 and KDTree 1186 with 0 edges in common.
[LOG] Computing n0_to_3 for num 693
[LOG] Computing n0_to_4 for num 693
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_2 for num 693
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_3 for num 489
[LOG] Computing n0_to_4 for num 489
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_2 for num 489
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n1_to_3 for num 693
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n1_to_4 for num 693
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_3 for num 693
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_4 for num 693
[LOG] GENERATED TETRA
[LOG] Computing n3_to_4 for num 693
[LOG] Global feature for num 693
[LOG] Global feature for num 693
[LOG] Saving tensor x_0_693.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor x_1_693.pt
[LOG] Saving tensor x_2_693.pt
[LOG] Saving tensor x_3_693.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor x_4_693.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n0_to_0_693.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n1_to_1_693.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n2_to_2_693.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n3_to_3_693.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n4_to_4_693.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n0_to_1_693.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n0_to_2_693.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n0_to_3_693.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n0_to_4_693.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n1_to_2_693.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n1_to_3_693.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n1_to_4_693.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n2_to_3_693.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n2_to_4_693.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n3_to_4_693.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor global_feature_693.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Process 86: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 3312 Tetrahedra.
    [LOG] Generated 52 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 20.442307692307693
    [LOG] Max number of nodes per cluster is 162 and the number is 51
[LOG] Removed 0 subset clusters.
[LOG] We will select 553 edges and 3312 tetra
[LOG] Edges from tetra 0 and KDTree 4001 with 0 edges in common.
[LOG] Process 16: Created combinatorial complex for file data_130.hdf5
[LOG] Computing n1_to_3 for num 489
[LOG] Computing n1_to_4 for num 489
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_3 for num 489
[LOG] Computing n2_to_4 for num 489
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2693 Tetrahedra.
    [LOG] Generated 70 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.4
    [LOG] Max number of nodes per cluster is 40 and the number is 38
[LOG] Process 16: Calculating Neighbors
[LOG] Computing n3_to_4 for num 489
[LOG] Loading pickle file data_130.pickle
[LOG] Processing node features for num 130
[LOG] Global feature for num 489
[LOG] Global feature for num 489
[LOG] Saving tensor x_0_489.pt
[LOG] Saving tensor x_1_489.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor x_2_489.pt
[LOG] Processing edge features for num 130
[LOG] Saving tensor x_3_489.pt
[LOG] Saving tensor x_4_489.pt
[LOG] Saving tensor n0_to_0_489.pt
[LOG] Saving tensor n1_to_1_489.pt
[LOG] Saving tensor n2_to_2_489.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n3_to_3_489.pt
[LOG] Saving tensor n4_to_4_489.pt
[LOG] Saving tensor n0_to_1_489.pt
[LOG] Saving tensor n0_to_2_489.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n0_to_3_489.pt
[LOG] Saving tensor n0_to_4_489.pt
[LOG] Processing tetra features for num 130
[LOG] Saving tensor n1_to_2_489.pt
[LOG] Saving tensor n1_to_3_489.pt
[LOG] Saving tensor n1_to_4_489.pt
[LOG] Saving tensor n2_to_3_489.pt
[LOG] Saving tensor n2_to_4_489.pt
[LOG] Saving tensor n3_to_4_489.pt
[LOG] Saving tensor global_feature_489.pt
[LOG] Process 61: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] We will select 572 edges and 2693 tetra
[LOG] Edges from tetra 0 and KDTree 572 with 0 edges in common.
[LOG] Processing cluster features for num 130
[LOG] Processing cluster features for num 130
[LOG] Processing adjacency and incidence matrices for num 130
[LOG] Computing n0_to_0 for num 130
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_1 for num 130
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_2 (adjacency) for num 130
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_3 for num 987
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n3_to_3 (adjacency) for num 130
[LOG] Computing n0_to_4 for num 987
[LOG] Computing n4_to_4 (coadjacency) for num 130
[LOG] Computing n0_to_1 for num 130
[LOG] Process 90: Created combinatorial complex for file data_723.hdf5
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_2 for num 987
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_2 for num 130
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Process 90: Calculating Neighbors
[LOG] Loading pickle file data_723.pickle
[LOG] Processing node features for num 723
[LOG] Processing edge features for num 723
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing tetra features for num 723
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1401 Tetrahedra.
    [LOG] Generated 39 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.974358974358974
    [LOG] Max number of nodes per cluster is 25 and the number is 38
[LOG] Processing cluster features for num 723
[LOG] Processing cluster features for num 723
[LOG] We will select 202 edges and 1401 tetra
[LOG] Edges from tetra 0 and KDTree 202 with 0 edges in common.
[LOG] Processing adjacency and incidence matrices for num 723
[LOG] Computing n0_to_0 for num 723
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 44: Created combinatorial complex for file data_354.hdf5
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_1 for num 723
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1490 Tetrahedra.
    [LOG] Generated 51 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.647058823529411
    [LOG] Max number of nodes per cluster is 42 and the number is 13
[LOG] We will select 1747 edges and 1490 tetra
[LOG] Edges from tetra 0 and KDTree 2243 with 0 edges in common.
[LOG] Process 44: Calculating Neighbors
[LOG] Loading pickle file data_354.pickle
[LOG] Processing node features for num 354
[LOG] Computing n0_to_3 for num 130
[LOG] Processing edge features for num 354
[LOG] Computing n0_to_4 for num 130
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing tetra features for num 354
[LOG] Computing n1_to_2 for num 130
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing cluster features for num 354
[LOG] Processing cluster features for num 354
[LOG] Removed 1 subset clusters.
[LOG] Processing adjacency and incidence matrices for num 354
[LOG] Computing n0_to_0 for num 354
[LOG] Computing n1_to_1 for num 354
[LOG] Process 26: Created combinatorial complex for file data_214.hdf5
[LOG] Computing n2_to_2 (adjacency) for num 723
[LOG] Calculating for cell ranks 1 and 3
[LOG] GENERATED TETRA
[LOG] Computing n1_to_3 for num 130
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_4 for num 130
[LOG] Computing n2_to_3 for num 130
[LOG] Computing n2_to_4 for num 130
[LOG] Computing n3_to_4 for num 130
[LOG] Global feature for num 130
[LOG] Global feature for num 130
[LOG] Saving tensor x_0_130.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 0 subset clusters.
[LOG] Computing n2_to_2 (adjacency) for num 354
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1234 Tetrahedra.
    [LOG] Generated 40 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.175
    [LOG] Max number of nodes per cluster is 44 and the number is 2
[LOG] Process 26: Calculating Neighbors
[LOG] Loading pickle file data_214.pickle
[LOG] Processing node features for num 214
[LOG] Processing edge features for num 214
[LOG] Processing tetra features for num 214
[LOG] We will select 86 edges and 1234 tetra
[LOG] Edges from tetra 0 and KDTree 453 with 0 edges in common.
[LOG] Process 30: Created combinatorial complex for file data_243.hdf5
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor x_1_130.pt
[LOG] Saving tensor x_2_130.pt
[LOG] Processing cluster features for num 214
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor x_3_130.pt
[LOG] Saving tensor x_4_130.pt
[LOG] Saving tensor n0_to_0_130.pt
[LOG] Processing cluster features for num 214
[LOG] Saving tensor n1_to_1_130.pt
[LOG] Saving tensor n2_to_2_130.pt
[LOG] Processing adjacency and incidence matrices for num 214
[LOG] Computing n0_to_0 for num 214
[LOG] Saving tensor n3_to_3_130.pt
[LOG] Saving tensor n4_to_4_130.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n0_to_1_130.pt
[LOG] Saving tensor n0_to_2_130.pt
[LOG] Saving tensor n0_to_3_130.pt
[LOG] Computing n1_to_1 for num 214
[LOG] Saving tensor n0_to_4_130.pt
[LOG] Saving tensor n1_to_2_130.pt
[LOG] Saving tensor n1_to_3_130.pt
[LOG] Saving tensor n1_to_4_130.pt
[LOG] Saving tensor n2_to_3_130.pt
[LOG] Saving tensor n2_to_4_130.pt
[LOG] Saving tensor n3_to_4_130.pt
[LOG] Saving tensor global_feature_130.pt
[LOG] Process 16: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_2 (adjacency) for num 214
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 30: Calculating Neighbors
[LOG] Loading pickle file data_243.pickle
[LOG] Processing node features for num 243
[LOG] Processing edge features for num 243
[LOG] Computing n3_to_3 (adjacency) for num 214
[LOG] Computing n3_to_3 (adjacency) for num 354
[LOG] Computing n4_to_4 (coadjacency) for num 214
[LOG] Computing n4_to_4 (coadjacency) for num 354
[LOG] Computing n0_to_1 for num 214
[LOG] Computing n0_to_1 for num 354
[LOG] Computing n0_to_2 for num 214
[LOG] Processing tetra features for num 243
[LOG] Removed 0 subset clusters.
[LOG] Processing cluster features for num 243
[LOG] Computing n0_to_2 for num 354
[LOG] Processing cluster features for num 243
[LOG] Processing adjacency and incidence matrices for num 243
[LOG] Computing n0_to_0 for num 243
[LOG] Computing n3_to_3 (adjacency) for num 723
[LOG] Computing n4_to_4 (coadjacency) for num 723
[LOG] Computing n0_to_1 for num 723
[LOG] Process 91: Created combinatorial complex for file data_735.hdf5
[LOG] Computing n0_to_3 for num 214
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_4 for num 214
[LOG] Computing n1_to_2 for num 214
[LOG] Process 91: Calculating Neighbors
[LOG] Loading pickle file data_735.pickle
[LOG] Processing node features for num 735
[LOG] Processing edge features for num 735
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_3 for num 214
[LOG] Computing n1_to_4 for num 214
[LOG] Computing n0_to_2 for num 723
[LOG] Processing tetra features for num 735
[LOG] Computing n2_to_3 for num 214
[LOG] Computing n2_to_4 for num 214
[LOG] Processing cluster features for num 735
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n3_to_4 for num 214
[LOG] Global feature for num 214
[LOG] Global feature for num 214
[LOG] Saving tensor x_0_214.pt
[LOG] Processing cluster features for num 735
[LOG] Saving tensor x_1_214.pt
[LOG] Saving tensor x_2_214.pt
[LOG] Saving tensor x_3_214.pt
[LOG] Saving tensor x_4_214.pt
[LOG] Saving tensor n0_to_0_214.pt
[LOG] Processing adjacency and incidence matrices for num 735
[LOG] Computing n0_to_0 for num 735
[LOG] Saving tensor n1_to_1_214.pt
[LOG] Saving tensor n2_to_2_214.pt
[LOG] Saving tensor n3_to_3_214.pt
[LOG] Saving tensor n4_to_4_214.pt
[LOG] Saving tensor n0_to_1_214.pt
[LOG] Computing n1_to_1 for num 735
[LOG] Saving tensor n0_to_2_214.pt
[LOG] Saving tensor n0_to_3_214.pt
[LOG] Saving tensor n0_to_4_214.pt
[LOG] Saving tensor n1_to_2_214.pt
[LOG] Saving tensor n1_to_3_214.pt
[LOG] Saving tensor n1_to_4_214.pt
[LOG] Saving tensor n2_to_3_214.pt
[LOG] Saving tensor n2_to_4_214.pt
[LOG] Saving tensor n3_to_4_214.pt
[LOG] Computing n2_to_2 (adjacency) for num 735
[LOG] Saving tensor global_feature_214.pt
[LOG] Process 26: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_3 (adjacency) for num 735
[LOG] Computing n4_to_4 (coadjacency) for num 735
[LOG] Computing n0_to_1 for num 735
[LOG] Computing n0_to_2 for num 735
[LOG] Computing n0_to_3 for num 354
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_4 for num 354
[LOG] Computing n1_to_2 for num 354
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_1 for num 243
[LOG] Computing n0_to_3 for num 735
[LOG] Computing n0_to_4 for num 735
[LOG] Computing n1_to_2 for num 735
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_3 for num 735
[LOG] Computing n1_to_4 for num 735
[LOG] Computing n2_to_3 for num 735
[LOG] Computing n2_to_4 for num 735
[LOG] Computing n3_to_4 for num 735
[LOG] Global feature for num 735
[LOG] Global feature for num 735
[LOG] Saving tensor x_0_735.pt
[LOG] Saving tensor x_1_735.pt
[LOG] Saving tensor x_2_735.pt
[LOG] Saving tensor x_3_735.pt
[LOG] Saving tensor x_4_735.pt
[LOG] Saving tensor n0_to_0_735.pt
[LOG] Saving tensor n1_to_1_735.pt
[LOG] Saving tensor n2_to_2_735.pt
[LOG] Saving tensor n3_to_3_735.pt
[LOG] Saving tensor n4_to_4_735.pt
[LOG] Saving tensor n0_to_1_735.pt
[LOG] Saving tensor n0_to_2_735.pt
[LOG] Saving tensor n0_to_3_735.pt
[LOG] Saving tensor n0_to_4_735.pt
[LOG] Saving tensor n1_to_2_735.pt
[LOG] Saving tensor n1_to_3_735.pt
[LOG] Saving tensor n1_to_4_735.pt
[LOG] Saving tensor n2_to_3_735.pt
[LOG] Saving tensor n2_to_4_735.pt
[LOG] Saving tensor n3_to_4_735.pt
[LOG] Saving tensor global_feature_735.pt
[LOG] Process 91: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_3 for num 354
[LOG] Computing n1_to_4 for num 354
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_3 for num 354
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_4 for num 354
[LOG] GENERATED TETRA
[LOG] Computing n3_to_4 for num 354
[LOG] Global feature for num 354
[LOG] Global feature for num 354
[LOG] Saving tensor x_0_354.pt
[LOG] Saving tensor x_1_354.pt
[LOG] Saving tensor x_2_354.pt
[LOG] Saving tensor x_3_354.pt
[LOG] Saving tensor x_4_354.pt
[LOG] Saving tensor n0_to_0_354.pt
[LOG] Saving tensor n1_to_1_354.pt
[LOG] Saving tensor n2_to_2_354.pt
[LOG] Saving tensor n3_to_3_354.pt
[LOG] Saving tensor n4_to_4_354.pt
[LOG] Saving tensor n0_to_1_354.pt
[LOG] Saving tensor n0_to_2_354.pt
[LOG] Saving tensor n0_to_3_354.pt
[LOG] Saving tensor n0_to_4_354.pt
[LOG] Saving tensor n1_to_2_354.pt
[LOG] Saving tensor n1_to_3_354.pt
[LOG] Saving tensor n1_to_4_354.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n2_to_3_354.pt
[LOG] Saving tensor n2_to_4_354.pt
[LOG] Saving tensor n3_to_4_354.pt
[LOG] Saving tensor global_feature_354.pt
[LOG] Process 44: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 723
[LOG] Computing n0_to_4 for num 723
[LOG] Computing n1_to_2 for num 723
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_2 (adjacency) for num 243
[LOG] Computing n3_to_3 (adjacency) for num 243
[LOG] Computing n4_to_4 (coadjacency) for num 243
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_1 for num 243
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n1_to_3 for num 723
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n1_to_4 for num 723
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n2_to_3 for num 723
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n2_to_4 for num 723
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_4 for num 723
[LOG] Global feature for num 723
[LOG] Global feature for num 723
[LOG] Saving tensor x_0_723.pt
[LOG] Saving tensor x_1_723.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1194 Tetrahedra.
    [LOG] Generated 34 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.88235294117647
    [LOG] Max number of nodes per cluster is 59 and the number is 13
[LOG] Saving tensor x_2_723.pt
[LOG] Saving tensor x_3_723.pt
[LOG] Saving tensor x_4_723.pt
[LOG] Saving tensor n0_to_0_723.pt
[LOG] Computing n0_to_2 for num 243
[LOG] Saving tensor n1_to_1_723.pt
[LOG] Saving tensor n2_to_2_723.pt
[LOG] We will select 233 edges and 1194 tetra
[LOG] Edges from tetra 0 and KDTree 2078 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n3_to_3_723.pt
[LOG] Saving tensor n4_to_4_723.pt
[LOG] Saving tensor n0_to_1_723.pt
[LOG] Saving tensor n0_to_2_723.pt
[LOG] Saving tensor n0_to_3_723.pt
[LOG] Saving tensor n0_to_4_723.pt
[LOG] Saving tensor n1_to_2_723.pt
[LOG] Saving tensor n1_to_3_723.pt
[LOG] Saving tensor n1_to_4_723.pt
[LOG] Saving tensor n2_to_3_723.pt
[LOG] Saving tensor n2_to_4_723.pt
[LOG] Saving tensor n3_to_4_723.pt
[LOG] Saving tensor global_feature_723.pt
[LOG] Process 90: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3672 Tetrahedra.
    [LOG] Generated 81 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.271604938271604
    [LOG] Max number of nodes per cluster is 74 and the number is 79
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 3 and 4
[LOG] We will select 842 edges and 3672 tetra
[LOG] Edges from tetra 0 and KDTree 4302 with 0 edges in common.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_3 for num 243
[LOG] Process 67: Created combinatorial complex for file data_540.hdf5
[LOG] Computing n0_to_4 for num 243
[LOG] Computing n1_to_2 for num 243
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Process 67: Calculating Neighbors
[LOG] Loading pickle file data_540.pickle
[LOG] Processing node features for num 540
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Processing edge features for num 540
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Processing tetra features for num 540
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Processing cluster features for num 540
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Processing cluster features for num 540
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 540
[LOG] Computing n0_to_0 for num 540
[LOG] Computing n1_to_1 for num 540
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_2 (adjacency) for num 540
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n3_to_3 (adjacency) for num 540
[LOG] Computing n4_to_4 (coadjacency) for num 540
[LOG] Computing n0_to_1 for num 540
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_2 for num 540
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n1_to_3 for num 243
[LOG] Computing n0_to_3 for num 540
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n0_to_4 for num 540
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Computing n1_to_2 for num 540
[LOG] Computing n1_to_4 for num 243
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_3 for num 243
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n2_to_4 for num 243
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_3 for num 540
[LOG] Computing n1_to_4 for num 540
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n2_to_3 for num 540
[LOG] Computing n3_to_4 for num 243
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Global feature for num 243
[LOG] Global feature for num 243
[LOG] Saving tensor x_0_243.pt
[LOG] Saving tensor x_1_243.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor x_2_243.pt
[LOG] Computing n2_to_4 for num 540
[LOG] Saving tensor x_3_243.pt
[LOG] Saving tensor x_4_243.pt
[LOG] Saving tensor n0_to_0_243.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n1_to_1_243.pt
[LOG] Saving tensor n2_to_2_243.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n3_to_4 for num 540
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Global feature for num 540
[LOG] Global feature for num 540
[LOG] Saving tensor x_0_540.pt
[LOG] Saving tensor n3_to_3_243.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor x_1_540.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor x_2_540.pt
[LOG] Saving tensor n4_to_4_243.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor x_3_540.pt
[LOG] Saving tensor x_4_540.pt
[LOG] Saving tensor n0_to_1_243.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n0_to_0_540.pt
[LOG] Saving tensor n0_to_2_243.pt
[LOG] Saving tensor n1_to_1_540.pt
[LOG] Computing n1_to_3 for num 987
[LOG] Saving tensor n0_to_3_243.pt
[LOG] Saving tensor n2_to_2_540.pt
[LOG] Saving tensor n0_to_4_243.pt
[LOG] Saving tensor n1_to_2_243.pt
[LOG] Saving tensor n3_to_3_540.pt
[LOG] Saving tensor n4_to_4_540.pt
[LOG] Saving tensor n1_to_3_243.pt
[LOG] Saving tensor n0_to_1_540.pt
[LOG] Saving tensor n1_to_4_243.pt
[LOG] Saving tensor n0_to_2_540.pt
[LOG] Saving tensor n2_to_3_243.pt
[LOG] Saving tensor n0_to_3_540.pt
[LOG] Saving tensor n2_to_4_243.pt
[LOG] Saving tensor n0_to_4_540.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n3_to_4_243.pt
[LOG] Saving tensor n1_to_2_540.pt
[LOG] Saving tensor global_feature_243.pt
[LOG] Saving tensor n1_to_3_540.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n1_to_4 for num 987
[LOG] Process 30: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n1_to_4_540.pt
[LOG] Saving tensor n2_to_3_540.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n2_to_4_540.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n3_to_4_540.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n2_to_3 for num 987
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor global_feature_540.pt
[LOG] Process 67: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 66: Created combinatorial complex for file data_530.hdf5
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_4 for num 987
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] GENERATED TETRA
[LOG] Computing n3_to_4 for num 987
[LOG] Process 66: Calculating Neighbors
[LOG] Loading pickle file data_530.pickle
[LOG] Processing node features for num 530
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Global feature for num 987
[LOG] Global feature for num 987
[LOG] Saving tensor x_0_987.pt
[LOG] Saving tensor x_1_987.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor x_2_987.pt
[LOG] Processing edge features for num 530
[LOG] Saving tensor x_3_987.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor x_4_987.pt
[LOG] Saving tensor n0_to_0_987.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n1_to_1_987.pt
[LOG] Saving tensor n2_to_2_987.pt
[LOG] Processing tetra features for num 530
[LOG] Saving tensor n3_to_3_987.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n4_to_4_987.pt
[LOG] Saving tensor n0_to_1_987.pt
[LOG] Saving tensor n0_to_2_987.pt
[LOG] Saving tensor n0_to_3_987.pt
[LOG] Saving tensor n0_to_4_987.pt
[LOG] Saving tensor n1_to_2_987.pt
[LOG] Saving tensor n1_to_3_987.pt
[LOG] Saving tensor n1_to_4_987.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n2_to_3_987.pt
[LOG] Saving tensor n2_to_4_987.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n3_to_4_987.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor global_feature_987.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Process 126: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Processing cluster features for num 530
[LOG] Processing cluster features for num 530
[LOG] Calculating for cell ranks 1 and 1
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Processing adjacency and incidence matrices for num 530
[LOG] Computing n0_to_0 for num 530
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.
[LOG] Computing n1_to_1 for num 530

    [LOG] We Currently have 2112 Tetrahedra.
    [LOG] Generated 78 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.115384615384615
    [LOG] Max number of nodes per cluster is 46 and the number is 14
[LOG] GENERATED TETRA
[LOG] We will select 503 edges and 2112 tetra
[LOG] Edges from tetra 0 and KDTree 976 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1715 Tetrahedra.
    [LOG] Generated 50 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.22
    [LOG] Max number of nodes per cluster is 53 and the number is 11
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] We will select 405 edges and 1715 tetra
[LOG] Edges from tetra 0 and KDTree 1167 with 0 edges in common.
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1834 Tetrahedra.
    [LOG] Generated 44 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.886363636363637
    [LOG] Max number of nodes per cluster is 59 and the number is 41
[LOG] Calculating for cell ranks 2 and 2
[LOG] We will select 139 edges and 1834 tetra
[LOG] Edges from tetra 0 and KDTree 405 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_2 (adjacency) for num 530
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 11: Created combinatorial complex for file data_94.hdf5
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 114: Created combinatorial complex for file data_907.hdf5
[LOG] Process 11: Calculating Neighbors
[LOG] Loading pickle file data_94.pickle
[LOG] Processing node features for num 94
[LOG] Processing edge features for num 94
[LOG] Processing tetra features for num 94
[LOG] Process 114: Calculating Neighbors
[LOG] Loading pickle file data_907.pickle
[LOG] Processing node features for num 907
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Processing edge features for num 907
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Processing tetra features for num 907
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Processing cluster features for num 94
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Processing cluster features for num 94
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Processing cluster features for num 907
[LOG] Processing adjacency and incidence matrices for num 94
[LOG] Computing n0_to_0 for num 94
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Processing cluster features for num 907
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 907
[LOG] Computing n0_to_0 for num 907
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n1_to_1 for num 94
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n1_to_1 for num 907
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 907
[LOG] Process 17: Created combinatorial complex for file data_141.hdf5
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_2 (adjacency) for num 94
[LOG] Computing n3_to_3 (adjacency) for num 907
[LOG] Computing n4_to_4 (coadjacency) for num 907
[LOG] Computing n0_to_1 for num 907
[LOG] Computing n0_to_2 for num 907
[LOG] Process 17: Calculating Neighbors
[LOG] Loading pickle file data_141.pickle
[LOG] Processing node features for num 141
[LOG] Processing edge features for num 141
[LOG] Computing n3_to_3 (adjacency) for num 94
[LOG] Processing tetra features for num 141
[LOG] Computing n4_to_4 (coadjacency) for num 94
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_1 for num 94
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n3_to_3 (adjacency) for num 530
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n4_to_4 (coadjacency) for num 530
[LOG] Computing n0_to_1 for num 530
[LOG] Computing n0_to_2 for num 94
[LOG] Processing cluster features for num 141
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing cluster features for num 141
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing adjacency and incidence matrices for num 141
[LOG] Computing n0_to_0 for num 141
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n0_to_3 for num 907
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n0_to_4 for num 907
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n1_to_2 for num 907
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n1_to_1 for num 141
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n1_to_3 for num 907
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n1_to_4 for num 907
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n2_to_3 for num 907
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_3 for num 94
[LOG] Computing n2_to_4 for num 907
[LOG] Computing n0_to_4 for num 94
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_4 for num 907
[LOG] Computing n1_to_2 for num 94
[LOG] Global feature for num 907
[LOG] Global feature for num 907
[LOG] Saving tensor x_0_907.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor x_1_907.pt
[LOG] Computing n0_to_2 for num 530
[LOG] Saving tensor x_2_907.pt
[LOG] Saving tensor x_3_907.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor x_4_907.pt
[LOG] Saving tensor n0_to_0_907.pt
[LOG] Saving tensor n1_to_1_907.pt
[LOG] Saving tensor n2_to_2_907.pt
[LOG] Saving tensor n3_to_3_907.pt
[LOG] Saving tensor n4_to_4_907.pt
[LOG] Saving tensor n0_to_1_907.pt
[LOG] Saving tensor n0_to_2_907.pt
[LOG] Saving tensor n0_to_3_907.pt
[LOG] Saving tensor n0_to_4_907.pt
[LOG] Saving tensor n1_to_2_907.pt
[LOG] Saving tensor n1_to_3_907.pt
[LOG] Saving tensor n1_to_4_907.pt
[LOG] Saving tensor n2_to_3_907.pt
[LOG] Saving tensor n2_to_4_907.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n3_to_4_907.pt
[LOG] Saving tensor global_feature_907.pt
[LOG] Process 114: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_3 for num 94
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_4 for num 94
[LOG] Computing n2_to_3 for num 94
[LOG] Computing n2_to_2 (adjacency) for num 141
[LOG] Computing n2_to_4 for num 94
[LOG] Computing n3_to_4 for num 94
[LOG] Global feature for num 94
[LOG] Global feature for num 94
[LOG] Saving tensor x_0_94.pt
[LOG] Saving tensor x_1_94.pt
[LOG] Saving tensor x_2_94.pt
[LOG] Saving tensor x_3_94.pt
[LOG] Saving tensor x_4_94.pt
[LOG] Saving tensor n0_to_0_94.pt
[LOG] Saving tensor n1_to_1_94.pt
[LOG] Saving tensor n2_to_2_94.pt
[LOG] Saving tensor n3_to_3_94.pt
[LOG] Saving tensor n4_to_4_94.pt
[LOG] Saving tensor n0_to_1_94.pt
[LOG] Saving tensor n0_to_2_94.pt
[LOG] Saving tensor n0_to_3_94.pt
[LOG] Saving tensor n0_to_4_94.pt
[LOG] Saving tensor n1_to_2_94.pt
[LOG] Saving tensor n1_to_3_94.pt
[LOG] Saving tensor n1_to_4_94.pt
[LOG] Saving tensor n2_to_3_94.pt
[LOG] Saving tensor n2_to_4_94.pt
[LOG] Saving tensor n3_to_4_94.pt
[LOG] Saving tensor global_feature_94.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 141
[LOG] Computing n4_to_4 (coadjacency) for num 141
[LOG] Computing n0_to_1 for num 141
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 11: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_2 for num 141
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n0_to_3 for num 141
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n0_to_4 for num 141
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_2 for num 141
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n1_to_3 for num 141
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n1_to_4 for num 141
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n2_to_3 for num 141
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n2_to_4 for num 141
[LOG] Computing n0_to_3 for num 530
[LOG] Computing n0_to_4 for num 530
[LOG] Computing n3_to_4 for num 141
[LOG] Global feature for num 141
[LOG] Global feature for num 141
[LOG] Saving tensor x_0_141.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor x_1_141.pt
[LOG] Saving tensor x_2_141.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Computing n1_to_2 for num 530
[LOG] Saving tensor x_3_141.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor x_4_141.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n0_to_0_141.pt
[LOG] Saving tensor n1_to_1_141.pt
[LOG] Saving tensor n2_to_2_141.pt
[LOG] Saving tensor n3_to_3_141.pt
[LOG] Saving tensor n4_to_4_141.pt
[LOG] Saving tensor n0_to_1_141.pt
[LOG] Saving tensor n0_to_2_141.pt
[LOG] Saving tensor n0_to_3_141.pt
[LOG] Saving tensor n0_to_4_141.pt
[LOG] Saving tensor n1_to_2_141.pt
[LOG] Saving tensor n1_to_3_141.pt
[LOG] Saving tensor n1_to_4_141.pt
[LOG] Saving tensor n2_to_3_141.pt
[LOG] Saving tensor n2_to_4_141.pt
[LOG] Saving tensor n3_to_4_141.pt
[LOG] Saving tensor global_feature_141.pt
[LOG] Process 17: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_3 for num 530
[LOG] Computing n1_to_4 for num 530
[LOG] Computing n2_to_3 for num 530
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_4 for num 530
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_4 for num 530
[LOG] Global feature for num 530
[LOG] Global feature for num 530
[LOG] Saving tensor x_0_530.pt
[LOG] Saving tensor x_1_530.pt
[LOG] Saving tensor x_2_530.pt
[LOG] Saving tensor x_3_530.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor x_4_530.pt
[LOG] Saving tensor n0_to_0_530.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n1_to_1_530.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n2_to_2_530.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n3_to_3_530.pt
[LOG] Saving tensor n4_to_4_530.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n0_to_1_530.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n0_to_2_530.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n0_to_3_530.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n0_to_4_530.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n1_to_2_530.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n1_to_3_530.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n1_to_4_530.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n2_to_3_530.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n2_to_4_530.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n3_to_4_530.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor global_feature_530.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Process 66: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 4 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2231 Tetrahedra.
    [LOG] Generated 67 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.686567164179104
    [LOG] Max number of nodes per cluster is 47 and the number is 47
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] We will select 844 edges and 2231 tetra
[LOG] Edges from tetra 0 and KDTree 844 with 0 edges in common.
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1057 Tetrahedra.
    [LOG] Generated 34 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.441176470588236
    [LOG] Max number of nodes per cluster is 36 and the number is 16
[LOG] We will select 202 edges and 1057 tetra
[LOG] Edges from tetra 0 and KDTree 284 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Removed 0 subset clusters.
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2060 Tetrahedra.
    [LOG] Generated 55 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.29090909090909
    [LOG] Max number of nodes per cluster is 52 and the number is 27
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 63: Created combinatorial complex for file data_510.hdf5
[LOG] We will select 165 edges and 2060 tetra
[LOG] Edges from tetra 0 and KDTree 1818 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 63: Calculating Neighbors
[LOG] Loading pickle file data_510.pickle
[LOG] Processing node features for num 510
[LOG] Processing edge features for num 510
[LOG] Processing tetra features for num 510
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 510
[LOG] Processing cluster features for num 510
[LOG] Processing adjacency and incidence matrices for num 510
[LOG] Computing n0_to_0 for num 510
[LOG] Process 18: Created combinatorial complex for file data_146.hdf5
[LOG] Computing n1_to_1 for num 510
[LOG] Computing n2_to_2 (adjacency) for num 510
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 510
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n4_to_4 (coadjacency) for num 510
[LOG] Computing n0_to_1 for num 510
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1228 Tetrahedra.
    [LOG] Generated 35 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.628571428571428
    [LOG] Max number of nodes per cluster is 63 and the number is 33
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_2 for num 510
[LOG] Process 18: Calculating Neighbors
[LOG] Loading pickle file data_146.pickle
[LOG] Processing node features for num 146
[LOG] Processing edge features for num 146
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] We will select 349 edges and 1228 tetra
[LOG] Edges from tetra 0 and KDTree 2178 with 0 edges in common.
[LOG] Processing tetra features for num 146
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing cluster features for num 146
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_3 for num 510
[LOG] Computing n0_to_4 for num 510
[LOG] Processing cluster features for num 146
[LOG] Computing n1_to_2 for num 510
[LOG] Processing adjacency and incidence matrices for num 146
[LOG] Computing n0_to_0 for num 146
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 6152 Tetrahedra.
    [LOG] Generated 165 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.860606060606061
    [LOG] Max number of nodes per cluster is 35 and the number is 136
[LOG] Computing n1_to_3 for num 510
[LOG] Computing n1_to_4 for num 510
[LOG] Computing n2_to_3 for num 510
[LOG] Computing n2_to_4 for num 510
[LOG] Computing n3_to_4 for num 510
[LOG] Global feature for num 510
[LOG] Global feature for num 510
[LOG] Saving tensor x_0_510.pt
[LOG] Saving tensor x_1_510.pt
[LOG] Saving tensor x_2_510.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor x_3_510.pt
[LOG] Computing n1_to_1 for num 146
[LOG] Saving tensor x_4_510.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n0_to_0_510.pt
[LOG] Saving tensor n1_to_1_510.pt
[LOG] Saving tensor n2_to_2_510.pt
[LOG] Saving tensor n3_to_3_510.pt
[LOG] Saving tensor n4_to_4_510.pt
[LOG] Saving tensor n0_to_1_510.pt
[LOG] Saving tensor n0_to_2_510.pt
[LOG] Saving tensor n0_to_3_510.pt
[LOG] Saving tensor n0_to_4_510.pt
[LOG] Saving tensor n1_to_2_510.pt
[LOG] Saving tensor n1_to_3_510.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 2 and 2
[LOG] We will select 1843 edges and 6152 tetra
[LOG] Edges from tetra 0 and KDTree 1843 with 0 edges in common.
[LOG] Process 77: Created combinatorial complex for file data_622.hdf5
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n1_to_4_510.pt
[LOG] Process 51: Created combinatorial complex for file data_411.hdf5
[LOG] Process 77: Calculating Neighbors
[LOG] Loading pickle file data_622.pickle
[LOG] Processing node features for num 622
[LOG] Processing edge features for num 622
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing tetra features for num 622
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n2_to_3_510.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 622
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing cluster features for num 622
[LOG] Processing adjacency and incidence matrices for num 622
[LOG] Computing n0_to_0 for num 622
[LOG] Computing n2_to_2 (adjacency) for num 146
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n2_to_4_510.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_1 for num 622
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n3_to_4_510.pt
[LOG] Process 51: Calculating Neighbors
[LOG] Loading pickle file data_411.pickle
[LOG] Processing node features for num 411
[LOG] Processing edge features for num 411
[LOG] Saving tensor global_feature_510.pt
[LOG] Processing tetra features for num 411
[LOG] Process 63: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_2 (adjacency) for num 622
[LOG] Processing cluster features for num 411
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing cluster features for num 411
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing adjacency and incidence matrices for num 411
[LOG] Computing n0_to_0 for num 411
[LOG] Computing n3_to_3 (adjacency) for num 622
[LOG] Computing n4_to_4 (coadjacency) for num 622
[LOG] Computing n0_to_1 for num 622
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_2 for num 622
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_1 for num 411
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_3 (adjacency) for num 146
[LOG] Computing n4_to_4 (coadjacency) for num 146
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_1 for num 146
[LOG] Computing n2_to_2 (adjacency) for num 411
[LOG] Calculating for cell ranks 3 and 4
[LOG] GENERATED TETRA
[LOG] Computing n0_to_2 for num 146
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_3 for num 622
[LOG] Computing n0_to_4 for num 622
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n1_to_2 for num 622
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n1_to_3 for num 622
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n1_to_4 for num 622
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Computing n2_to_3 for num 622
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n2_to_4 for num 622
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n3_to_4 for num 622
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Global feature for num 622
[LOG] Global feature for num 622
[LOG] Saving tensor x_0_622.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor x_1_622.pt
[LOG] Computing n3_to_3 (adjacency) for num 411
[LOG] Computing n4_to_4 (coadjacency) for num 411
[LOG] Computing n0_to_1 for num 411
[LOG] Computing n0_to_2 for num 411
[LOG] Saving tensor x_2_622.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor x_3_622.pt
[LOG] Saving tensor x_4_622.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n0_to_0_622.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n1_to_1_622.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n2_to_2_622.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n3_to_3_622.pt
[LOG] Saving tensor n4_to_4_622.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n0_to_1_622.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n0_to_2_622.pt
[LOG] Saving tensor n0_to_3_622.pt
[LOG] Saving tensor n0_to_4_622.pt
[LOG] Saving tensor n1_to_2_622.pt
[LOG] Saving tensor n1_to_3_622.pt
[LOG] Saving tensor n1_to_4_622.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1284 Tetrahedra.
    [LOG] Generated 45 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.733333333333333
    [LOG] Max number of nodes per cluster is 42 and the number is 31
[LOG] Saving tensor n2_to_3_622.pt
[LOG] Computing n0_to_3 for num 146
[LOG] Saving tensor n2_to_4_622.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n3_to_4_622.pt
[LOG] Saving tensor global_feature_622.pt
[LOG] Process 77: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_4 for num 146
[LOG] Computing n1_to_2 for num 146
[LOG] We will select 281 edges and 1284 tetra
[LOG] Edges from tetra 0 and KDTree 824 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_3 for num 411
[LOG] Process 56: Created combinatorial complex for file data_455.hdf5
[LOG] Computing n0_to_4 for num 411
[LOG] Computing n1_to_2 for num 411
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_3 for num 146
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_4 for num 146
[LOG] Process 56: Calculating Neighbors
[LOG] Loading pickle file data_455.pickle
[LOG] Processing node features for num 455
[LOG] Computing n2_to_3 for num 146
[LOG] Processing edge features for num 455
[LOG] Processing tetra features for num 455
[LOG] Computing n1_to_3 for num 411
[LOG] Computing n1_to_4 for num 411
[LOG] Computing n2_to_3 for num 411
[LOG] Computing n2_to_4 for num 146
[LOG] Processing cluster features for num 455
[LOG] Computing n2_to_4 for num 411
[LOG] Processing cluster features for num 455
[LOG] Computing n3_to_4 for num 146
[LOG] Global feature for num 146
[LOG] Global feature for num 146
[LOG] Saving tensor x_0_146.pt
[LOG] Saving tensor x_1_146.pt
[LOG] Saving tensor x_2_146.pt
[LOG] Processing adjacency and incidence matrices for num 455
[LOG] Computing n0_to_0 for num 455
[LOG] Saving tensor x_3_146.pt
[LOG] Saving tensor x_4_146.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n0_to_0_146.pt
[LOG] Saving tensor n1_to_1_146.pt
[LOG] Computing n3_to_4 for num 411
[LOG] Saving tensor n2_to_2_146.pt
[LOG] Global feature for num 411
[LOG] Global feature for num 411
[LOG] Saving tensor x_0_411.pt
[LOG] Saving tensor x_1_411.pt
[LOG] Saving tensor n3_to_3_146.pt
[LOG] Saving tensor x_2_411.pt
[LOG] Saving tensor n4_to_4_146.pt
[LOG] Saving tensor x_3_411.pt
[LOG] Saving tensor n0_to_1_146.pt
[LOG] Saving tensor x_4_411.pt
[LOG] Saving tensor n0_to_0_411.pt
[LOG] Saving tensor n0_to_2_146.pt
[LOG] Saving tensor n1_to_1_411.pt
[LOG] Saving tensor n0_to_3_146.pt
[LOG] Saving tensor n2_to_2_411.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_1 for num 455
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n0_to_4_146.pt
[LOG] Saving tensor n1_to_2_146.pt
[LOG] Saving tensor n3_to_3_411.pt
[LOG] Saving tensor n1_to_3_146.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n4_to_4_411.pt
[LOG] Saving tensor n1_to_4_146.pt
[LOG] Saving tensor n0_to_1_411.pt
[LOG] Computing n2_to_2 (adjacency) for num 455
[LOG] Saving tensor n0_to_2_411.pt
[LOG] Saving tensor n2_to_3_146.pt
[LOG] Saving tensor n2_to_4_146.pt
[LOG] Saving tensor n0_to_3_411.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n3_to_4_146.pt
[LOG] Saving tensor n0_to_4_411.pt
[LOG] Saving tensor global_feature_146.pt
[LOG] Process 18: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n1_to_2_411.pt
[LOG] Saving tensor n1_to_3_411.pt
[LOG] Saving tensor n1_to_4_411.pt
[LOG] Saving tensor n2_to_3_411.pt
[LOG] Saving tensor n2_to_4_411.pt
[LOG] Saving tensor n3_to_4_411.pt
[LOG] Computing n3_to_3 (adjacency) for num 455
[LOG] Saving tensor global_feature_411.pt
[LOG] Computing n4_to_4 (coadjacency) for num 455
[LOG] Process 51: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_1 for num 455
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_2 for num 455
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n0_to_3 for num 455
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n0_to_4 for num 455
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n1_to_2 for num 455
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_3 for num 455
[LOG] Computing n1_to_4 for num 455
[LOG] Computing n2_to_3 for num 455
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Computing n2_to_4 for num 455
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n3_to_4 for num 455
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Global feature for num 455
[LOG] Global feature for num 455
[LOG] Saving tensor x_0_455.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor x_1_455.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor x_2_455.pt
[LOG] Saving tensor x_3_455.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor x_4_455.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n0_to_0_455.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n1_to_1_455.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n2_to_2_455.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n3_to_3_455.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n4_to_4_455.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n0_to_1_455.pt
[LOG] Saving tensor n0_to_2_455.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n0_to_3_455.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n0_to_4_455.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n1_to_2_455.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n1_to_3_455.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n1_to_4_455.pt
[LOG] Saving tensor n2_to_3_455.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n2_to_4_455.pt
[LOG] Saving tensor n3_to_4_455.pt
[LOG] Saving tensor global_feature_455.pt
[LOG] Process 56: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_1_to_2.pt

    [LOG] We Currently have 1229 Tetrahedra.
    [LOG] Generated 40 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.2
    [LOG] Max number of nodes per cluster is 25 and the number is 2
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] We will select 139 edges and 1229 tetra
[LOG] Edges from tetra 0 and KDTree 262 with 0 edges in common.
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 68: Created combinatorial complex for file data_545.hdf5
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 3285 Tetrahedra.
    [LOG] Generated 103 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.475728155339805
    [LOG] Max number of nodes per cluster is 32 and the number is 96
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] We will select 604 edges and 3285 tetra
[LOG] Edges from tetra 0 and KDTree 604 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 103: Created combinatorial complex for file data_830.hdf5
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Process 68: Calculating Neighbors
[LOG] Loading pickle file data_545.pickle
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Processing node features for num 545
[LOG] Process 103: Calculating Neighbors
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Loading pickle file data_830.pickle
[LOG] Processing node features for num 830
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Processing edge features for num 830
[LOG] Processing edge features for num 545
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Processing tetra features for num 830
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Processing cluster features for num 830
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Processing cluster features for num 830
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Processing adjacency and incidence matrices for num 830
[LOG] Computing n0_to_0 for num 830
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n1_to_1 for num 830
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Processing tetra features for num 545
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 830
[LOG] Computing n3_to_3 (adjacency) for num 830
[LOG] Computing n4_to_4 (coadjacency) for num 830
[LOG] Computing n0_to_1 for num 830
[LOG] Computing n0_to_2 for num 830
[LOG] Processing cluster features for num 545
[LOG] Processing cluster features for num 545
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing adjacency and incidence matrices for num 545
[LOG] Computing n0_to_0 for num 545
[LOG] Computing n0_to_3 for num 830
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_4 for num 830
[LOG] Computing n1_to_2 for num 830
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_3 for num 830
[LOG] Computing n1_to_4 for num 830
[LOG] Computing n2_to_3 for num 830
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_4 for num 830
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n3_to_4 for num 830
[LOG] Global feature for num 830
[LOG] Global feature for num 830
[LOG] Saving tensor x_0_830.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor x_1_830.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor x_2_830.pt
[LOG] Saving tensor x_3_830.pt
[LOG] Saving tensor x_4_830.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n0_to_0_830.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n1_to_1_830.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n2_to_2_830.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n3_to_3_830.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n4_to_4_830.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n0_to_1_830.pt
[LOG] Saving tensor n0_to_2_830.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n0_to_3_830.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n0_to_4_830.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n1_to_2_830.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n1_to_3_830.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n1_to_4_830.pt
[LOG] Saving tensor n2_to_3_830.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n2_to_4_830.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n3_to_4_830.pt
[LOG] Saving tensor global_feature_830.pt
[LOG] Process 103: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_1 for num 545
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2797 Tetrahedra.
    [LOG] Generated 45 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 21.933333333333334
    [LOG] Max number of nodes per cluster is 110 and the number is 13
[LOG] Calculating for cell ranks 1 and 2
[LOG] We will select 484 edges and 2797 tetra
[LOG] Edges from tetra 0 and KDTree 9285 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 3
[LOG] GENERATED TETRA
[LOG] Process 22: Created combinatorial complex for file data_178.hdf5
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1559 Tetrahedra.
    [LOG] Generated 43 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.767441860465116
    [LOG] Max number of nodes per cluster is 28 and the number is 11
[LOG] Process 22: Calculating Neighbors
[LOG] Loading pickle file data_178.pickle
[LOG] Processing node features for num 178
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing edge features for num 178
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing tetra features for num 178
[LOG] We will select 142 edges and 1559 tetra
[LOG] Edges from tetra 0 and KDTree 142 with 0 edges in common.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing cluster features for num 178
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Processing cluster features for num 178
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 178
[LOG] Computing n0_to_0 for num 178
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_1 for num 178
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 80: Created combinatorial complex for file data_643.hdf5
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 178
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Process 80: Calculating Neighbors
[LOG] Loading pickle file data_643.pickle
[LOG] Processing node features for num 643
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Processing edge features for num 643
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Processing tetra features for num 643
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] GENERATED TETRA
[LOG] Processing cluster features for num 643
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing cluster features for num 643
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing adjacency and incidence matrices for num 643
[LOG] Computing n0_to_0 for num 643
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1353 Tetrahedra.
    [LOG] Generated 36 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.972222222222221
    [LOG] Max number of nodes per cluster is 37 and the number is 27
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] We will select 201 edges and 1353 tetra
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Edges from tetra 0 and KDTree 385 with 0 edges in common.
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 1 subset clusters.
[LOG] GENERATED TETRA
[LOG] Computing n1_to_1 for num 643
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_3 (adjacency) for num 178
[LOG] Computing n4_to_4 (coadjacency) for num 178
[LOG] Computing n0_to_1 for num 178
[LOG] Process 85: Created combinatorial complex for file data_684.hdf5
[LOG] Computing n0_to_2 for num 178
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 85: Calculating Neighbors
[LOG] Loading pickle file data_684.pickle
[LOG] Processing node features for num 684
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing edge features for num 684
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1618 Tetrahedra.
    [LOG] Generated 56 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.267857142857142
    [LOG] Max number of nodes per cluster is 30 and the number is 42
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing tetra features for num 684
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 0 subset clusters.
[LOG] Processing cluster features for num 684
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing cluster features for num 684
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing adjacency and incidence matrices for num 684
[LOG] Computing n0_to_0 for num 684
[LOG] Computing n1_to_1 for num 684
[LOG] We will select 456 edges and 1618 tetra
[LOG] Edges from tetra 0 and KDTree 1051 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n2_to_2 (adjacency) for num 643
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1261 Tetrahedra.
    [LOG] Generated 40 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.2
    [LOG] Max number of nodes per cluster is 56 and the number is 32
[LOG] Computing n2_to_2 (adjacency) for num 684
[LOG] Process 10: Created combinatorial complex for file data_87.hdf5
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] We will select 73 edges and 1261 tetra
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Edges from tetra 0 and KDTree 686 with 0 edges in common.
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n2_to_2 (adjacency) for num 545
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Process 10: Calculating Neighbors
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Loading pickle file data_87.pickle
[LOG] Processing node features for num 87
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Processing edge features for num 87
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n3_to_3 (adjacency) for num 684
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n4_to_4 (coadjacency) for num 684
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Processing tetra features for num 87
[LOG] Computing n0_to_1 for num 684
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n0_to_2 for num 684
[LOG] Processing cluster features for num 87
[LOG] Processing cluster features for num 87
[LOG] Processing adjacency and incidence matrices for num 87
[LOG] Computing n0_to_0 for num 87
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1861 Tetrahedra.
    [LOG] Generated 44 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 20.136363636363637
    [LOG] Max number of nodes per cluster is 122 and the number is 19
[LOG] Computing n1_to_1 for num 87
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 87
[LOG] Computing n0_to_3 for num 684
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n0_to_4 for num 684
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] We will select 214 edges and 1861 tetra
[LOG] Edges from tetra 0 and KDTree 4472 with 0 edges in common.
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n1_to_2 for num 684
[LOG] Computing n0_to_3 for num 178
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Computing n0_to_4 for num 178
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Computing n3_to_3 (adjacency) for num 87
[LOG] Computing n1_to_3 for num 684
[LOG] Computing n1_to_2 for num 178
[LOG] Computing n1_to_4 for num 684
[LOG] Computing n4_to_4 (coadjacency) for num 87
[LOG] Computing n2_to_3 for num 684
[LOG] Computing n0_to_1 for num 87
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2587 Tetrahedra.
    [LOG] Generated 75 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.893333333333333
    [LOG] Max number of nodes per cluster is 54 and the number is 70
[LOG] Removed 0 subset clusters.
[LOG] Computing n2_to_4 for num 684
[LOG] Computing n0_to_2 for num 87
[LOG] Computing n3_to_4 for num 684
[LOG] Global feature for num 684
[LOG] Global feature for num 684
[LOG] Saving tensor x_0_684.pt
[LOG] Saving tensor x_1_684.pt
[LOG] Saving tensor x_2_684.pt
[LOG] Saving tensor x_3_684.pt
[LOG] Saving tensor x_4_684.pt
[LOG] Saving tensor n0_to_0_684.pt
[LOG] Saving tensor n1_to_1_684.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n2_to_2_684.pt
[LOG] Saving tensor n3_to_3_684.pt
[LOG] Saving tensor n4_to_4_684.pt
[LOG] Saving tensor n0_to_1_684.pt
[LOG] Process 34: Created combinatorial complex for file data_279.hdf5
[LOG] Calculating for cell ranks 0 and 3
[LOG] We will select 501 edges and 2587 tetra
[LOG] Edges from tetra 0 and KDTree 1736 with 0 edges in common.
[LOG] Process 24: Created combinatorial complex for file data_196.hdf5
[LOG] Saving tensor n0_to_2_684.pt
[LOG] Saving tensor n0_to_3_684.pt
[LOG] Saving tensor n0_to_4_684.pt
[LOG] Saving tensor n1_to_2_684.pt
[LOG] Computing n3_to_3 (adjacency) for num 643
[LOG] Saving tensor n1_to_3_684.pt
[LOG] Computing n0_to_3 for num 87
[LOG] Saving tensor n1_to_4_684.pt
[LOG] Computing n4_to_4 (coadjacency) for num 643
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n2_to_3_684.pt
[LOG] Computing n0_to_1 for num 643
[LOG] Computing n0_to_4 for num 87
[LOG] Saving tensor n2_to_4_684.pt
[LOG] Saving tensor n3_to_4_684.pt
[LOG] Saving tensor global_feature_684.pt
[LOG] Process 85: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_2 for num 87
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_3 for num 87
[LOG] Computing n1_to_4 for num 87
[LOG] Computing n2_to_3 for num 87
[LOG] Computing n2_to_4 for num 87
[LOG] Computing n3_to_4 for num 87
[LOG] Global feature for num 87
[LOG] Global feature for num 87
[LOG] Saving tensor x_0_87.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_2 for num 643
[LOG] Removed 0 subset clusters.
[LOG] Computing n1_to_3 for num 178
[LOG] Saving tensor x_1_87.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 34: Calculating Neighbors
[LOG] Loading pickle file data_279.pickle
[LOG] Processing node features for num 279
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing edge features for num 279
[LOG] Computing n1_to_4 for num 178
[LOG] Saving tensor x_2_87.pt
[LOG] Saving tensor x_3_87.pt
[LOG] Computing n2_to_3 for num 178
[LOG] Saving tensor x_4_87.pt
[LOG] Saving tensor n0_to_0_87.pt
[LOG] Processing tetra features for num 279
[LOG] Saving tensor n1_to_1_87.pt
[LOG] Saving tensor n2_to_2_87.pt
[LOG] Saving tensor n3_to_3_87.pt
[LOG] Saving tensor n4_to_4_87.pt
[LOG] Saving tensor n0_to_1_87.pt
[LOG] Saving tensor n0_to_2_87.pt
[LOG] Saving tensor n0_to_3_87.pt
[LOG] Saving tensor n0_to_4_87.pt
[LOG] Processing cluster features for num 279
[LOG] Saving tensor n1_to_2_87.pt
[LOG] Saving tensor n1_to_3_87.pt
[LOG] Saving tensor n1_to_4_87.pt
[LOG] Saving tensor n2_to_3_87.pt
[LOG] Processing cluster features for num 279
[LOG] Saving tensor n2_to_4_87.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n3_to_4_87.pt
[LOG] Saving tensor global_feature_87.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 10: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing adjacency and incidence matrices for num 279
[LOG] Computing n0_to_0 for num 279
[LOG] Computing n1_to_1 for num 279
[LOG] Computing n2_to_4 for num 178
[LOG] Process 65: Created combinatorial complex for file data_527.hdf5
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 24: Calculating Neighbors
[LOG] Loading pickle file data_196.pickle
[LOG] Processing node features for num 196
[LOG] Computing n2_to_2 (adjacency) for num 279
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing edge features for num 196
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 619 Tetrahedra.
    [LOG] Generated 16 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.75
    [LOG] Max number of nodes per cluster is 47 and the number is 7
[LOG] Processing tetra features for num 196
[LOG] Calculating for cell ranks 1 and 3
[LOG] We will select 116 edges and 619 tetra
[LOG] Edges from tetra 0 and KDTree 116 with 0 edges in common.
[LOG] Computing n3_to_3 (adjacency) for num 279
[LOG] Computing n4_to_4 (coadjacency) for num 279
[LOG] Computing n0_to_1 for num 279
[LOG] Computing n0_to_2 for num 279
[LOG] Processing cluster features for num 196
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 65: Calculating Neighbors
[LOG] Loading pickle file data_527.pickle
[LOG] Processing node features for num 527
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing edge features for num 527
[LOG] Processing cluster features for num 196
[LOG] Processing adjacency and incidence matrices for num 196
[LOG] Computing n0_to_0 for num 196
[LOG] Processing tetra features for num 527
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing cluster features for num 527
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 527
[LOG] Processing adjacency and incidence matrices for num 527
[LOG] Computing n0_to_0 for num 527
[LOG] Computing n1_to_1 for num 196
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n1_to_1 for num 527
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n0_to_3 for num 279
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Process 54: Created combinatorial complex for file data_439.hdf5
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n0_to_4 for num 279
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n1_to_2 for num 279
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Process 54: Calculating Neighbors
[LOG] Loading pickle file data_439.pickle
[LOG] Processing node features for num 439
[LOG] Processing edge features for num 439
[LOG] Process 45: Created combinatorial complex for file data_365.hdf5
[LOG] Processing tetra features for num 439
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n1_to_3 for num 279
[LOG] Computing n1_to_4 for num 279
[LOG] Computing n2_to_3 for num 279
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 196
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Processing cluster features for num 439
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Processing cluster features for num 439
[LOG] Computing n2_to_4 for num 279
[LOG] Processing adjacency and incidence matrices for num 439
[LOG] Computing n0_to_0 for num 439
[LOG] Computing n2_to_2 (adjacency) for num 527
[LOG] Computing n1_to_1 for num 439
[LOG] Computing n3_to_4 for num 279
[LOG] Global feature for num 279
[LOG] Global feature for num 279
[LOG] Saving tensor x_0_279.pt
[LOG] Computing n2_to_2 (adjacency) for num 439
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_3 (adjacency) for num 439
[LOG] Computing n4_to_4 (coadjacency) for num 439
[LOG] Computing n0_to_1 for num 439
[LOG] GENERATED TETRA
[LOG] Computing n0_to_2 for num 439
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n3_to_3 (adjacency) for num 196
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n4_to_4 (coadjacency) for num 196
[LOG] Saving tensor x_1_279.pt
[LOG] Computing n0_to_1 for num 196
[LOG] Saving tensor x_2_279.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor x_3_279.pt
[LOG] Computing n0_to_3 for num 439
[LOG] Saving tensor x_4_279.pt
[LOG] Saving tensor n0_to_0_279.pt
[LOG] Computing n0_to_4 for num 439
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Computing n1_to_2 for num 439
[LOG] Saving tensor n1_to_1_279.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n2_to_2_279.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n3_to_3_279.pt
[LOG] Saving tensor n4_to_4_279.pt
[LOG] Computing n1_to_3 for num 439
[LOG] Saving tensor n0_to_1_279.pt
[LOG] Computing n1_to_4 for num 439
[LOG] Saving tensor n0_to_2_279.pt
[LOG] Computing n2_to_3 for num 439
[LOG] Saving tensor n0_to_3_279.pt
[LOG] Computing n2_to_4 for num 439
[LOG] Saving tensor n0_to_4_279.pt
[LOG] Saving tensor n1_to_2_279.pt
[LOG] Computing n3_to_4 for num 439
[LOG] Global feature for num 439
[LOG] Saving tensor n1_to_3_279.pt
[LOG] Global feature for num 439
[LOG] Saving tensor x_0_439.pt
[LOG] Saving tensor n1_to_4_279.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor x_1_439.pt
[LOG] Saving tensor n2_to_3_279.pt
[LOG] Saving tensor n2_to_4_279.pt
[LOG] Computing n3_to_4 for num 178
[LOG] Saving tensor n3_to_4_279.pt
[LOG] Saving tensor global_feature_279.pt
[LOG] Global feature for num 178
[LOG] Global feature for num 178
[LOG] Saving tensor x_0_178.pt
[LOG] Saving tensor x_2_439.pt
[LOG] Process 34: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor x_1_178.pt
[LOG] Saving tensor x_3_439.pt
[LOG] Saving tensor x_2_178.pt
[LOG] Saving tensor x_4_439.pt
[LOG] Saving tensor n0_to_0_439.pt
[LOG] Saving tensor x_3_178.pt
[LOG] Saving tensor x_4_178.pt
[LOG] Saving tensor n1_to_1_439.pt
[LOG] Saving tensor n0_to_0_178.pt
[LOG] Saving tensor n2_to_2_439.pt
[LOG] Saving tensor n1_to_1_178.pt
[LOG] Computing n0_to_2 for num 196
[LOG] Saving tensor n3_to_3_439.pt
[LOG] Saving tensor n2_to_2_178.pt
[LOG] Saving tensor n4_to_4_439.pt
[LOG] Saving tensor n0_to_1_439.pt
[LOG] Saving tensor n0_to_2_439.pt
[LOG] Saving tensor n3_to_3_178.pt
[LOG] Saving tensor n0_to_3_439.pt
[LOG] Saving tensor n4_to_4_178.pt
[LOG] Saving tensor n0_to_4_439.pt
[LOG] Saving tensor n0_to_1_178.pt
[LOG] Saving tensor n1_to_2_439.pt
[LOG] Saving tensor n1_to_3_439.pt
[LOG] Saving tensor n0_to_2_178.pt
[LOG] Saving tensor n1_to_4_439.pt
[LOG] Saving tensor n0_to_3_178.pt
[LOG] Saving tensor n2_to_3_439.pt
[LOG] Computing n3_to_3 (adjacency) for num 527
[LOG] Saving tensor n0_to_4_178.pt
[LOG] Saving tensor n2_to_4_439.pt
[LOG] Computing n4_to_4 (coadjacency) for num 527
[LOG] Saving tensor n3_to_4_439.pt
[LOG] Saving tensor n1_to_2_178.pt
[LOG] Saving tensor global_feature_439.pt
[LOG] Computing n0_to_1 for num 527
[LOG] Saving tensor n1_to_3_178.pt
[LOG] Process 54: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n1_to_4_178.pt
[LOG] Saving tensor n2_to_3_178.pt
[LOG] Saving tensor n2_to_4_178.pt
[LOG] Saving tensor n3_to_4_178.pt
[LOG] Saving tensor global_feature_178.pt
[LOG] Process 22: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_2 for num 527
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1631 Tetrahedra.
    [LOG] Generated 53 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.49056603773585
    [LOG] Max number of nodes per cluster is 25 and the number is 5
[LOG] Calculating for cell ranks 0 and 2
[LOG] We will select 272 edges and 1631 tetra
[LOG] Edges from tetra 0 and KDTree 500 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_3 for num 196
[LOG] Computing n0_to_4 for num 196
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_2 for num 196
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_3 for num 643
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 45: Calculating Neighbors
[LOG] Loading pickle file data_365.pickle
[LOG] Processing node features for num 365
[LOG] Processing edge features for num 365
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_4 for num 643
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing tetra features for num 365
[LOG] Computing n1_to_2 for num 643
[LOG] Processing cluster features for num 365
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Processing cluster features for num 365
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Processing adjacency and incidence matrices for num 365
[LOG] Computing n0_to_0 for num 365
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n1_to_3 for num 196
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n1_to_4 for num 196
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n2_to_3 for num 196
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n2_to_4 for num 196
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n3_to_4 for num 196
[LOG] Global feature for num 196
[LOG] Global feature for num 196
[LOG] Saving tensor x_0_196.pt
[LOG] Computing n1_to_1 for num 365
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor x_1_196.pt
[LOG] Saving tensor x_2_196.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor x_3_196.pt
[LOG] Computing n3_to_3 (adjacency) for num 545
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor x_4_196.pt
[LOG] Saving tensor n0_to_0_196.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n4_to_4 (coadjacency) for num 545
[LOG] Saving tensor n1_to_1_196.pt
[LOG] Computing n0_to_3 for num 527
[LOG] Saving tensor n2_to_2_196.pt
[LOG] Computing n0_to_1 for num 545
[LOG] Saving tensor n3_to_3_196.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor n4_to_4_196.pt
[LOG] Saving tensor n0_to_1_196.pt
[LOG] Saving tensor n0_to_2_196.pt
[LOG] Saving tensor n0_to_3_196.pt
[LOG] Computing n0_to_4 for num 527
[LOG] Saving tensor n0_to_4_196.pt
[LOG] Saving tensor n1_to_2_196.pt
[LOG] Saving tensor n1_to_3_196.pt
[LOG] Saving tensor n1_to_4_196.pt
[LOG] Saving tensor n2_to_3_196.pt
[LOG] Saving tensor n2_to_4_196.pt
[LOG] Saving tensor n3_to_4_196.pt
[LOG] Saving tensor global_feature_196.pt
[LOG] Computing n1_to_2 for num 527
[LOG] Computing n1_to_3 for num 643
[LOG] Process 24: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_4 for num 643
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_3 for num 643
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_4 for num 643
[LOG] Process 25: Created combinatorial complex for file data_205.hdf5
[LOG] Computing n1_to_3 for num 527
[LOG] Computing n1_to_4 for num 527
[LOG] Computing n3_to_4 for num 643
[LOG] Computing n2_to_3 for num 527
[LOG] Global feature for num 643
[LOG] Global feature for num 643
[LOG] Saving tensor x_0_643.pt
[LOG] Saving tensor x_1_643.pt
[LOG] Saving tensor x_2_643.pt
[LOG] Saving tensor x_3_643.pt
[LOG] Saving tensor x_4_643.pt
[LOG] Saving tensor n0_to_0_643.pt
[LOG] Saving tensor n1_to_1_643.pt
[LOG] Computing n2_to_4 for num 527
[LOG] Saving tensor n2_to_2_643.pt
[LOG] Computing n3_to_4 for num 527
[LOG] Global feature for num 527
[LOG] Global feature for num 527
[LOG] Saving tensor x_0_527.pt
[LOG] Saving tensor x_1_527.pt
[LOG] Saving tensor x_2_527.pt
[LOG] Computing n2_to_2 (adjacency) for num 365
[LOG] Saving tensor x_3_527.pt
[LOG] Process 25: Calculating Neighbors
[LOG] Loading pickle file data_205.pickle
[LOG] Processing node features for num 205
[LOG] Processing edge features for num 205
[LOG] Saving tensor n3_to_3_643.pt
[LOG] Saving tensor n4_to_4_643.pt
[LOG] Saving tensor x_4_527.pt
[LOG] Saving tensor n0_to_0_527.pt
[LOG] Saving tensor n0_to_1_643.pt
[LOG] Saving tensor n1_to_1_527.pt
[LOG] Saving tensor n2_to_2_527.pt
[LOG] Saving tensor n0_to_2_643.pt
[LOG] Processing tetra features for num 205
[LOG] Saving tensor n0_to_3_643.pt
[LOG] Saving tensor n0_to_4_643.pt
[LOG] Saving tensor n3_to_3_527.pt
[LOG] Saving tensor n4_to_4_527.pt
[LOG] Saving tensor n1_to_2_643.pt
[LOG] Saving tensor n0_to_1_527.pt
[LOG] Saving tensor n1_to_3_643.pt
[LOG] Saving tensor n0_to_2_527.pt
[LOG] Saving tensor n1_to_4_643.pt
[LOG] Saving tensor n0_to_3_527.pt
[LOG] Saving tensor n2_to_3_643.pt
[LOG] Saving tensor n0_to_4_527.pt
[LOG] Saving tensor n2_to_4_643.pt
[LOG] Processing cluster features for num 205
[LOG] Saving tensor n1_to_2_527.pt
[LOG] Saving tensor n3_to_4_643.pt
[LOG] Saving tensor global_feature_643.pt
[LOG] Saving tensor n1_to_3_527.pt
[LOG] Process 80: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n1_to_4_527.pt
[LOG] Saving tensor n2_to_3_527.pt
[LOG] Processing cluster features for num 205
[LOG] Saving tensor n2_to_4_527.pt
[LOG] Saving tensor n3_to_4_527.pt
[LOG] Saving tensor global_feature_527.pt
[LOG] Process 65: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing adjacency and incidence matrices for num 205
[LOG] Computing n0_to_0 for num 205
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_1 for num 205
[LOG] Computing n0_to_2 for num 545
[LOG] GENERATED TETRA
[LOG] Computing n2_to_2 (adjacency) for num 205
[LOG] Computing n3_to_3 (adjacency) for num 365
[LOG] Computing n4_to_4 (coadjacency) for num 365
[LOG] Computing n0_to_1 for num 365
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_3 (adjacency) for num 205
[LOG] Computing n4_to_4 (coadjacency) for num 205
[LOG] Computing n0_to_1 for num 205
[LOG] Computing n0_to_2 for num 205
[LOG] Computing n0_to_2 for num 365
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1606 Tetrahedra.
    [LOG] Generated 38 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.842105263157896
    [LOG] Max number of nodes per cluster is 42 and the number is 23
[LOG] Computing n0_to_3 for num 205
[LOG] Computing n0_to_4 for num 205
[LOG] Calculating for cell ranks 1 and 1
[LOG] We will select 497 edges and 1606 tetra
[LOG] Edges from tetra 0 and KDTree 497 with 0 edges in common.
[LOG] Computing n1_to_2 for num 205
[LOG] Calculating for cell ranks 2 and 3
[LOG] GENERATED TETRA
[LOG] Computing n1_to_3 for num 205
[LOG] Computing n1_to_4 for num 205
[LOG] Computing n2_to_3 for num 205
[LOG] Computing n2_to_4 for num 205
[LOG] Computing n3_to_4 for num 205
[LOG] Global feature for num 205
[LOG] Global feature for num 205
[LOG] Saving tensor x_0_205.pt
[LOG] Saving tensor x_1_205.pt
[LOG] Saving tensor x_2_205.pt
[LOG] Saving tensor x_3_205.pt
[LOG] Saving tensor x_4_205.pt
[LOG] Saving tensor n0_to_0_205.pt
[LOG] Saving tensor n1_to_1_205.pt
[LOG] Saving tensor n2_to_2_205.pt
[LOG] Saving tensor n3_to_3_205.pt
[LOG] Saving tensor n4_to_4_205.pt
[LOG] Saving tensor n0_to_1_205.pt
[LOG] Saving tensor n0_to_2_205.pt
[LOG] Saving tensor n0_to_3_205.pt
[LOG] Saving tensor n0_to_4_205.pt
[LOG] Saving tensor n1_to_2_205.pt
[LOG] Saving tensor n1_to_3_205.pt
[LOG] Saving tensor n1_to_4_205.pt
[LOG] Saving tensor n2_to_3_205.pt
[LOG] Saving tensor n2_to_4_205.pt
[LOG] Saving tensor n3_to_4_205.pt
[LOG] Saving tensor global_feature_205.pt
[LOG] Process 25: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_3 for num 365
[LOG] Computing n0_to_4 for num 365
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 71: Created combinatorial complex for file data_571.hdf5
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_2 for num 365
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 71: Calculating Neighbors
[LOG] Loading pickle file data_571.pickle
[LOG] Processing node features for num 571
[LOG] Processing edge features for num 571
[LOG] Processing tetra features for num 571
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing cluster features for num 571
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing cluster features for num 571
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing adjacency and incidence matrices for num 571
[LOG] Computing n0_to_0 for num 571
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_1 for num 571
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_3 for num 365
[LOG] Computing n1_to_4 for num 365
[LOG] Computing n2_to_3 for num 365
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_4 for num 365
[LOG] Computing n2_to_2 (adjacency) for num 571
[LOG] Computing n3_to_4 for num 365
[LOG] Global feature for num 365
[LOG] Global feature for num 365
[LOG] Saving tensor x_0_365.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor x_1_365.pt
[LOG] Saving tensor x_2_365.pt
[LOG] Saving tensor x_3_365.pt
[LOG] Saving tensor x_4_365.pt
[LOG] Saving tensor n0_to_0_365.pt
[LOG] Saving tensor n1_to_1_365.pt
[LOG] Saving tensor n2_to_2_365.pt
[LOG] Saving tensor n3_to_3_365.pt
[LOG] Saving tensor n4_to_4_365.pt
[LOG] Saving tensor n0_to_1_365.pt
[LOG] Saving tensor n0_to_2_365.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n0_to_3_365.pt
[LOG] Saving tensor n0_to_4_365.pt
[LOG] Saving tensor n1_to_2_365.pt
[LOG] Saving tensor n1_to_3_365.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n1_to_4_365.pt
[LOG] Saving tensor n2_to_3_365.pt
[LOG] Saving tensor n2_to_4_365.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n3_to_4_365.pt
[LOG] Saving tensor global_feature_365.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 45: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_3 (adjacency) for num 571
[LOG] Computing n4_to_4 (coadjacency) for num 571
[LOG] Computing n0_to_1 for num 571
[LOG] Computing n0_to_3 for num 545
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_2 for num 571
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_4 for num 545
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_2 for num 545
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n0_to_3 for num 571
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n0_to_4 for num 571
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n1_to_2 for num 571
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 4140 Tetrahedra.
    [LOG] Generated 108 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.842592592592593
    [LOG] Max number of nodes per cluster is 55 and the number is 32
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_3 for num 571
[LOG] Computing n1_to_4 for num 571
[LOG] Computing n2_to_3 for num 571
[LOG] Computing n2_to_4 for num 571
[LOG] Computing n3_to_4 for num 571
[LOG] Global feature for num 571
[LOG] Global feature for num 571
[LOG] Saving tensor x_0_571.pt
[LOG] Saving tensor x_1_571.pt
[LOG] Saving tensor x_2_571.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] We will select 971 edges and 4140 tetra
[LOG] Edges from tetra 0 and KDTree 971 with 0 edges in common.
[LOG] Saving tensor x_3_571.pt
[LOG] Saving tensor x_4_571.pt
[LOG] Saving tensor n0_to_0_571.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n1_to_1_571.pt
[LOG] Saving tensor n2_to_2_571.pt
[LOG] Saving tensor n3_to_3_571.pt
[LOG] Saving tensor n4_to_4_571.pt
[LOG] Saving tensor n0_to_1_571.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n0_to_2_571.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n0_to_3_571.pt
[LOG] Saving tensor n0_to_4_571.pt
[LOG] Saving tensor n1_to_2_571.pt
[LOG] Saving tensor n1_to_3_571.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n1_to_4_571.pt
[LOG] Saving tensor n2_to_3_571.pt
[LOG] Saving tensor n2_to_4_571.pt
[LOG] Saving tensor n3_to_4_571.pt
[LOG] Saving tensor global_feature_571.pt
[LOG] Process 71: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2253 Tetrahedra.
    [LOG] Generated 60 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.416666666666668
    [LOG] Max number of nodes per cluster is 48 and the number is 26
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] We will select 221 edges and 2253 tetra
[LOG] Edges from tetra 0 and KDTree 1835 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Process 111: Created combinatorial complex for file data_885.hdf5
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Process 111: Calculating Neighbors
[LOG] Loading pickle file data_885.pickle
[LOG] Processing node features for num 885
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Processing edge features for num 885
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing tetra features for num 885
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Processing cluster features for num 885
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing cluster features for num 885
[LOG] Processing adjacency and incidence matrices for num 885
[LOG] Computing n0_to_0 for num 885
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_1 for num 885
[LOG] Computing n2_to_2 (adjacency) for num 885
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_3 for num 545
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n3_to_3 (adjacency) for num 885
[LOG] Computing n4_to_4 (coadjacency) for num 885
[LOG] Computing n0_to_1 for num 885
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n1_to_4 for num 545
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Process 81: Created combinatorial complex for file data_650.hdf5
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n0_to_2 for num 885
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_3 for num 545
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 81: Calculating Neighbors
[LOG] Loading pickle file data_650.pickle
[LOG] Processing node features for num 650
[LOG] Processing edge features for num 650
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n2_to_4 for num 545
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Processing tetra features for num 650
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Processing cluster features for num 650
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Processing cluster features for num 650
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 650
[LOG] Computing n0_to_0 for num 650
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n3_to_4 for num 545
[LOG] Global feature for num 545
[LOG] Global feature for num 545
[LOG] Saving tensor x_0_545.pt
[LOG] Saving tensor x_1_545.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor x_2_545.pt
[LOG] Saving tensor x_3_545.pt
[LOG] Saving tensor x_4_545.pt
[LOG] Saving tensor n0_to_0_545.pt
[LOG] Saving tensor n1_to_1_545.pt
[LOG] Saving tensor n2_to_2_545.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n3_to_3_545.pt
[LOG] Saving tensor n4_to_4_545.pt
[LOG] Saving tensor n0_to_1_545.pt
[LOG] Saving tensor n0_to_2_545.pt
[LOG] Saving tensor n0_to_3_545.pt
[LOG] Saving tensor n0_to_4_545.pt
[LOG] Saving tensor n1_to_2_545.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n1_to_3_545.pt
[LOG] Saving tensor n1_to_4_545.pt
[LOG] Saving tensor n2_to_3_545.pt
[LOG] Saving tensor n2_to_4_545.pt
[LOG] Saving tensor n3_to_4_545.pt
[LOG] Saving tensor global_feature_545.pt
[LOG] Process 68: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_1 for num 650
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_3 for num 885
[LOG] Computing n0_to_4 for num 885
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n1_to_2 for num 885
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_3 for num 885
[LOG] Computing n1_to_4 for num 885
[LOG] Computing n2_to_3 for num 885
[LOG] Computing n2_to_4 for num 885
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n3_to_4 for num 885
[LOG] Global feature for num 885
[LOG] Global feature for num 885
[LOG] Saving tensor x_0_885.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor x_1_885.pt
[LOG] Saving tensor x_2_885.pt
[LOG] Saving tensor x_3_885.pt
[LOG] Saving tensor x_4_885.pt
[LOG] Saving tensor n0_to_0_885.pt
[LOG] Saving tensor n1_to_1_885.pt
[LOG] Saving tensor n2_to_2_885.pt
[LOG] Saving tensor n3_to_3_885.pt
[LOG] Saving tensor n4_to_4_885.pt
[LOG] Saving tensor n0_to_1_885.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n0_to_2_885.pt
[LOG] Saving tensor n0_to_3_885.pt
[LOG] Saving tensor n0_to_4_885.pt
[LOG] Saving tensor n1_to_2_885.pt
[LOG] Saving tensor n1_to_3_885.pt
[LOG] Saving tensor n1_to_4_885.pt
[LOG] Saving tensor n2_to_3_885.pt
[LOG] Saving tensor n2_to_4_885.pt
[LOG] Saving tensor n3_to_4_885.pt
[LOG] Saving tensor global_feature_885.pt
[LOG] Process 111: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1401 Tetrahedra.
    [LOG] Generated 46 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.76086956521739
    [LOG] Max number of nodes per cluster is 116 and the number is 7
[LOG] Computing n2_to_2 (adjacency) for num 650
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1082 Tetrahedra.
    [LOG] Generated 38 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.31578947368421
    [LOG] Max number of nodes per cluster is 41 and the number is 20
[LOG] We will select 202 edges and 1401 tetra
[LOG] Edges from tetra 0 and KDTree 4260 with 0 edges in common.
[LOG] We will select 249 edges and 1082 tetra
[LOG] Edges from tetra 0 and KDTree 249 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 3 subset clusters.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 0 subset clusters.
[LOG] Process 93: Created combinatorial complex for file data_749.hdf5
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 26: Created combinatorial complex for file data_215.hdf5
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 93: Calculating Neighbors
[LOG] Loading pickle file data_749.pickle
[LOG] Processing node features for num 749
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing edge features for num 749
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing tetra features for num 749
[LOG] Processing cluster features for num 749
[LOG] Processing cluster features for num 749
[LOG] Processing adjacency and incidence matrices for num 749
[LOG] Computing n0_to_0 for num 749
[LOG] Process 26: Calculating Neighbors
[LOG] Loading pickle file data_215.pickle
[LOG] Processing node features for num 215
[LOG] Computing n1_to_1 for num 749
[LOG] Processing edge features for num 215
[LOG] Calculating for cell ranks 1 and 4
[LOG] GENERATED TETRA
[LOG] Processing tetra features for num 215
[LOG] Computing n2_to_2 (adjacency) for num 749
[LOG] Processing cluster features for num 215
[LOG] Processing cluster features for num 215
[LOG] Computing n3_to_3 (adjacency) for num 749
[LOG] Computing n4_to_4 (coadjacency) for num 749
[LOG] Processing adjacency and incidence matrices for num 215
[LOG] Computing n0_to_0 for num 215
[LOG] Computing n0_to_1 for num 749
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2159 Tetrahedra.
    [LOG] Generated 70 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.028571428571428
    [LOG] Max number of nodes per cluster is 63 and the number is 68
[LOG] Computing n0_to_2 for num 749
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1557 Tetrahedra.
    [LOG] Generated 45 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.177777777777777
    [LOG] Max number of nodes per cluster is 31 and the number is 37
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_1 for num 215
[LOG] We will select 471 edges and 2159 tetra
[LOG] Edges from tetra 0 and KDTree 2321 with 0 edges in common.
[LOG] Computing n0_to_3 for num 749
[LOG] Computing n0_to_4 for num 749
[LOG] Computing n1_to_2 for num 749
[LOG] We will select 241 edges and 1557 tetra
[LOG] Edges from tetra 0 and KDTree 281 with 0 edges in common.
[LOG] Computing n3_to_3 (adjacency) for num 650
[LOG] Computing n4_to_4 (coadjacency) for num 650
[LOG] Computing n2_to_2 (adjacency) for num 215
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_1 for num 650
[LOG] Computing n1_to_3 for num 749
[LOG] Computing n1_to_4 for num 749
[LOG] Computing n2_to_3 for num 749
[LOG] Computing n2_to_4 for num 749
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n3_to_4 for num 749
[LOG] Global feature for num 749
[LOG] Global feature for num 749
[LOG] Saving tensor x_0_749.pt
[LOG] Saving tensor x_1_749.pt
[LOG] Saving tensor x_2_749.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor x_3_749.pt
[LOG] Saving tensor x_4_749.pt
[LOG] Saving tensor n0_to_0_749.pt
[LOG] Saving tensor n1_to_1_749.pt
[LOG] Saving tensor n2_to_2_749.pt
[LOG] Saving tensor n3_to_3_749.pt
[LOG] Saving tensor n4_to_4_749.pt
[LOG] Saving tensor n0_to_1_749.pt
[LOG] Saving tensor n0_to_2_749.pt
[LOG] Saving tensor n0_to_3_749.pt
[LOG] Saving tensor n0_to_4_749.pt
[LOG] Saving tensor n1_to_2_749.pt
[LOG] Saving tensor n1_to_3_749.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_3 (adjacency) for num 215
[LOG] Saving tensor n1_to_4_749.pt
[LOG] Saving tensor n2_to_3_749.pt
[LOG] Computing n4_to_4 (coadjacency) for num 215
[LOG] Saving tensor n2_to_4_749.pt
[LOG] Computing n0_to_1 for num 215
[LOG] Saving tensor n3_to_4_749.pt
[LOG] Saving tensor global_feature_749.pt
[LOG] Process 93: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_2 for num 650
[LOG] GENERATED TETRA
[LOG] Computing n0_to_2 for num 215
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1009 Tetrahedra.
    [LOG] Generated 41 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 10.512195121951219
    [LOG] Max number of nodes per cluster is 18 and the number is 9
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 83: Created combinatorial complex for file data_668.hdf5
[LOG] GENERATED TETRA
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1966 Tetrahedra.
    [LOG] Generated 59 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.338983050847459
    [LOG] Max number of nodes per cluster is 36 and the number is 5
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_3 for num 215
[LOG] Computing n0_to_4 for num 215
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1353 Tetrahedra.
    [LOG] Generated 44 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.295454545454545
    [LOG] Max number of nodes per cluster is 77 and the number is 1
[LOG] Computing n1_to_2 for num 215
[LOG] We will select 297 edges and 1966 tetra
[LOG] Edges from tetra 0 and KDTree 341 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 3
[LOG] We will select 171 edges and 1353 tetra
[LOG] Edges from tetra 0 and KDTree 1652 with 0 edges in common.
[LOG] Computing n1_to_3 for num 215
[LOG] Computing n1_to_4 for num 215
[LOG] Computing n2_to_3 for num 215
[LOG] We will select 183 edges and 1009 tetra
[LOG] Edges from tetra 0 and KDTree 469 with 0 edges in common.
[LOG] Computing n2_to_4 for num 215
[LOG] Computing n3_to_4 for num 215
[LOG] Global feature for num 215
[LOG] Global feature for num 215
[LOG] Saving tensor x_0_215.pt
[LOG] Saving tensor x_1_215.pt
[LOG] Saving tensor x_2_215.pt
[LOG] Saving tensor x_3_215.pt
[LOG] Saving tensor x_4_215.pt
[LOG] Saving tensor n0_to_0_215.pt
[LOG] Saving tensor n1_to_1_215.pt
[LOG] Saving tensor n2_to_2_215.pt
[LOG] Saving tensor n3_to_3_215.pt
[LOG] Saving tensor n4_to_4_215.pt
[LOG] Computing n0_to_3 for num 650
[LOG] Saving tensor n0_to_1_215.pt
[LOG] Saving tensor n0_to_2_215.pt
[LOG] Saving tensor n0_to_3_215.pt
[LOG] Saving tensor n0_to_4_215.pt
[LOG] Saving tensor n1_to_2_215.pt
[LOG] Saving tensor n1_to_3_215.pt
[LOG] Saving tensor n1_to_4_215.pt
[LOG] Saving tensor n2_to_3_215.pt
[LOG] Saving tensor n2_to_4_215.pt
[LOG] Computing n0_to_4 for num 650
[LOG] Saving tensor n3_to_4_215.pt
[LOG] Computing n1_to_2 for num 650
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor global_feature_215.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 26: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 1 subset clusters.
[LOG] Process 125: Created combinatorial complex for file data_982.hdf5
[LOG] Process 73: Created combinatorial complex for file data_590.hdf5
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 92: Created combinatorial complex for file data_743.hdf5
[LOG] Process 125: Calculating Neighbors
[LOG] Loading pickle file data_982.pickle
[LOG] Processing node features for num 982
[LOG] Processing edge features for num 982
[LOG] Processing tetra features for num 982
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 73: Calculating Neighbors
[LOG] Loading pickle file data_590.pickle
[LOG] Processing node features for num 590
[LOG] Removed 0 subset clusters.
[LOG] Processing edge features for num 590
[LOG] Process 83: Calculating Neighbors
[LOG] Loading pickle file data_668.pickle
[LOG] Processing node features for num 668
[LOG] Processing cluster features for num 982
[LOG] Processing edge features for num 668
[LOG] Processing tetra features for num 590
[LOG] Process 92: Calculating Neighbors
[LOG] Loading pickle file data_743.pickle
[LOG] Processing node features for num 743
[LOG] Processing edge features for num 743
[LOG] Processing cluster features for num 982
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing tetra features for num 743
[LOG] Processing adjacency and incidence matrices for num 982
[LOG] Computing n0_to_0 for num 982
[LOG] Processing cluster features for num 590
[LOG] Processing tetra features for num 668
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing cluster features for num 743
[LOG] Computing n1_to_1 for num 982
[LOG] Processing cluster features for num 590
[LOG] Processing cluster features for num 743
[LOG] Processing adjacency and incidence matrices for num 590
[LOG] Computing n0_to_0 for num 590
[LOG] Processing adjacency and incidence matrices for num 743
[LOG] Computing n0_to_0 for num 743
[LOG] Computing n1_to_1 for num 743
[LOG] Processing cluster features for num 668
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Processing cluster features for num 668
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n1_to_1 for num 590
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 743
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 982
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 668
[LOG] Computing n0_to_0 for num 668
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Process 64: Created combinatorial complex for file data_519.hdf5
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 743
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n4_to_4 (coadjacency) for num 743
[LOG] Computing n0_to_1 for num 743
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n2_to_2 (adjacency) for num 590
[LOG] Computing n0_to_2 for num 743
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 982
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n4_to_4 (coadjacency) for num 982
[LOG] Computing n0_to_1 for num 982
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n0_to_2 for num 982
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 590
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n4_to_4 (coadjacency) for num 590
[LOG] Computing n0_to_1 for num 590
[LOG] Process 64: Calculating Neighbors
[LOG] Loading pickle file data_519.pickle
[LOG] Processing node features for num 519
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n0_to_3 for num 743
[LOG] Processing edge features for num 519
[LOG] Computing n0_to_4 for num 743
[LOG] Computing n1_to_2 for num 743
[LOG] Processing tetra features for num 519
[LOG] Computing n0_to_2 for num 590
[LOG] Computing n1_to_1 for num 668
[LOG] Computing n1_to_3 for num 743
[LOG] Computing n1_to_4 for num 743
[LOG] Processing cluster features for num 519
[LOG] Computing n2_to_3 for num 743
[LOG] Computing n2_to_4 for num 743
[LOG] Processing cluster features for num 519
[LOG] Computing n3_to_4 for num 743
[LOG] Global feature for num 743
[LOG] Global feature for num 743
[LOG] Saving tensor x_0_743.pt
[LOG] Saving tensor x_1_743.pt
[LOG] Processing adjacency and incidence matrices for num 519
[LOG] Computing n0_to_0 for num 519
[LOG] Saving tensor x_2_743.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_3 for num 982
[LOG] Computing n0_to_4 for num 982
[LOG] Computing n1_to_1 for num 519
[LOG] Computing n1_to_2 for num 982
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor x_3_743.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor x_4_743.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1903 Tetrahedra.
    [LOG] Generated 46 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.47826086956522
    [LOG] Max number of nodes per cluster is 99 and the number is 45
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_3 for num 982
[LOG] Computing n1_to_4 for num 982
[LOG] Computing n2_to_3 for num 982
[LOG] Computing n2_to_4 for num 982
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_4 for num 982
[LOG] Computing n2_to_2 (adjacency) for num 519
[LOG] Computing n2_to_2 (adjacency) for num 668
[LOG] Global feature for num 982
[LOG] Global feature for num 982
[LOG] Saving tensor x_0_982.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n0_to_0_743.pt
[LOG] We will select 210 edges and 1903 tetra
[LOG] Edges from tetra 0 and KDTree 3200 with 0 edges in common.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor x_1_982.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor x_2_982.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor x_3_982.pt
[LOG] Saving tensor n1_to_1_743.pt
[LOG] Computing n1_to_3 for num 650
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n2_to_2_743.pt
[LOG] Saving tensor x_4_982.pt
[LOG] Computing n0_to_3 for num 590
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n0_to_0_982.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n3_to_3_743.pt
[LOG] Computing n0_to_4 for num 590
[LOG] Computing n1_to_4 for num 650
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n1_to_1_982.pt
[LOG] Saving tensor n4_to_4_743.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n2_to_2_982.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n0_to_1_743.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n1_to_2 for num 590
[LOG] Saving tensor n3_to_3_982.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n4_to_4_982.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n0_to_1_982.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n0_to_2_743.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n0_to_2_982.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n0_to_3_743.pt
[LOG] Computing n2_to_3 for num 650
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n0_to_3_982.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n0_to_4_743.pt
[LOG] Saving tensor n0_to_4_982.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n1_to_2_743.pt
[LOG] Saving tensor n1_to_2_982.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 519
[LOG] Computing n4_to_4 (coadjacency) for num 519
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n1_to_3_743.pt
[LOG] Saving tensor n1_to_3_982.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n0_to_1 for num 519
[LOG] Computing n3_to_3 (adjacency) for num 668
[LOG] Computing n1_to_3 for num 590
[LOG] Computing n1_to_4 for num 590
[LOG] Computing n4_to_4 (coadjacency) for num 668
[LOG] Computing n2_to_3 for num 590
[LOG] Computing n0_to_1 for num 668
[LOG] Computing n2_to_4 for num 590
[LOG] Computing n0_to_2 for num 519
[LOG] Computing n3_to_4 for num 590
[LOG] Global feature for num 590
[LOG] Global feature for num 590
[LOG] Saving tensor x_0_590.pt
[LOG] Computing n2_to_4 for num 650
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n1_to_4_743.pt
[LOG] Saving tensor n1_to_4_982.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor x_1_590.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n2_to_3_743.pt
[LOG] Saving tensor x_2_590.pt
[LOG] Saving tensor n2_to_3_982.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor x_3_590.pt
[LOG] Saving tensor n2_to_4_743.pt
[LOG] Saving tensor x_4_590.pt
[LOG] Saving tensor n2_to_4_982.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n0_to_0_590.pt
[LOG] Saving tensor n3_to_4_982.pt
[LOG] Saving tensor n3_to_4_743.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor global_feature_982.pt
[LOG] Saving tensor global_feature_743.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n1_to_1_590.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_2 for num 668
[LOG] Computing n3_to_4 for num 650
[LOG] Global feature for num 650
[LOG] Global feature for num 650
[LOG] Saving tensor x_0_650.pt
[LOG] Process 125: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 92: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n2_to_2_590.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor x_1_650.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor x_2_650.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor x_3_650.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor x_4_650.pt
[LOG] Saving tensor n3_to_3_590.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n0_to_0_650.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n4_to_4_590.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n1_to_1_650.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1484 Tetrahedra.
    [LOG] Generated 41 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.268292682926829
    [LOG] Max number of nodes per cluster is 53 and the number is 35
[LOG] Computing n0_to_3 for num 519
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_4 for num 519
[LOG] Computing n1_to_2 for num 519
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Process 14: Created combinatorial complex for file data_118.hdf5
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n0_to_1_590.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n2_to_2_650.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] We will select 228 edges and 1484 tetra
[LOG] Edges from tetra 0 and KDTree 758 with 0 edges in common.
[LOG] Saving tensor n0_to_2_590.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n3_to_3_650.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n0_to_3_590.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n4_to_4_650.pt
[LOG] Process 14: Calculating Neighbors
[LOG] Loading pickle file data_118.pickle
[LOG] Processing node features for num 118
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n0_to_4_590.pt
[LOG] Saving tensor n0_to_1_650.pt
[LOG] Processing edge features for num 118
[LOG] Saving tensor n1_to_2_590.pt
[LOG] Computing n1_to_3 for num 519
[LOG] Saving tensor n0_to_2_650.pt
[LOG] Computing n1_to_4 for num 519
[LOG] Saving tensor n0_to_3_650.pt
[LOG] Saving tensor n0_to_4_650.pt
[LOG] Computing n2_to_3 for num 519
[LOG] Saving tensor n1_to_3_590.pt
[LOG] Saving tensor n1_to_2_650.pt
[LOG] Processing tetra features for num 118
[LOG] Saving tensor n1_to_4_590.pt
[LOG] Saving tensor n1_to_3_650.pt
[LOG] Saving tensor n2_to_3_590.pt
[LOG] Saving tensor n1_to_4_650.pt
[LOG] Saving tensor n2_to_4_590.pt
[LOG] Saving tensor n2_to_3_650.pt
[LOG] Saving tensor n3_to_4_590.pt
[LOG] Saving tensor n2_to_4_650.pt
[LOG] Saving tensor global_feature_590.pt
[LOG] Process 73: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n3_to_4_650.pt
[LOG] Saving tensor global_feature_650.pt
[LOG] Process 81: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n2_to_4 for num 519
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing cluster features for num 118
[LOG] Computing n3_to_4 for num 519
[LOG] Processing cluster features for num 118
[LOG] Global feature for num 519
[LOG] Global feature for num 519
[LOG] Saving tensor x_0_519.pt
[LOG] Saving tensor x_1_519.pt
[LOG] Saving tensor x_2_519.pt
[LOG] Saving tensor x_3_519.pt
[LOG] Saving tensor x_4_519.pt
[LOG] Saving tensor n0_to_0_519.pt
[LOG] Processing adjacency and incidence matrices for num 118
[LOG] Computing n0_to_0 for num 118
[LOG] Saving tensor n1_to_1_519.pt
[LOG] Saving tensor n2_to_2_519.pt
[LOG] Saving tensor n3_to_3_519.pt
[LOG] Saving tensor n4_to_4_519.pt
[LOG] Saving tensor n0_to_1_519.pt
[LOG] Saving tensor n0_to_2_519.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n0_to_3_519.pt
[LOG] Saving tensor n0_to_4_519.pt
[LOG] Saving tensor n1_to_2_519.pt
[LOG] Saving tensor n1_to_3_519.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n1_to_4_519.pt
[LOG] Saving tensor n2_to_3_519.pt
[LOG] Computing n1_to_1 for num 118
[LOG] Saving tensor n2_to_4_519.pt
[LOG] Saving tensor n3_to_4_519.pt
[LOG] Saving tensor global_feature_519.pt
[LOG] Process 64: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_2 (adjacency) for num 118
[LOG] Removed 1 subset clusters.
[LOG] Process 33: Created combinatorial complex for file data_269.hdf5
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_3 for num 668
[LOG] Computing n3_to_3 (adjacency) for num 118
[LOG] Computing n4_to_4 (coadjacency) for num 118
[LOG] Computing n0_to_1 for num 118
[LOG] Computing n0_to_4 for num 668
[LOG] Process 33: Calculating Neighbors
[LOG] Loading pickle file data_269.pickle
[LOG] Processing node features for num 269
[LOG] Processing edge features for num 269
[LOG] Computing n0_to_2 for num 118
[LOG] Processing tetra features for num 269
[LOG] Computing n1_to_2 for num 668
[LOG] Processing cluster features for num 269
[LOG] Processing cluster features for num 269
[LOG] Processing adjacency and incidence matrices for num 269
[LOG] Computing n0_to_0 for num 269
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_1 for num 269
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 5881 Tetrahedra.
    [LOG] Generated 142 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.04225352112676
    [LOG] Max number of nodes per cluster is 53 and the number is 137
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_2 (adjacency) for num 269
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_3 for num 668
[LOG] Computing n1_to_4 for num 668
[LOG] Computing n3_to_3 (adjacency) for num 269
[LOG] Computing n4_to_4 (coadjacency) for num 269
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_1 for num 269
[LOG] Computing n2_to_3 for num 668
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_2 for num 269
[LOG] Computing n2_to_4 for num 668
[LOG] Computing n3_to_4 for num 668
[LOG] Global feature for num 668
[LOG] Global feature for num 668
[LOG] Saving tensor x_0_668.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor x_1_668.pt
[LOG] Saving tensor x_2_668.pt
[LOG] Saving tensor x_3_668.pt
[LOG] Saving tensor x_4_668.pt
[LOG] Saving tensor n0_to_0_668.pt
[LOG] Saving tensor n1_to_1_668.pt
[LOG] Saving tensor n2_to_2_668.pt
[LOG] Saving tensor n3_to_3_668.pt
[LOG] Computing n0_to_3 for num 118
[LOG] Saving tensor n4_to_4_668.pt
[LOG] Saving tensor n0_to_1_668.pt
[LOG] Saving tensor n0_to_2_668.pt
[LOG] Computing n0_to_4 for num 118
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n0_to_3_668.pt
[LOG] We will select 1467 edges and 5881 tetra
[LOG] Edges from tetra 0 and KDTree 1467 with 0 edges in common.
[LOG] Saving tensor n0_to_4_668.pt
[LOG] Saving tensor n1_to_2_668.pt
[LOG] Saving tensor n1_to_3_668.pt
[LOG] Computing n1_to_2 for num 118
[LOG] Saving tensor n1_to_4_668.pt
[LOG] Saving tensor n2_to_3_668.pt
[LOG] Saving tensor n2_to_4_668.pt
[LOG] Saving tensor n3_to_4_668.pt
[LOG] Saving tensor global_feature_668.pt
[LOG] Process 83: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_3 for num 118
[LOG] Computing n1_to_4 for num 118
[LOG] Computing n2_to_3 for num 118
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_3 for num 269
[LOG] Computing n2_to_4 for num 118
[LOG] Computing n0_to_4 for num 269
[LOG] Computing n1_to_2 for num 269
[LOG] Computing n3_to_4 for num 118
[LOG] Global feature for num 118
[LOG] Global feature for num 118
[LOG] Saving tensor x_0_118.pt
[LOG] Saving tensor x_1_118.pt
[LOG] Saving tensor x_2_118.pt
[LOG] Saving tensor x_3_118.pt
[LOG] Saving tensor x_4_118.pt
[LOG] Saving tensor n0_to_0_118.pt
[LOG] Saving tensor n1_to_1_118.pt
[LOG] Saving tensor n2_to_2_118.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n3_to_3_118.pt
[LOG] Saving tensor n4_to_4_118.pt
[LOG] Saving tensor n0_to_1_118.pt
[LOG] Saving tensor n0_to_2_118.pt
[LOG] Saving tensor n0_to_3_118.pt
[LOG] Saving tensor n0_to_4_118.pt
[LOG] Saving tensor n1_to_2_118.pt
[LOG] Saving tensor n1_to_3_118.pt
[LOG] Computing n1_to_3 for num 269
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_4 for num 269
[LOG] Computing n2_to_3 for num 269
[LOG] Computing n2_to_4 for num 269
[LOG] Computing n3_to_4 for num 269
[LOG] Global feature for num 269
[LOG] Global feature for num 269
[LOG] Saving tensor x_0_269.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n1_to_4_118.pt
[LOG] Saving tensor x_1_269.pt
[LOG] Saving tensor x_2_269.pt
[LOG] Saving tensor n2_to_3_118.pt
[LOG] Saving tensor x_3_269.pt
[LOG] Saving tensor n2_to_4_118.pt
[LOG] Saving tensor x_4_269.pt
[LOG] Saving tensor n0_to_0_269.pt
[LOG] Saving tensor n3_to_4_118.pt
[LOG] Saving tensor n1_to_1_269.pt
[LOG] Saving tensor global_feature_118.pt
[LOG] Process 14: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n2_to_2_269.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n3_to_3_269.pt
[LOG] Saving tensor n4_to_4_269.pt
[LOG] Saving tensor n0_to_1_269.pt
[LOG] Saving tensor n0_to_2_269.pt
[LOG] Saving tensor n0_to_3_269.pt
[LOG] Saving tensor n0_to_4_269.pt
[LOG] Saving tensor n1_to_2_269.pt
[LOG] Saving tensor n1_to_3_269.pt
[LOG] Saving tensor n1_to_4_269.pt
[LOG] Saving tensor n2_to_3_269.pt
[LOG] Saving tensor n2_to_4_269.pt
[LOG] Saving tensor n3_to_4_269.pt
[LOG] Saving tensor global_feature_269.pt
[LOG] Process 33: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2111 Tetrahedra.
    [LOG] Generated 46 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 18.717391304347824
    [LOG] Max number of nodes per cluster is 223 and the number is 38
[LOG] We will select 227 edges and 2111 tetra
[LOG] Edges from tetra 0 and KDTree 4814 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 58: Created combinatorial complex for file data_471.hdf5
[LOG] GENERATED TETRA
[LOG] Process 58: Calculating Neighbors
[LOG] Loading pickle file data_471.pickle
[LOG] Processing node features for num 471
[LOG] Processing edge features for num 471
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing tetra features for num 471
[LOG] Processing cluster features for num 471
[LOG] Processing cluster features for num 471
[LOG] Processing adjacency and incidence matrices for num 471
[LOG] Computing n0_to_0 for num 471
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_1 for num 471
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 3053 Tetrahedra.
    [LOG] Generated 89 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.146067415730338
    [LOG] Max number of nodes per cluster is 55 and the number is 28
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_2 (adjacency) for num 471
[LOG] Calculating for cell ranks 0 and 3
[LOG] We will select 517 edges and 3053 tetra
[LOG] Edges from tetra 0 and KDTree 1155 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_3 (adjacency) for num 471
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n4_to_4 (coadjacency) for num 471
[LOG] Computing n0_to_1 for num 471
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 4 subset clusters.
[LOG] Computing n0_to_2 for num 471
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 3665 Tetrahedra.
    [LOG] Generated 101 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.227722772277227
    [LOG] Max number of nodes per cluster is 65 and the number is 82
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] We will select 446 edges and 3665 tetra
[LOG] Edges from tetra 0 and KDTree 2680 with 0 edges in common.
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Process 110: Created combinatorial complex for file data_875.hdf5
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_3 for num 471
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 5 subset clusters.
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Computing n0_to_4 for num 471
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n1_to_2 for num 471
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n1_to_3 for num 471
[LOG] Computing n1_to_4 for num 471
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_3 for num 471
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n2_to_4 for num 471
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n3_to_4 for num 471
[LOG] Global feature for num 471
[LOG] Global feature for num 471
[LOG] Saving tensor x_0_471.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor x_1_471.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor x_2_471.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor x_3_471.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor x_4_471.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n0_to_0_471.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 123: Created combinatorial complex for file data_968.hdf5
[LOG] Process 110: Calculating Neighbors
[LOG] Loading pickle file data_875.pickle
[LOG] Processing node features for num 875
[LOG] Processing edge features for num 875
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n1_to_1_471.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n2_to_2_471.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Processing tetra features for num 875
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n3_to_3_471.pt
[LOG] Saving tensor n4_to_4_471.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n0_to_1_471.pt
[LOG] Saving tensor n0_to_2_471.pt
[LOG] Saving tensor n0_to_3_471.pt
[LOG] Process 123: Calculating Neighbors
[LOG] Loading pickle file data_968.pickle
[LOG] Processing node features for num 968
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n0_to_4_471.pt
[LOG] Processing edge features for num 968
[LOG] Saving tensor n1_to_2_471.pt
[LOG] Saving tensor n1_to_3_471.pt
[LOG] Saving tensor n1_to_4_471.pt
[LOG] Saving tensor n2_to_3_471.pt
[LOG] Processing cluster features for num 875
[LOG] Saving tensor n2_to_4_471.pt
[LOG] Processing tetra features for num 968
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Processing cluster features for num 875
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing cluster features for num 968
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n3_to_4_471.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor global_feature_471.pt
[LOG] Process 58: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing adjacency and incidence matrices for num 875
[LOG] Computing n0_to_0 for num 875
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Processing cluster features for num 968
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 968
[LOG] Computing n0_to_0 for num 968
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_1 for num 968
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_1 for num 875
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 59: Created combinatorial complex for file data_475.hdf5
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n2_to_2 (adjacency) for num 968
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n3_to_3 (adjacency) for num 968
[LOG] Computing n4_to_4 (coadjacency) for num 968
[LOG] Computing n0_to_1 for num 968
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_2 for num 968
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Process 59: Calculating Neighbors
[LOG] Loading pickle file data_475.pickle
[LOG] Processing node features for num 475
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Processing edge features for num 475
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1229 Tetrahedra.
    [LOG] Generated 38 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.0
    [LOG] Max number of nodes per cluster is 69 and the number is 29
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Processing tetra features for num 475
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] We will select 139 edges and 1229 tetra
[LOG] Edges from tetra 0 and KDTree 2609 with 0 edges in common.
[LOG] Processing cluster features for num 475
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Processing cluster features for num 475
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 475
[LOG] Computing n0_to_0 for num 475
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_3 for num 968
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_4 for num 968
[LOG] Computing n1_to_1 for num 475
[LOG] Computing n1_to_2 for num 968
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 103: Created combinatorial complex for file data_831.hdf5
[LOG] Process 103: Calculating Neighbors
[LOG] Loading pickle file data_831.pickle
[LOG] Processing node features for num 831
[LOG] Processing edge features for num 831
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing tetra features for num 831
[LOG] GENERATED TETRA
[LOG] Processing cluster features for num 831
[LOG] Processing cluster features for num 831
[LOG] Processing adjacency and incidence matrices for num 831
[LOG] Computing n0_to_0 for num 831
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_1 for num 831
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1057 Tetrahedra.
    [LOG] Generated 26 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.346153846153847
    [LOG] Max number of nodes per cluster is 53 and the number is 16
[LOG] Computing n2_to_2 (adjacency) for num 831
[LOG] We will select 141 edges and 1057 tetra
[LOG] Edges from tetra 0 and KDTree 141 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_3 for num 968
[LOG] Computing n2_to_2 (adjacency) for num 475
[LOG] Computing n1_to_4 for num 968
[LOG] Computing n3_to_3 (adjacency) for num 831
[LOG] Computing n4_to_4 (coadjacency) for num 831
[LOG] Computing n0_to_1 for num 831
[LOG] Computing n2_to_3 for num 968
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_2 for num 831
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_4 for num 968
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_4 for num 968
[LOG] Global feature for num 968
[LOG] Global feature for num 968
[LOG] Saving tensor x_0_968.pt
[LOG] Saving tensor x_1_968.pt
[LOG] Saving tensor x_2_968.pt
[LOG] Saving tensor x_3_968.pt
[LOG] Saving tensor x_4_968.pt
[LOG] Saving tensor n0_to_0_968.pt
[LOG] Saving tensor n1_to_1_968.pt
[LOG] Saving tensor n2_to_2_968.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n3_to_3_968.pt
[LOG] Saving tensor n4_to_4_968.pt
[LOG] Saving tensor n0_to_1_968.pt
[LOG] Saving tensor n0_to_2_968.pt
[LOG] Saving tensor n0_to_3_968.pt
[LOG] Saving tensor n0_to_4_968.pt
[LOG] Saving tensor n1_to_2_968.pt
[LOG] Saving tensor n1_to_3_968.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n1_to_4_968.pt
[LOG] Saving tensor n2_to_3_968.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n2_to_4_968.pt
[LOG] Saving tensor n3_to_4_968.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor global_feature_968.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Process 123: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 875
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Process 63: Created combinatorial complex for file data_511.hdf5
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_3 for num 831
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_4 for num 831
[LOG] Computing n1_to_2 for num 831
[LOG] Computing n1_to_3 for num 831
[LOG] Computing n1_to_4 for num 831
[LOG] Computing n2_to_3 for num 831
[LOG] Computing n2_to_4 for num 831
[LOG] Computing n3_to_4 for num 831
[LOG] Calculating for cell ranks 1 and 3
[LOG] Global feature for num 831
[LOG] Global feature for num 831
[LOG] Saving tensor x_0_831.pt
[LOG] Saving tensor x_1_831.pt
[LOG] Saving tensor x_2_831.pt
[LOG] Saving tensor x_3_831.pt
[LOG] Saving tensor x_4_831.pt
[LOG] Saving tensor n0_to_0_831.pt
[LOG] Saving tensor n1_to_1_831.pt
[LOG] Saving tensor n2_to_2_831.pt
[LOG] Saving tensor n3_to_3_831.pt
[LOG] Saving tensor n4_to_4_831.pt
[LOG] Saving tensor n0_to_1_831.pt
[LOG] Saving tensor n0_to_2_831.pt
[LOG] Saving tensor n0_to_3_831.pt
[LOG] Saving tensor n0_to_4_831.pt
[LOG] Saving tensor n1_to_2_831.pt
[LOG] Saving tensor n1_to_3_831.pt
[LOG] Saving tensor n1_to_4_831.pt
[LOG] Saving tensor n2_to_3_831.pt
[LOG] Saving tensor n2_to_4_831.pt
[LOG] Saving tensor n3_to_4_831.pt
[LOG] Saving tensor global_feature_831.pt
[LOG] Process 103: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n3_to_3 (adjacency) for num 475
[LOG] Computing n4_to_4 (coadjacency) for num 475
[LOG] Computing n0_to_1 for num 475
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 63: Calculating Neighbors
[LOG] Loading pickle file data_511.pickle
[LOG] Processing node features for num 511
[LOG] Processing edge features for num 511
[LOG] Processing tetra features for num 511
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing cluster features for num 511
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing cluster features for num 511
[LOG] Processing adjacency and incidence matrices for num 511
[LOG] Computing n0_to_0 for num 511
[LOG] Computing n1_to_1 for num 511
[LOG] Computing n0_to_2 for num 475
[LOG] Computing n2_to_2 (adjacency) for num 511
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n3_to_3 (adjacency) for num 511
[LOG] Computing n4_to_4 (coadjacency) for num 511
[LOG] Computing n0_to_1 for num 511
[LOG] Computing n0_to_2 for num 511
[LOG] Calculating for cell ranks 4 and 4
[LOG] GENERATED TETRA
[LOG] Computing n0_to_3 for num 511
[LOG] Computing n0_to_4 for num 511
[LOG] Computing n1_to_2 for num 511
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_3 for num 511
[LOG] Computing n1_to_4 for num 511
[LOG] Computing n2_to_3 for num 511
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n2_to_4 for num 511
[LOG] Computing n3_to_4 for num 511
[LOG] Global feature for num 511
[LOG] Global feature for num 511
[LOG] Saving tensor x_0_511.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor x_1_511.pt
[LOG] Saving tensor x_2_511.pt
[LOG] Saving tensor x_3_511.pt
[LOG] Saving tensor x_4_511.pt
[LOG] Saving tensor n0_to_0_511.pt
[LOG] Saving tensor n1_to_1_511.pt
[LOG] Saving tensor n2_to_2_511.pt
[LOG] Saving tensor n3_to_3_511.pt
[LOG] Saving tensor n4_to_4_511.pt
[LOG] Saving tensor n0_to_1_511.pt
[LOG] Saving tensor n0_to_2_511.pt
[LOG] Saving tensor n0_to_3_511.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n0_to_4_511.pt
[LOG] Saving tensor n1_to_2_511.pt
[LOG] Saving tensor n1_to_3_511.pt
[LOG] Saving tensor n1_to_4_511.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n2_to_3_511.pt
[LOG] Saving tensor n2_to_4_511.pt
[LOG] Saving tensor n3_to_4_511.pt
[LOG] Saving tensor global_feature_511.pt
[LOG] Process 63: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 3142 Tetrahedra.
    [LOG] Generated 75 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.226666666666667
    [LOG] Max number of nodes per cluster is 53 and the number is 15
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] We will select 831 edges and 3142 tetra
[LOG] Edges from tetra 0 and KDTree 831 with 0 edges in common.
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_3 for num 475
[LOG] Computing n0_to_4 for num 475
[LOG] Computing n1_to_2 for num 475
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_3 (adjacency) for num 875
[LOG] Computing n4_to_4 (coadjacency) for num 875
[LOG] Computing n0_to_1 for num 875
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_3 for num 475
[LOG] Computing n1_to_4 for num 475
[LOG] Computing n0_to_2 for num 875
[LOG] Computing n2_to_3 for num 475
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_4 for num 475
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_4 for num 475
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Global feature for num 475
[LOG] Global feature for num 475
[LOG] Saving tensor x_0_475.pt
[LOG] Saving tensor x_1_475.pt
[LOG] Saving tensor x_2_475.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor x_3_475.pt
[LOG] Saving tensor x_4_475.pt
[LOG] Saving tensor n0_to_0_475.pt
[LOG] Saving tensor n1_to_1_475.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n2_to_2_475.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n3_to_3_475.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n4_to_4_475.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n0_to_1_475.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n0_to_2_475.pt
[LOG] Saving tensor n0_to_3_475.pt
[LOG] Saving tensor n0_to_4_475.pt
[LOG] Saving tensor n1_to_2_475.pt
[LOG] Saving tensor n1_to_3_475.pt
[LOG] Saving tensor n1_to_4_475.pt
[LOG] Saving tensor n2_to_3_475.pt
[LOG] Saving tensor n2_to_4_475.pt
[LOG] Saving tensor n3_to_4_475.pt
[LOG] Saving tensor global_feature_475.pt
[LOG] Process 59: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 50: Created combinatorial complex for file data_403.hdf5
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 50: Calculating Neighbors
[LOG] Loading pickle file data_403.pickle
[LOG] Processing node features for num 403
[LOG] Processing edge features for num 403
[LOG] Processing tetra features for num 403
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing cluster features for num 403
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing cluster features for num 403
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing adjacency and incidence matrices for num 403
[LOG] Computing n0_to_0 for num 403
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n1_to_1 for num 403
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1713 Tetrahedra.
    [LOG] Generated 56 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.642857142857142
    [LOG] Max number of nodes per cluster is 52 and the number is 52
[LOG] We will select 270 edges and 1713 tetra
[LOG] Edges from tetra 0 and KDTree 1518 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_3 for num 875
[LOG] Computing n2_to_2 (adjacency) for num 403
[LOG] Computing n0_to_4 for num 875
[LOG] Computing n1_to_2 for num 875
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 403
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n4_to_4 (coadjacency) for num 403
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n0_to_1 for num 403
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_2 for num 403
[LOG] Removed 0 subset clusters.
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 5459 Tetrahedra.
    [LOG] Generated 126 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.944444444444445
    [LOG] Max number of nodes per cluster is 166 and the number is 123
[LOG] Calculating for cell ranks 3 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 79: Created combinatorial complex for file data_639.hdf5
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 79: Calculating Neighbors
[LOG] Loading pickle file data_639.pickle
[LOG] Processing node features for num 639
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing edge features for num 639
[LOG] We will select 2633 edges and 5459 tetra
[LOG] Edges from tetra 0 and KDTree 2633 with 0 edges in common.
[LOG] Processing tetra features for num 639
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Processing cluster features for num 639
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing cluster features for num 639
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Processing adjacency and incidence matrices for num 639
[LOG] Computing n0_to_0 for num 639
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_1 for num 639
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 639
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2170 Tetrahedra.
    [LOG] Generated 77 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 10.792207792207792
    [LOG] Max number of nodes per cluster is 22 and the number is 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_3 for num 403
[LOG] Computing n0_to_4 for num 403
[LOG] Computing n1_to_2 for num 403
[LOG] Computing n3_to_3 (adjacency) for num 639
[LOG] We will select 825 edges and 2170 tetra
[LOG] Edges from tetra 0 and KDTree 825 with 0 edges in common.
[LOG] Computing n4_to_4 (coadjacency) for num 639
[LOG] Computing n0_to_1 for num 639
[LOG] Computing n0_to_2 for num 639
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_3 for num 639
[LOG] Computing n0_to_4 for num 639
[LOG] Computing n1_to_2 for num 639
[LOG] Computing n1_to_3 for num 639
[LOG] Computing n1_to_4 for num 639
[LOG] Computing n2_to_3 for num 639
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_3 for num 403
[LOG] Computing n2_to_4 for num 639
[LOG] Computing n1_to_4 for num 403
[LOG] Computing n2_to_3 for num 403
[LOG] Computing n3_to_4 for num 639
[LOG] Global feature for num 639
[LOG] Global feature for num 639
[LOG] Saving tensor x_0_639.pt
[LOG] Saving tensor x_1_639.pt
[LOG] Saving tensor x_2_639.pt
[LOG] Saving tensor x_3_639.pt
[LOG] Saving tensor x_4_639.pt
[LOG] Saving tensor n0_to_0_639.pt
[LOG] Saving tensor n1_to_1_639.pt
[LOG] Saving tensor n2_to_2_639.pt
[LOG] Saving tensor n3_to_3_639.pt
[LOG] Saving tensor n4_to_4_639.pt
[LOG] Saving tensor n0_to_1_639.pt
[LOG] Saving tensor n0_to_2_639.pt
[LOG] Saving tensor n0_to_3_639.pt
[LOG] Saving tensor n0_to_4_639.pt
[LOG] Saving tensor n1_to_2_639.pt
[LOG] Saving tensor n1_to_3_639.pt
[LOG] Computing n2_to_4 for num 403
[LOG] Saving tensor n1_to_4_639.pt
[LOG] Saving tensor n2_to_3_639.pt
[LOG] Saving tensor n2_to_4_639.pt
[LOG] Saving tensor n3_to_4_639.pt
[LOG] Saving tensor global_feature_639.pt
[LOG] Process 79: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_3 for num 875
[LOG] Computing n3_to_4 for num 403
[LOG] Global feature for num 403
[LOG] Global feature for num 403
[LOG] Saving tensor x_0_403.pt
[LOG] Saving tensor x_1_403.pt
[LOG] Saving tensor x_2_403.pt
[LOG] Saving tensor x_3_403.pt
[LOG] Saving tensor x_4_403.pt
[LOG] Saving tensor n0_to_0_403.pt
[LOG] Saving tensor n1_to_1_403.pt
[LOG] Saving tensor n2_to_2_403.pt
[LOG] Computing n1_to_4 for num 875
[LOG] Saving tensor n3_to_3_403.pt
[LOG] Saving tensor n4_to_4_403.pt
[LOG] Saving tensor n0_to_1_403.pt
[LOG] Saving tensor n0_to_2_403.pt
[LOG] Saving tensor n0_to_3_403.pt
[LOG] Saving tensor n0_to_4_403.pt
[LOG] Saving tensor n1_to_2_403.pt
[LOG] Saving tensor n1_to_3_403.pt
[LOG] Saving tensor n1_to_4_403.pt
[LOG] Saving tensor n2_to_3_403.pt
[LOG] Saving tensor n2_to_4_403.pt
[LOG] Saving tensor n3_to_4_403.pt
[LOG] Saving tensor global_feature_403.pt
[LOG] Process 50: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n2_to_3 for num 875
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_4 for num 875
[LOG] Process 113: Created combinatorial complex for file data_898.hdf5
[LOG] Computing n3_to_4 for num 875
[LOG] Global feature for num 875
[LOG] Global feature for num 875
[LOG] Saving tensor x_0_875.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor x_1_875.pt
[LOG] Saving tensor x_2_875.pt
[LOG] Saving tensor x_3_875.pt
[LOG] Saving tensor x_4_875.pt
[LOG] Saving tensor n0_to_0_875.pt
[LOG] Saving tensor n1_to_1_875.pt
[LOG] Saving tensor n2_to_2_875.pt
[LOG] Saving tensor n3_to_3_875.pt
[LOG] Saving tensor n4_to_4_875.pt
[LOG] Saving tensor n0_to_1_875.pt
[LOG] Saving tensor n0_to_2_875.pt
[LOG] Saving tensor n0_to_3_875.pt
[LOG] Saving tensor n0_to_4_875.pt
[LOG] Saving tensor n1_to_2_875.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n1_to_3_875.pt
[LOG] Saving tensor n1_to_4_875.pt
[LOG] Saving tensor n2_to_3_875.pt
[LOG] Saving tensor n2_to_4_875.pt
[LOG] Saving tensor n3_to_4_875.pt
[LOG] Saving tensor global_feature_875.pt
[LOG] Process 110: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 113: Calculating Neighbors
[LOG] Loading pickle file data_898.pickle
[LOG] Processing node features for num 898
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing edge features for num 898
[LOG] GENERATED TETRA
[LOG] Processing tetra features for num 898
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing cluster features for num 898
[LOG] Processing cluster features for num 898
[LOG] Processing adjacency and incidence matrices for num 898
[LOG] Computing n0_to_0 for num 898
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_1 for num 898
[LOG] GENERATED TETRA
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 1 subset clusters.
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_2 (adjacency) for num 898
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1631 Tetrahedra.
    [LOG] Generated 53 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.773584905660377
    [LOG] Max number of nodes per cluster is 24 and the number is 20
[LOG] Calculating for cell ranks 0 and 2
[LOG] We will select 272 edges and 1631 tetra
[LOG] Edges from tetra 0 and KDTree 342 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1454 Tetrahedra.
    [LOG] Generated 45 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.444444444444445
    [LOG] Max number of nodes per cluster is 53 and the number is 37
[LOG] Computing n3_to_3 (adjacency) for num 898
[LOG] Computing n4_to_4 (coadjacency) for num 898
[LOG] Computing n0_to_1 for num 898
[LOG] We will select 232 edges and 1454 tetra
[LOG] Edges from tetra 0 and KDTree 683 with 0 edges in common.
[LOG] Computing n0_to_2 for num 898
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3056 Tetrahedra.
    [LOG] Generated 57 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.087719298245613
    [LOG] Max number of nodes per cluster is 76 and the number is 32
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_3 for num 898
[LOG] Process 41: Created combinatorial complex for file data_329.hdf5
[LOG] Computing n0_to_4 for num 898
[LOG] Computing n1_to_2 for num 898
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] We will select 784 edges and 3056 tetra
[LOG] Edges from tetra 0 and KDTree 2606 with 0 edges in common.
[LOG] Process 25: Created combinatorial complex for file data_206.hdf5
[LOG] Process 25: Calculating Neighbors
[LOG] Loading pickle file data_206.pickle
[LOG] Processing node features for num 206
[LOG] Processing edge features for num 206
[LOG] Processing tetra features for num 206
[LOG] Processing cluster features for num 206
[LOG] Processing cluster features for num 206
[LOG] Processing adjacency and incidence matrices for num 206
[LOG] Computing n0_to_0 for num 206
[LOG] Computing n1_to_1 for num 206
[LOG] Process 41: Calculating Neighbors
[LOG] Loading pickle file data_329.pickle
[LOG] Processing node features for num 329
[LOG] Processing edge features for num 329
[LOG] Computing n2_to_2 (adjacency) for num 206
[LOG] Computing n1_to_3 for num 898
[LOG] Computing n1_to_4 for num 898
[LOG] Computing n2_to_3 for num 898
[LOG] Processing tetra features for num 329
[LOG] Computing n2_to_4 for num 898
[LOG] Removed 0 subset clusters.
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3016 Tetrahedra.
    [LOG] Generated 70 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.12857142857143
    [LOG] Max number of nodes per cluster is 97 and the number is 57
[LOG] Computing n3_to_3 (adjacency) for num 206
[LOG] Computing n4_to_4 (coadjacency) for num 206
[LOG] Computing n0_to_1 for num 206
[LOG] Computing n3_to_4 for num 898
[LOG] Global feature for num 898
[LOG] Global feature for num 898
[LOG] Saving tensor x_0_898.pt
[LOG] Computing n0_to_2 for num 206
[LOG] Saving tensor x_1_898.pt
[LOG] Saving tensor x_2_898.pt
[LOG] Saving tensor x_3_898.pt
[LOG] Saving tensor x_4_898.pt
[LOG] Saving tensor n0_to_0_898.pt
[LOG] Saving tensor n1_to_1_898.pt
[LOG] Saving tensor n2_to_2_898.pt
[LOG] Saving tensor n3_to_3_898.pt
[LOG] Saving tensor n4_to_4_898.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n0_to_1_898.pt
[LOG] Processing cluster features for num 329
[LOG] Saving tensor n0_to_2_898.pt
[LOG] Saving tensor n0_to_3_898.pt
[LOG] Saving tensor n0_to_4_898.pt
[LOG] Saving tensor n1_to_2_898.pt
[LOG] Saving tensor n1_to_3_898.pt
[LOG] Saving tensor n1_to_4_898.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n2_to_3_898.pt
[LOG] Process 55: Created combinatorial complex for file data_444.hdf5
[LOG] Saving tensor n2_to_4_898.pt
[LOG] Saving tensor n3_to_4_898.pt
[LOG] Saving tensor global_feature_898.pt
[LOG] Process 113: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] We will select 537 edges and 3016 tetra
[LOG] Edges from tetra 0 and KDTree 3217 with 0 edges in common.
[LOG] Processing cluster features for num 329
[LOG] Process 55: Calculating Neighbors
[LOG] Loading pickle file data_444.pickle
[LOG] Processing node features for num 444
[LOG] Processing adjacency and incidence matrices for num 329
[LOG] Computing n0_to_0 for num 329
[LOG] Processing edge features for num 444
[LOG] Processing tetra features for num 444
[LOG] Processing cluster features for num 444
[LOG] Processing cluster features for num 444
[LOG] Computing n0_to_3 for num 206
[LOG] Computing n0_to_4 for num 206
[LOG] Processing adjacency and incidence matrices for num 444
[LOG] Computing n0_to_0 for num 444
[LOG] Removed 1 subset clusters.
[LOG] Computing n1_to_2 for num 206
[LOG] Computing n1_to_1 for num 444
[LOG] Computing n2_to_2 (adjacency) for num 444
[LOG] Computing n1_to_3 for num 206
[LOG] Computing n1_to_4 for num 206
[LOG] Computing n2_to_3 for num 206
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_4 for num 206
[LOG] Computing n3_to_4 for num 206
[LOG] Global feature for num 206
[LOG] Global feature for num 206
[LOG] Saving tensor x_0_206.pt
[LOG] Saving tensor x_1_206.pt
[LOG] Saving tensor x_2_206.pt
[LOG] Saving tensor x_3_206.pt
[LOG] Saving tensor x_4_206.pt
[LOG] Saving tensor n0_to_0_206.pt
[LOG] Saving tensor n1_to_1_206.pt
[LOG] Computing n3_to_3 (adjacency) for num 444
[LOG] Saving tensor n2_to_2_206.pt
[LOG] Computing n4_to_4 (coadjacency) for num 444
[LOG] Saving tensor n3_to_3_206.pt
[LOG] Computing n0_to_1 for num 444
[LOG] Saving tensor n4_to_4_206.pt
[LOG] Saving tensor n0_to_1_206.pt
[LOG] Saving tensor n0_to_2_206.pt
[LOG] Saving tensor n0_to_3_206.pt
[LOG] Saving tensor n0_to_4_206.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n1_to_2_206.pt
[LOG] Process 61: Created combinatorial complex for file data_490.hdf5
[LOG] Saving tensor n1_to_3_206.pt
[LOG] Saving tensor n1_to_4_206.pt
[LOG] Saving tensor n2_to_3_206.pt
[LOG] Saving tensor n2_to_4_206.pt
[LOG] Computing n0_to_2 for num 444
[LOG] Saving tensor n3_to_4_206.pt
[LOG] Saving tensor global_feature_206.pt
[LOG] Process 25: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_1 for num 329
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n0_to_3 for num 444
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n0_to_4 for num 444
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n1_to_2 for num 444
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_3 for num 444
[LOG] Computing n1_to_4 for num 444
[LOG] Computing n2_to_3 for num 444
[LOG] Removed 0 subset clusters.
[LOG] Computing n2_to_4 for num 444
[LOG] Computing n3_to_4 for num 444
[LOG] Global feature for num 444
[LOG] Global feature for num 444
[LOG] Saving tensor x_0_444.pt
[LOG] Saving tensor x_1_444.pt
[LOG] Saving tensor x_2_444.pt
[LOG] Saving tensor x_3_444.pt
[LOG] Saving tensor x_4_444.pt
[LOG] Saving tensor n0_to_0_444.pt
[LOG] Saving tensor n1_to_1_444.pt
[LOG] Saving tensor n2_to_2_444.pt
[LOG] Saving tensor n3_to_3_444.pt
[LOG] Saving tensor n4_to_4_444.pt
[LOG] Saving tensor n0_to_1_444.pt
[LOG] Saving tensor n0_to_2_444.pt
[LOG] Saving tensor n0_to_3_444.pt
[LOG] Saving tensor n0_to_4_444.pt
[LOG] Saving tensor n1_to_2_444.pt
[LOG] Saving tensor n1_to_3_444.pt
[LOG] Saving tensor n1_to_4_444.pt
[LOG] Saving tensor n2_to_3_444.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n2_to_4_444.pt
[LOG] Saving tensor n3_to_4_444.pt
[LOG] Saving tensor global_feature_444.pt
[LOG] Process 55: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 72: Created combinatorial complex for file data_581.hdf5
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 61: Calculating Neighbors
[LOG] Loading pickle file data_490.pickle
[LOG] Processing node features for num 490
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing edge features for num 490
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Processing tetra features for num 490
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Processing cluster features for num 490
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing cluster features for num 490
[LOG] Process 72: Calculating Neighbors
[LOG] Loading pickle file data_581.pickle
[LOG] Processing node features for num 581
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing edge features for num 581
[LOG] Processing adjacency and incidence matrices for num 490
[LOG] Computing n0_to_0 for num 490
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing tetra features for num 581
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing cluster features for num 581
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing cluster features for num 581
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Processing adjacency and incidence matrices for num 581
[LOG] Computing n0_to_0 for num 581
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n1_to_1 for num 490
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_1 for num 581
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n2_to_2 (adjacency) for num 490
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 581
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1175 Tetrahedra.
    [LOG] Generated 25 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.88
    [LOG] Max number of nodes per cluster is 44 and the number is 23
[LOG] We will select 332 edges and 1175 tetra
[LOG] Edges from tetra 0 and KDTree 500 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n3_to_3 (adjacency) for num 490
[LOG] Computing n4_to_4 (coadjacency) for num 490
[LOG] Computing n0_to_1 for num 490
[LOG] Computing n3_to_3 (adjacency) for num 581
[LOG] Computing n4_to_4 (coadjacency) for num 581
[LOG] Computing n0_to_1 for num 581
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_2 for num 490
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_2 for num 581
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 39: Created combinatorial complex for file data_318.hdf5
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 39: Calculating Neighbors
[LOG] Loading pickle file data_318.pickle
[LOG] Processing node features for num 318
[LOG] Processing edge features for num 318
[LOG] Processing tetra features for num 318
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 318
[LOG] Processing cluster features for num 318
[LOG] Processing adjacency and incidence matrices for num 318
[LOG] Computing n0_to_0 for num 318
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_1 for num 318
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n2_to_2 (adjacency) for num 318
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n3_to_3 (adjacency) for num 318
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n4_to_4 (coadjacency) for num 318
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n0_to_1 for num 318
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n0_to_2 for num 318
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n0_to_3 for num 318
[LOG] Computing n0_to_4 for num 318
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n1_to_2 for num 318
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1377 Tetrahedra.
    [LOG] Generated 42 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.619047619047619
    [LOG] Max number of nodes per cluster is 29 and the number is 18
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n1_to_3 for num 318
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n1_to_4 for num 318
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n2_to_3 for num 318
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] We will select 246 edges and 1377 tetra
[LOG] Edges from tetra 0 and KDTree 441 with 0 edges in common.
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n2_to_4 for num 318
[LOG] Computing n0_to_3 for num 490
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_4 for num 318
[LOG] Global feature for num 318
[LOG] Global feature for num 318
[LOG] Saving tensor x_0_318.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor x_1_318.pt
[LOG] Saving tensor x_2_318.pt
[LOG] Saving tensor x_3_318.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor x_4_318.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n0_to_0_318.pt
[LOG] Computing n0_to_4 for num 490
[LOG] Saving tensor n1_to_1_318.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n2_to_2_318.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n3_to_3_318.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n4_to_4_318.pt
[LOG] Saving tensor n0_to_1_318.pt
[LOG] Saving tensor n0_to_2_318.pt
[LOG] Saving tensor n0_to_3_318.pt
[LOG] Computing n1_to_2 for num 490
[LOG] Saving tensor n0_to_4_318.pt
[LOG] Saving tensor n1_to_2_318.pt
[LOG] Saving tensor n1_to_3_318.pt
[LOG] Saving tensor n1_to_4_318.pt
[LOG] Saving tensor n2_to_3_318.pt
[LOG] Saving tensor n2_to_4_318.pt
[LOG] Saving tensor n3_to_4_318.pt
[LOG] Saving tensor global_feature_318.pt
[LOG] Process 39: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1082 Tetrahedra.
    [LOG] Generated 23 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.521739130434783
    [LOG] Max number of nodes per cluster is 74 and the number is 22
[LOG] Calculating for cell ranks 2 and 3
[LOG] We will select 249 edges and 1082 tetra
[LOG] Edges from tetra 0 and KDTree 631 with 0 edges in common.
[LOG] Computing n0_to_3 for num 581
[LOG] Computing n0_to_4 for num 581
[LOG] Computing n1_to_2 for num 581
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 2 subset clusters.
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 93: Created combinatorial complex for file data_750.hdf5
[LOG] Process 102: Created combinatorial complex for file data_820.hdf5
[LOG] Computing n1_to_3 for num 490
[LOG] Computing n1_to_4 for num 490
[LOG] Computing n2_to_3 for num 490
[LOG] Process 93: Calculating Neighbors
[LOG] Loading pickle file data_750.pickle
[LOG] Processing node features for num 750
[LOG] Processing edge features for num 750
[LOG] Processing tetra features for num 750
[LOG] Process 102: Calculating Neighbors
[LOG] Loading pickle file data_820.pickle
[LOG] Processing node features for num 820
[LOG] Processing edge features for num 820
[LOG] Computing n2_to_4 for num 490
[LOG] Processing cluster features for num 750
[LOG] Processing tetra features for num 820
[LOG] Processing cluster features for num 750
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_3 for num 581
[LOG] Processing adjacency and incidence matrices for num 750
[LOG] Computing n0_to_0 for num 750
[LOG] Computing n1_to_4 for num 581
[LOG] Processing cluster features for num 820
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing cluster features for num 820
[LOG] Computing n3_to_4 for num 490
[LOG] Computing n2_to_3 for num 581
[LOG] Global feature for num 490
[LOG] Global feature for num 490
[LOG] Saving tensor x_0_490.pt
[LOG] Computing n1_to_1 for num 750
[LOG] Saving tensor x_1_490.pt
[LOG] Saving tensor x_2_490.pt
[LOG] Processing adjacency and incidence matrices for num 820
[LOG] Computing n0_to_0 for num 820
[LOG] Saving tensor x_3_490.pt
[LOG] Saving tensor x_4_490.pt
[LOG] Saving tensor n0_to_0_490.pt
[LOG] Saving tensor n1_to_1_490.pt
[LOG] Saving tensor n2_to_2_490.pt
[LOG] Computing n1_to_1 for num 820
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_4 for num 581
[LOG] Computing n2_to_2 (adjacency) for num 329
[LOG] Computing n2_to_2 (adjacency) for num 750
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_2 (adjacency) for num 820
[LOG] Computing n3_to_4 for num 581
[LOG] Computing n3_to_3 (adjacency) for num 750
[LOG] Global feature for num 581
[LOG] Global feature for num 581
[LOG] Saving tensor x_0_581.pt
[LOG] Computing n4_to_4 (coadjacency) for num 750
[LOG] Computing n0_to_1 for num 750
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_2 for num 750
[LOG] Saving tensor n3_to_3_490.pt
[LOG] Saving tensor x_1_581.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_3 (adjacency) for num 820
[LOG] Computing n4_to_4 (coadjacency) for num 820
[LOG] Saving tensor x_2_581.pt
[LOG] Computing n0_to_1 for num 820
[LOG] Saving tensor x_3_581.pt
[LOG] Saving tensor n4_to_4_490.pt
[LOG] Saving tensor x_4_581.pt
[LOG] Saving tensor n0_to_0_581.pt
[LOG] Saving tensor n0_to_1_490.pt
[LOG] Saving tensor n1_to_1_581.pt
[LOG] Computing n0_to_2 for num 820
[LOG] Saving tensor n0_to_2_490.pt
[LOG] Saving tensor n2_to_2_581.pt
[LOG] Saving tensor n0_to_3_490.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n0_to_4_490.pt
[LOG] Saving tensor n1_to_2_490.pt
[LOG] Saving tensor n1_to_3_490.pt
[LOG] Saving tensor n1_to_4_490.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n3_to_3_581.pt
[LOG] Saving tensor n4_to_4_581.pt
[LOG] Saving tensor n0_to_1_581.pt
[LOG] Saving tensor n2_to_3_490.pt
[LOG] Saving tensor n0_to_2_581.pt
[LOG] Saving tensor n2_to_4_490.pt
[LOG] Saving tensor n0_to_3_581.pt
[LOG] Computing n0_to_3 for num 750
[LOG] Computing n0_to_4 for num 750
[LOG] Saving tensor n3_to_4_490.pt
[LOG] Saving tensor n0_to_4_581.pt
[LOG] Saving tensor global_feature_490.pt
[LOG] Process 61: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n1_to_2_581.pt
[LOG] Computing n1_to_2 for num 750
[LOG] Saving tensor n1_to_3_581.pt
[LOG] Saving tensor n1_to_4_581.pt
[LOG] Saving tensor n2_to_3_581.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n2_to_4_581.pt
[LOG] Saving tensor n3_to_4_581.pt
[LOG] Computing n0_to_3 for num 820
[LOG] Saving tensor global_feature_581.pt
[LOG] Process 72: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_4 for num 820
[LOG] Computing n1_to_2 for num 820
[LOG] Computing n1_to_3 for num 750
[LOG] Computing n1_to_4 for num 750
[LOG] Computing n2_to_3 for num 750
[LOG] Computing n2_to_4 for num 750
[LOG] Computing n3_to_4 for num 750
[LOG] Global feature for num 750
[LOG] Global feature for num 750
[LOG] Saving tensor x_0_750.pt
[LOG] Saving tensor x_1_750.pt
[LOG] Saving tensor x_2_750.pt
[LOG] Saving tensor x_3_750.pt
[LOG] Saving tensor x_4_750.pt
[LOG] Saving tensor n0_to_0_750.pt
[LOG] Saving tensor n1_to_1_750.pt
[LOG] Saving tensor n2_to_2_750.pt
[LOG] Computing n1_to_3 for num 820
[LOG] Saving tensor n3_to_3_750.pt
[LOG] Computing n1_to_4 for num 820
[LOG] Saving tensor n4_to_4_750.pt
[LOG] Saving tensor n0_to_1_750.pt
[LOG] Saving tensor n0_to_2_750.pt
[LOG] Computing n2_to_3 for num 820
[LOG] Saving tensor n0_to_3_750.pt
[LOG] Saving tensor n0_to_4_750.pt
[LOG] Saving tensor n1_to_2_750.pt
[LOG] Saving tensor n1_to_3_750.pt
[LOG] Computing n2_to_4 for num 820
[LOG] Computing n3_to_4 for num 820
[LOG] Global feature for num 820
[LOG] Global feature for num 820
[LOG] Saving tensor x_0_820.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n1_to_4_750.pt
[LOG] Saving tensor x_1_820.pt
[LOG] Saving tensor x_2_820.pt
[LOG] Saving tensor n2_to_3_750.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor x_3_820.pt
[LOG] Saving tensor x_4_820.pt
[LOG] Saving tensor n2_to_4_750.pt
[LOG] Saving tensor n0_to_0_820.pt
[LOG] Saving tensor n3_to_4_750.pt
[LOG] Saving tensor n1_to_1_820.pt
[LOG] Saving tensor global_feature_750.pt
[LOG] Process 93: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n2_to_2_820.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n3_to_3_820.pt
[LOG] Saving tensor n4_to_4_820.pt
[LOG] Saving tensor n0_to_1_820.pt
[LOG] Saving tensor n0_to_2_820.pt
[LOG] Saving tensor n0_to_3_820.pt
[LOG] Saving tensor n0_to_4_820.pt
[LOG] Saving tensor n1_to_2_820.pt
[LOG] Saving tensor n1_to_3_820.pt
[LOG] Saving tensor n1_to_4_820.pt
[LOG] Saving tensor n2_to_3_820.pt
[LOG] Saving tensor n2_to_4_820.pt
[LOG] Saving tensor n3_to_4_820.pt
[LOG] Saving tensor global_feature_820.pt
[LOG] Process 102: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1351 Tetrahedra.
    [LOG] Generated 47 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.382978723404257
    [LOG] Max number of nodes per cluster is 71 and the number is 38
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] We will select 392 edges and 1351 tetra
[LOG] Edges from tetra 0 and KDTree 3391 with 0 edges in common.
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2693 Tetrahedra.
    [LOG] Generated 73 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.835616438356164
    [LOG] Max number of nodes per cluster is 123 and the number is 15
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] We will select 572 edges and 2693 tetra
[LOG] Edges from tetra 0 and KDTree 1607 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 0 subset clusters.
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2540 Tetrahedra.
    [LOG] Generated 70 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.214285714285714
    [LOG] Max number of nodes per cluster is 57 and the number is 68
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] We will select 571 edges and 2540 tetra
[LOG] Edges from tetra 0 and KDTree 2443 with 0 edges in common.
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1559 Tetrahedra.
    [LOG] Generated 26 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 25.653846153846153
    [LOG] Max number of nodes per cluster is 177 and the number is 24
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_3 (adjacency) for num 329
[LOG] Process 53: Created combinatorial complex for file data_429.hdf5
[LOG] Computing n4_to_4 (coadjacency) for num 329
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n0_to_1 for num 329
[LOG] Calculating for cell ranks 0 and 3
[LOG] We will select 142 edges and 1559 tetra
[LOG] Edges from tetra 0 and KDTree 11046 with 0 edges in common.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Process 53: Calculating Neighbors
[LOG] Loading pickle file data_429.pickle
[LOG] Processing node features for num 429
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing edge features for num 429
[LOG] Processing tetra features for num 429
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Processing cluster features for num 429
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Processing cluster features for num 429
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Processing adjacency and incidence matrices for num 429
[LOG] Computing n0_to_0 for num 429
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] GENERATED TETRA
[LOG] Removed 1 subset clusters.
[LOG] Computing n1_to_1 for num 429
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_2 for num 329
[LOG] Computing n2_to_2 (adjacency) for num 429
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 44: Created combinatorial complex for file data_355.hdf5
[LOG] Computing n3_to_3 (adjacency) for num 429
[LOG] Computing n4_to_4 (coadjacency) for num 429
[LOG] Computing n0_to_1 for num 429
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_2 for num 429
[LOG] Process 44: Calculating Neighbors
[LOG] Loading pickle file data_355.pickle
[LOG] Processing node features for num 355
[LOG] Processing edge features for num 355
[LOG] Processing tetra features for num 355
[LOG] Removed 2 subset clusters.
[LOG] Process 85: Created combinatorial complex for file data_685.hdf5
[LOG] Processing cluster features for num 355
[LOG] Processing cluster features for num 355
[LOG] Processing adjacency and incidence matrices for num 355
[LOG] Computing n0_to_0 for num 355
[LOG] Process 85: Calculating Neighbors
[LOG] Loading pickle file data_685.pickle
[LOG] Processing node features for num 685
[LOG] Processing edge features for num 685
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing tetra features for num 685
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 3587 Tetrahedra.
    [LOG] Generated 112 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.946428571428571
    [LOG] Max number of nodes per cluster is 43 and the number is 10
[LOG] Processing cluster features for num 685
[LOG] Computing n1_to_1 for num 355
[LOG] Processing cluster features for num 685
[LOG] Process 88: Created combinatorial complex for file data_708.hdf5
[LOG] Processing adjacency and incidence matrices for num 685
[LOG] Computing n0_to_0 for num 685
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_1 for num 685
[LOG] Calculating for cell ranks 2 and 3
[LOG] We will select 579 edges and 3587 tetra
[LOG] Edges from tetra 0 and KDTree 579 with 0 edges in common.
[LOG] Process 88: Calculating Neighbors
[LOG] Loading pickle file data_708.pickle
[LOG] Processing node features for num 708
[LOG] Processing edge features for num 708
[LOG] Computing n2_to_2 (adjacency) for num 685
[LOG] GENERATED TETRA
[LOG] Processing tetra features for num 708
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_3 for num 429
[LOG] Processing cluster features for num 708
[LOG] Computing n0_to_4 for num 429
[LOG] Processing cluster features for num 708
[LOG] Processing adjacency and incidence matrices for num 708
[LOG] Computing n0_to_0 for num 708
[LOG] Computing n1_to_2 for num 429
[LOG] Computing n3_to_3 (adjacency) for num 685
[LOG] Computing n2_to_2 (adjacency) for num 355
[LOG] Computing n4_to_4 (coadjacency) for num 685
[LOG] Computing n0_to_1 for num 685
[LOG] Computing n1_to_1 for num 708
[LOG] Computing n0_to_2 for num 685
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_3 for num 429
[LOG] Computing n1_to_4 for num 429
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_3 for num 429
[LOG] Computing n2_to_4 for num 429
[LOG] Computing n3_to_4 for num 429
[LOG] Global feature for num 429
[LOG] Global feature for num 429
[LOG] Saving tensor x_0_429.pt
[LOG] Saving tensor x_1_429.pt
[LOG] Saving tensor x_2_429.pt
[LOG] Saving tensor x_3_429.pt
[LOG] Saving tensor x_4_429.pt
[LOG] Saving tensor n0_to_0_429.pt
[LOG] Saving tensor n1_to_1_429.pt
[LOG] Saving tensor n2_to_2_429.pt
[LOG] Saving tensor n3_to_3_429.pt
[LOG] Saving tensor n4_to_4_429.pt
[LOG] Saving tensor n0_to_1_429.pt
[LOG] Saving tensor n0_to_2_429.pt
[LOG] Saving tensor n0_to_3_429.pt
[LOG] Saving tensor n0_to_4_429.pt
[LOG] Saving tensor n1_to_2_429.pt
[LOG] Saving tensor n1_to_3_429.pt
[LOG] Saving tensor n1_to_4_429.pt
[LOG] Saving tensor n2_to_3_429.pt
[LOG] Saving tensor n2_to_4_429.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n3_to_4_429.pt
[LOG] Saving tensor global_feature_429.pt
[LOG] Process 53: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_2 (adjacency) for num 708
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n3_to_3 (adjacency) for num 355
[LOG] Computing n4_to_4 (coadjacency) for num 355
[LOG] Computing n0_to_1 for num 355
[LOG] Computing n0_to_3 for num 329
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_4 for num 329
[LOG] Computing n0_to_2 for num 355
[LOG] Computing n1_to_2 for num 329
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n3_to_3 (adjacency) for num 708
[LOG] Computing n4_to_4 (coadjacency) for num 708
[LOG] Computing n0_to_1 for num 708
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_3 for num 685
[LOG] Computing n0_to_4 for num 685
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n0_to_2 for num 708
[LOG] Computing n1_to_2 for num 685
[LOG] Computing n1_to_3 for num 685
[LOG] Computing n1_to_4 for num 685
[LOG] Computing n2_to_3 for num 685
[LOG] Computing n2_to_4 for num 685
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n3_to_4 for num 685
[LOG] Global feature for num 685
[LOG] Global feature for num 685
[LOG] Saving tensor x_0_685.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor x_1_685.pt
[LOG] Computing n0_to_3 for num 708
[LOG] Computing n0_to_4 for num 708
[LOG] Saving tensor x_2_685.pt
[LOG] Computing n0_to_3 for num 355
[LOG] Computing n1_to_2 for num 708
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Removed 2 subset clusters.
[LOG] Computing n0_to_4 for num 355
[LOG] Computing n1_to_2 for num 355
[LOG] Saving tensor x_3_685.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor x_4_685.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n0_to_0_685.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n1_to_1_685.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n2_to_2_685.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n3_to_3_685.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n4_to_4_685.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n0_to_1_685.pt
[LOG] Saving tensor n0_to_2_685.pt
[LOG] Saving tensor n0_to_3_685.pt
[LOG] Saving tensor n0_to_4_685.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n1_to_2_685.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n1_to_3_685.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n1_to_4_685.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n2_to_3_685.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n2_to_4_685.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n3_to_4_685.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor global_feature_685.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Process 85: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_3 for num 708
[LOG] Computing n1_to_4 for num 708
[LOG] Computing n2_to_3 for num 708
[LOG] Computing n2_to_4 for num 708
[LOG] Computing n1_to_3 for num 355
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2732 Tetrahedra.
    [LOG] Generated 66 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.257575757575758
    [LOG] Max number of nodes per cluster is 143 and the number is 64
[LOG] Process 122: Created combinatorial complex for file data_960.hdf5
[LOG] Computing n1_to_4 for num 355
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1834 Tetrahedra.
    [LOG] Generated 60 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.083333333333334
    [LOG] Max number of nodes per cluster is 55 and the number is 29
[LOG] Computing n2_to_3 for num 355
[LOG] Computing n3_to_4 for num 708
[LOG] Calculating for cell ranks 0 and 2
[LOG] Global feature for num 708
[LOG] Global feature for num 708
[LOG] Saving tensor x_0_708.pt
[LOG] Saving tensor x_1_708.pt
[LOG] Saving tensor x_2_708.pt
[LOG] Saving tensor x_3_708.pt
[LOG] Saving tensor x_4_708.pt
[LOG] Saving tensor n0_to_0_708.pt
[LOG] Saving tensor n1_to_1_708.pt
[LOG] Computing n2_to_4 for num 355
[LOG] Saving tensor n2_to_2_708.pt
[LOG] Saving tensor n3_to_3_708.pt
[LOG] Saving tensor n4_to_4_708.pt
[LOG] Saving tensor n0_to_1_708.pt
[LOG] Saving tensor n0_to_2_708.pt
[LOG] Saving tensor n0_to_3_708.pt
[LOG] Saving tensor n0_to_4_708.pt
[LOG] Saving tensor n1_to_2_708.pt
[LOG] Saving tensor n1_to_3_708.pt
[LOG] We will select 139 edges and 1834 tetra
[LOG] Edges from tetra 0 and KDTree 443 with 0 edges in common.
[LOG] Saving tensor n1_to_4_708.pt
[LOG] We will select 492 edges and 2732 tetra
[LOG] Edges from tetra 0 and KDTree 4648 with 0 edges in common.
[LOG] Saving tensor n2_to_3_708.pt
[LOG] Computing n3_to_4 for num 355
[LOG] Saving tensor n2_to_4_708.pt
[LOG] Global feature for num 355
[LOG] Global feature for num 355
[LOG] Saving tensor x_0_355.pt
[LOG] Saving tensor n3_to_4_708.pt
[LOG] Saving tensor x_1_355.pt
[LOG] Saving tensor x_2_355.pt
[LOG] Saving tensor global_feature_708.pt
[LOG] Saving tensor x_3_355.pt
[LOG] Saving tensor x_4_355.pt
[LOG] Process 88: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_0_355.pt
[LOG] Saving tensor n1_to_1_355.pt
[LOG] Saving tensor n2_to_2_355.pt
[LOG] Saving tensor n3_to_3_355.pt
[LOG] Saving tensor n4_to_4_355.pt
[LOG] Saving tensor n0_to_1_355.pt
[LOG] Process 122: Calculating Neighbors
[LOG] Loading pickle file data_960.pickle
[LOG] Processing node features for num 960
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing edge features for num 960
[LOG] Saving tensor n0_to_2_355.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1715 Tetrahedra.
    [LOG] Generated 43 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.697674418604652
    [LOG] Max number of nodes per cluster is 104 and the number is 38
[LOG] Saving tensor n0_to_3_355.pt
[LOG] Saving tensor n0_to_4_355.pt
[LOG] Saving tensor n1_to_2_355.pt
[LOG] Saving tensor n1_to_3_355.pt
[LOG] Saving tensor n1_to_4_355.pt
[LOG] Saving tensor n2_to_3_355.pt
[LOG] Saving tensor n2_to_4_355.pt
[LOG] Saving tensor n3_to_4_355.pt
[LOG] Processing tetra features for num 960
[LOG] Saving tensor global_feature_355.pt
[LOG] Process 44: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] We will select 405 edges and 1715 tetra
[LOG] Edges from tetra 0 and KDTree 2599 with 0 edges in common.
[LOG] Processing cluster features for num 960
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 960
[LOG] Processing adjacency and incidence matrices for num 960
[LOG] Computing n0_to_0 for num 960
[LOG] Computing n1_to_1 for num 960
[LOG] Calculating for cell ranks 3 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Process 114: Created combinatorial complex for file data_908.hdf5
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 11: Created combinatorial complex for file data_95.hdf5
[LOG] Process 114: Calculating Neighbors
[LOG] Loading pickle file data_908.pickle
[LOG] Processing node features for num 908
[LOG] Processing edge features for num 908
[LOG] Processing tetra features for num 908
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing cluster features for num 908
[LOG] Computing n2_to_2 (adjacency) for num 960
[LOG] GENERATED TETRA
[LOG] Processing cluster features for num 908
[LOG] Processing adjacency and incidence matrices for num 908
[LOG] Computing n0_to_0 for num 908
[LOG] Computing n1_to_1 for num 908
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 99: Created combinatorial complex for file data_797.hdf5
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_2 (adjacency) for num 908
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n3_to_3 (adjacency) for num 908
[LOG] Computing n4_to_4 (coadjacency) for num 908
[LOG] Process 99: Calculating Neighbors
[LOG] Loading pickle file data_797.pickle
[LOG] Processing node features for num 797
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_1 for num 908
[LOG] GENERATED TETRA
[LOG] Processing edge features for num 797
[LOG] Computing n0_to_2 for num 908
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing tetra features for num 797
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1618 Tetrahedra.
    [LOG] Generated 58 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.948275862068966
    [LOG] Max number of nodes per cluster is 70 and the number is 52
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing cluster features for num 797
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing cluster features for num 797
[LOG] Calculating for cell ranks 4 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1557 Tetrahedra.
    [LOG] Generated 45 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.666666666666666
    [LOG] Max number of nodes per cluster is 53 and the number is 34
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing adjacency and incidence matrices for num 797
[LOG] Computing n0_to_0 for num 797
[LOG] We will select 456 edges and 1618 tetra
[LOG] Edges from tetra 0 and KDTree 1784 with 0 edges in common.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] We will select 241 edges and 1557 tetra
[LOG] Edges from tetra 0 and KDTree 1355 with 0 edges in common.
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Process 11: Calculating Neighbors
[LOG] Loading pickle file data_95.pickle
[LOG] Processing node features for num 95
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Processing edge features for num 95
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Processing tetra features for num 95
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n0_to_3 for num 908
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n0_to_4 for num 908
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n1_to_1 for num 797
[LOG] Computing n1_to_2 for num 908
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Processing cluster features for num 95
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Processing cluster features for num 95
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Processing adjacency and incidence matrices for num 95
[LOG] Computing n0_to_0 for num 95
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n1_to_3 for num 908
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n1_to_4 for num 908
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n2_to_3 for num 908
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 960
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n4_to_4 (coadjacency) for num 960
[LOG] Computing n0_to_1 for num 960
[LOG] Computing n2_to_4 for num 908
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_4 for num 908
[LOG] Global feature for num 908
[LOG] Global feature for num 908
[LOG] Saving tensor x_0_908.pt
[LOG] Computing n1_to_1 for num 95
[LOG] Saving tensor x_1_908.pt
[LOG] Saving tensor x_2_908.pt
[LOG] Saving tensor x_3_908.pt
[LOG] Saving tensor x_4_908.pt
[LOG] Saving tensor n0_to_0_908.pt
[LOG] Saving tensor n1_to_1_908.pt
[LOG] Saving tensor n2_to_2_908.pt
[LOG] Saving tensor n3_to_3_908.pt
[LOG] Saving tensor n4_to_4_908.pt
[LOG] Saving tensor n0_to_1_908.pt
[LOG] Saving tensor n0_to_2_908.pt
[LOG] Saving tensor n0_to_3_908.pt
[LOG] Saving tensor n0_to_4_908.pt
[LOG] Computing n0_to_2 for num 960
[LOG] Saving tensor n1_to_2_908.pt
[LOG] Saving tensor n1_to_3_908.pt
[LOG] Saving tensor n1_to_4_908.pt
[LOG] Saving tensor n2_to_3_908.pt
[LOG] Saving tensor n2_to_4_908.pt
[LOG] Saving tensor n3_to_4_908.pt
[LOG] Saving tensor global_feature_908.pt
[LOG] Process 114: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 4
[LOG] Removed 0 subset clusters.
[LOG] Removed 0 subset clusters.
[LOG] Computing n2_to_2 (adjacency) for num 797
[LOG] Computing n2_to_2 (adjacency) for num 95
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 125: Created combinatorial complex for file data_983.hdf5
[LOG] Process 24: Created combinatorial complex for file data_197.hdf5
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n3_to_3 (adjacency) for num 95
[LOG] Process 125: Calculating Neighbors
[LOG] Loading pickle file data_983.pickle
[LOG] Processing node features for num 983
[LOG] Computing n4_to_4 (coadjacency) for num 95
[LOG] Computing n0_to_1 for num 95
[LOG] Processing edge features for num 983
[LOG] Processing tetra features for num 983
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing cluster features for num 983
[LOG] Processing cluster features for num 983
[LOG] Computing n0_to_2 for num 95
[LOG] Processing adjacency and incidence matrices for num 983
[LOG] Computing n0_to_0 for num 983
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1153 Tetrahedra.
    [LOG] Generated 33 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.333333333333332
    [LOG] Max number of nodes per cluster is 45 and the number is 20
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n1_to_1 for num 983
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] We will select 233 edges and 1153 tetra
[LOG] Edges from tetra 0 and KDTree 237 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 983
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_3 for num 960
[LOG] Computing n3_to_3 (adjacency) for num 797
[LOG] Computing n4_to_4 (coadjacency) for num 797
[LOG] Computing n0_to_1 for num 797
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_3 (adjacency) for num 983
[LOG] Computing n4_to_4 (coadjacency) for num 983
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_4 for num 960
[LOG] Computing n0_to_1 for num 983
[LOG] Computing n1_to_2 for num 960
[LOG] Computing n0_to_2 for num 983
[LOG] Computing n0_to_2 for num 797
[LOG] Process 24: Calculating Neighbors
[LOG] Loading pickle file data_197.pickle
[LOG] Processing node features for num 197
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing edge features for num 197
[LOG] Computing n0_to_3 for num 95
[LOG] Computing n0_to_4 for num 95
[LOG] Processing tetra features for num 197
[LOG] Computing n1_to_2 for num 95
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing cluster features for num 197
[LOG] Computing n1_to_3 for num 329
[LOG] Processing cluster features for num 197
[LOG] Removed 1 subset clusters.
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2112 Tetrahedra.
    [LOG] Generated 62 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.177419354838708
    [LOG] Max number of nodes per cluster is 137 and the number is 56
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing adjacency and incidence matrices for num 197
[LOG] Computing n0_to_0 for num 197
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_4 for num 329
[LOG] Computing n1_to_3 for num 95
[LOG] We will select 503 edges and 2112 tetra
[LOG] Edges from tetra 0 and KDTree 4315 with 0 edges in common.
[LOG] Computing n1_to_4 for num 95
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_3 for num 95
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Process 67: Created combinatorial complex for file data_541.hdf5
[LOG] Computing n0_to_3 for num 983
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n1_to_1 for num 197
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_4 for num 95
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n0_to_4 for num 983
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n2_to_3 for num 329
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n3_to_4 for num 95
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Global feature for num 95
[LOG] Global feature for num 95
[LOG] Saving tensor x_0_95.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n1_to_2 for num 983
[LOG] Saving tensor x_1_95.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor x_2_95.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor x_3_95.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor x_4_95.pt
[LOG] Saving tensor n0_to_0_95.pt
[LOG] Process 67: Calculating Neighbors
[LOG] Loading pickle file data_541.pickle
[LOG] Processing node features for num 541
[LOG] Processing edge features for num 541
[LOG] Saving tensor n1_to_1_95.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n2_to_2_95.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Processing tetra features for num 541
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n3_to_3_95.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n4_to_4_95.pt
[LOG] Computing n1_to_3 for num 960
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n0_to_1_95.pt
[LOG] Processing cluster features for num 541
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n0_to_2_95.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n0_to_3_95.pt
[LOG] Processing cluster features for num 541
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n0_to_4_95.pt
[LOG] Computing n1_to_4 for num 960
[LOG] Computing n1_to_3 for num 983
[LOG] Saving tensor n1_to_2_95.pt
[LOG] Processing adjacency and incidence matrices for num 541
[LOG] Computing n0_to_0 for num 541
[LOG] Computing n1_to_4 for num 983
[LOG] Saving tensor n1_to_3_95.pt
[LOG] Saving tensor n1_to_4_95.pt
[LOG] Computing n2_to_3 for num 983
[LOG] Saving tensor n2_to_3_95.pt
[LOG] Saving tensor n2_to_4_95.pt
[LOG] Computing n2_to_3 for num 960
[LOG] Computing n1_to_1 for num 541
[LOG] Saving tensor n3_to_4_95.pt
[LOG] Saving tensor global_feature_95.pt
[LOG] Process 11: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n2_to_4 for num 983
[LOG] Computing n2_to_2 (adjacency) for num 197
[LOG] Computing n3_to_4 for num 983
[LOG] Global feature for num 983
[LOG] Global feature for num 983
[LOG] Saving tensor x_0_983.pt
[LOG] Saving tensor x_1_983.pt
[LOG] Saving tensor x_2_983.pt
[LOG] Saving tensor x_3_983.pt
[LOG] Saving tensor x_4_983.pt
[LOG] Saving tensor n0_to_0_983.pt
[LOG] Saving tensor n1_to_1_983.pt
[LOG] Saving tensor n2_to_2_983.pt
[LOG] Saving tensor n3_to_3_983.pt
[LOG] Saving tensor n4_to_4_983.pt
[LOG] Computing n2_to_2 (adjacency) for num 541
[LOG] Saving tensor n0_to_1_983.pt
[LOG] Saving tensor n0_to_2_983.pt
[LOG] Saving tensor n0_to_3_983.pt
[LOG] Saving tensor n0_to_4_983.pt
[LOG] Saving tensor n1_to_2_983.pt
[LOG] Saving tensor n1_to_3_983.pt
[LOG] Saving tensor n1_to_4_983.pt
[LOG] Computing n2_to_4 for num 960
[LOG] Saving tensor n2_to_3_983.pt
[LOG] Saving tensor n2_to_4_983.pt
[LOG] Saving tensor n3_to_4_983.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor global_feature_983.pt
[LOG] Process 125: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n3_to_3 (adjacency) for num 541
[LOG] Computing n4_to_4 (coadjacency) for num 541
[LOG] Computing n0_to_1 for num 541
[LOG] Computing n0_to_2 for num 541
[LOG] Computing n3_to_3 (adjacency) for num 197
[LOG] Computing n4_to_4 (coadjacency) for num 197
[LOG] Computing n0_to_1 for num 197
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_4 for num 960
[LOG] Global feature for num 960
[LOG] Global feature for num 960
[LOG] Saving tensor x_0_960.pt
[LOG] Saving tensor x_1_960.pt
[LOG] Saving tensor x_2_960.pt
[LOG] Saving tensor x_3_960.pt
[LOG] Saving tensor x_4_960.pt
[LOG] Saving tensor n0_to_0_960.pt
[LOG] Saving tensor n1_to_1_960.pt
[LOG] Saving tensor n2_to_2_960.pt
[LOG] Saving tensor n3_to_3_960.pt
[LOG] Saving tensor n4_to_4_960.pt
[LOG] Saving tensor n0_to_1_960.pt
[LOG] Saving tensor n0_to_2_960.pt
[LOG] Saving tensor n0_to_3_960.pt
[LOG] Saving tensor n0_to_4_960.pt
[LOG] Computing n0_to_3 for num 541
[LOG] Saving tensor n1_to_2_960.pt
[LOG] Computing n0_to_4 for num 541
[LOG] Saving tensor n1_to_3_960.pt
[LOG] Saving tensor n1_to_4_960.pt
[LOG] Computing n1_to_2 for num 541
[LOG] Saving tensor n2_to_3_960.pt
[LOG] Saving tensor n2_to_4_960.pt
[LOG] Computing n0_to_2 for num 197
[LOG] Saving tensor n3_to_4_960.pt
[LOG] Computing n1_to_3 for num 541
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_4 for num 541
[LOG] Computing n2_to_3 for num 541
[LOG] Removed 0 subset clusters.
[LOG] Computing n2_to_4 for num 541
[LOG] Computing n3_to_4 for num 541
[LOG] Global feature for num 541
[LOG] Global feature for num 541
[LOG] Saving tensor x_0_541.pt
[LOG] Saving tensor global_feature_960.pt
[LOG] Saving tensor x_1_541.pt
[LOG] Process 122: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor x_2_541.pt
[LOG] Saving tensor x_3_541.pt
[LOG] Saving tensor x_4_541.pt
[LOG] Computing n0_to_3 for num 797
[LOG] Computing n0_to_4 for num 797
[LOG] Saving tensor n0_to_0_541.pt
[LOG] Saving tensor n1_to_1_541.pt
[LOG] Computing n1_to_2 for num 797
[LOG] Saving tensor n2_to_2_541.pt
[LOG] Saving tensor n3_to_3_541.pt
[LOG] Saving tensor n4_to_4_541.pt
[LOG] Saving tensor n0_to_1_541.pt
[LOG] Saving tensor n0_to_2_541.pt
[LOG] Saving tensor n0_to_3_541.pt
[LOG] Saving tensor n0_to_4_541.pt
[LOG] Saving tensor n1_to_2_541.pt
[LOG] Saving tensor n1_to_3_541.pt
[LOG] Saving tensor n1_to_4_541.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n2_to_3_541.pt
[LOG] Saving tensor n2_to_4_541.pt
[LOG] Saving tensor n3_to_4_541.pt
[LOG] Saving tensor global_feature_541.pt
[LOG] Process 67: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 17: Created combinatorial complex for file data_142.hdf5
[LOG] Computing n2_to_4 for num 329
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 17: Calculating Neighbors
[LOG] Loading pickle file data_142.pickle
[LOG] Processing node features for num 142
[LOG] Processing edge features for num 142
[LOG] Computing n3_to_4 for num 329
[LOG] Global feature for num 329
[LOG] Global feature for num 329
[LOG] Saving tensor x_0_329.pt
[LOG] Saving tensor x_1_329.pt
[LOG] Saving tensor x_2_329.pt
[LOG] Saving tensor x_3_329.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor x_4_329.pt
[LOG] Saving tensor n0_to_0_329.pt
[LOG] Computing n0_to_3 for num 197
[LOG] Saving tensor n1_to_1_329.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n2_to_2_329.pt
[LOG] Processing tetra features for num 142
[LOG] Computing n1_to_3 for num 797
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_4 for num 797
[LOG] Computing n0_to_4 for num 197
[LOG] Computing n2_to_3 for num 797
[LOG] Saving tensor n3_to_3_329.pt
[LOG] Computing n1_to_2 for num 197
[LOG] Saving tensor n4_to_4_329.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n0_to_1_329.pt
[LOG] Processing cluster features for num 142
[LOG] Saving tensor n0_to_2_329.pt
[LOG] Saving tensor n0_to_3_329.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n0_to_4_329.pt
[LOG] Saving tensor n1_to_2_329.pt
[LOG] Computing n2_to_4 for num 797
[LOG] Saving tensor n1_to_3_329.pt
[LOG] Saving tensor n1_to_4_329.pt
[LOG] Saving tensor n2_to_3_329.pt
[LOG] Processing cluster features for num 142
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n2_to_4_329.pt
[LOG] Saving tensor n3_to_4_329.pt
[LOG] GENERATED TETRA
[LOG] Processing adjacency and incidence matrices for num 142
[LOG] Computing n0_to_0 for num 142
[LOG] Saving tensor global_feature_329.pt
[LOG] Computing n3_to_4 for num 797
[LOG] Process 41: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Global feature for num 797
[LOG] Global feature for num 797
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor x_0_797.pt
[LOG] Saving tensor x_1_797.pt
[LOG] Saving tensor x_2_797.pt
[LOG] Saving tensor x_3_797.pt
[LOG] Saving tensor x_4_797.pt
[LOG] Saving tensor n0_to_0_797.pt
[LOG] Saving tensor n1_to_1_797.pt
[LOG] Saving tensor n2_to_2_797.pt
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 8411 Tetrahedra.
    [LOG] Generated 187 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.470588235294116
    [LOG] Max number of nodes per cluster is 68 and the number is 178
[LOG] Saving tensor n3_to_3_797.pt
[LOG] Computing n1_to_3 for num 197
[LOG] Computing n1_to_4 for num 197
[LOG] Saving tensor n4_to_4_797.pt
[LOG] Saving tensor n0_to_1_797.pt
[LOG] Computing n2_to_3 for num 197
[LOG] Saving tensor n0_to_2_797.pt
[LOG] Saving tensor n0_to_3_797.pt
[LOG] Saving tensor n0_to_4_797.pt
[LOG] Saving tensor n1_to_2_797.pt
[LOG] Saving tensor n1_to_3_797.pt
[LOG] Saving tensor n1_to_4_797.pt
[LOG] Computing n2_to_4 for num 197
[LOG] Saving tensor n2_to_3_797.pt
[LOG] Saving tensor n2_to_4_797.pt
[LOG] Saving tensor n3_to_4_797.pt
[LOG] Saving tensor global_feature_797.pt
[LOG] Process 99: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n3_to_4 for num 197
[LOG] Global feature for num 197
[LOG] Global feature for num 197
[LOG] Saving tensor x_0_197.pt
[LOG] Saving tensor x_1_197.pt
[LOG] Saving tensor x_2_197.pt
[LOG] Saving tensor x_3_197.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor x_4_197.pt
[LOG] Saving tensor n0_to_0_197.pt
[LOG] Saving tensor n1_to_1_197.pt
[LOG] Saving tensor n2_to_2_197.pt
[LOG] Saving tensor n3_to_3_197.pt
[LOG] Saving tensor n4_to_4_197.pt
[LOG] Saving tensor n0_to_1_197.pt
[LOG] Computing n1_to_1 for num 142
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] GENERATED TETRA
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1791 Tetrahedra.
    [LOG] Generated 49 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.877551020408163
    [LOG] Max number of nodes per cluster is 43 and the number is 30
[LOG] Saving tensor n0_to_2_197.pt
[LOG] Saving tensor n0_to_3_197.pt
[LOG] Saving tensor n0_to_4_197.pt
[LOG] Saving tensor n1_to_2_197.pt
[LOG] Saving tensor n1_to_3_197.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n1_to_4_197.pt
[LOG] Saving tensor n2_to_3_197.pt
[LOG] We will select 402 edges and 1791 tetra
[LOG] Edges from tetra 0 and KDTree 402 with 0 edges in common.
[LOG] Saving tensor n2_to_4_197.pt
[LOG] Saving tensor n3_to_4_197.pt
[LOG] Saving tensor global_feature_197.pt
[LOG] Process 24: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1278 Tetrahedra.
    [LOG] Generated 36 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.38888888888889
    [LOG] Max number of nodes per cluster is 40 and the number is 34
[LOG] Computing n2_to_2 (adjacency) for num 142
[LOG] We will select 120 edges and 1278 tetra
[LOG] Edges from tetra 0 and KDTree 120 with 0 edges in common.
[LOG] We will select 2855 edges and 8411 tetra
[LOG] Edges from tetra 0 and KDTree 2855 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_3 (adjacency) for num 142
[LOG] Computing n4_to_4 (coadjacency) for num 142
[LOG] Computing n0_to_1 for num 142
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_2 for num 142
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 84: Created combinatorial complex for file data_674.hdf5
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 1990 Tetrahedra.
    [LOG] Generated 64 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.953125
    [LOG] Max number of nodes per cluster is 32 and the number is 8
[LOG] Process 84: Calculating Neighbors
[LOG] Loading pickle file data_674.pickle
[LOG] Processing node features for num 674
[LOG] Processing edge features for num 674
[LOG] Processing tetra features for num 674
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Processing cluster features for num 674
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Processing cluster features for num 674
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] We will select 632 edges and 1990 tetra
[LOG] Edges from tetra 0 and KDTree 632 with 0 edges in common.
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Processing adjacency and incidence matrices for num 674
[LOG] Computing n0_to_0 for num 674
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n1_to_1 for num 674
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3484 Tetrahedra.
    [LOG] Generated 89 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.730337078651685
    [LOG] Max number of nodes per cluster is 66 and the number is 78
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 30: Created combinatorial complex for file data_244.hdf5
[LOG] Computing n2_to_2 (adjacency) for num 674
[LOG] Calculating for cell ranks 0 and 3
[LOG] We will select 377 edges and 3484 tetra
[LOG] Edges from tetra 0 and KDTree 1449 with 0 edges in common.
[LOG] Process 30: Calculating Neighbors
[LOG] Loading pickle file data_244.pickle
[LOG] Processing node features for num 244
[LOG] Processing edge features for num 244
[LOG] Processing tetra features for num 244
[LOG] Processing cluster features for num 244
[LOG] Processing cluster features for num 244
[LOG] Processing adjacency and incidence matrices for num 244
[LOG] Computing n0_to_0 for num 244
[LOG] Computing n1_to_1 for num 244
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n3_to_3 (adjacency) for num 674
[LOG] Computing n4_to_4 (coadjacency) for num 674
[LOG] Computing n2_to_2 (adjacency) for num 244
[LOG] Computing n0_to_1 for num 674
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_2 for num 674
[LOG] Computing n3_to_3 (adjacency) for num 244
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n4_to_4 (coadjacency) for num 244
[LOG] Computing n0_to_1 for num 244
[LOG] Computing n0_to_2 for num 244
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n0_to_3 for num 142
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n0_to_3 for num 244
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n0_to_4 for num 244
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n1_to_2 for num 244
[LOG] Computing n0_to_4 for num 142
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n0_to_3 for num 674
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n0_to_4 for num 674
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n1_to_3 for num 244
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n1_to_2 for num 674
[LOG] Computing n1_to_2 for num 142
[LOG] Computing n1_to_4 for num 244
[LOG] Computing n2_to_3 for num 244
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_4 for num 244
[LOG] Computing n3_to_4 for num 244
[LOG] Global feature for num 244
[LOG] Global feature for num 244
[LOG] Saving tensor x_0_244.pt
[LOG] Saving tensor x_1_244.pt
[LOG] Saving tensor x_2_244.pt
[LOG] Saving tensor x_3_244.pt
[LOG] Saving tensor x_4_244.pt
[LOG] Saving tensor n0_to_0_244.pt
[LOG] Saving tensor n1_to_1_244.pt
[LOG] Saving tensor n2_to_2_244.pt
[LOG] Saving tensor n3_to_3_244.pt
[LOG] Saving tensor n4_to_4_244.pt
[LOG] Saving tensor n0_to_1_244.pt
[LOG] Saving tensor n0_to_2_244.pt
[LOG] Saving tensor n0_to_3_244.pt
[LOG] Saving tensor n0_to_4_244.pt
[LOG] Saving tensor n1_to_2_244.pt
[LOG] Saving tensor n1_to_3_244.pt
[LOG] Saving tensor n1_to_4_244.pt
[LOG] Saving tensor n2_to_3_244.pt
[LOG] Saving tensor n2_to_4_244.pt
[LOG] Saving tensor n3_to_4_244.pt
[LOG] Saving tensor global_feature_244.pt
[LOG] Process 30: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_3 for num 674
[LOG] Process 3: Created combinatorial complex for file data_29.hdf5
[LOG] Computing n1_to_4 for num 674
[LOG] Computing n2_to_3 for num 674
[LOG] Computing n2_to_4 for num 674
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_4 for num 674
[LOG] Global feature for num 674
[LOG] Global feature for num 674
[LOG] Saving tensor x_0_674.pt
[LOG] Saving tensor x_1_674.pt
[LOG] Saving tensor x_2_674.pt
[LOG] Saving tensor x_3_674.pt
[LOG] Saving tensor x_4_674.pt
[LOG] Saving tensor n0_to_0_674.pt
[LOG] Saving tensor n1_to_1_674.pt
[LOG] Saving tensor n2_to_2_674.pt
[LOG] Saving tensor n3_to_3_674.pt
[LOG] Computing n1_to_3 for num 142
[LOG] Saving tensor n4_to_4_674.pt
[LOG] Saving tensor n0_to_1_674.pt
[LOG] Saving tensor n0_to_2_674.pt
[LOG] Computing n1_to_4 for num 142
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n0_to_3_674.pt
[LOG] Saving tensor n0_to_4_674.pt
[LOG] Saving tensor n1_to_2_674.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_3 for num 142
[LOG] Saving tensor n1_to_3_674.pt
[LOG] Saving tensor n1_to_4_674.pt
[LOG] Saving tensor n2_to_3_674.pt
[LOG] Saving tensor n2_to_4_674.pt
[LOG] Saving tensor n3_to_4_674.pt
[LOG] Saving tensor global_feature_674.pt
[LOG] Process 84: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 3: Calculating Neighbors
[LOG] Loading pickle file data_29.pickle
[LOG] Processing node features for num 29
[LOG] Processing edge features for num 29
[LOG] Computing n2_to_4 for num 142
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing tetra features for num 29
[LOG] Computing n3_to_4 for num 142
[LOG] Global feature for num 142
[LOG] Global feature for num 142
[LOG] Saving tensor x_0_142.pt
[LOG] Saving tensor x_1_142.pt
[LOG] Saving tensor x_2_142.pt
[LOG] Saving tensor x_3_142.pt
[LOG] Saving tensor x_4_142.pt
[LOG] Saving tensor n0_to_0_142.pt
[LOG] Saving tensor n1_to_1_142.pt
[LOG] Saving tensor n2_to_2_142.pt
[LOG] Processing cluster features for num 29
[LOG] Saving tensor n3_to_3_142.pt
[LOG] Saving tensor n4_to_4_142.pt
[LOG] Saving tensor n0_to_1_142.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n0_to_2_142.pt
[LOG] Saving tensor n0_to_3_142.pt
[LOG] Processing cluster features for num 29
[LOG] Saving tensor n0_to_4_142.pt
[LOG] Saving tensor n1_to_2_142.pt
[LOG] Saving tensor n1_to_3_142.pt
[LOG] Saving tensor n1_to_4_142.pt
[LOG] Saving tensor n2_to_3_142.pt
[LOG] Saving tensor n2_to_4_142.pt
[LOG] Saving tensor n3_to_4_142.pt
[LOG] Processing adjacency and incidence matrices for num 29
[LOG] Computing n0_to_0 for num 29
[LOG] Saving tensor global_feature_142.pt
[LOG] Process 17: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_1 for num 29
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_2 (adjacency) for num 29
[LOG] Calculating for cell ranks 1 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_3 (adjacency) for num 29
[LOG] Computing n4_to_4 (coadjacency) for num 29
[LOG] Computing n0_to_1 for num 29
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_2 for num 29
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1020 Tetrahedra.
    [LOG] Generated 27 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.777777777777779
    [LOG] Max number of nodes per cluster is 34 and the number is 21
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 2 subset clusters.
[LOG] We will select 285 edges and 1020 tetra
[LOG] Edges from tetra 0 and KDTree 285 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 116: Created combinatorial complex for file data_920.hdf5
[LOG] Computing n0_to_3 for num 29
[LOG] Computing n0_to_4 for num 29
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_2 for num 29
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 77: Created combinatorial complex for file data_623.hdf5
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 116: Calculating Neighbors
[LOG] Loading pickle file data_920.pickle
[LOG] Processing node features for num 920
[LOG] Processing edge features for num 920
[LOG] Processing tetra features for num 920
[LOG] Computing n1_to_3 for num 29
[LOG] Computing n1_to_4 for num 29
[LOG] Process 77: Calculating Neighbors
[LOG] Loading pickle file data_623.pickle
[LOG] Processing node features for num 623
[LOG] Processing edge features for num 623
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_3 for num 29
[LOG] Processing tetra features for num 623
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing cluster features for num 623
[LOG] Processing cluster features for num 623
[LOG] Computing n2_to_4 for num 29
[LOG] Processing cluster features for num 920
[LOG] Processing adjacency and incidence matrices for num 623
[LOG] Computing n0_to_0 for num 623
[LOG] Computing n1_to_1 for num 623
[LOG] Computing n3_to_4 for num 29
[LOG] Global feature for num 29
[LOG] Global feature for num 29
[LOG] Saving tensor x_0_29.pt
[LOG] Processing cluster features for num 920
[LOG] Saving tensor x_1_29.pt
[LOG] Saving tensor x_2_29.pt
[LOG] Saving tensor x_3_29.pt
[LOG] Saving tensor x_4_29.pt
[LOG] Processing adjacency and incidence matrices for num 920
[LOG] Computing n0_to_0 for num 920
[LOG] Computing n2_to_2 (adjacency) for num 623
[LOG] Computing n3_to_3 (adjacency) for num 623
[LOG] Computing n4_to_4 (coadjacency) for num 623
[LOG] Computing n0_to_1 for num 623
[LOG] Saving tensor n0_to_0_29.pt
[LOG] Saving tensor n1_to_1_29.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_2 for num 623
[LOG] Saving tensor n2_to_2_29.pt
[LOG] Computing n1_to_1 for num 920
[LOG] Saving tensor n3_to_3_29.pt
[LOG] Saving tensor n4_to_4_29.pt
[LOG] Saving tensor n0_to_1_29.pt
[LOG] Saving tensor n0_to_2_29.pt
[LOG] Saving tensor n0_to_3_29.pt
[LOG] Saving tensor n0_to_4_29.pt
[LOG] Saving tensor n1_to_2_29.pt
[LOG] Saving tensor n1_to_3_29.pt
[LOG] Saving tensor n1_to_4_29.pt
[LOG] Saving tensor n2_to_3_29.pt
[LOG] Saving tensor n2_to_4_29.pt
[LOG] Saving tensor n3_to_4_29.pt
[LOG] Saving tensor global_feature_29.pt
[LOG] Process 3: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 623
[LOG] Computing n0_to_4 for num 623
[LOG] Computing n1_to_2 for num 623
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_3 for num 623
[LOG] Computing n1_to_4 for num 623
[LOG] Computing n2_to_3 for num 623
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_4 for num 623
[LOG] Computing n3_to_4 for num 623
[LOG] Global feature for num 623
[LOG] Global feature for num 623
[LOG] Saving tensor x_0_623.pt
[LOG] Saving tensor x_1_623.pt
[LOG] Saving tensor x_2_623.pt
[LOG] Saving tensor x_3_623.pt
[LOG] Saving tensor x_4_623.pt
[LOG] Saving tensor n0_to_0_623.pt
[LOG] Saving tensor n1_to_1_623.pt
[LOG] Saving tensor n2_to_2_623.pt
[LOG] Saving tensor n3_to_3_623.pt
[LOG] Saving tensor n4_to_4_623.pt
[LOG] Saving tensor n0_to_1_623.pt
[LOG] Saving tensor n0_to_2_623.pt
[LOG] Saving tensor n0_to_3_623.pt
[LOG] Saving tensor n0_to_4_623.pt
[LOG] Saving tensor n1_to_2_623.pt
[LOG] Saving tensor n1_to_3_623.pt
[LOG] Saving tensor n1_to_4_623.pt
[LOG] Saving tensor n2_to_3_623.pt
[LOG] Saving tensor n2_to_4_623.pt
[LOG] Saving tensor n3_to_4_623.pt
[LOG] Saving tensor global_feature_623.pt
[LOG] Process 77: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_2 (adjacency) for num 920
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 920
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n4_to_4 (coadjacency) for num 920
[LOG] Computing n0_to_1 for num 920
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_2 for num 920
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1843 Tetrahedra.
    [LOG] Generated 47 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.404255319148936
    [LOG] Max number of nodes per cluster is 52 and the number is 38
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] We will select 560 edges and 1843 tetra
[LOG] Edges from tetra 0 and KDTree 1555 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 36: Created combinatorial complex for file data_289.hdf5
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_3 for num 920
[LOG] Computing n0_to_4 for num 920
[LOG] Computing n1_to_2 for num 920
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 117: Created combinatorial complex for file data_928.hdf5
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 117: Calculating Neighbors
[LOG] Loading pickle file data_928.pickle
[LOG] Processing node features for num 928
[LOG] Processing edge features for num 928
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_3 for num 920
[LOG] Computing n1_to_4 for num 920
[LOG] Processing tetra features for num 928
[LOG] Computing n2_to_3 for num 920
[LOG] Processing cluster features for num 928
[LOG] Processing cluster features for num 928
[LOG] Computing n2_to_4 for num 920
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing adjacency and incidence matrices for num 928
[LOG] Computing n0_to_0 for num 928
[LOG] Process 36: Calculating Neighbors
[LOG] Loading pickle file data_289.pickle
[LOG] Processing node features for num 289
[LOG] Processing edge features for num 289
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n3_to_4 for num 920
[LOG] Global feature for num 920
[LOG] Global feature for num 920
[LOG] Saving tensor x_0_920.pt
[LOG] Saving tensor x_1_920.pt
[LOG] Saving tensor x_2_920.pt
[LOG] Saving tensor x_3_920.pt
[LOG] Saving tensor x_4_920.pt
[LOG] Saving tensor n0_to_0_920.pt
[LOG] Saving tensor n1_to_1_920.pt
[LOG] Computing n1_to_1 for num 928
[LOG] Saving tensor n2_to_2_920.pt
[LOG] Saving tensor n3_to_3_920.pt
[LOG] Saving tensor n4_to_4_920.pt
[LOG] Saving tensor n0_to_1_920.pt
[LOG] Saving tensor n0_to_2_920.pt
[LOG] Saving tensor n0_to_3_920.pt
[LOG] Saving tensor n0_to_4_920.pt
[LOG] Saving tensor n1_to_2_920.pt
[LOG] Saving tensor n1_to_3_920.pt
[LOG] Saving tensor n1_to_4_920.pt
[LOG] Saving tensor n2_to_3_920.pt
[LOG] Saving tensor n2_to_4_920.pt
[LOG] Processing tetra features for num 289
[LOG] Saving tensor n3_to_4_920.pt
[LOG] Saving tensor global_feature_920.pt
[LOG] Process 116: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing cluster features for num 289
[LOG] Computing n2_to_2 (adjacency) for num 928
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Processing cluster features for num 289
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n3_to_3 (adjacency) for num 928
[LOG] Computing n4_to_4 (coadjacency) for num 928
[LOG] Computing n0_to_1 for num 928
[LOG] Computing n0_to_2 for num 928
[LOG] Processing adjacency and incidence matrices for num 289
[LOG] Computing n0_to_0 for num 289
[LOG] Calculating for cell ranks 0 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3285 Tetrahedra.
    [LOG] Generated 80 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.5625
    [LOG] Max number of nodes per cluster is 72 and the number is 32
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] We will select 604 edges and 3285 tetra
[LOG] Edges from tetra 0 and KDTree 3396 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_3 for num 928
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_4 for num 928
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_2 for num 928
[LOG] Calculating for cell ranks 2 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_3 for num 928
[LOG] Computing n1_to_4 for num 928
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_3 for num 928
[LOG] Computing n1_to_1 for num 289
[LOG] Computing n2_to_4 for num 928
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_4 for num 928
[LOG] Global feature for num 928
[LOG] Global feature for num 928
[LOG] Saving tensor x_0_928.pt
[LOG] Saving tensor x_1_928.pt
[LOG] Saving tensor x_2_928.pt
[LOG] Saving tensor x_3_928.pt
[LOG] Saving tensor x_4_928.pt
[LOG] Saving tensor n0_to_0_928.pt
[LOG] Saving tensor n1_to_1_928.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n2_to_2_928.pt
[LOG] Saving tensor n3_to_3_928.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n4_to_4_928.pt
[LOG] Saving tensor n0_to_1_928.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1856 Tetrahedra.
    [LOG] Generated 36 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.194444444444443
    [LOG] Max number of nodes per cluster is 39 and the number is 24
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n0_to_2_928.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n0_to_3_928.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n0_to_4_928.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n1_to_2_928.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n1_to_3_928.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n1_to_4_928.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n2_to_3_928.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n2_to_4_928.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n3_to_4_928.pt
[LOG] Saving tensor global_feature_928.pt
[LOG] Process 117: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] We will select 223 edges and 1856 tetra
[LOG] Edges from tetra 0 and KDTree 223 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 22: Created combinatorial complex for file data_179.hdf5
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 22: Calculating Neighbors
[LOG] Loading pickle file data_179.pickle
[LOG] Processing node features for num 179
[LOG] Removed 0 subset clusters.
[LOG] Processing edge features for num 179
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Processing tetra features for num 179
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Processing cluster features for num 179
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing cluster features for num 179
[LOG] Process 18: Created combinatorial complex for file data_147.hdf5
[LOG] Processing adjacency and incidence matrices for num 179
[LOG] Computing n0_to_0 for num 179
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 18: Calculating Neighbors
[LOG] Loading pickle file data_147.pickle
[LOG] Processing node features for num 147
[LOG] Processing edge features for num 147
[LOG] Processing tetra features for num 147
[LOG] Processing cluster features for num 147
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing cluster features for num 147
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing adjacency and incidence matrices for num 147
[LOG] Computing n0_to_0 for num 147
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_1 for num 147
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_1 for num 179
[LOG] Computing n2_to_2 (adjacency) for num 147
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n3_to_3 (adjacency) for num 147
[LOG] Computing n4_to_4 (coadjacency) for num 147
[LOG] Computing n0_to_1 for num 147
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_2 for num 147
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n0_to_3 for num 147
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n0_to_4 for num 147
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n1_to_2 for num 147
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 179
[LOG] Computing n1_to_3 for num 147
[LOG] Computing n1_to_4 for num 147
[LOG] Computing n2_to_3 for num 147
[LOG] Computing n2_to_4 for num 147
[LOG] Computing n3_to_4 for num 147
[LOG] Global feature for num 147
[LOG] Global feature for num 147
[LOG] Saving tensor x_0_147.pt
[LOG] Saving tensor x_1_147.pt
[LOG] Saving tensor x_2_147.pt
[LOG] Saving tensor x_3_147.pt
[LOG] Saving tensor x_4_147.pt
[LOG] Saving tensor n0_to_0_147.pt
[LOG] Saving tensor n1_to_1_147.pt
[LOG] Saving tensor n2_to_2_147.pt
[LOG] Saving tensor n3_to_3_147.pt
[LOG] Saving tensor n4_to_4_147.pt
[LOG] Saving tensor n0_to_1_147.pt
[LOG] Saving tensor n0_to_2_147.pt
[LOG] Saving tensor n0_to_3_147.pt
[LOG] Saving tensor n0_to_4_147.pt
[LOG] Saving tensor n1_to_2_147.pt
[LOG] Saving tensor n1_to_3_147.pt
[LOG] Saving tensor n1_to_4_147.pt
[LOG] Saving tensor n2_to_3_147.pt
[LOG] Saving tensor n2_to_4_147.pt
[LOG] Saving tensor n3_to_4_147.pt
[LOG] Saving tensor global_feature_147.pt
[LOG] Process 18: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_3 (adjacency) for num 179
[LOG] Computing n4_to_4 (coadjacency) for num 179
[LOG] Computing n0_to_1 for num 179
[LOG] Calculating for cell ranks 3 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1259 Tetrahedra.
    [LOG] Generated 48 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.895833333333334
    [LOG] Max number of nodes per cluster is 24 and the number is 19
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] We will select 144 edges and 1259 tetra
[LOG] Edges from tetra 0 and KDTree 644 with 0 edges in common.
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_2 for num 179
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1631 Tetrahedra.
    [LOG] Generated 59 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.966101694915254
    [LOG] Max number of nodes per cluster is 31 and the number is 23
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Removed 2 subset clusters.
[LOG] GENERATED TETRA
[LOG] Process 13: Created combinatorial complex for file data_111.hdf5
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] We will select 272 edges and 1631 tetra
[LOG] Edges from tetra 0 and KDTree 620 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1377 Tetrahedra.
    [LOG] Generated 44 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.340909090909092
    [LOG] Max number of nodes per cluster is 39 and the number is 17
[LOG] We will select 246 edges and 1377 tetra
[LOG] Edges from tetra 0 and KDTree 1201 with 0 edges in common.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Process 13: Calculating Neighbors
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Loading pickle file data_111.pickle
[LOG] Processing node features for num 111
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Processing edge features for num 111
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Processing tetra features for num 111
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Processing cluster features for num 111
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing cluster features for num 111
[LOG] Processing adjacency and incidence matrices for num 111
[LOG] Computing n0_to_0 for num 111
[LOG] Computing n1_to_1 for num 111
[LOG] Computing n2_to_2 (adjacency) for num 111
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n3_to_3 (adjacency) for num 111
[LOG] Computing n4_to_4 (coadjacency) for num 111
[LOG] Computing n0_to_1 for num 111
[LOG] Computing n0_to_2 for num 111
[LOG] Removed 2 subset clusters.
[LOG] Computing n0_to_3 for num 179
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_4 for num 179
[LOG] Computing n0_to_3 for num 111
[LOG] Computing n0_to_4 for num 111
[LOG] Computing n1_to_2 for num 111
[LOG] Computing n1_to_2 for num 179
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 102: Created combinatorial complex for file data_821.hdf5
[LOG] Process 25: Created combinatorial complex for file data_207.hdf5
[LOG] Computing n1_to_3 for num 111
[LOG] Computing n1_to_4 for num 111
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_3 for num 111
[LOG] Computing n2_to_4 for num 111
[LOG] Computing n3_to_4 for num 111
[LOG] Global feature for num 111
[LOG] Global feature for num 111
[LOG] Saving tensor x_0_111.pt
[LOG] Saving tensor x_1_111.pt
[LOG] Saving tensor x_2_111.pt
[LOG] Saving tensor x_3_111.pt
[LOG] Saving tensor x_4_111.pt
[LOG] Saving tensor n0_to_0_111.pt
[LOG] Saving tensor n1_to_1_111.pt
[LOG] Process 102: Calculating Neighbors
[LOG] Loading pickle file data_821.pickle
[LOG] Processing node features for num 821
[LOG] Saving tensor n2_to_2_111.pt
[LOG] Saving tensor n3_to_3_111.pt
[LOG] Processing edge features for num 821
[LOG] Saving tensor n4_to_4_111.pt
[LOG] Saving tensor n0_to_1_111.pt
[LOG] Saving tensor n0_to_2_111.pt
[LOG] Saving tensor n0_to_3_111.pt
[LOG] Processing tetra features for num 821
[LOG] Saving tensor n0_to_4_111.pt
[LOG] Saving tensor n1_to_2_111.pt
[LOG] Process 25: Calculating Neighbors
[LOG] Loading pickle file data_207.pickle
[LOG] Processing node features for num 207
[LOG] Saving tensor n1_to_3_111.pt
[LOG] Saving tensor n1_to_4_111.pt
[LOG] Saving tensor n2_to_3_111.pt
[LOG] Processing edge features for num 207
[LOG] Saving tensor n2_to_4_111.pt
[LOG] Saving tensor n3_to_4_111.pt
[LOG] Saving tensor global_feature_111.pt
[LOG] Process 13: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing cluster features for num 821
[LOG] Processing tetra features for num 207
[LOG] Processing cluster features for num 821
[LOG] Processing adjacency and incidence matrices for num 821
[LOG] Computing n0_to_0 for num 821
[LOG] Processing cluster features for num 207
[LOG] Processing cluster features for num 207
[LOG] Processing adjacency and incidence matrices for num 207
[LOG] Computing n0_to_0 for num 207
[LOG] Computing n1_to_1 for num 821
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_1 for num 207
[LOG] Computing n2_to_2 (adjacency) for num 821
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_2 (adjacency) for num 207
[LOG] Computing n3_to_3 (adjacency) for num 821
[LOG] Computing n4_to_4 (coadjacency) for num 821
[LOG] Computing n0_to_1 for num 821
[LOG] Computing n0_to_2 for num 821
[LOG] Computing n1_to_3 for num 179
[LOG] Computing n1_to_4 for num 179
[LOG] Computing n2_to_3 for num 179
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_3 (adjacency) for num 207
[LOG] Computing n4_to_4 (coadjacency) for num 207
[LOG] Computing n0_to_1 for num 207
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_2 for num 207
[LOG] Computing n2_to_4 for num 179
[LOG] Computing n3_to_4 for num 179
[LOG] Global feature for num 179
[LOG] Global feature for num 179
[LOG] Saving tensor x_0_179.pt
[LOG] Saving tensor x_1_179.pt
[LOG] Saving tensor x_2_179.pt
[LOG] Saving tensor x_3_179.pt
[LOG] Saving tensor x_4_179.pt
[LOG] Saving tensor n0_to_0_179.pt
[LOG] Saving tensor n1_to_1_179.pt
[LOG] Saving tensor n2_to_2_179.pt
[LOG] Saving tensor n3_to_3_179.pt
[LOG] Computing n0_to_3 for num 821
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n4_to_4_179.pt
[LOG] Saving tensor n0_to_1_179.pt
[LOG] Computing n0_to_4 for num 821
[LOG] Saving tensor n0_to_2_179.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n0_to_3_179.pt
[LOG] Saving tensor n0_to_4_179.pt
[LOG] Saving tensor n1_to_2_179.pt
[LOG] Saving tensor n1_to_3_179.pt
[LOG] Saving tensor n1_to_4_179.pt
[LOG] Computing n1_to_2 for num 821
[LOG] Saving tensor n2_to_3_179.pt
[LOG] Saving tensor n2_to_4_179.pt
[LOG] Saving tensor n3_to_4_179.pt
[LOG] Saving tensor global_feature_179.pt
[LOG] Process 22: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 207
[LOG] Computing n0_to_4 for num 207
[LOG] Computing n1_to_3 for num 821
[LOG] Computing n1_to_4 for num 821
[LOG] Computing n1_to_2 for num 207
[LOG] Computing n2_to_3 for num 821
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1606 Tetrahedra.
    [LOG] Generated 48 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.395833333333334
    [LOG] Max number of nodes per cluster is 69 and the number is 6
[LOG] Computing n2_to_4 for num 821
[LOG] Computing n3_to_4 for num 821
[LOG] Global feature for num 821
[LOG] Global feature for num 821
[LOG] Saving tensor x_0_821.pt
[LOG] Saving tensor x_1_821.pt
[LOG] Saving tensor x_2_821.pt
[LOG] Saving tensor x_3_821.pt
[LOG] Saving tensor x_4_821.pt
[LOG] Saving tensor n0_to_0_821.pt
[LOG] Saving tensor n1_to_1_821.pt
[LOG] Saving tensor n2_to_2_821.pt
[LOG] Saving tensor n3_to_3_821.pt
[LOG] Saving tensor n4_to_4_821.pt
[LOG] Saving tensor n0_to_1_821.pt
[LOG] Saving tensor n0_to_2_821.pt
[LOG] We will select 464 edges and 1606 tetra
[LOG] Edges from tetra 0 and KDTree 464 with 0 edges in common.
[LOG] Saving tensor n0_to_3_821.pt
[LOG] Saving tensor n0_to_4_821.pt
[LOG] Saving tensor n1_to_2_821.pt
[LOG] Saving tensor n1_to_3_821.pt
[LOG] Computing n1_to_3 for num 207
[LOG] Saving tensor n1_to_4_821.pt
[LOG] Computing n1_to_4 for num 207
[LOG] Saving tensor n2_to_3_821.pt
[LOG] Computing n2_to_3 for num 207
[LOG] Saving tensor n2_to_4_821.pt
[LOG] Saving tensor n3_to_4_821.pt
[LOG] Saving tensor global_feature_821.pt
[LOG] Process 102: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n2_to_4 for num 207
[LOG] Computing n3_to_4 for num 207
[LOG] Global feature for num 207
[LOG] Global feature for num 207
[LOG] Saving tensor x_0_207.pt
[LOG] Saving tensor x_1_207.pt
[LOG] Saving tensor x_2_207.pt
[LOG] Saving tensor x_3_207.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor x_4_207.pt
[LOG] Saving tensor n0_to_0_207.pt
[LOG] Saving tensor n1_to_1_207.pt
[LOG] Saving tensor n2_to_2_207.pt
[LOG] Saving tensor n3_to_3_207.pt
[LOG] Saving tensor n4_to_4_207.pt
[LOG] Saving tensor n0_to_1_207.pt
[LOG] Saving tensor n0_to_2_207.pt
[LOG] Saving tensor n0_to_3_207.pt
[LOG] Saving tensor n0_to_4_207.pt
[LOG] Saving tensor n1_to_2_207.pt
[LOG] Saving tensor n1_to_3_207.pt
[LOG] Saving tensor n1_to_4_207.pt
[LOG] Saving tensor n2_to_3_207.pt
[LOG] Saving tensor n2_to_4_207.pt
[LOG] Saving tensor n3_to_4_207.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor global_feature_207.pt
[LOG] Process 25: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 71: Created combinatorial complex for file data_572.hdf5
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 71: Calculating Neighbors
[LOG] Loading pickle file data_572.pickle
[LOG] Processing node features for num 572
[LOG] Processing edge features for num 572
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_2 (adjacency) for num 289
[LOG] Processing tetra features for num 572
[LOG] Processing cluster features for num 572
[LOG] Processing cluster features for num 572
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing adjacency and incidence matrices for num 572
[LOG] Computing n0_to_0 for num 572
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_1 for num 572
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_2 (adjacency) for num 572
[LOG] Computing n3_to_3 (adjacency) for num 572
[LOG] Computing n4_to_4 (coadjacency) for num 572
[LOG] Computing n0_to_1 for num 572
[LOG] Computing n0_to_2 for num 572
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_3 for num 572
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_4 for num 572
[LOG] Computing n1_to_2 for num 572
[LOG] Calculating for cell ranks 3 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_3 for num 572
[LOG] Computing n1_to_4 for num 572
[LOG] Computing n2_to_3 for num 572
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n2_to_4 for num 572
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n3_to_4 for num 572
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Global feature for num 572
[LOG] Global feature for num 572
[LOG] Saving tensor x_0_572.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor x_1_572.pt
[LOG] Saving tensor x_2_572.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor x_3_572.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor x_4_572.pt
[LOG] Saving tensor n0_to_0_572.pt
[LOG] Saving tensor n1_to_1_572.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n2_to_2_572.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n3_to_3_572.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n4_to_4_572.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n0_to_1_572.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n0_to_2_572.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n0_to_3_572.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n0_to_4_572.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n1_to_2_572.pt
[LOG] Saving tensor n1_to_3_572.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n1_to_4_572.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n2_to_3_572.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n2_to_4_572.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n3_to_4_572.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor global_feature_572.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Process 71: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1998 Tetrahedra.
    [LOG] Generated 41 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.78048780487805
    [LOG] Max number of nodes per cluster is 75 and the number is 18
[LOG] Calculating for cell ranks 2 and 4
[LOG] We will select 284 edges and 1998 tetra
[LOG] Edges from tetra 0 and KDTree 2015 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Process 20: Created combinatorial complex for file data_166.hdf5
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 20: Calculating Neighbors
[LOG] Loading pickle file data_166.pickle
[LOG] Processing node features for num 166
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing edge features for num 166
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing tetra features for num 166
[LOG] Processing cluster features for num 166
[LOG] Processing cluster features for num 166
[LOG] Processing adjacency and incidence matrices for num 166
[LOG] Computing n0_to_0 for num 166
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_1 for num 166
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_2 (adjacency) for num 166
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_3 (adjacency) for num 166
[LOG] Computing n4_to_4 (coadjacency) for num 166
[LOG] Computing n0_to_1 for num 166
[LOG] Computing n0_to_2 for num 166
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_3 for num 166
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_4 for num 166
[LOG] Removed 6 subset clusters.

    [LOG] We Currently have 4844 Tetrahedra.
    [LOG] Generated 126 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.968253968253968
    [LOG] Max number of nodes per cluster is 73 and the number is 59
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_2 for num 166
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n1_to_3 for num 166
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n1_to_4 for num 166
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n2_to_3 for num 166
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n2_to_4 for num 166
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_4 for num 166
[LOG] Global feature for num 166
[LOG] Global feature for num 166
[LOG] Saving tensor x_0_166.pt
[LOG] Saving tensor x_1_166.pt
[LOG] Saving tensor x_2_166.pt
[LOG] Saving tensor x_3_166.pt
[LOG] Saving tensor x_4_166.pt
[LOG] Saving tensor n0_to_0_166.pt
[LOG] Saving tensor n1_to_1_166.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n2_to_2_166.pt
[LOG] Saving tensor n3_to_3_166.pt
[LOG] Saving tensor n4_to_4_166.pt
[LOG] Saving tensor n0_to_1_166.pt
[LOG] Saving tensor n0_to_2_166.pt
[LOG] Saving tensor n0_to_3_166.pt
[LOG] Saving tensor n0_to_4_166.pt
[LOG] Saving tensor n1_to_2_166.pt
[LOG] We will select 1663 edges and 4844 tetra
[LOG] Edges from tetra 0 and KDTree 2516 with 0 edges in common.
[LOG] Saving tensor n1_to_3_166.pt
[LOG] Saving tensor n1_to_4_166.pt
[LOG] Saving tensor n2_to_3_166.pt
[LOG] Saving tensor n2_to_4_166.pt
[LOG] Saving tensor n3_to_4_166.pt
[LOG] Saving tensor global_feature_166.pt
[LOG] Process 20: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2170 Tetrahedra.
    [LOG] Generated 53 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.358490566037736
    [LOG] Max number of nodes per cluster is 34 and the number is 15
[LOG] Calculating for cell ranks 1 and 3
[LOG] We will select 311 edges and 2170 tetra
[LOG] Edges from tetra 0 and KDTree 311 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n3_to_3 (adjacency) for num 289
[LOG] Computing n4_to_4 (coadjacency) for num 289
[LOG] Computing n0_to_1 for num 289
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 113: Created combinatorial complex for file data_899.hdf5
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 113: Calculating Neighbors
[LOG] Loading pickle file data_899.pickle
[LOG] Processing node features for num 899
[LOG] Processing edge features for num 899
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing tetra features for num 899
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing cluster features for num 899
[LOG] Processing cluster features for num 899
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing adjacency and incidence matrices for num 899
[LOG] Computing n0_to_0 for num 899
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_1 for num 899
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n2_to_2 (adjacency) for num 899
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n3_to_3 (adjacency) for num 899
[LOG] Computing n4_to_4 (coadjacency) for num 899
[LOG] Computing n0_to_1 for num 899
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_2 for num 289
[LOG] Computing n0_to_2 for num 899
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_3 for num 899
[LOG] Computing n0_to_4 for num 899
[LOG] Computing n1_to_2 for num 899
[LOG] Process 98: Created combinatorial complex for file data_787.hdf5
[LOG] Calculating for cell ranks 0 and 3
[LOG] GENERATED TETRA
[LOG] Computing n1_to_3 for num 899
[LOG] Computing n1_to_4 for num 899
[LOG] Computing n2_to_3 for num 899
[LOG] Computing n2_to_4 for num 899
[LOG] Computing n3_to_4 for num 899
[LOG] Global feature for num 899
[LOG] Global feature for num 899
[LOG] Saving tensor x_0_899.pt
[LOG] Saving tensor x_1_899.pt
[LOG] Saving tensor x_2_899.pt
[LOG] Saving tensor x_3_899.pt
[LOG] Saving tensor x_4_899.pt
[LOG] Saving tensor n0_to_0_899.pt
[LOG] Saving tensor n1_to_1_899.pt
[LOG] Saving tensor n2_to_2_899.pt
[LOG] Saving tensor n3_to_3_899.pt
[LOG] Saving tensor n4_to_4_899.pt
[LOG] Saving tensor n0_to_1_899.pt
[LOG] Saving tensor n0_to_2_899.pt
[LOG] Saving tensor n0_to_3_899.pt
[LOG] Saving tensor n0_to_4_899.pt
[LOG] Saving tensor n1_to_2_899.pt
[LOG] Saving tensor n1_to_3_899.pt
[LOG] Saving tensor n1_to_4_899.pt
[LOG] Saving tensor n2_to_3_899.pt
[LOG] Saving tensor n2_to_4_899.pt
[LOG] Saving tensor n3_to_4_899.pt
[LOG] Saving tensor global_feature_899.pt
[LOG] Process 113: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 98: Calculating Neighbors
[LOG] Loading pickle file data_787.pickle
[LOG] Processing node features for num 787
[LOG] Processing edge features for num 787
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing tetra features for num 787
[LOG] GENERATED TETRA
[LOG] Processing cluster features for num 787
[LOG] Processing cluster features for num 787
[LOG] Processing adjacency and incidence matrices for num 787
[LOG] Computing n0_to_0 for num 787
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 7600 Tetrahedra.
    [LOG] Generated 175 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.348571428571429
    [LOG] Max number of nodes per cluster is 60 and the number is 136
[LOG] Computing n1_to_1 for num 787
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] We will select 2768 edges and 7600 tetra
[LOG] Edges from tetra 0 and KDTree 2768 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2174 Tetrahedra.
    [LOG] Generated 55 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 18.945454545454545
    [LOG] Max number of nodes per cluster is 79 and the number is 30
[LOG] Calculating for cell ranks 3 and 4
[LOG] We will select 413 edges and 2174 tetra
[LOG] Edges from tetra 0 and KDTree 3433 with 0 edges in common.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 0 subset clusters.
[LOG] GENERATED TETRA
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2210 Tetrahedra.
    [LOG] Generated 68 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.558823529411764
    [LOG] Max number of nodes per cluster is 36 and the number is 35
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1003 Tetrahedra.
    [LOG] Generated 35 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.542857142857144
    [LOG] Max number of nodes per cluster is 70 and the number is 29
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 43: Created combinatorial complex for file data_349.hdf5
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2460 Tetrahedra.
    [LOG] Generated 52 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 18.346153846153847
    [LOG] Max number of nodes per cluster is 91 and the number is 50
[LOG] We will select 106 edges and 1003 tetra
[LOG] Edges from tetra 0 and KDTree 897 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] We will select 600 edges and 2210 tetra
[LOG] Edges from tetra 0 and KDTree 729 with 0 edges in common.
[LOG] We will select 609 edges and 2460 tetra
[LOG] Edges from tetra 0 and KDTree 4900 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 43: Calculating Neighbors
[LOG] Loading pickle file data_349.pickle
[LOG] Processing node features for num 349
[LOG] Processing edge features for num 349
[LOG] Processing tetra features for num 349
[LOG] Calculating for cell ranks 4 and 4
[LOG] Removed 0 subset clusters.
[LOG] Processing cluster features for num 349
[LOG] Processing cluster features for num 349
[LOG] Processing adjacency and incidence matrices for num 349
[LOG] Computing n0_to_0 for num 349
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Process 48: Created combinatorial complex for file data_391.hdf5
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Process 48: Calculating Neighbors
[LOG] Loading pickle file data_391.pickle
[LOG] Processing node features for num 391
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Processing edge features for num 391
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Processing tetra features for num 391
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Processing cluster features for num 391
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_3 for num 289
[LOG] Processing cluster features for num 391
[LOG] Processing adjacency and incidence matrices for num 391
[LOG] Computing n0_to_0 for num 391
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_1 for num 349
[LOG] Computing n1_to_1 for num 391
[LOG] Computing n2_to_2 (adjacency) for num 391
[LOG] Computing n0_to_4 for num 289
[LOG] Computing n3_to_3 (adjacency) for num 391
[LOG] Computing n4_to_4 (coadjacency) for num 391
[LOG] Computing n0_to_1 for num 391
[LOG] Computing n0_to_2 for num 391
[LOG] Computing n1_to_2 for num 289
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_2 (adjacency) for num 349
[LOG] Computing n2_to_2 (adjacency) for num 787
[LOG] Computing n0_to_3 for num 391
[LOG] Computing n0_to_4 for num 391
[LOG] Removed 0 subset clusters.
[LOG] Computing n1_to_2 for num 391
[LOG] Process 86: Created combinatorial complex for file data_694.hdf5
[LOG] Computing n1_to_3 for num 391
[LOG] Computing n1_to_4 for num 391
[LOG] Computing n2_to_3 for num 391
[LOG] Computing n2_to_4 for num 391
[LOG] Computing n3_to_4 for num 391
[LOG] Global feature for num 391
[LOG] Global feature for num 391
[LOG] Saving tensor x_0_391.pt
[LOG] Saving tensor x_1_391.pt
[LOG] Saving tensor x_2_391.pt
[LOG] Saving tensor x_3_391.pt
[LOG] Saving tensor x_4_391.pt
[LOG] Saving tensor n0_to_0_391.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1484 Tetrahedra.
    [LOG] Generated 35 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 18.542857142857144
    [LOG] Max number of nodes per cluster is 73 and the number is 26
[LOG] Saving tensor n1_to_1_391.pt
[LOG] Saving tensor n2_to_2_391.pt
[LOG] Saving tensor n3_to_3_391.pt
[LOG] Saving tensor n4_to_4_391.pt
[LOG] Saving tensor n0_to_1_391.pt
[LOG] Saving tensor n0_to_2_391.pt
[LOG] Saving tensor n0_to_3_391.pt
[LOG] Saving tensor n0_to_4_391.pt
[LOG] Saving tensor n1_to_2_391.pt
[LOG] Saving tensor n1_to_3_391.pt
[LOG] Saving tensor n1_to_4_391.pt
[LOG] Saving tensor n2_to_3_391.pt
[LOG] Saving tensor n2_to_4_391.pt
[LOG] Saving tensor n3_to_4_391.pt
[LOG] Saving tensor global_feature_391.pt
[LOG] Process 48: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] We will select 228 edges and 1484 tetra
[LOG] Edges from tetra 0 and KDTree 2535 with 0 edges in common.
[LOG] Process 86: Calculating Neighbors
[LOG] Loading pickle file data_694.pickle
[LOG] Processing node features for num 694
[LOG] Processing edge features for num 694
[LOG] Computing n3_to_3 (adjacency) for num 349
[LOG] Process 16: Created combinatorial complex for file data_131.hdf5
[LOG] Computing n4_to_4 (coadjacency) for num 349
[LOG] Computing n0_to_1 for num 349
[LOG] Processing tetra features for num 694
[LOG] Processing cluster features for num 694
[LOG] Processing cluster features for num 694
[LOG] Processing adjacency and incidence matrices for num 694
[LOG] Computing n0_to_0 for num 694
[LOG] Computing n0_to_2 for num 349
[LOG] Computing n1_to_1 for num 694
[LOG] Process 16: Calculating Neighbors
[LOG] Loading pickle file data_131.pickle
[LOG] Processing node features for num 131
[LOG] Processing edge features for num 131
[LOG] Processing tetra features for num 131
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing cluster features for num 131
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1464 Tetrahedra.
    [LOG] Generated 33 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.757575757575758
    [LOG] Max number of nodes per cluster is 148 and the number is 30
[LOG] Processing cluster features for num 131
[LOG] Processing adjacency and incidence matrices for num 131
[LOG] Computing n0_to_0 for num 131
[LOG] We will select 586 edges and 1464 tetra
[LOG] Edges from tetra 0 and KDTree 4704 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 33: Created combinatorial complex for file data_270.hdf5
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_2 (adjacency) for num 694
[LOG] Computing n1_to_1 for num 131
[LOG] Computing n3_to_3 (adjacency) for num 694
[LOG] Computing n4_to_4 (coadjacency) for num 694
[LOG] Computing n0_to_1 for num 694
[LOG] Computing n0_to_2 for num 694
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 78: Created combinatorial complex for file data_630.hdf5
[LOG] Computing n2_to_2 (adjacency) for num 131
[LOG] Computing n0_to_3 for num 349
[LOG] Computing n0_to_4 for num 349
[LOG] Process 33: Calculating Neighbors
[LOG] Loading pickle file data_270.pickle
[LOG] Processing node features for num 270
[LOG] Processing edge features for num 270
[LOG] Computing n1_to_2 for num 349
[LOG] Process 78: Calculating Neighbors
[LOG] Loading pickle file data_630.pickle
[LOG] Processing node features for num 630
[LOG] Processing edge features for num 630
[LOG] Processing tetra features for num 270
[LOG] Processing tetra features for num 630
[LOG] Processing cluster features for num 270
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 270
[LOG] Processing cluster features for num 630
[LOG] Processing adjacency and incidence matrices for num 270
[LOG] Computing n0_to_0 for num 270
[LOG] Processing cluster features for num 630
[LOG] Computing n3_to_3 (adjacency) for num 787
[LOG] Computing n4_to_4 (coadjacency) for num 787
[LOG] Processing adjacency and incidence matrices for num 630
[LOG] Computing n0_to_0 for num 630
[LOG] Computing n0_to_1 for num 787
[LOG] Computing n3_to_3 (adjacency) for num 131
[LOG] Computing n4_to_4 (coadjacency) for num 131
[LOG] Computing n0_to_1 for num 131
[LOG] Computing n1_to_1 for num 270
[LOG] Computing n0_to_3 for num 694
[LOG] Computing n0_to_4 for num 694
[LOG] Computing n1_to_1 for num 630
[LOG] Computing n1_to_3 for num 349
[LOG] Removed 4 subset clusters.
[LOG] Computing n1_to_2 for num 694
[LOG] Computing n1_to_4 for num 349
[LOG] Computing n2_to_2 (adjacency) for num 270
[LOG] Computing n2_to_3 for num 349
[LOG] Computing n2_to_4 for num 349
[LOG] Computing n0_to_2 for num 131
[LOG] Computing n3_to_4 for num 349
[LOG] Global feature for num 349
[LOG] Global feature for num 349
[LOG] Saving tensor x_0_349.pt
[LOG] Saving tensor x_1_349.pt
[LOG] Saving tensor x_2_349.pt
[LOG] Saving tensor x_3_349.pt
[LOG] Saving tensor x_4_349.pt
[LOG] Saving tensor n0_to_0_349.pt
[LOG] Saving tensor n1_to_1_349.pt
[LOG] Computing n3_to_3 (adjacency) for num 270
[LOG] Saving tensor n2_to_2_349.pt
[LOG] Computing n4_to_4 (coadjacency) for num 270
[LOG] Computing n0_to_1 for num 270
[LOG] Saving tensor n3_to_3_349.pt
[LOG] Saving tensor n4_to_4_349.pt
[LOG] Saving tensor n0_to_1_349.pt
[LOG] Saving tensor n0_to_2_349.pt
[LOG] Saving tensor n0_to_3_349.pt
[LOG] Saving tensor n0_to_4_349.pt
[LOG] Saving tensor n1_to_2_349.pt
[LOG] Saving tensor n1_to_3_349.pt
[LOG] Saving tensor n1_to_4_349.pt
[LOG] Saving tensor n2_to_3_349.pt
[LOG] Saving tensor n2_to_4_349.pt
[LOG] Saving tensor n3_to_4_349.pt
[LOG] Saving tensor global_feature_349.pt
[LOG] Process 43: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_2 for num 270
[LOG] Computing n2_to_2 (adjacency) for num 630
[LOG] Computing n0_to_2 for num 787
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_3 for num 694
[LOG] GENERATED TETRA
[LOG] Computing n1_to_4 for num 694
[LOG] Computing n3_to_3 (adjacency) for num 630
[LOG] Computing n4_to_4 (coadjacency) for num 630
[LOG] Computing n0_to_1 for num 630
[LOG] Computing n2_to_3 for num 694
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_4 for num 694
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n3_to_4 for num 694
[LOG] Global feature for num 694
[LOG] Global feature for num 694
[LOG] Saving tensor x_0_694.pt
[LOG] Saving tensor x_1_694.pt
[LOG] Saving tensor x_2_694.pt
[LOG] Saving tensor x_3_694.pt
[LOG] Saving tensor x_4_694.pt
[LOG] Saving tensor n0_to_0_694.pt
[LOG] Saving tensor n1_to_1_694.pt
[LOG] Computing n0_to_2 for num 630
[LOG] Saving tensor n2_to_2_694.pt
[LOG] Saving tensor n3_to_3_694.pt
[LOG] Saving tensor n4_to_4_694.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n0_to_1_694.pt
[LOG] Saving tensor n0_to_2_694.pt
[LOG] Saving tensor n0_to_3_694.pt
[LOG] Saving tensor n0_to_4_694.pt
[LOG] Saving tensor n1_to_2_694.pt
[LOG] Saving tensor n1_to_3_694.pt
[LOG] Saving tensor n1_to_4_694.pt
[LOG] Saving tensor n2_to_3_694.pt
[LOG] Saving tensor n2_to_4_694.pt
[LOG] Saving tensor n3_to_4_694.pt
[LOG] Saving tensor global_feature_694.pt
[LOG] Process 86: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_3 for num 270
[LOG] Computing n0_to_4 for num 270
[LOG] Computing n1_to_2 for num 270
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2060 Tetrahedra.
    [LOG] Generated 64 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.03125
    [LOG] Max number of nodes per cluster is 34 and the number is 34
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_3 for num 270
[LOG] Computing n1_to_4 for num 270
[LOG] Computing n2_to_3 for num 270
[LOG] Computing n2_to_4 for num 270
[LOG] Computing n0_to_3 for num 630
[LOG] Computing n0_to_4 for num 630
[LOG] Computing n3_to_4 for num 270
[LOG] Global feature for num 270
[LOG] Global feature for num 270
[LOG] Saving tensor x_0_270.pt
[LOG] Saving tensor x_1_270.pt
[LOG] We will select 165 edges and 2060 tetra
[LOG] Edges from tetra 0 and KDTree 405 with 0 edges in common.
[LOG] Saving tensor x_2_270.pt
[LOG] Saving tensor x_3_270.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor x_4_270.pt
[LOG] Saving tensor n0_to_0_270.pt
[LOG] Computing n1_to_2 for num 630
[LOG] Saving tensor n1_to_1_270.pt
[LOG] Saving tensor n2_to_2_270.pt
[LOG] Saving tensor n3_to_3_270.pt
[LOG] Saving tensor n4_to_4_270.pt
[LOG] Saving tensor n0_to_1_270.pt
[LOG] Saving tensor n0_to_2_270.pt
[LOG] Saving tensor n0_to_3_270.pt
[LOG] Saving tensor n0_to_4_270.pt
[LOG] Saving tensor n1_to_2_270.pt
[LOG] Process 127: Created combinatorial complex for file data_994.hdf5
[LOG] Saving tensor n1_to_3_270.pt
[LOG] Saving tensor n1_to_4_270.pt
[LOG] Saving tensor n2_to_3_270.pt
[LOG] Saving tensor n2_to_4_270.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n3_to_4_270.pt
[LOG] Saving tensor global_feature_270.pt
[LOG] Process 33: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 131
[LOG] Computing n0_to_4 for num 131
[LOG] Computing n1_to_2 for num 131
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_3 for num 630
[LOG] Computing n1_to_4 for num 630
[LOG] Computing n2_to_3 for num 630
[LOG] Computing n2_to_4 for num 630
[LOG] Computing n3_to_4 for num 630
[LOG] Global feature for num 630
[LOG] Global feature for num 630
[LOG] Saving tensor x_0_630.pt
[LOG] Saving tensor x_1_630.pt
[LOG] Saving tensor x_2_630.pt
[LOG] Saving tensor x_3_630.pt
[LOG] Saving tensor x_4_630.pt
[LOG] Saving tensor n0_to_0_630.pt
[LOG] Saving tensor n1_to_1_630.pt
[LOG] Saving tensor n2_to_2_630.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n3_to_3_630.pt
[LOG] Saving tensor n4_to_4_630.pt
[LOG] Saving tensor n0_to_1_630.pt
[LOG] Saving tensor n0_to_2_630.pt
[LOG] Saving tensor n0_to_3_630.pt
[LOG] Saving tensor n0_to_4_630.pt
[LOG] Saving tensor n1_to_2_630.pt
[LOG] Saving tensor n1_to_3_630.pt
[LOG] Saving tensor n1_to_4_630.pt
[LOG] Saving tensor n2_to_3_630.pt
[LOG] Saving tensor n2_to_4_630.pt
[LOG] Saving tensor n3_to_4_630.pt
[LOG] Saving tensor global_feature_630.pt
[LOG] Process 78: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_3 for num 131
[LOG] Process 127: Calculating Neighbors
[LOG] Loading pickle file data_994.pickle
[LOG] Processing node features for num 994
[LOG] Computing n1_to_4 for num 131
[LOG] Processing edge features for num 994
[LOG] Computing n2_to_3 for num 131
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_4 for num 131
[LOG] GENERATED TETRA
[LOG] Removed 1 subset clusters.
[LOG] Computing n3_to_4 for num 131
[LOG] Global feature for num 131
[LOG] Global feature for num 131
[LOG] Saving tensor x_0_131.pt
[LOG] Saving tensor x_1_131.pt
[LOG] Saving tensor x_2_131.pt
[LOG] Saving tensor x_3_131.pt
[LOG] Saving tensor x_4_131.pt
[LOG] Saving tensor n0_to_0_131.pt
[LOG] Processing tetra features for num 994
[LOG] Saving tensor n1_to_1_131.pt
[LOG] Saving tensor n2_to_2_131.pt
[LOG] Saving tensor n3_to_3_131.pt
[LOG] Saving tensor n4_to_4_131.pt
[LOG] Saving tensor n0_to_1_131.pt
[LOG] Saving tensor n0_to_2_131.pt
[LOG] Saving tensor n0_to_3_131.pt
[LOG] Saving tensor n0_to_4_131.pt
[LOG] Saving tensor n1_to_2_131.pt
[LOG] Saving tensor n1_to_3_131.pt
[LOG] Saving tensor n1_to_4_131.pt
[LOG] Saving tensor n2_to_3_131.pt
[LOG] Saving tensor n2_to_4_131.pt
[LOG] Saving tensor n3_to_4_131.pt
[LOG] Saving tensor global_feature_131.pt
[LOG] Process 16: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 787
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_4 for num 787
[LOG] Calculating for cell ranks 0 and 1
[LOG] GENERATED TETRA
[LOG] Processing cluster features for num 994
[LOG] Computing n1_to_2 for num 787
[LOG] Process 51: Created combinatorial complex for file data_412.hdf5
[LOG] Processing cluster features for num 994
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 51: Calculating Neighbors
[LOG] Loading pickle file data_412.pickle
[LOG] Processing node features for num 412
[LOG] Processing adjacency and incidence matrices for num 994
[LOG] Computing n0_to_0 for num 994
[LOG] Processing edge features for num 412
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing tetra features for num 412
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Processing cluster features for num 412
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Processing cluster features for num 412
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Processing adjacency and incidence matrices for num 412
[LOG] Computing n0_to_0 for num 412
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n1_to_1 for num 412
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n2_to_2 (adjacency) for num 412
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1167 Tetrahedra.
    [LOG] Generated 56 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.357142857142858
    [LOG] Max number of nodes per cluster is 35 and the number is 0
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] We will select 182 edges and 1167 tetra
[LOG] Edges from tetra 0 and KDTree 1522 with 0 edges in common.
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_3 (adjacency) for num 412
[LOG] Computing n4_to_4 (coadjacency) for num 412
[LOG] Computing n0_to_1 for num 412
[LOG] Computing n0_to_2 for num 412
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_1 for num 994
[LOG] Process 112: Created combinatorial complex for file data_894.hdf5
[LOG] Computing n0_to_3 for num 412
[LOG] Computing n0_to_4 for num 412
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_2 for num 412
[LOG] Process 112: Calculating Neighbors
[LOG] Loading pickle file data_894.pickle
[LOG] Processing node features for num 894
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing edge features for num 894
[LOG] Processing tetra features for num 894
[LOG] Computing n1_to_3 for num 412
[LOG] Processing cluster features for num 894
[LOG] Computing n1_to_4 for num 412
[LOG] Computing n2_to_3 for num 412
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing cluster features for num 894
[LOG] Processing adjacency and incidence matrices for num 894
[LOG] Computing n0_to_0 for num 894
[LOG] Computing n2_to_4 for num 412
[LOG] Computing n3_to_4 for num 412
[LOG] Global feature for num 412
[LOG] Global feature for num 412
[LOG] Saving tensor x_0_412.pt
[LOG] Saving tensor x_1_412.pt
[LOG] Saving tensor x_2_412.pt
[LOG] Saving tensor x_3_412.pt
[LOG] Saving tensor x_4_412.pt
[LOG] Saving tensor n0_to_0_412.pt
[LOG] Saving tensor n1_to_1_412.pt
[LOG] Saving tensor n2_to_2_412.pt
[LOG] Saving tensor n3_to_3_412.pt
[LOG] Saving tensor n4_to_4_412.pt
[LOG] Saving tensor n0_to_1_412.pt
[LOG] Computing n1_to_1 for num 894
[LOG] Saving tensor n0_to_2_412.pt
[LOG] Saving tensor n0_to_3_412.pt
[LOG] Saving tensor n0_to_4_412.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n1_to_2_412.pt
[LOG] Saving tensor n1_to_3_412.pt
[LOG] Saving tensor n1_to_4_412.pt
[LOG] Saving tensor n2_to_3_412.pt
[LOG] Saving tensor n2_to_4_412.pt
[LOG] Saving tensor n3_to_4_412.pt
[LOG] Saving tensor global_feature_412.pt
[LOG] Process 51: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n2_to_2 (adjacency) for num 894
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n3_to_3 (adjacency) for num 894
[LOG] Computing n4_to_4 (coadjacency) for num 894
[LOG] Computing n0_to_1 for num 894
[LOG] Computing n0_to_2 for num 894
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 3379 Tetrahedra.
    [LOG] Generated 93 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.505376344086022
    [LOG] Max number of nodes per cluster is 97 and the number is 91
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] We will select 1063 edges and 3379 tetra
[LOG] Edges from tetra 0 and KDTree 3214 with 0 edges in common.
[LOG] Computing n0_to_3 for num 894
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_4 for num 894
[LOG] Computing n1_to_2 for num 894
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_3 for num 894
[LOG] Computing n1_to_4 for num 894
[LOG] Computing n2_to_3 for num 894
[LOG] Computing n2_to_4 for num 894
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_4 for num 894
[LOG] Global feature for num 894
[LOG] Global feature for num 894
[LOG] Saving tensor x_0_894.pt
[LOG] Saving tensor x_1_894.pt
[LOG] Saving tensor x_2_894.pt
[LOG] Saving tensor x_3_894.pt
[LOG] Saving tensor x_4_894.pt
[LOG] Saving tensor n0_to_0_894.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n1_to_1_894.pt
[LOG] Saving tensor n2_to_2_894.pt
[LOG] Saving tensor n3_to_3_894.pt
[LOG] Saving tensor n4_to_4_894.pt
[LOG] Saving tensor n0_to_1_894.pt
[LOG] Saving tensor n0_to_2_894.pt
[LOG] Saving tensor n0_to_3_894.pt
[LOG] Saving tensor n0_to_4_894.pt
[LOG] Saving tensor n1_to_2_894.pt
[LOG] Saving tensor n1_to_3_894.pt
[LOG] Saving tensor n1_to_4_894.pt
[LOG] Saving tensor n2_to_3_894.pt
[LOG] Saving tensor n2_to_4_894.pt
[LOG] Saving tensor n3_to_4_894.pt
[LOG] Saving tensor global_feature_894.pt
[LOG] Process 112: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_3 for num 787
[LOG] Computing n1_to_4 for num 787
[LOG] Computing n2_to_3 for num 787
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_4 for num 787
[LOG] Computing n1_to_3 for num 289
[LOG] Computing n3_to_4 for num 787
[LOG] Global feature for num 787
[LOG] Global feature for num 787
[LOG] Saving tensor x_0_787.pt
[LOG] Saving tensor x_1_787.pt
[LOG] Saving tensor x_2_787.pt
[LOG] Saving tensor x_3_787.pt
[LOG] Saving tensor x_4_787.pt
[LOG] Saving tensor n0_to_0_787.pt
[LOG] Saving tensor n1_to_1_787.pt
[LOG] Saving tensor n2_to_2_787.pt
[LOG] Saving tensor n3_to_3_787.pt
[LOG] Saving tensor n4_to_4_787.pt
[LOG] Computing n1_to_4 for num 289
[LOG] Saving tensor n0_to_1_787.pt
[LOG] Saving tensor n0_to_2_787.pt
[LOG] Saving tensor n0_to_3_787.pt
[LOG] Saving tensor n0_to_4_787.pt
[LOG] Saving tensor n1_to_2_787.pt
[LOG] Saving tensor n1_to_3_787.pt
[LOG] Saving tensor n1_to_4_787.pt
[LOG] Saving tensor n2_to_3_787.pt
[LOG] Saving tensor n2_to_4_787.pt
[LOG] Saving tensor n3_to_4_787.pt
[LOG] Saving tensor global_feature_787.pt
[LOG] Process 98: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_3 for num 289
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] GENERATED TETRA
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 96: Created combinatorial complex for file data_772.hdf5
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n2_to_4 for num 289
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1175 Tetrahedra.
    [LOG] Generated 39 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.205128205128204
    [LOG] Max number of nodes per cluster is 24 and the number is 25
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] We will select 295 edges and 1175 tetra
[LOG] Edges from tetra 0 and KDTree 295 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Process 96: Calculating Neighbors
[LOG] Loading pickle file data_772.pickle
[LOG] Processing node features for num 772
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Processing edge features for num 772
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Processing tetra features for num 772
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Processing cluster features for num 772
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Processing cluster features for num 772
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing adjacency and incidence matrices for num 772
[LOG] Computing n0_to_0 for num 772
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n3_to_4 for num 289
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Global feature for num 289
[LOG] Global feature for num 289
[LOG] Saving tensor x_0_289.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor x_1_289.pt
[LOG] Saving tensor x_2_289.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor x_3_289.pt
[LOG] Saving tensor x_4_289.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n0_to_0_289.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n1_to_1_289.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n2_to_2_289.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n3_to_3_289.pt
[LOG] Saving tensor n4_to_4_289.pt
[LOG] Saving tensor n0_to_1_289.pt
[LOG] Saving tensor n0_to_2_289.pt
[LOG] Saving tensor n0_to_3_289.pt
[LOG] Saving tensor n0_to_4_289.pt
[LOG] Saving tensor n1_to_2_289.pt
[LOG] Saving tensor n1_to_3_289.pt
[LOG] Saving tensor n1_to_4_289.pt
[LOG] Saving tensor n2_to_3_289.pt
[LOG] Saving tensor n2_to_4_289.pt
[LOG] Saving tensor n3_to_4_289.pt
[LOG] Process 39: Created combinatorial complex for file data_319.hdf5
[LOG] Saving tensor global_feature_289.pt
[LOG] Process 36: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 39: Calculating Neighbors
[LOG] Loading pickle file data_319.pickle
[LOG] Processing node features for num 319
[LOG] Processing edge features for num 319
[LOG] Processing tetra features for num 319
[LOG] Processing cluster features for num 319
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing cluster features for num 319
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing adjacency and incidence matrices for num 319
[LOG] Computing n0_to_0 for num 319
[LOG] Computing n1_to_1 for num 319
[LOG] Computing n1_to_1 for num 772
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_2 (adjacency) for num 319
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_3 (adjacency) for num 319
[LOG] Computing n4_to_4 (coadjacency) for num 319
[LOG] Computing n0_to_1 for num 319
[LOG] Computing n0_to_2 for num 319
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_3 for num 319
[LOG] Computing n0_to_4 for num 319
[LOG] Computing n1_to_2 for num 319
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_3 for num 319
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1761 Tetrahedra.
    [LOG] Generated 56 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.928571428571429
    [LOG] Max number of nodes per cluster is 90 and the number is 53
[LOG] Computing n1_to_4 for num 319
[LOG] Computing n2_to_3 for num 319
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n2_to_4 for num 319
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n3_to_4 for num 319
[LOG] Global feature for num 319
[LOG] Global feature for num 319
[LOG] Saving tensor x_0_319.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor x_1_319.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor x_2_319.pt
[LOG] Saving tensor x_3_319.pt
[LOG] Saving tensor x_4_319.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n0_to_0_319.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n1_to_1_319.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n2_to_2_319.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n3_to_3_319.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n4_to_4_319.pt
[LOG] Saving tensor n0_to_1_319.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n0_to_2_319.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n0_to_3_319.pt
[LOG] Saving tensor n0_to_4_319.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n1_to_2_319.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n1_to_3_319.pt
[LOG] We will select 371 edges and 1761 tetra
[LOG] Edges from tetra 0 and KDTree 3603 with 0 edges in common.
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n1_to_4_319.pt
[LOG] Saving tensor n2_to_3_319.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n2_to_4_319.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n3_to_4_319.pt
[LOG] Saving tensor global_feature_319.pt
[LOG] Process 39: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_2 (adjacency) for num 772
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 38: Created combinatorial complex for file data_308.hdf5
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 38: Calculating Neighbors
[LOG] Loading pickle file data_308.pickle
[LOG] Processing node features for num 308
[LOG] Processing edge features for num 308
[LOG] Calculating for cell ranks 1 and 1
[LOG] GENERATED TETRA
[LOG] Processing tetra features for num 308
[LOG] Processing cluster features for num 308
[LOG] Processing cluster features for num 308
[LOG] Processing adjacency and incidence matrices for num 308
[LOG] Computing n0_to_0 for num 308
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_1 for num 308
[LOG] Computing n3_to_3 (adjacency) for num 772
[LOG] Computing n4_to_4 (coadjacency) for num 772
[LOG] Computing n0_to_1 for num 772
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1153 Tetrahedra.
    [LOG] Generated 51 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.254901960784315
    [LOG] Max number of nodes per cluster is 49 and the number is 1
[LOG] Computing n2_to_2 (adjacency) for num 308
[LOG] We will select 233 edges and 1153 tetra
[LOG] Edges from tetra 0 and KDTree 664 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_3 (adjacency) for num 308
[LOG] Computing n4_to_4 (coadjacency) for num 308
[LOG] Computing n0_to_1 for num 308
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_2 for num 772
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n0_to_2 for num 308
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 994
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Process 67: Created combinatorial complex for file data_542.hdf5
[LOG] Process 67: Calculating Neighbors
[LOG] Loading pickle file data_542.pickle
[LOG] Processing node features for num 542
[LOG] Processing edge features for num 542
[LOG] Processing tetra features for num 542
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 542
[LOG] Processing cluster features for num 542
[LOG] Processing adjacency and incidence matrices for num 542
[LOG] Computing n0_to_0 for num 542
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_1 for num 542
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n2_to_2 (adjacency) for num 542
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_3 (adjacency) for num 542
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n4_to_4 (coadjacency) for num 542
[LOG] Computing n0_to_1 for num 542
[LOG] Computing n0_to_2 for num 542
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_3 for num 308
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_4 for num 308
[LOG] Computing n1_to_2 for num 308
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_3 for num 542
[LOG] Computing n0_to_4 for num 542
[LOG] Computing n1_to_2 for num 542
[LOG] Computing n1_to_3 for num 308
[LOG] Computing n1_to_4 for num 308
[LOG] Computing n1_to_3 for num 542
[LOG] Computing n2_to_3 for num 308
[LOG] Computing n1_to_4 for num 542
[LOG] Computing n2_to_3 for num 542
[LOG] Computing n2_to_4 for num 542
[LOG] Computing n2_to_4 for num 308
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_4 for num 542
[LOG] Global feature for num 542
[LOG] Global feature for num 542
[LOG] Saving tensor x_0_542.pt
[LOG] Saving tensor x_1_542.pt
[LOG] Saving tensor x_2_542.pt
[LOG] Saving tensor x_3_542.pt
[LOG] Computing n3_to_4 for num 308
[LOG] Saving tensor x_4_542.pt
[LOG] Saving tensor n0_to_0_542.pt
[LOG] Global feature for num 308
[LOG] Global feature for num 308
[LOG] Saving tensor x_0_308.pt
[LOG] Saving tensor n1_to_1_542.pt
[LOG] Saving tensor x_1_308.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor x_2_308.pt
[LOG] Saving tensor x_3_308.pt
[LOG] Saving tensor n2_to_2_542.pt
[LOG] Saving tensor n3_to_3_542.pt
[LOG] Saving tensor x_4_308.pt
[LOG] Saving tensor n0_to_0_308.pt
[LOG] Saving tensor n4_to_4_542.pt
[LOG] Saving tensor n1_to_1_308.pt
[LOG] Saving tensor n0_to_1_542.pt
[LOG] Saving tensor n2_to_2_308.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n0_to_2_542.pt
[LOG] Saving tensor n0_to_3_542.pt
[LOG] Saving tensor n3_to_3_308.pt
[LOG] Saving tensor n0_to_4_542.pt
[LOG] Saving tensor n4_to_4_308.pt
[LOG] Saving tensor n1_to_2_542.pt
[LOG] Saving tensor n0_to_1_308.pt
[LOG] Saving tensor n1_to_3_542.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n0_to_2_308.pt
[LOG] Saving tensor n1_to_4_542.pt
[LOG] Saving tensor n0_to_3_308.pt
[LOG] Saving tensor n2_to_3_542.pt
[LOG] Saving tensor n0_to_4_308.pt
[LOG] Saving tensor n2_to_4_542.pt
[LOG] Saving tensor n1_to_2_308.pt
[LOG] Saving tensor n3_to_4_542.pt
[LOG] Saving tensor n1_to_3_308.pt
[LOG] Saving tensor global_feature_542.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 67: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n1_to_4_308.pt
[LOG] Saving tensor n2_to_3_308.pt
[LOG] Saving tensor n2_to_4_308.pt
[LOG] Saving tensor n3_to_4_308.pt
[LOG] Saving tensor global_feature_308.pt
[LOG] Process 38: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 772
[LOG] Computing n0_to_4 for num 772
[LOG] Computing n1_to_2 for num 772
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_3 for num 772
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_4 for num 772
[LOG] Computing n2_to_3 for num 772
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n2_to_4 for num 772
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n3_to_4 for num 772
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Global feature for num 772
[LOG] Global feature for num 772
[LOG] Saving tensor x_0_772.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor x_1_772.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor x_2_772.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor x_3_772.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor x_4_772.pt
[LOG] Saving tensor n0_to_0_772.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n1_to_1_772.pt
[LOG] Saving tensor n2_to_2_772.pt
[LOG] Saving tensor n3_to_3_772.pt
[LOG] Saving tensor n4_to_4_772.pt
[LOG] Saving tensor n0_to_1_772.pt
[LOG] Saving tensor n0_to_2_772.pt
[LOG] Saving tensor n0_to_3_772.pt
[LOG] Saving tensor n0_to_4_772.pt
[LOG] Saving tensor n1_to_2_772.pt
[LOG] Saving tensor n1_to_3_772.pt
[LOG] Saving tensor n1_to_4_772.pt
[LOG] Saving tensor n2_to_3_772.pt
[LOG] Saving tensor n2_to_4_772.pt
[LOG] Saving tensor n3_to_4_772.pt
[LOG] Saving tensor global_feature_772.pt
[LOG] Process 96: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] GENERATED TETRA
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 994
[LOG] Computing n4_to_4 (coadjacency) for num 994
[LOG] Computing n0_to_1 for num 994
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1697 Tetrahedra.
    [LOG] Generated 58 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.931034482758621
    [LOG] Max number of nodes per cluster is 26 and the number is 51
[LOG] We will select 402 edges and 1697 tetra
[LOG] Edges from tetra 0 and KDTree 550 with 0 edges in common.
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1454 Tetrahedra.
    [LOG] Generated 40 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.825
    [LOG] Max number of nodes per cluster is 116 and the number is 18
[LOG] Calculating for cell ranks 1 and 3
[LOG] We will select 232 edges and 1454 tetra
[LOG] Edges from tetra 0 and KDTree 2994 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_2 for num 994
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 2 subset clusters.
[LOG] Process 55: Created combinatorial complex for file data_445.hdf5
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 55: Calculating Neighbors
[LOG] Loading pickle file data_445.pickle
[LOG] Processing node features for num 445
[LOG] Processing edge features for num 445
[LOG] Processing tetra features for num 445
[LOG] Processing cluster features for num 445
[LOG] Process 84: Created combinatorial complex for file data_675.hdf5
[LOG] Processing cluster features for num 445
[LOG] Processing adjacency and incidence matrices for num 445
[LOG] Computing n0_to_0 for num 445
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 84: Calculating Neighbors
[LOG] Loading pickle file data_675.pickle
[LOG] Processing node features for num 675
[LOG] Processing edge features for num 675
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_1 for num 445
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1278 Tetrahedra.
    [LOG] Generated 34 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 19.058823529411764
    [LOG] Max number of nodes per cluster is 122 and the number is 20
[LOG] Processing tetra features for num 675
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 675
[LOG] Processing cluster features for num 675
[LOG] We will select 120 edges and 1278 tetra
[LOG] Edges from tetra 0 and KDTree 4187 with 0 edges in common.
[LOG] Processing adjacency and incidence matrices for num 675
[LOG] Computing n0_to_0 for num 675
[LOG] Computing n2_to_2 (adjacency) for num 445
[LOG] Computing n1_to_1 for num 675
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n3_to_3 (adjacency) for num 445
[LOG] Computing n4_to_4 (coadjacency) for num 445
[LOG] Computing n0_to_1 for num 445
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_2 for num 445
[LOG] Computing n2_to_2 (adjacency) for num 675
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Removed 0 subset clusters.
[LOG] Computing n3_to_3 (adjacency) for num 675
[LOG] Computing n4_to_4 (coadjacency) for num 675
[LOG] Computing n0_to_1 for num 675
[LOG] Computing n0_to_2 for num 675
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Process 30: Created combinatorial complex for file data_245.hdf5
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Process 30: Calculating Neighbors
[LOG] Loading pickle file data_245.pickle
[LOG] Processing node features for num 245
[LOG] Processing edge features for num 245
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing tetra features for num 245
[LOG] Computing n0_to_3 for num 675
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_4 for num 675
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n1_to_2 for num 675
[LOG] Processing cluster features for num 245
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Processing cluster features for num 245
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Processing adjacency and incidence matrices for num 245
[LOG] Computing n0_to_0 for num 245
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Computing n0_to_3 for num 445
[LOG] Computing n0_to_4 for num 445
[LOG] Computing n1_to_1 for num 245
[LOG] Computing n1_to_2 for num 445
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 245
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_3 for num 675
[LOG] Computing n1_to_4 for num 675
[LOG] Computing n2_to_3 for num 675
[LOG] Computing n2_to_4 for num 675
[LOG] Computing n1_to_3 for num 445
[LOG] Computing n1_to_4 for num 445
[LOG] Computing n2_to_3 for num 445
[LOG] Computing n3_to_4 for num 675
[LOG] Calculating for cell ranks 2 and 2
[LOG] Global feature for num 675
[LOG] Global feature for num 675
[LOG] Saving tensor x_0_675.pt
[LOG] Computing n2_to_4 for num 445
[LOG] Saving tensor x_1_675.pt
[LOG] Saving tensor x_2_675.pt
[LOG] Computing n3_to_3 (adjacency) for num 245
[LOG] Saving tensor x_3_675.pt
[LOG] Saving tensor x_4_675.pt
[LOG] Computing n4_to_4 (coadjacency) for num 245
[LOG] Saving tensor n0_to_0_675.pt
[LOG] Computing n0_to_1 for num 245
[LOG] Saving tensor n1_to_1_675.pt
[LOG] Saving tensor n2_to_2_675.pt
[LOG] Saving tensor n3_to_3_675.pt
[LOG] Computing n3_to_4 for num 445
[LOG] Global feature for num 445
[LOG] Global feature for num 445
[LOG] Saving tensor x_0_445.pt
[LOG] Saving tensor n4_to_4_675.pt
[LOG] Saving tensor x_1_445.pt
[LOG] Saving tensor n0_to_1_675.pt
[LOG] Saving tensor x_2_445.pt
[LOG] Saving tensor n0_to_2_675.pt
[LOG] Saving tensor x_3_445.pt
[LOG] Saving tensor x_4_445.pt
[LOG] Saving tensor n0_to_3_675.pt
[LOG] Saving tensor n0_to_0_445.pt
[LOG] Saving tensor n0_to_4_675.pt
[LOG] Saving tensor n1_to_2_675.pt
[LOG] Saving tensor n1_to_1_445.pt
[LOG] Computing n0_to_2 for num 245
[LOG] Saving tensor n1_to_3_675.pt
[LOG] Saving tensor n2_to_2_445.pt
[LOG] Saving tensor n1_to_4_675.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 5849 Tetrahedra.
    [LOG] Generated 133 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.56390977443609
    [LOG] Max number of nodes per cluster is 218 and the number is 114
[LOG] Saving tensor n2_to_3_675.pt
[LOG] Saving tensor n2_to_4_675.pt
[LOG] Saving tensor n3_to_4_675.pt
[LOG] Saving tensor global_feature_675.pt
[LOG] Saving tensor n3_to_3_445.pt
[LOG] Process 84: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n4_to_4_445.pt
[LOG] Saving tensor n0_to_1_445.pt
[LOG] Saving tensor n0_to_2_445.pt
[LOG] Saving tensor n0_to_3_445.pt
[LOG] Saving tensor n0_to_4_445.pt
[LOG] Saving tensor n1_to_2_445.pt
[LOG] Saving tensor n1_to_3_445.pt
[LOG] Saving tensor n1_to_4_445.pt
[LOG] Saving tensor n2_to_3_445.pt
[LOG] Saving tensor n2_to_4_445.pt
[LOG] Saving tensor n3_to_4_445.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor global_feature_445.pt
[LOG] Process 55: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_3 for num 245
[LOG] Computing n0_to_4 for num 245
[LOG] Computing n1_to_2 for num 245
[LOG] Computing n1_to_3 for num 245
[LOG] Computing n1_to_4 for num 245
[LOG] Computing n2_to_3 for num 245
[LOG] Computing n2_to_4 for num 245
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n3_to_4 for num 245
[LOG] Calculating for cell ranks 2 and 3
[LOG] Global feature for num 245
[LOG] Global feature for num 245
[LOG] Saving tensor x_0_245.pt
[LOG] Saving tensor x_1_245.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor x_2_245.pt
[LOG] Saving tensor x_3_245.pt
[LOG] Saving tensor x_4_245.pt
[LOG] Saving tensor n0_to_0_245.pt
[LOG] Saving tensor n1_to_1_245.pt
[LOG] Saving tensor n2_to_2_245.pt
[LOG] Saving tensor n3_to_3_245.pt
[LOG] Saving tensor n4_to_4_245.pt
[LOG] Saving tensor n0_to_1_245.pt
[LOG] Saving tensor n0_to_2_245.pt
[LOG] Saving tensor n0_to_3_245.pt
[LOG] Saving tensor n0_to_4_245.pt
[LOG] Saving tensor n1_to_2_245.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n1_to_3_245.pt
[LOG] Saving tensor n1_to_4_245.pt
[LOG] Saving tensor n2_to_3_245.pt
[LOG] Saving tensor n2_to_4_245.pt
[LOG] Saving tensor n3_to_4_245.pt
[LOG] Saving tensor global_feature_245.pt
[LOG] Process 30: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] We will select 1752 edges and 5849 tetra
[LOG] Edges from tetra 0 and KDTree 5805 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_3 for num 994
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_4 for num 994
[LOG] Computing n1_to_2 for num 994
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 4 subset clusters.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1353 Tetrahedra.
    [LOG] Generated 48 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.729166666666668
    [LOG] Max number of nodes per cluster is 116 and the number is 46
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] We will select 171 edges and 1353 tetra
[LOG] Edges from tetra 0 and KDTree 4316 with 0 edges in common.
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 87: Created combinatorial complex for file data_698.hdf5
[LOG] Process 73: Created combinatorial complex for file data_591.hdf5
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 73: Calculating Neighbors
[LOG] Loading pickle file data_591.pickle
[LOG] Processing node features for num 591
[LOG] Processing edge features for num 591
[LOG] Processing tetra features for num 591
[LOG] Processing cluster features for num 591
[LOG] Processing cluster features for num 591
[LOG] Processing adjacency and incidence matrices for num 591
[LOG] Computing n0_to_0 for num 591
[LOG] GENERATED TETRA
[LOG] Computing n1_to_1 for num 591
[LOG] Computing n2_to_2 (adjacency) for num 591
[LOG] Process 87: Calculating Neighbors
[LOG] Loading pickle file data_698.pickle
[LOG] Processing node features for num 698
[LOG] Processing edge features for num 698
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n3_to_3 (adjacency) for num 591
[LOG] Computing n4_to_4 (coadjacency) for num 591
[LOG] Computing n0_to_1 for num 591
[LOG] Processing tetra features for num 698
[LOG] Computing n0_to_2 for num 591
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing cluster features for num 698
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing cluster features for num 698
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing adjacency and incidence matrices for num 698
[LOG] Computing n0_to_0 for num 698
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_3 for num 591
[LOG] Computing n1_to_1 for num 698
[LOG] Computing n0_to_4 for num 591
[LOG] Computing n1_to_2 for num 591
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_3 for num 591
[LOG] Computing n1_to_4 for num 591
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_3 for num 591
[LOG] Computing n2_to_4 for num 591
[LOG] Computing n3_to_4 for num 591
[LOG] Global feature for num 591
[LOG] Global feature for num 591
[LOG] Saving tensor x_0_591.pt
[LOG] Saving tensor x_1_591.pt
[LOG] Saving tensor x_2_591.pt
[LOG] Saving tensor x_3_591.pt
[LOG] Saving tensor x_4_591.pt
[LOG] Saving tensor n0_to_0_591.pt
[LOG] Saving tensor n1_to_1_591.pt
[LOG] Saving tensor n2_to_2_591.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n3_to_3_591.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n4_to_4_591.pt
[LOG] Saving tensor n0_to_1_591.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n0_to_2_591.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n0_to_3_591.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n0_to_4_591.pt
[LOG] Saving tensor n1_to_2_591.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n1_to_3_591.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n1_to_4_591.pt
[LOG] Saving tensor n2_to_3_591.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n2_to_4_591.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n3_to_4_591.pt
[LOG] Saving tensor global_feature_591.pt
[LOG] Process 73: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 1879 Tetrahedra.
    [LOG] Generated 53 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.88679245283019
    [LOG] Max number of nodes per cluster is 38 and the number is 33
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_3 for num 994
[LOG] We will select 632 edges and 1879 tetra
[LOG] Edges from tetra 0 and KDTree 1393 with 0 edges in common.
[LOG] Computing n1_to_4 for num 994
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_3 for num 994
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_4 for num 994
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1494 Tetrahedra.
    [LOG] Generated 25 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 25.24
    [LOG] Max number of nodes per cluster is 88 and the number is 19
[LOG] We will select 109 edges and 1494 tetra
[LOG] Edges from tetra 0 and KDTree 2912 with 0 edges in common.
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n3_to_4 for num 994
[LOG] Calculating for cell ranks 1 and 1
[LOG] Global feature for num 994
[LOG] Global feature for num 994
[LOG] Saving tensor x_0_994.pt
[LOG] Saving tensor x_1_994.pt
[LOG] Saving tensor x_2_994.pt
[LOG] Saving tensor x_3_994.pt
[LOG] Saving tensor x_4_994.pt
[LOG] Saving tensor n0_to_0_994.pt
[LOG] Saving tensor n1_to_1_994.pt
[LOG] Saving tensor n2_to_2_994.pt
[LOG] Saving tensor n3_to_3_994.pt
[LOG] Saving tensor n4_to_4_994.pt
[LOG] Saving tensor n0_to_1_994.pt
[LOG] Saving tensor n0_to_2_994.pt
[LOG] Saving tensor n0_to_3_994.pt
[LOG] Saving tensor n0_to_4_994.pt
[LOG] Saving tensor n1_to_2_994.pt
[LOG] Saving tensor n1_to_3_994.pt
[LOG] Saving tensor n1_to_4_994.pt
[LOG] Saving tensor n2_to_3_994.pt
[LOG] Saving tensor n2_to_4_994.pt
[LOG] Saving tensor n3_to_4_994.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor global_feature_994.pt
[LOG] Process 127: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 7821 Tetrahedra.
    [LOG] Generated 172 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.087209302325581
    [LOG] Max number of nodes per cluster is 79 and the number is 171
[LOG] Process 3: Created combinatorial complex for file data_30.hdf5
[LOG] Removed 0 subset clusters.
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2253 Tetrahedra.
    [LOG] Generated 63 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.682539682539682
    [LOG] Max number of nodes per cluster is 56 and the number is 8
[LOG] Process 3: Calculating Neighbors
[LOG] Loading pickle file data_30.pickle
[LOG] Processing node features for num 30
[LOG] Processing edge features for num 30
[LOG] Calculating for cell ranks 2 and 2
[LOG] We will select 221 edges and 2253 tetra
[LOG] Edges from tetra 0 and KDTree 751 with 0 edges in common.
[LOG] Processing tetra features for num 30
[LOG] Process 101: Created combinatorial complex for file data_815.hdf5
[LOG] Processing cluster features for num 30
[LOG] Processing cluster features for num 30
[LOG] Processing adjacency and incidence matrices for num 30
[LOG] Computing n0_to_0 for num 30
[LOG] Process 101: Calculating Neighbors
[LOG] Loading pickle file data_815.pickle
[LOG] Processing node features for num 815
[LOG] Processing edge features for num 815
[LOG] Computing n1_to_1 for num 30
[LOG] Processing tetra features for num 815
[LOG] Processing cluster features for num 815
[LOG] Processing cluster features for num 815
[LOG] We will select 3560 edges and 7821 tetra
[LOG] Edges from tetra 0 and KDTree 3670 with 0 edges in common.
[LOG] Processing adjacency and incidence matrices for num 815
[LOG] Computing n0_to_0 for num 815
[LOG] Computing n2_to_2 (adjacency) for num 698
[LOG] Computing n1_to_1 for num 815
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_2 (adjacency) for num 815
[LOG] Computing n3_to_3 (adjacency) for num 815
[LOG] Computing n4_to_4 (coadjacency) for num 815
[LOG] Computing n0_to_1 for num 815
[LOG] Computing n2_to_2 (adjacency) for num 30
[LOG] Computing n0_to_2 for num 815
[LOG] Computing n3_to_3 (adjacency) for num 30
[LOG] Computing n4_to_4 (coadjacency) for num 30
[LOG] Computing n0_to_1 for num 30
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_2 for num 30
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 111: Created combinatorial complex for file data_886.hdf5
[LOG] Computing n0_to_3 for num 30
[LOG] Computing n0_to_4 for num 30
[LOG] Computing n0_to_3 for num 815
[LOG] Computing n1_to_2 for num 30
[LOG] Computing n0_to_4 for num 815
[LOG] Computing n1_to_2 for num 815
[LOG] Process 111: Calculating Neighbors
[LOG] Loading pickle file data_886.pickle
[LOG] Processing node features for num 886
[LOG] Processing edge features for num 886
[LOG] Computing n1_to_3 for num 815
[LOG] Computing n1_to_4 for num 815
[LOG] Computing n2_to_3 for num 815
[LOG] Processing tetra features for num 886
[LOG] Computing n2_to_4 for num 815
[LOG] Computing n3_to_4 for num 815
[LOG] Global feature for num 815
[LOG] Calculating for cell ranks 2 and 3
[LOG] Global feature for num 815
[LOG] Saving tensor x_0_815.pt
[LOG] Saving tensor x_1_815.pt
[LOG] Saving tensor x_2_815.pt
[LOG] Saving tensor x_3_815.pt
[LOG] Saving tensor x_4_815.pt
[LOG] Saving tensor n0_to_0_815.pt
[LOG] Saving tensor n1_to_1_815.pt
[LOG] Saving tensor n2_to_2_815.pt
[LOG] Processing cluster features for num 886
[LOG] Saving tensor n3_to_3_815.pt
[LOG] Saving tensor n4_to_4_815.pt
[LOG] Saving tensor n0_to_1_815.pt
[LOG] Saving tensor n0_to_2_815.pt
[LOG] Saving tensor n0_to_3_815.pt
[LOG] Processing cluster features for num 886
[LOG] Saving tensor n0_to_4_815.pt
[LOG] Saving tensor n1_to_2_815.pt
[LOG] Saving tensor n1_to_3_815.pt
[LOG] Saving tensor n1_to_4_815.pt
[LOG] Saving tensor n2_to_3_815.pt
[LOG] Saving tensor n2_to_4_815.pt
[LOG] Saving tensor n3_to_4_815.pt
[LOG] Saving tensor global_feature_815.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 101: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing adjacency and incidence matrices for num 886
[LOG] Computing n0_to_0 for num 886
[LOG] Computing n1_to_1 for num 886
[LOG] GENERATED TETRA
[LOG] Computing n1_to_3 for num 30
[LOG] Computing n1_to_4 for num 30
[LOG] Computing n2_to_3 for num 30
[LOG] Computing n2_to_2 (adjacency) for num 886
[LOG] Computing n2_to_4 for num 30
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n3_to_4 for num 30
[LOG] Global feature for num 30
[LOG] Global feature for num 30
[LOG] Saving tensor x_0_30.pt
[LOG] Saving tensor x_1_30.pt
[LOG] Saving tensor x_2_30.pt
[LOG] Saving tensor x_3_30.pt
[LOG] Saving tensor x_4_30.pt
[LOG] Saving tensor n0_to_0_30.pt
[LOG] Saving tensor n1_to_1_30.pt
[LOG] Saving tensor n2_to_2_30.pt
[LOG] Saving tensor n3_to_3_30.pt
[LOG] Saving tensor n4_to_4_30.pt
[LOG] Saving tensor n0_to_1_30.pt
[LOG] Saving tensor n0_to_2_30.pt
[LOG] Saving tensor n0_to_3_30.pt
[LOG] Saving tensor n0_to_4_30.pt
[LOG] Saving tensor n1_to_2_30.pt
[LOG] Saving tensor n1_to_3_30.pt
[LOG] Saving tensor n1_to_4_30.pt
[LOG] Saving tensor n2_to_3_30.pt
[LOG] Saving tensor n2_to_4_30.pt
[LOG] Saving tensor n3_to_4_30.pt
[LOG] Saving tensor global_feature_30.pt
[LOG] Process 3: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n3_to_3 (adjacency) for num 886
[LOG] Computing n4_to_4 (coadjacency) for num 886
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_1 for num 886
[LOG] Computing n0_to_2 for num 886
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 3233 Tetrahedra.
    [LOG] Generated 75 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.773333333333333
    [LOG] Max number of nodes per cluster is 45 and the number is 34
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] We will select 485 edges and 3233 tetra
[LOG] Edges from tetra 0 and KDTree 485 with 0 edges in common.
[LOG] Computing n0_to_3 for num 886
[LOG] Computing n0_to_4 for num 886
[LOG] Computing n1_to_2 for num 886
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_3 for num 886
[LOG] Computing n1_to_4 for num 886
[LOG] Computing n2_to_3 for num 886
[LOG] Computing n2_to_4 for num 886
[LOG] Computing n3_to_4 for num 886
[LOG] Global feature for num 886
[LOG] Global feature for num 886
[LOG] Saving tensor x_0_886.pt
[LOG] Saving tensor x_1_886.pt
[LOG] Saving tensor x_2_886.pt
[LOG] Saving tensor x_3_886.pt
[LOG] Saving tensor x_4_886.pt
[LOG] Saving tensor n0_to_0_886.pt
[LOG] Saving tensor n1_to_1_886.pt
[LOG] Saving tensor n2_to_2_886.pt
[LOG] Saving tensor n3_to_3_886.pt
[LOG] Saving tensor n4_to_4_886.pt
[LOG] Saving tensor n0_to_1_886.pt
[LOG] Saving tensor n0_to_2_886.pt
[LOG] Saving tensor n0_to_3_886.pt
[LOG] Saving tensor n0_to_4_886.pt
[LOG] Saving tensor n1_to_2_886.pt
[LOG] Saving tensor n1_to_3_886.pt
[LOG] Saving tensor n1_to_4_886.pt
[LOG] Saving tensor n2_to_3_886.pt
[LOG] Saving tensor n2_to_4_886.pt
[LOG] Saving tensor n3_to_4_886.pt
[LOG] Saving tensor global_feature_886.pt
[LOG] Process 111: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1856 Tetrahedra.
    [LOG] Generated 52 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.153846153846153
    [LOG] Max number of nodes per cluster is 76 and the number is 51
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] We will select 223 edges and 1856 tetra
[LOG] Edges from tetra 0 and KDTree 3010 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 698
[LOG] Computing n4_to_4 (coadjacency) for num 698
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_1 for num 698
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 2 subset clusters.
[LOG] Computing n0_to_2 for num 698
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Process 81: Created combinatorial complex for file data_651.hdf5
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Process 18: Created combinatorial complex for file data_148.hdf5
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Process 81: Calculating Neighbors
[LOG] Loading pickle file data_651.pickle
[LOG] Processing node features for num 651
[LOG] Processing edge features for num 651
[LOG] Processing tetra features for num 651
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Process 18: Calculating Neighbors
[LOG] Loading pickle file data_148.pickle
[LOG] Processing node features for num 148
[LOG] Processing edge features for num 148
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Processing tetra features for num 148
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Processing cluster features for num 651
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Processing cluster features for num 148
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Processing cluster features for num 148
[LOG] Processing cluster features for num 651
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 148
[LOG] Computing n0_to_0 for num 148
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Processing adjacency and incidence matrices for num 651
[LOG] Computing n0_to_0 for num 651
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n1_to_1 for num 148
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_1 for num 651
[LOG] Computing n2_to_2 (adjacency) for num 148
[LOG] Computing n3_to_3 (adjacency) for num 148
[LOG] Computing n4_to_4 (coadjacency) for num 148
[LOG] Computing n0_to_1 for num 148
[LOG] Computing n0_to_2 for num 148
[LOG] Removed 4 subset clusters.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n2_to_2 (adjacency) for num 651
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_3 for num 148
[LOG] Computing n0_to_4 for num 148
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_2 for num 148
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_3 for num 148
[LOG] Computing n1_to_4 for num 148
[LOG] Computing n2_to_3 for num 148
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n2_to_4 for num 148
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n3_to_4 for num 148
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Global feature for num 148
[LOG] Global feature for num 148
[LOG] Saving tensor x_0_148.pt
[LOG] Saving tensor x_1_148.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor x_2_148.pt
[LOG] Saving tensor x_3_148.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor x_4_148.pt
[LOG] Saving tensor n0_to_0_148.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n1_to_1_148.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n2_to_2_148.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n3_to_3_148.pt
[LOG] Saving tensor n4_to_4_148.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n0_to_1_148.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n0_to_2_148.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n0_to_3_148.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n0_to_4_148.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n1_to_2_148.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n1_to_3_148.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n1_to_4_148.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n2_to_3_148.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n0_to_3 for num 698
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n2_to_4_148.pt
[LOG] Saving tensor n3_to_4_148.pt
[LOG] Saving tensor global_feature_148.pt
[LOG] Process 18: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_4 for num 698
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_2 for num 698
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n3_to_3 (adjacency) for num 651
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n4_to_4 (coadjacency) for num 651
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n0_to_1 for num 651
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n0_to_2 for num 651
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Process 109: Created combinatorial complex for file data_868.hdf5
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_3 for num 651
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_4 for num 651
[LOG] Computing n1_to_2 for num 651
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_3 for num 651
[LOG] Computing n1_to_4 for num 651
[LOG] Computing n2_to_3 for num 651
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_4 for num 651
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n3_to_4 for num 651
[LOG] Global feature for num 651
[LOG] Global feature for num 651
[LOG] Saving tensor x_0_651.pt
[LOG] Saving tensor x_1_651.pt
[LOG] Saving tensor x_2_651.pt
[LOG] Saving tensor x_3_651.pt
[LOG] Saving tensor x_4_651.pt
[LOG] Saving tensor n0_to_0_651.pt
[LOG] Saving tensor n1_to_1_651.pt
[LOG] Saving tensor n2_to_2_651.pt
[LOG] Saving tensor n3_to_3_651.pt
[LOG] Saving tensor n4_to_4_651.pt
[LOG] Saving tensor n0_to_1_651.pt
[LOG] Saving tensor n0_to_2_651.pt
[LOG] Process 109: Calculating Neighbors
[LOG] Loading pickle file data_868.pickle
[LOG] Processing node features for num 868
[LOG] Saving tensor n0_to_3_651.pt
[LOG] Saving tensor n0_to_4_651.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing edge features for num 868
[LOG] Saving tensor n1_to_2_651.pt
[LOG] Saving tensor n1_to_3_651.pt
[LOG] Saving tensor n1_to_4_651.pt
[LOG] Saving tensor n2_to_3_651.pt
[LOG] Saving tensor n2_to_4_651.pt
[LOG] Saving tensor n3_to_4_651.pt
[LOG] Saving tensor global_feature_651.pt
[LOG] Process 81: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing tetra features for num 868
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing cluster features for num 868
[LOG] Processing cluster features for num 868
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing adjacency and incidence matrices for num 868
[LOG] Computing n0_to_0 for num 868
[LOG] Calculating for cell ranks 3 and 4
[LOG] GENERATED TETRA
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1377 Tetrahedra.
    [LOG] Generated 45 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.28888888888889
    [LOG] Max number of nodes per cluster is 34 and the number is 14
[LOG] We will select 246 edges and 1377 tetra
[LOG] Edges from tetra 0 and KDTree 461 with 0 edges in common.
[LOG] Computing n1_to_3 for num 698
[LOG] Computing n1_to_4 for num 698
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_3 for num 698
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 2587 Tetrahedra.
    [LOG] Generated 80 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.475
    [LOG] Max number of nodes per cluster is 41 and the number is 79
[LOG] Computing n2_to_4 for num 698
[LOG] Computing n1_to_1 for num 868
[LOG] We will select 501 edges and 2587 tetra
[LOG] Edges from tetra 0 and KDTree 1521 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_4 for num 698
[LOG] Global feature for num 698
[LOG] Global feature for num 698
[LOG] Saving tensor x_0_698.pt
[LOG] Saving tensor x_1_698.pt
[LOG] Saving tensor x_2_698.pt
[LOG] Saving tensor x_3_698.pt
[LOG] Saving tensor x_4_698.pt
[LOG] Saving tensor n0_to_0_698.pt
[LOG] Saving tensor n1_to_1_698.pt
[LOG] Saving tensor n2_to_2_698.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n3_to_3_698.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor n4_to_4_698.pt
[LOG] Saving tensor n0_to_1_698.pt
[LOG] Saving tensor n0_to_2_698.pt
[LOG] Saving tensor n0_to_3_698.pt
[LOG] Saving tensor n0_to_4_698.pt
[LOG] Saving tensor n1_to_2_698.pt
[LOG] Saving tensor n1_to_3_698.pt
[LOG] Saving tensor n1_to_4_698.pt
[LOG] Saving tensor n2_to_3_698.pt
[LOG] Saving tensor n2_to_4_698.pt
[LOG] Saving tensor n3_to_4_698.pt
[LOG] Saving tensor global_feature_698.pt
[LOG] Process 87: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 102: Created combinatorial complex for file data_822.hdf5
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 102: Calculating Neighbors
[LOG] Loading pickle file data_822.pickle
[LOG] Processing node features for num 822
[LOG] Processing edge features for num 822
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing tetra features for num 822
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing cluster features for num 822
[LOG] Processing cluster features for num 822
[LOG] Processing adjacency and incidence matrices for num 822
[LOG] Computing n0_to_0 for num 822
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_1 for num 822
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 822
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 822
[LOG] Computing n4_to_4 (coadjacency) for num 822
[LOG] Computing n0_to_1 for num 822
[LOG] Computing n0_to_2 for num 822
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Removed 3 subset clusters.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_3 for num 822
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_4 for num 822
[LOG] Computing n1_to_2 for num 822
[LOG] Process 45: Created combinatorial complex for file data_366.hdf5
[LOG] Computing n1_to_3 for num 822
[LOG] Computing n1_to_4 for num 822
[LOG] Computing n2_to_3 for num 822
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_4 for num 822
[LOG] Computing n3_to_4 for num 822
[LOG] Global feature for num 822
[LOG] Global feature for num 822
[LOG] Saving tensor x_0_822.pt
[LOG] Saving tensor x_1_822.pt
[LOG] Saving tensor x_2_822.pt
[LOG] Saving tensor x_3_822.pt
[LOG] Saving tensor x_4_822.pt
[LOG] Saving tensor n0_to_0_822.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n1_to_1_822.pt
[LOG] Saving tensor n2_to_2_822.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 45: Calculating Neighbors
[LOG] Loading pickle file data_366.pickle
[LOG] Processing node features for num 366
[LOG] Processing edge features for num 366
[LOG] Saving tensor n3_to_3_822.pt
[LOG] Saving tensor n4_to_4_822.pt
[LOG] Saving tensor n0_to_1_822.pt
[LOG] Saving tensor n0_to_2_822.pt
[LOG] Saving tensor n0_to_3_822.pt
[LOG] Processing tetra features for num 366
[LOG] Saving tensor n0_to_4_822.pt
[LOG] Saving tensor n1_to_2_822.pt
[LOG] Saving tensor n1_to_3_822.pt
[LOG] Saving tensor n1_to_4_822.pt
[LOG] Saving tensor n2_to_3_822.pt
[LOG] Saving tensor n2_to_4_822.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n3_to_4_822.pt
[LOG] Saving tensor global_feature_822.pt
[LOG] Process 102: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing cluster features for num 366
[LOG] Processing cluster features for num 366
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing adjacency and incidence matrices for num 366
[LOG] Computing n0_to_0 for num 366
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_1 for num 366
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_2 (adjacency) for num 366
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 3142 Tetrahedra.
    [LOG] Generated 79 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.531645569620252
    [LOG] Max number of nodes per cluster is 72 and the number is 77
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 366
[LOG] Computing n4_to_4 (coadjacency) for num 366
[LOG] Computing n0_to_1 for num 366
[LOG] We will select 831 edges and 3142 tetra
[LOG] Edges from tetra 0 and KDTree 1196 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_2 for num 366
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_3 for num 366
[LOG] Computing n0_to_4 for num 366
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_2 for num 366
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2159 Tetrahedra.
    [LOG] Generated 67 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.880597014925373
    [LOG] Max number of nodes per cluster is 36 and the number is 38
[LOG] We will select 471 edges and 2159 tetra
[LOG] Edges from tetra 0 and KDTree 1486 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_3 for num 366
[LOG] Computing n1_to_4 for num 366
[LOG] Computing n2_to_3 for num 366
[LOG] GENERATED TETRA
[LOG] Computing n2_to_4 for num 366
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n3_to_4 for num 366
[LOG] Global feature for num 366
[LOG] Global feature for num 366
[LOG] Saving tensor x_0_366.pt
[LOG] Saving tensor x_1_366.pt
[LOG] Saving tensor x_2_366.pt
[LOG] Saving tensor x_3_366.pt
[LOG] Saving tensor x_4_366.pt
[LOG] Saving tensor n0_to_0_366.pt
[LOG] Saving tensor n1_to_1_366.pt
[LOG] Saving tensor n2_to_2_366.pt
[LOG] Saving tensor n3_to_3_366.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n4_to_4_366.pt
[LOG] Saving tensor n0_to_1_366.pt
[LOG] Saving tensor n0_to_2_366.pt
[LOG] Saving tensor n0_to_3_366.pt
[LOG] Saving tensor n0_to_4_366.pt
[LOG] Saving tensor n1_to_2_366.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor n1_to_3_366.pt
[LOG] Saving tensor n1_to_4_366.pt
[LOG] Saving tensor n2_to_3_366.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n2_to_4_366.pt
[LOG] Saving tensor n3_to_4_366.pt
[LOG] Saving tensor global_feature_366.pt
[LOG] Process 45: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Process 50: Created combinatorial complex for file data_404.hdf5
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Process 83: Created combinatorial complex for file data_669.hdf5
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Process 83: Calculating Neighbors
[LOG] Loading pickle file data_669.pickle
[LOG] Processing node features for num 669
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Processing edge features for num 669
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing tetra features for num 669
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing cluster features for num 669
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Processing cluster features for num 669
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Processing adjacency and incidence matrices for num 669
[LOG] Computing n0_to_0 for num 669
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1557 Tetrahedra.
    [LOG] Generated 44 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.454545454545453
    [LOG] Max number of nodes per cluster is 85 and the number is 37
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Computing n1_to_1 for num 669
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] We will select 241 edges and 1557 tetra
[LOG] Edges from tetra 0 and KDTree 2442 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 50: Calculating Neighbors
[LOG] Loading pickle file data_404.pickle
[LOG] Processing node features for num 404
[LOG] Processing edge features for num 404
[LOG] Processing tetra features for num 404
[LOG] Computing n2_to_2 (adjacency) for num 669
[LOG] Processing cluster features for num 404
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing cluster features for num 404
[LOG] Processing adjacency and incidence matrices for num 404
[LOG] Computing n0_to_0 for num 404
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_3 (adjacency) for num 669
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n4_to_4 (coadjacency) for num 669
[LOG] Computing n0_to_1 for num 669
[LOG] Computing n1_to_1 for num 404
[LOG] Process 125: Created combinatorial complex for file data_984.hdf5
[LOG] Computing n0_to_2 for num 669
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_3 for num 669
[LOG] Process 125: Calculating Neighbors
[LOG] Loading pickle file data_984.pickle
[LOG] Processing node features for num 984
[LOG] Processing edge features for num 984
[LOG] Computing n0_to_4 for num 669
[LOG] Computing n2_to_2 (adjacency) for num 404
[LOG] Processing tetra features for num 984
[LOG] Computing n1_to_2 for num 669
[LOG] Processing cluster features for num 984
[LOG] Processing cluster features for num 984
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Processing adjacency and incidence matrices for num 984
[LOG] Computing n0_to_0 for num 984
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n1_to_1 for num 984
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_2 (adjacency) for num 984
[LOG] Computing n1_to_3 for num 669
[LOG] Computing n1_to_4 for num 669
[LOG] Computing n2_to_3 for num 669
[LOG] Computing n2_to_4 for num 669
[LOG] Computing n3_to_3 (adjacency) for num 984
[LOG] Computing n4_to_4 (coadjacency) for num 984
[LOG] Computing n0_to_1 for num 984
[LOG] GENERATED TETRA
[LOG] Computing n3_to_4 for num 669
[LOG] Global feature for num 669
[LOG] Global feature for num 669
[LOG] Saving tensor x_0_669.pt
[LOG] Saving tensor x_1_669.pt
[LOG] Saving tensor x_2_669.pt
[LOG] Saving tensor x_3_669.pt
[LOG] Saving tensor x_4_669.pt
[LOG] Saving tensor n0_to_0_669.pt
[LOG] Saving tensor n1_to_1_669.pt
[LOG] Computing n0_to_2 for num 984
[LOG] Saving tensor n2_to_2_669.pt
[LOG] Saving tensor n3_to_3_669.pt
[LOG] Saving tensor n4_to_4_669.pt
[LOG] Saving tensor n0_to_1_669.pt
[LOG] Saving tensor n0_to_2_669.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n0_to_3_669.pt
[LOG] Saving tensor n0_to_4_669.pt
[LOG] Saving tensor n1_to_2_669.pt
[LOG] Saving tensor n1_to_3_669.pt
[LOG] Saving tensor n1_to_4_669.pt
[LOG] Saving tensor n2_to_3_669.pt
[LOG] Saving tensor n2_to_4_669.pt
[LOG] Saving tensor n3_to_4_669.pt
[LOG] Saving tensor global_feature_669.pt
[LOG] Process 83: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n3_to_3 (adjacency) for num 404
[LOG] Computing n4_to_4 (coadjacency) for num 404
[LOG] Computing n0_to_1 for num 404
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_2 for num 404
[LOG] Calculating for cell ranks 3 and 4
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1606 Tetrahedra.
    [LOG] Generated 41 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.609756097560975
    [LOG] Max number of nodes per cluster is 35 and the number is 37
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] We will select 327 edges and 1606 tetra
[LOG] Edges from tetra 0 and KDTree 327 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n0_to_3 for num 984
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n0_to_4 for num 984
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n1_to_2 for num 984
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_3 for num 984
[LOG] Computing n1_to_4 for num 984
[LOG] Computing n2_to_3 for num 984
[LOG] Computing n2_to_4 for num 984
[LOG] Computing n3_to_4 for num 984
[LOG] Global feature for num 984
[LOG] Global feature for num 984
[LOG] Saving tensor x_0_984.pt
[LOG] Saving tensor x_1_984.pt
[LOG] Saving tensor x_2_984.pt
[LOG] Saving tensor x_3_984.pt
[LOG] Saving tensor x_4_984.pt
[LOG] Saving tensor n0_to_0_984.pt
[LOG] Saving tensor n1_to_1_984.pt
[LOG] Saving tensor n2_to_2_984.pt
[LOG] Saving tensor n3_to_3_984.pt
[LOG] Saving tensor n4_to_4_984.pt
[LOG] Saving tensor n0_to_1_984.pt
[LOG] Saving tensor n0_to_2_984.pt
[LOG] Saving tensor n0_to_3_984.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n0_to_4_984.pt
[LOG] Saving tensor n1_to_2_984.pt
[LOG] Saving tensor n1_to_3_984.pt
[LOG] Saving tensor n1_to_4_984.pt
[LOG] Saving tensor n2_to_3_984.pt
[LOG] Saving tensor n2_to_4_984.pt
[LOG] Saving tensor n3_to_4_984.pt
[LOG] Saving tensor global_feature_984.pt
[LOG] Process 125: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2099 Tetrahedra.
    [LOG] Generated 58 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.310344827586206
    [LOG] Max number of nodes per cluster is 23 and the number is 37
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1618 Tetrahedra.
    [LOG] Generated 43 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.58139534883721
    [LOG] Max number of nodes per cluster is 103 and the number is 4
[LOG] We will select 318 edges and 2099 tetra
[LOG] Edges from tetra 0 and KDTree 318 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] We will select 456 edges and 1618 tetra
[LOG] Edges from tetra 0 and KDTree 2051 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_3 for num 404
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_4 for num 404
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_2 for num 404
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 71: Created combinatorial complex for file data_573.hdf5
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_2 (adjacency) for num 868
[LOG] Process 71: Calculating Neighbors
[LOG] Loading pickle file data_573.pickle
[LOG] Processing node features for num 573
[LOG] Processing edge features for num 573
[LOG] Processing tetra features for num 573
[LOG] Processing cluster features for num 573
[LOG] Processing cluster features for num 573
[LOG] Processing adjacency and incidence matrices for num 573
[LOG] Computing n0_to_0 for num 573
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_1 for num 573
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_2 (adjacency) for num 573
[LOG] Process 24: Created combinatorial complex for file data_198.hdf5
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2060 Tetrahedra.
    [LOG] Generated 47 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.76595744680851
    [LOG] Max number of nodes per cluster is 84 and the number is 45
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1351 Tetrahedra.
    [LOG] Generated 61 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.508196721311476
    [LOG] Max number of nodes per cluster is 36 and the number is 9
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n3_to_3 (adjacency) for num 573
[LOG] Computing n4_to_4 (coadjacency) for num 573
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n0_to_1 for num 573
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] We will select 165 edges and 2060 tetra
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Edges from tetra 0 and KDTree 2111 with 0 edges in common.
[LOG] Computing n0_to_2 for num 573
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 24: Calculating Neighbors
[LOG] Loading pickle file data_198.pickle
[LOG] Processing node features for num 198
[LOG] Processing edge features for num 198
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] We will select 392 edges and 1351 tetra
[LOG] Edges from tetra 0 and KDTree 703 with 0 edges in common.
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Processing tetra features for num 198
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing cluster features for num 198
[LOG] Computing n1_to_3 for num 404
[LOG] Removed 2 subset clusters.
[LOG] Processing cluster features for num 198
[LOG] Computing n1_to_4 for num 404
[LOG] Processing adjacency and incidence matrices for num 198
[LOG] Computing n0_to_0 for num 198
[LOG] Computing n2_to_3 for num 404
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_3 for num 573
[LOG] Computing n0_to_4 for num 573
[LOG] Computing n1_to_2 for num 573
[LOG] Computing n2_to_4 for num 404
[LOG] Computing n1_to_1 for num 198
[LOG] Computing n3_to_4 for num 404
[LOG] Global feature for num 404
[LOG] Global feature for num 404
[LOG] Saving tensor x_0_404.pt
[LOG] Saving tensor x_1_404.pt
[LOG] Saving tensor x_2_404.pt
[LOG] Saving tensor x_3_404.pt
[LOG] Process 122: Created combinatorial complex for file data_961.hdf5
[LOG] Saving tensor x_4_404.pt
[LOG] Saving tensor n0_to_0_404.pt
[LOG] Saving tensor n1_to_1_404.pt
[LOG] Saving tensor n2_to_2_404.pt
[LOG] Saving tensor n3_to_3_404.pt
[LOG] Saving tensor n4_to_4_404.pt
[LOG] Saving tensor n0_to_1_404.pt
[LOG] Saving tensor n0_to_2_404.pt
[LOG] Saving tensor n0_to_3_404.pt
[LOG] Saving tensor n0_to_4_404.pt
[LOG] Saving tensor n1_to_2_404.pt
[LOG] Saving tensor n1_to_3_404.pt
[LOG] Computing n1_to_3 for num 573
[LOG] Saving tensor n1_to_4_404.pt
[LOG] Computing n1_to_4 for num 573
[LOG] Saving tensor n2_to_3_404.pt
[LOG] Saving tensor n2_to_4_404.pt
[LOG] Computing n2_to_3 for num 573
[LOG] Saving tensor n3_to_4_404.pt
[LOG] Saving tensor global_feature_404.pt
[LOG] Removed 1 subset clusters.
[LOG] Process 50: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n2_to_4 for num 573
[LOG] Computing n3_to_4 for num 573
[LOG] Global feature for num 573
[LOG] Global feature for num 573
[LOG] Saving tensor x_0_573.pt
[LOG] Saving tensor x_1_573.pt
[LOG] Saving tensor x_2_573.pt
[LOG] Saving tensor x_3_573.pt
[LOG] Saving tensor x_4_573.pt
[LOG] Saving tensor n0_to_0_573.pt
[LOG] Computing n2_to_2 (adjacency) for num 198
[LOG] Saving tensor n1_to_1_573.pt
[LOG] Saving tensor n2_to_2_573.pt
[LOG] Process 122: Calculating Neighbors
[LOG] Loading pickle file data_961.pickle
[LOG] Processing node features for num 961
[LOG] Saving tensor n3_to_3_573.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n4_to_4_573.pt
[LOG] Processing edge features for num 961
[LOG] Saving tensor n0_to_1_573.pt
[LOG] Saving tensor n0_to_2_573.pt
[LOG] Saving tensor n0_to_3_573.pt
[LOG] Saving tensor n0_to_4_573.pt
[LOG] Saving tensor n1_to_2_573.pt
[LOG] Saving tensor n1_to_3_573.pt
[LOG] Saving tensor n1_to_4_573.pt
[LOG] Processing tetra features for num 961
[LOG] Saving tensor n2_to_3_573.pt
[LOG] Saving tensor n2_to_4_573.pt
[LOG] Saving tensor n3_to_4_573.pt
[LOG] Saving tensor global_feature_573.pt
[LOG] Process 71: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 1 subset clusters.
[LOG] Processing cluster features for num 961
[LOG] Process 53: Created combinatorial complex for file data_430.hdf5
[LOG] Processing cluster features for num 961
[LOG] Processing adjacency and incidence matrices for num 961
[LOG] Computing n0_to_0 for num 961
[LOG] Calculating for cell ranks 1 and 1
[LOG] GENERATED TETRA
[LOG] Computing n3_to_3 (adjacency) for num 198
[LOG] Computing n1_to_1 for num 961
[LOG] Computing n4_to_4 (coadjacency) for num 198
[LOG] Computing n0_to_1 for num 198
[LOG] Process 53: Calculating Neighbors
[LOG] Loading pickle file data_430.pickle
[LOG] Processing node features for num 430
[LOG] Processing edge features for num 430
[LOG] Processing tetra features for num 430
[LOG] GENERATED TETRA
[LOG] Process 51: Created combinatorial complex for file data_413.hdf5
[LOG] Processing cluster features for num 430
[LOG] Computing n0_to_2 for num 198
[LOG] Processing cluster features for num 430
[LOG] Processing adjacency and incidence matrices for num 430
[LOG] Computing n0_to_0 for num 430
[LOG] Computing n2_to_2 (adjacency) for num 961
[LOG] Computing n1_to_1 for num 430
[LOG] Process 51: Calculating Neighbors
[LOG] Loading pickle file data_413.pickle
[LOG] Processing node features for num 413
[LOG] Processing edge features for num 413
[LOG] Processing tetra features for num 413
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Removed 0 subset clusters.
[LOG] Processing cluster features for num 413

    [LOG] We Currently have 1153 Tetrahedra.
    [LOG] Generated 42 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.785714285714286
    [LOG] Max number of nodes per cluster is 54 and the number is 18
[LOG] Computing n2_to_2 (adjacency) for num 430
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing cluster features for num 413
[LOG] Computing n3_to_3 (adjacency) for num 961
[LOG] Processing adjacency and incidence matrices for num 413
[LOG] Computing n0_to_0 for num 413
[LOG] Computing n4_to_4 (coadjacency) for num 961
[LOG] Computing n0_to_1 for num 961
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] We will select 233 edges and 1153 tetra
[LOG] Edges from tetra 0 and KDTree 326 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n3_to_3 (adjacency) for num 430
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n4_to_4 (coadjacency) for num 430
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n0_to_1 for num 430
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n0_to_2 for num 961
[LOG] Computing n1_to_1 for num 413
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n0_to_2 for num 430
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 413
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_3 for num 198
[LOG] Computing n0_to_4 for num 198
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2540 Tetrahedra.
    [LOG] Generated 63 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.523809523809524
    [LOG] Max number of nodes per cluster is 38 and the number is 37
[LOG] Computing n1_to_2 for num 198
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] GENERATED TETRA
[LOG] We will select 571 edges and 2540 tetra
[LOG] Edges from tetra 0 and KDTree 749 with 0 edges in common.
[LOG] Computing n0_to_3 for num 961
[LOG] Computing n0_to_4 for num 961
[LOG] Computing n1_to_2 for num 961
[LOG] Computing n0_to_3 for num 430
[LOG] Computing n0_to_4 for num 430
[LOG] Computing n1_to_2 for num 430
[LOG] Computing n1_to_3 for num 198
[LOG] Computing n1_to_4 for num 198
[LOG] Computing n2_to_3 for num 198
[LOG] Computing n3_to_3 (adjacency) for num 413
[LOG] Computing n2_to_4 for num 198
[LOG] Computing n4_to_4 (coadjacency) for num 413
[LOG] Computing n0_to_1 for num 413
[LOG] Computing n3_to_4 for num 198
[LOG] Global feature for num 198
[LOG] Global feature for num 198
[LOG] Saving tensor x_0_198.pt
[LOG] Saving tensor x_1_198.pt
[LOG] Saving tensor x_2_198.pt
[LOG] Computing n0_to_2 for num 413
[LOG] Saving tensor x_3_198.pt
[LOG] Saving tensor x_4_198.pt
[LOG] Saving tensor n0_to_0_198.pt
[LOG] Saving tensor n1_to_1_198.pt
[LOG] Saving tensor n2_to_2_198.pt
[LOG] Saving tensor n3_to_3_198.pt
[LOG] Saving tensor n4_to_4_198.pt
[LOG] Saving tensor n0_to_1_198.pt
[LOG] Saving tensor n0_to_2_198.pt
[LOG] Computing n1_to_3 for num 961
[LOG] Saving tensor n0_to_3_198.pt
[LOG] Saving tensor n0_to_4_198.pt
[LOG] Computing n1_to_4 for num 961
[LOG] Saving tensor n1_to_2_198.pt
[LOG] Saving tensor n1_to_3_198.pt
[LOG] Computing n1_to_3 for num 430
[LOG] Saving tensor n1_to_4_198.pt
[LOG] Computing n2_to_3 for num 961
[LOG] Saving tensor n2_to_3_198.pt
[LOG] Saving tensor n2_to_4_198.pt
[LOG] Computing n1_to_4 for num 430
[LOG] Saving tensor n3_to_4_198.pt
[LOG] Saving tensor global_feature_198.pt
[LOG] Process 24: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n2_to_3 for num 430
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1697 Tetrahedra.
    [LOG] Generated 40 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.2
    [LOG] Max number of nodes per cluster is 40 and the number is 35
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_4 for num 961
[LOG] Computing n2_to_4 for num 430
[LOG] Computing n3_to_4 for num 430
[LOG] Computing n3_to_4 for num 961
[LOG] Global feature for num 430
[LOG] Global feature for num 961
[LOG] Global feature for num 430
[LOG] Saving tensor x_0_430.pt
[LOG] Global feature for num 961
[LOG] Saving tensor x_0_961.pt
[LOG] Saving tensor x_1_430.pt
[LOG] Saving tensor x_1_961.pt
[LOG] Saving tensor x_2_430.pt
[LOG] Saving tensor x_3_430.pt
[LOG] Saving tensor x_2_961.pt
[LOG] Saving tensor x_4_430.pt
[LOG] Saving tensor x_3_961.pt
[LOG] Saving tensor n0_to_0_430.pt
[LOG] We will select 278 edges and 1697 tetra
[LOG] Edges from tetra 0 and KDTree 278 with 0 edges in common.
[LOG] Saving tensor x_4_961.pt
[LOG] Saving tensor n0_to_0_961.pt
[LOG] Saving tensor n1_to_1_430.pt
[LOG] Saving tensor n2_to_2_430.pt
[LOG] Saving tensor n1_to_1_961.pt
[LOG] Saving tensor n2_to_2_961.pt
[LOG] Saving tensor n3_to_3_430.pt
[LOG] Saving tensor n3_to_3_961.pt
[LOG] Saving tensor n4_to_4_430.pt
[LOG] Saving tensor n4_to_4_961.pt
[LOG] Saving tensor n0_to_1_430.pt
[LOG] Saving tensor n0_to_1_961.pt
[LOG] Saving tensor n0_to_2_430.pt
[LOG] Saving tensor n0_to_2_961.pt
[LOG] Saving tensor n0_to_3_430.pt
[LOG] Saving tensor n0_to_4_430.pt
[LOG] Saving tensor n0_to_3_961.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n1_to_2_430.pt
[LOG] Saving tensor n0_to_4_961.pt
[LOG] Saving tensor n1_to_3_430.pt
[LOG] Saving tensor n1_to_4_430.pt
[LOG] Saving tensor n1_to_2_961.pt
[LOG] Saving tensor n2_to_3_430.pt
[LOG] Saving tensor n1_to_3_961.pt
[LOG] Saving tensor n2_to_4_430.pt
[LOG] Saving tensor n1_to_4_961.pt
[LOG] Saving tensor n3_to_4_430.pt
[LOG] Saving tensor global_feature_430.pt
[LOG] Saving tensor n2_to_3_961.pt
[LOG] Process 53: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n2_to_4_961.pt
[LOG] Saving tensor n3_to_4_961.pt
[LOG] Saving tensor global_feature_961.pt
[LOG] Process 122: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 4 and 4
[LOG] Removed 1 subset clusters.
[LOG] Process 67: Created combinatorial complex for file data_543.hdf5
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Process 67: Calculating Neighbors
[LOG] Loading pickle file data_543.pickle
[LOG] Processing node features for num 543
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Processing edge features for num 543
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n0_to_3 for num 413
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Processing tetra features for num 543
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n0_to_4 for num 413
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing cluster features for num 543
[LOG] Computing n1_to_2 for num 413
[LOG] Processing cluster features for num 543
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing adjacency and incidence matrices for num 543
[LOG] Computing n0_to_0 for num 543
[LOG] Computing n1_to_1 for num 543
[LOG] Computing n1_to_3 for num 413
[LOG] Computing n1_to_4 for num 413
[LOG] Computing n2_to_3 for num 413
[LOG] Removed 0 subset clusters.
[LOG] Computing n2_to_4 for num 413
[LOG] Computing n2_to_2 (adjacency) for num 543
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_4 for num 413
[LOG] Global feature for num 413
[LOG] Global feature for num 413
[LOG] Saving tensor x_0_413.pt
[LOG] Saving tensor x_1_413.pt
[LOG] Saving tensor x_2_413.pt
[LOG] Saving tensor x_3_413.pt
[LOG] Saving tensor x_4_413.pt
[LOG] Saving tensor n0_to_0_413.pt
[LOG] Saving tensor n1_to_1_413.pt
[LOG] Computing n3_to_3 (adjacency) for num 543
[LOG] Computing n4_to_4 (coadjacency) for num 543
[LOG] Saving tensor n2_to_2_413.pt
[LOG] Computing n0_to_1 for num 543
[LOG] Saving tensor n3_to_3_413.pt
[LOG] Saving tensor n4_to_4_413.pt
[LOG] Saving tensor n0_to_1_413.pt
[LOG] Saving tensor n0_to_2_413.pt
[LOG] Saving tensor n0_to_3_413.pt
[LOG] Computing n0_to_2 for num 543
[LOG] Saving tensor n0_to_4_413.pt
[LOG] Saving tensor n1_to_2_413.pt
[LOG] Saving tensor n1_to_3_413.pt
[LOG] Saving tensor n1_to_4_413.pt
[LOG] Saving tensor n2_to_3_413.pt
[LOG] Saving tensor n2_to_4_413.pt
[LOG] Saving tensor n3_to_4_413.pt
[LOG] Saving tensor global_feature_413.pt
[LOG] Process 51: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 88: Created combinatorial complex for file data_709.hdf5
[LOG] Calculating for cell ranks 0 and 1
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_3 for num 543
[LOG] Computing n0_to_4 for num 543
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1975 Tetrahedra.
    [LOG] Generated 74 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.135135135135135
    [LOG] Max number of nodes per cluster is 32 and the number is 44
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_2 for num 543
[LOG] Process 88: Calculating Neighbors
[LOG] Loading pickle file data_709.pickle
[LOG] Processing node features for num 709
[LOG] Processing edge features for num 709
[LOG] Computing n1_to_3 for num 543
[LOG] Computing n1_to_4 for num 543
[LOG] Computing n2_to_3 for num 543
[LOG] Processing tetra features for num 709
[LOG] Computing n2_to_4 for num 543
[LOG] Computing n3_to_4 for num 543
[LOG] Global feature for num 543
[LOG] We will select 686 edges and 1975 tetra
[LOG] Edges from tetra 0 and KDTree 686 with 0 edges in common.
[LOG] Global feature for num 543
[LOG] Saving tensor x_0_543.pt
[LOG] Saving tensor x_1_543.pt
[LOG] Saving tensor x_2_543.pt
[LOG] Saving tensor x_3_543.pt
[LOG] Saving tensor x_4_543.pt
[LOG] Saving tensor n0_to_0_543.pt
[LOG] Saving tensor n1_to_1_543.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n2_to_2_543.pt
[LOG] Processing cluster features for num 709
[LOG] Saving tensor n3_to_3_543.pt
[LOG] Saving tensor n4_to_4_543.pt
[LOG] Saving tensor n0_to_1_543.pt
[LOG] Saving tensor n0_to_2_543.pt
[LOG] Saving tensor n0_to_3_543.pt
[LOG] Processing cluster features for num 709
[LOG] Saving tensor n0_to_4_543.pt
[LOG] Saving tensor n1_to_2_543.pt
[LOG] Saving tensor n1_to_3_543.pt
[LOG] Saving tensor n1_to_4_543.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n2_to_3_543.pt

    [LOG] We Currently have 1082 Tetrahedra.
    [LOG] Generated 32 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.84375
    [LOG] Max number of nodes per cluster is 22 and the number is 18
[LOG] Saving tensor n2_to_4_543.pt
[LOG] Saving tensor n3_to_4_543.pt
[LOG] Processing adjacency and incidence matrices for num 709
[LOG] Computing n0_to_0 for num 709
[LOG] Saving tensor global_feature_543.pt
[LOG] Process 67: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 2
[LOG] We will select 249 edges and 1082 tetra
[LOG] Edges from tetra 0 and KDTree 422 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 84: Created combinatorial complex for file data_676.hdf5
[LOG] Computing n1_to_1 for num 709
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 84: Calculating Neighbors
[LOG] Loading pickle file data_676.pickle
[LOG] Processing node features for num 676
[LOG] Processing edge features for num 676
[LOG] Processing tetra features for num 676
[LOG] Processing cluster features for num 676
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing cluster features for num 676
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Processing adjacency and incidence matrices for num 676
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n0_to_0 for num 676
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n1_to_1 for num 676
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Removed 4 subset clusters.
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 676
[LOG] Process 93: Created combinatorial complex for file data_751.hdf5
[LOG] Computing n2_to_2 (adjacency) for num 709
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2170 Tetrahedra.
    [LOG] Generated 71 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.591549295774648
    [LOG] Max number of nodes per cluster is 55 and the number is 21
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 676
[LOG] Computing n4_to_4 (coadjacency) for num 676
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_1 for num 676
[LOG] Computing n0_to_2 for num 676
[LOG] We will select 311 edges and 2170 tetra
[LOG] Edges from tetra 0 and KDTree 2746 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 3 subset clusters.
[LOG] Computing n3_to_3 (adjacency) for num 709
[LOG] Computing n4_to_4 (coadjacency) for num 709
[LOG] Computing n0_to_1 for num 709
[LOG] Computing n0_to_3 for num 676
[LOG] Computing n0_to_4 for num 676
[LOG] Computing n1_to_2 for num 676
[LOG] Computing n0_to_2 for num 709
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_3 for num 676
[LOG] Computing n1_to_4 for num 676
[LOG] Computing n2_to_3 for num 676
[LOG] Computing n2_to_4 for num 676
[LOG] Computing n3_to_4 for num 676
[LOG] Global feature for num 676
[LOG] Global feature for num 676
[LOG] Saving tensor x_0_676.pt
[LOG] Saving tensor x_1_676.pt
[LOG] Saving tensor x_2_676.pt
[LOG] Process 93: Calculating Neighbors
[LOG] Loading pickle file data_751.pickle
[LOG] Processing node features for num 751
[LOG] Saving tensor x_3_676.pt
[LOG] Saving tensor x_4_676.pt
[LOG] Processing edge features for num 751
[LOG] Saving tensor n0_to_0_676.pt
[LOG] Saving tensor n1_to_1_676.pt
[LOG] Saving tensor n2_to_2_676.pt
[LOG] Processing tetra features for num 751
[LOG] Saving tensor n3_to_3_676.pt
[LOG] Saving tensor n4_to_4_676.pt
[LOG] Saving tensor n0_to_1_676.pt
[LOG] Saving tensor n0_to_2_676.pt
[LOG] Saving tensor n0_to_3_676.pt
[LOG] Saving tensor n0_to_4_676.pt
[LOG] Processing cluster features for num 751
[LOG] Saving tensor n1_to_2_676.pt
[LOG] Processing cluster features for num 751
[LOG] Saving tensor n1_to_3_676.pt
[LOG] Process 68: Created combinatorial complex for file data_546.hdf5
[LOG] Saving tensor n1_to_4_676.pt
[LOG] Processing adjacency and incidence matrices for num 751
[LOG] Computing n0_to_0 for num 751
[LOG] Saving tensor n2_to_3_676.pt
[LOG] Saving tensor n2_to_4_676.pt
[LOG] Saving tensor n3_to_4_676.pt
[LOG] Saving tensor global_feature_676.pt
[LOG] Process 84: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_1 for num 751
[LOG] Removed 1 subset clusters.
[LOG] Computing n2_to_2 (adjacency) for num 751
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_3 (adjacency) for num 751
[LOG] Process 68: Calculating Neighbors
[LOG] Loading pickle file data_546.pickle
[LOG] Processing node features for num 546
[LOG] Computing n4_to_4 (coadjacency) for num 751
[LOG] Computing n0_to_1 for num 751
[LOG] Processing edge features for num 546
[LOG] Computing n0_to_2 for num 751
[LOG] Processing tetra features for num 546
[LOG] Processing cluster features for num 546
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing cluster features for num 546
[LOG] Computing n3_to_3 (adjacency) for num 868
[LOG] Computing n4_to_4 (coadjacency) for num 868
[LOG] Computing n0_to_3 for num 751
[LOG] Processing adjacency and incidence matrices for num 546
[LOG] Computing n0_to_0 for num 546
[LOG] Computing n0_to_1 for num 868
[LOG] Computing n0_to_4 for num 751
[LOG] Computing n1_to_2 for num 751
[LOG] Process 113: Created combinatorial complex for file data_900.hdf5
[LOG] Computing n1_to_1 for num 546
[LOG] Computing n1_to_3 for num 751
[LOG] Computing n0_to_3 for num 709
[LOG] Computing n1_to_4 for num 751
[LOG] Computing n2_to_3 for num 751
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_4 for num 751
[LOG] Computing n0_to_4 for num 709
[LOG] Computing n3_to_4 for num 751
[LOG] Global feature for num 751
[LOG] Global feature for num 751
[LOG] Saving tensor x_0_751.pt
[LOG] Saving tensor x_1_751.pt
[LOG] Saving tensor x_2_751.pt
[LOG] Computing n1_to_2 for num 709
[LOG] Saving tensor x_3_751.pt
[LOG] Saving tensor x_4_751.pt
[LOG] Saving tensor n0_to_0_751.pt
[LOG] Saving tensor n1_to_1_751.pt
[LOG] Saving tensor n2_to_2_751.pt
[LOG] Saving tensor n3_to_3_751.pt
[LOG] Saving tensor n4_to_4_751.pt
[LOG] Process 113: Calculating Neighbors
[LOG] Loading pickle file data_900.pickle
[LOG] Processing node features for num 900
[LOG] Saving tensor n0_to_1_751.pt
[LOG] Saving tensor n0_to_2_751.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n0_to_3_751.pt
[LOG] Processing edge features for num 900
[LOG] Saving tensor n0_to_4_751.pt
[LOG] Saving tensor n1_to_2_751.pt
[LOG] Saving tensor n1_to_3_751.pt
[LOG] Saving tensor n1_to_4_751.pt
[LOG] Saving tensor n2_to_3_751.pt
[LOG] Saving tensor n2_to_4_751.pt
[LOG] Saving tensor n3_to_4_751.pt
[LOG] Saving tensor global_feature_751.pt
[LOG] Processing tetra features for num 900
[LOG] Process 93: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] Processing cluster features for num 900
[LOG] Processing cluster features for num 900
[LOG] Processing adjacency and incidence matrices for num 900
[LOG] Computing n0_to_0 for num 900
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_2 (adjacency) for num 546
[LOG] Computing n1_to_1 for num 900
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_3 for num 709
[LOG] Computing n1_to_4 for num 709
[LOG] Computing n2_to_3 for num 709
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 546
[LOG] Computing n4_to_4 (coadjacency) for num 546
[LOG] Computing n0_to_1 for num 546
[LOG] Computing n2_to_2 (adjacency) for num 900
[LOG] Computing n2_to_4 for num 709
[LOG] Computing n0_to_2 for num 546
[LOG] Computing n3_to_4 for num 709
[LOG] Global feature for num 709
[LOG] Global feature for num 709
[LOG] Saving tensor x_0_709.pt
[LOG] Saving tensor x_1_709.pt
[LOG] Saving tensor x_2_709.pt
[LOG] Saving tensor x_3_709.pt
[LOG] Saving tensor x_4_709.pt
[LOG] Saving tensor n0_to_0_709.pt
[LOG] Saving tensor n1_to_1_709.pt
[LOG] Saving tensor n2_to_2_709.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n3_to_3_709.pt
[LOG] Saving tensor n4_to_4_709.pt
[LOG] Saving tensor n0_to_1_709.pt
[LOG] Saving tensor n0_to_2_709.pt
[LOG] Saving tensor n0_to_3_709.pt
[LOG] Saving tensor n0_to_4_709.pt
[LOG] Saving tensor n1_to_2_709.pt
[LOG] Saving tensor n1_to_3_709.pt
[LOG] Saving tensor n1_to_4_709.pt
[LOG] Saving tensor n2_to_3_709.pt
[LOG] Saving tensor n2_to_4_709.pt
[LOG] Saving tensor n3_to_4_709.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor global_feature_709.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 88: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_3 (adjacency) for num 900
[LOG] Computing n4_to_4 (coadjacency) for num 900
[LOG] Computing n0_to_1 for num 900
[LOG] Computing n0_to_3 for num 546
[LOG] Computing n0_to_2 for num 900
[LOG] Computing n0_to_4 for num 546
[LOG] Computing n1_to_2 for num 546
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_2 for num 868
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_3 for num 546
[LOG] Computing n1_to_4 for num 546
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_3 for num 546
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_4 for num 546
[LOG] Computing n3_to_4 for num 546
[LOG] Global feature for num 546
[LOG] Global feature for num 546
[LOG] Saving tensor x_0_546.pt
[LOG] Saving tensor x_1_546.pt
[LOG] Saving tensor x_2_546.pt
[LOG] Saving tensor x_3_546.pt
[LOG] Saving tensor x_4_546.pt
[LOG] Saving tensor n0_to_0_546.pt
[LOG] Saving tensor n1_to_1_546.pt
[LOG] Saving tensor n2_to_2_546.pt
[LOG] Saving tensor n3_to_3_546.pt
[LOG] Saving tensor n4_to_4_546.pt
[LOG] Saving tensor n0_to_1_546.pt
[LOG] Saving tensor n0_to_2_546.pt
[LOG] Saving tensor n0_to_3_546.pt
[LOG] Saving tensor n0_to_4_546.pt
[LOG] Saving tensor n1_to_2_546.pt
[LOG] Saving tensor n1_to_3_546.pt
[LOG] Saving tensor n1_to_4_546.pt
[LOG] Saving tensor n2_to_3_546.pt
[LOG] Saving tensor n2_to_4_546.pt
[LOG] Saving tensor n3_to_4_546.pt
[LOG] Saving tensor global_feature_546.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 68: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 900
[LOG] Computing n0_to_4 for num 900
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 3053 Tetrahedra.
    [LOG] Generated 80 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.25
    [LOG] Max number of nodes per cluster is 67 and the number is 79
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_2 for num 900
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] We will select 517 edges and 3053 tetra
[LOG] Edges from tetra 0 and KDTree 2736 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_3 for num 900
[LOG] Computing n1_to_4 for num 900
[LOG] Computing n2_to_3 for num 900
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_4 for num 900
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_4 for num 900
[LOG] Global feature for num 900
[LOG] Global feature for num 900
[LOG] Saving tensor x_0_900.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor x_1_900.pt
[LOG] Saving tensor x_2_900.pt
[LOG] Saving tensor x_3_900.pt
[LOG] Saving tensor x_4_900.pt
[LOG] Saving tensor n0_to_0_900.pt
[LOG] Saving tensor n1_to_1_900.pt
[LOG] Saving tensor n2_to_2_900.pt
[LOG] Saving tensor n3_to_3_900.pt
[LOG] Saving tensor n4_to_4_900.pt
[LOG] Saving tensor n0_to_1_900.pt
[LOG] Saving tensor n0_to_2_900.pt
[LOG] Saving tensor n0_to_3_900.pt
[LOG] Saving tensor n0_to_4_900.pt
[LOG] Saving tensor n1_to_2_900.pt
[LOG] Saving tensor n1_to_3_900.pt
[LOG] Saving tensor n1_to_4_900.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n2_to_3_900.pt
[LOG] Saving tensor n2_to_4_900.pt
[LOG] Saving tensor n3_to_4_900.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor global_feature_900.pt
[LOG] Process 113: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 123: Created combinatorial complex for file data_969.hdf5
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 123: Calculating Neighbors
[LOG] Loading pickle file data_969.pickle
[LOG] Processing node features for num 969
[LOG] Processing edge features for num 969
[LOG] Processing tetra features for num 969
[LOG] Calculating for cell ranks 0 and 3
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2210 Tetrahedra.
    [LOG] Generated 61 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.262295081967213
    [LOG] Max number of nodes per cluster is 54 and the number is 59
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing cluster features for num 969
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing cluster features for num 969
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing adjacency and incidence matrices for num 969
[LOG] We will select 600 edges and 2210 tetra
[LOG] Edges from tetra 0 and KDTree 1422 with 0 edges in common.
[LOG] Computing n0_to_0 for num 969
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_1 for num 969
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_3 for num 868
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n2_to_2 (adjacency) for num 969
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n0_to_4 for num 868
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_2 for num 868
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Process 86: Created combinatorial complex for file data_695.hdf5
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 86: Calculating Neighbors
[LOG] Loading pickle file data_695.pickle
[LOG] Processing node features for num 695
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing edge features for num 695
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing tetra features for num 695
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Processing cluster features for num 695
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Processing cluster features for num 695
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 969
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Processing adjacency and incidence matrices for num 695
[LOG] Computing n0_to_0 for num 695
[LOG] Computing n4_to_4 (coadjacency) for num 969
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n0_to_1 for num 969
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_2 for num 969
[LOG] Computing n1_to_1 for num 695
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_2 (adjacency) for num 695
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n3_to_3 (adjacency) for num 695
[LOG] Computing n4_to_4 (coadjacency) for num 695
[LOG] Computing n0_to_1 for num 695
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_2 for num 695
[LOG] Computing n0_to_3 for num 969
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_4 for num 969
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_2 for num 969
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_3 for num 695
[LOG] Computing n0_to_4 for num 695
[LOG] Computing n1_to_2 for num 695
[LOG] Computing n1_to_3 for num 969
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_4 for num 969
[LOG] Computing n2_to_3 for num 969
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_4 for num 969
[LOG] Computing n3_to_4 for num 969
[LOG] Global feature for num 969
[LOG] Global feature for num 969
[LOG] Saving tensor x_0_969.pt
[LOG] Saving tensor x_1_969.pt
[LOG] Saving tensor x_2_969.pt
[LOG] Saving tensor x_3_969.pt
[LOG] Saving tensor x_4_969.pt
[LOG] Saving tensor n0_to_0_969.pt
[LOG] Saving tensor n1_to_1_969.pt
[LOG] Saving tensor n2_to_2_969.pt
[LOG] Saving tensor n3_to_3_969.pt
[LOG] Saving tensor n4_to_4_969.pt
[LOG] Saving tensor n0_to_1_969.pt
[LOG] Saving tensor n0_to_2_969.pt
[LOG] Saving tensor n0_to_3_969.pt
[LOG] Saving tensor n0_to_4_969.pt
[LOG] Saving tensor n1_to_2_969.pt
[LOG] Saving tensor n1_to_3_969.pt
[LOG] Saving tensor n1_to_4_969.pt
[LOG] Saving tensor n2_to_3_969.pt
[LOG] Saving tensor n2_to_4_969.pt
[LOG] Saving tensor n3_to_4_969.pt
[LOG] Saving tensor global_feature_969.pt
[LOG] Process 123: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_3 for num 695
[LOG] Computing n1_to_4 for num 695
[LOG] Computing n2_to_3 for num 695
[LOG] Computing n2_to_4 for num 695
[LOG] Computing n3_to_4 for num 695
[LOG] Global feature for num 695
[LOG] Global feature for num 695
[LOG] Saving tensor x_0_695.pt
[LOG] Saving tensor x_1_695.pt
[LOG] Saving tensor x_2_695.pt
[LOG] Saving tensor x_3_695.pt
[LOG] Saving tensor x_4_695.pt
[LOG] Saving tensor n0_to_0_695.pt
[LOG] Saving tensor n1_to_1_695.pt
[LOG] Saving tensor n2_to_2_695.pt
[LOG] Saving tensor n3_to_3_695.pt
[LOG] Saving tensor n4_to_4_695.pt
[LOG] Saving tensor n0_to_1_695.pt
[LOG] Saving tensor n0_to_2_695.pt
[LOG] Saving tensor n0_to_3_695.pt
[LOG] Saving tensor n0_to_4_695.pt
[LOG] Saving tensor n1_to_2_695.pt
[LOG] Saving tensor n1_to_3_695.pt
[LOG] Saving tensor n1_to_4_695.pt
[LOG] Saving tensor n2_to_3_695.pt
[LOG] Saving tensor n2_to_4_695.pt
[LOG] Saving tensor n3_to_4_695.pt
[LOG] Saving tensor global_feature_695.pt
[LOG] Process 86: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 4172 Tetrahedra.
    [LOG] Generated 103 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.951456310679612
    [LOG] Max number of nodes per cluster is 57 and the number is 101
[LOG] Calculating for cell ranks 1 and 1
[LOG] We will select 1070 edges and 4172 tetra
[LOG] Edges from tetra 0 and KDTree 1070 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_3 for num 868
[LOG] Computing n1_to_4 for num 868
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_3 for num 868
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 2 subset clusters.
[LOG] Computing n2_to_4 for num 868
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_4 for num 868
[LOG] Calculating for cell ranks 1 and 4
[LOG] Global feature for num 868
[LOG] Global feature for num 868
[LOG] Saving tensor x_0_868.pt
[LOG] Saving tensor x_1_868.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor x_2_868.pt
[LOG] Saving tensor x_3_868.pt
[LOG] Saving tensor x_4_868.pt
[LOG] Saving tensor n0_to_0_868.pt
[LOG] Saving tensor n1_to_1_868.pt
[LOG] Saving tensor n2_to_2_868.pt
[LOG] Saving tensor n3_to_3_868.pt
[LOG] Saving tensor n4_to_4_868.pt
[LOG] Saving tensor n0_to_1_868.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n0_to_2_868.pt
[LOG] Saving tensor n0_to_3_868.pt
[LOG] Saving tensor n0_to_4_868.pt
[LOG] Saving tensor n1_to_2_868.pt
[LOG] Saving tensor n1_to_3_868.pt
[LOG] Saving tensor n1_to_4_868.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n2_to_3_868.pt
[LOG] Saving tensor n2_to_4_868.pt
[LOG] Saving tensor n3_to_4_868.pt
[LOG] Saving tensor global_feature_868.pt
[LOG] Process 109: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 6: Created combinatorial complex for file data_49.hdf5
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Process 6: Calculating Neighbors
[LOG] Loading pickle file data_49.pickle
[LOG] Processing node features for num 49
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Processing edge features for num 49
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing tetra features for num 49
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing cluster features for num 49
[LOG] Processing cluster features for num 49
[LOG] Processing adjacency and incidence matrices for num 49
[LOG] Computing n0_to_0 for num 49
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_1 for num 49
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_2 (adjacency) for num 49
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_3 (adjacency) for num 49
[LOG] Computing n4_to_4 (coadjacency) for num 49
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_1 for num 49
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_2 for num 49
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1843 Tetrahedra.
    [LOG] Generated 54 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.0
    [LOG] Max number of nodes per cluster is 30 and the number is 14
[LOG] We will select 318 edges and 1843 tetra
[LOG] Edges from tetra 0 and KDTree 318 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_3 for num 49
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Computing n0_to_4 for num 49
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_0_to_3.pt

    [LOG] We Currently have 1377 Tetrahedra.
    [LOG] Generated 37 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.675675675675675
    [LOG] Max number of nodes per cluster is 35 and the number is 6
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n1_to_2 for num 49
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] We will select 126 edges and 1377 tetra
[LOG] Edges from tetra 0 and KDTree 126 with 0 edges in common.
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 0 subset clusters.
[LOG] Process 117: Created combinatorial complex for file data_929.hdf5
[LOG] Removed 0 subset clusters.
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 117: Calculating Neighbors
[LOG] Loading pickle file data_929.pickle
[LOG] Processing node features for num 929
[LOG] Processing edge features for num 929
[LOG] Process 102: Created combinatorial complex for file data_823.hdf5
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing tetra features for num 929
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 929
[LOG] Processing cluster features for num 929
[LOG] Process 102: Calculating Neighbors
[LOG] Loading pickle file data_823.pickle
[LOG] Processing node features for num 823
[LOG] Processing edge features for num 823
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing adjacency and incidence matrices for num 929
[LOG] Computing n0_to_0 for num 929
[LOG] Processing tetra features for num 823
[LOG] Processing cluster features for num 823
[LOG] Processing cluster features for num 823
[LOG] Computing n1_to_1 for num 929
[LOG] Processing adjacency and incidence matrices for num 823
[LOG] Computing n0_to_0 for num 823
[LOG] Computing n1_to_1 for num 823
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_2 (adjacency) for num 823
[LOG] Computing n3_to_3 (adjacency) for num 823
[LOG] Computing n4_to_4 (coadjacency) for num 823
[LOG] Computing n0_to_1 for num 823
[LOG] Computing n2_to_2 (adjacency) for num 929
[LOG] Computing n0_to_2 for num 823
[LOG] Computing n3_to_3 (adjacency) for num 929
[LOG] Computing n4_to_4 (coadjacency) for num 929
[LOG] Computing n0_to_1 for num 929
[LOG] Computing n0_to_3 for num 823
[LOG] Computing n0_to_4 for num 823
[LOG] Computing n1_to_2 for num 823
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_2 for num 929
[LOG] Computing n1_to_3 for num 823
[LOG] Computing n1_to_4 for num 823
[LOG] Computing n2_to_3 for num 823
[LOG] Computing n2_to_4 for num 823
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_3 for num 49
[LOG] Computing n3_to_4 for num 823
[LOG] Global feature for num 823
[LOG] Global feature for num 823
[LOG] Saving tensor x_0_823.pt
[LOG] Saving tensor x_1_823.pt
[LOG] Saving tensor x_2_823.pt
[LOG] Saving tensor x_3_823.pt
[LOG] Saving tensor x_4_823.pt
[LOG] Saving tensor n0_to_0_823.pt
[LOG] Saving tensor n1_to_1_823.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_4 for num 49
[LOG] Saving tensor n2_to_2_823.pt
[LOG] Saving tensor n3_to_3_823.pt
[LOG] Saving tensor n4_to_4_823.pt
[LOG] Saving tensor n0_to_1_823.pt
[LOG] Saving tensor n0_to_2_823.pt
[LOG] Saving tensor n0_to_3_823.pt
[LOG] Saving tensor n0_to_4_823.pt
[LOG] Saving tensor n1_to_2_823.pt
[LOG] Saving tensor n1_to_3_823.pt
[LOG] Computing n2_to_3 for num 49
[LOG] Saving tensor n1_to_4_823.pt
[LOG] Saving tensor n2_to_3_823.pt
[LOG] Saving tensor n2_to_4_823.pt
[LOG] Saving tensor n3_to_4_823.pt
[LOG] Saving tensor global_feature_823.pt
[LOG] Process 102: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n2_to_4 for num 49
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n0_to_3 for num 929
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n0_to_4 for num 929
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n1_to_2 for num 929
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_4 for num 49
[LOG] Global feature for num 49
[LOG] Global feature for num 49
[LOG] Saving tensor x_0_49.pt
[LOG] Saving tensor x_1_49.pt
[LOG] Saving tensor x_2_49.pt
[LOG] Saving tensor x_3_49.pt
[LOG] Saving tensor x_4_49.pt
[LOG] Saving tensor n0_to_0_49.pt
[LOG] Saving tensor n1_to_1_49.pt
[LOG] Saving tensor n2_to_2_49.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n3_to_3_49.pt
[LOG] Saving tensor n4_to_4_49.pt
[LOG] Saving tensor n0_to_1_49.pt
[LOG] Saving tensor n0_to_2_49.pt
[LOG] Saving tensor n0_to_3_49.pt
[LOG] Saving tensor n0_to_4_49.pt
[LOG] Saving tensor n1_to_2_49.pt
[LOG] Saving tensor n1_to_3_49.pt
[LOG] Saving tensor n1_to_4_49.pt
[LOG] Saving tensor n2_to_3_49.pt
[LOG] Saving tensor n2_to_4_49.pt
[LOG] Saving tensor n3_to_4_49.pt
[LOG] Saving tensor global_feature_49.pt
[LOG] Process 6: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1672 Tetrahedra.
    [LOG] Generated 37 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 20.27027027027027
    [LOG] Max number of nodes per cluster is 75 and the number is 36
[LOG] Computing n1_to_3 for num 929
[LOG] Computing n1_to_4 for num 929
[LOG] Computing n2_to_3 for num 929
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_4 for num 929
[LOG] We will select 156 edges and 1672 tetra
[LOG] Edges from tetra 0 and KDTree 2608 with 0 edges in common.
[LOG] Computing n3_to_4 for num 929
[LOG] Global feature for num 929
[LOG] Global feature for num 929
[LOG] Saving tensor x_0_929.pt
[LOG] Saving tensor x_1_929.pt
[LOG] Saving tensor x_2_929.pt
[LOG] Saving tensor x_3_929.pt
[LOG] Saving tensor x_4_929.pt
[LOG] Saving tensor n0_to_0_929.pt
[LOG] Saving tensor n1_to_1_929.pt
[LOG] Saving tensor n2_to_2_929.pt
[LOG] Saving tensor n3_to_3_929.pt
[LOG] Saving tensor n4_to_4_929.pt
[LOG] Saving tensor n0_to_1_929.pt
[LOG] Saving tensor n0_to_2_929.pt
[LOG] Saving tensor n0_to_3_929.pt
[LOG] Saving tensor n0_to_4_929.pt
[LOG] Saving tensor n1_to_2_929.pt
[LOG] Saving tensor n1_to_3_929.pt
[LOG] Saving tensor n1_to_4_929.pt
[LOG] Saving tensor n2_to_3_929.pt
[LOG] Saving tensor n2_to_4_929.pt
[LOG] Saving tensor n3_to_4_929.pt
[LOG] Saving tensor global_feature_929.pt
[LOG] Process 117: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 0 subset clusters.
[LOG] Process 35: Created combinatorial complex for file data_286.hdf5
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 35: Calculating Neighbors
[LOG] Loading pickle file data_286.pickle
[LOG] Processing node features for num 286
[LOG] Processing edge features for num 286
[LOG] Processing tetra features for num 286
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing cluster features for num 286
[LOG] Processing cluster features for num 286
[LOG] Processing adjacency and incidence matrices for num 286
[LOG] Computing n0_to_0 for num 286
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n1_to_1 for num 286
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 286
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 286
[LOG] Computing n4_to_4 (coadjacency) for num 286
[LOG] Computing n0_to_1 for num 286
[LOG] Computing n0_to_2 for num 286
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_3 for num 286
[LOG] Computing n0_to_4 for num 286
[LOG] Computing n1_to_2 for num 286
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_3 for num 286
[LOG] Computing n1_to_4 for num 286
[LOG] Computing n2_to_3 for num 286
[LOG] Computing n2_to_4 for num 286
[LOG] Computing n3_to_4 for num 286
[LOG] Global feature for num 286
[LOG] Global feature for num 286
[LOG] Saving tensor x_0_286.pt
[LOG] Saving tensor x_1_286.pt
[LOG] Saving tensor x_2_286.pt
[LOG] Saving tensor x_3_286.pt
[LOG] Saving tensor x_4_286.pt
[LOG] Saving tensor n0_to_0_286.pt
[LOG] Saving tensor n1_to_1_286.pt
[LOG] Saving tensor n2_to_2_286.pt
[LOG] Saving tensor n3_to_3_286.pt
[LOG] Saving tensor n4_to_4_286.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n0_to_1_286.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n0_to_2_286.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n0_to_3_286.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n0_to_4_286.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n1_to_2_286.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n1_to_3_286.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n1_to_4_286.pt
[LOG] Saving tensor n2_to_3_286.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n2_to_4_286.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n3_to_4_286.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor global_feature_286.pt
[LOG] Process 35: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2099 Tetrahedra.
    [LOG] Generated 52 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.634615384615385
    [LOG] Max number of nodes per cluster is 33 and the number is 39
[LOG] We will select 299 edges and 2099 tetra
[LOG] Edges from tetra 0 and KDTree 299 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 122: Created combinatorial complex for file data_962.hdf5
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 122: Calculating Neighbors
[LOG] Loading pickle file data_962.pickle
[LOG] Processing node features for num 962
[LOG] Processing edge features for num 962
[LOG] Processing tetra features for num 962
[LOG] Processing cluster features for num 962
[LOG] Processing cluster features for num 962
[LOG] Processing adjacency and incidence matrices for num 962
[LOG] Computing n0_to_0 for num 962
[LOG] GENERATED TETRA
[LOG] Computing n1_to_1 for num 962
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 962
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_3 (adjacency) for num 962
[LOG] Computing n4_to_4 (coadjacency) for num 962
[LOG] Computing n0_to_1 for num 962
[LOG] Computing n0_to_2 for num 962
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1351 Tetrahedra.
    [LOG] Generated 50 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.18
    [LOG] Max number of nodes per cluster is 59 and the number is 23
[LOG] We will select 392 edges and 1351 tetra
[LOG] Edges from tetra 0 and KDTree 1387 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_3 for num 962
[LOG] Computing n0_to_4 for num 962
[LOG] Computing n1_to_2 for num 962
[LOG] Computing n1_to_3 for num 962
[LOG] Computing n1_to_4 for num 962
[LOG] Computing n2_to_3 for num 962
[LOG] Computing n2_to_4 for num 962
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n3_to_4 for num 962
[LOG] Global feature for num 962
[LOG] Global feature for num 962
[LOG] Saving tensor x_0_962.pt
[LOG] Saving tensor x_1_962.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor x_2_962.pt
[LOG] Saving tensor x_3_962.pt
[LOG] Saving tensor x_4_962.pt
[LOG] Saving tensor n0_to_0_962.pt
[LOG] Saving tensor n1_to_1_962.pt
[LOG] Saving tensor n2_to_2_962.pt
[LOG] Saving tensor n3_to_3_962.pt
[LOG] Saving tensor n4_to_4_962.pt
[LOG] Saving tensor n0_to_1_962.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n0_to_2_962.pt
[LOG] Saving tensor n0_to_3_962.pt
[LOG] Saving tensor n0_to_4_962.pt
[LOG] Saving tensor n1_to_2_962.pt
[LOG] Saving tensor n1_to_3_962.pt
[LOG] Saving tensor n1_to_4_962.pt
[LOG] Saving tensor n2_to_3_962.pt
[LOG] Saving tensor n2_to_4_962.pt
[LOG] Saving tensor n3_to_4_962.pt
[LOG] Saving tensor global_feature_962.pt
[LOG] Process 122: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 53: Created combinatorial complex for file data_431.hdf5
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 53: Calculating Neighbors
[LOG] Loading pickle file data_431.pickle
[LOG] Processing node features for num 431
[LOG] Processing edge features for num 431
[LOG] Processing tetra features for num 431
[LOG] Processing cluster features for num 431
[LOG] Processing cluster features for num 431
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing adjacency and incidence matrices for num 431
[LOG] Computing n0_to_0 for num 431
[LOG] Computing n1_to_1 for num 431
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_2 (adjacency) for num 431
[LOG] Computing n3_to_3 (adjacency) for num 431
[LOG] Computing n4_to_4 (coadjacency) for num 431
[LOG] Computing n0_to_1 for num 431
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_2 for num 431
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 4120 Tetrahedra.
    [LOG] Generated 111 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.981981981981981
    [LOG] Max number of nodes per cluster is 30 and the number is 52
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] We will select 711 edges and 4120 tetra
[LOG] Edges from tetra 0 and KDTree 711 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n0_to_3 for num 431
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n0_to_4 for num 431
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_2 for num 431
[LOG] Computing n1_to_3 for num 431
[LOG] Computing n1_to_4 for num 431
[LOG] Computing n2_to_3 for num 431
[LOG] Computing n2_to_4 for num 431
[LOG] Computing n3_to_4 for num 431
[LOG] Global feature for num 431
[LOG] Global feature for num 431
[LOG] Saving tensor x_0_431.pt
[LOG] Saving tensor x_1_431.pt
[LOG] Saving tensor x_2_431.pt
[LOG] Saving tensor x_3_431.pt
[LOG] Saving tensor x_4_431.pt
[LOG] Saving tensor n0_to_0_431.pt
[LOG] Saving tensor n1_to_1_431.pt
[LOG] Saving tensor n2_to_2_431.pt
[LOG] Saving tensor n3_to_3_431.pt
[LOG] Saving tensor n4_to_4_431.pt
[LOG] Saving tensor n0_to_1_431.pt
[LOG] Saving tensor n0_to_2_431.pt
[LOG] Saving tensor n0_to_3_431.pt
[LOG] Saving tensor n0_to_4_431.pt
[LOG] Saving tensor n1_to_2_431.pt
[LOG] Saving tensor n1_to_3_431.pt
[LOG] Saving tensor n1_to_4_431.pt
[LOG] Saving tensor n2_to_3_431.pt
[LOG] Saving tensor n2_to_4_431.pt
[LOG] Saving tensor n3_to_4_431.pt
[LOG] Saving tensor global_feature_431.pt
[LOG] Process 53: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1606 Tetrahedra.
    [LOG] Generated 47 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.553191489361701
    [LOG] Max number of nodes per cluster is 61 and the number is 45
[LOG] We will select 327 edges and 1606 tetra
[LOG] Edges from tetra 0 and KDTree 3941 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 71: Created combinatorial complex for file data_574.hdf5
[LOG] Process 71: Calculating Neighbors
[LOG] Loading pickle file data_574.pickle
[LOG] Processing node features for num 574
[LOG] Processing edge features for num 574
[LOG] Processing tetra features for num 574
[LOG] GENERATED TETRA
[LOG] Processing cluster features for num 574
[LOG] Processing cluster features for num 574
[LOG] Processing adjacency and incidence matrices for num 574
[LOG] Computing n0_to_0 for num 574
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_1 for num 574
[LOG] Computing n2_to_2 (adjacency) for num 574
[LOG] Computing n3_to_3 (adjacency) for num 574
[LOG] Computing n4_to_4 (coadjacency) for num 574
[LOG] Computing n0_to_1 for num 574
[LOG] Removed 1 subset clusters.
[LOG] Computing n0_to_2 for num 574
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n0_to_3 for num 574
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n0_to_4 for num 574
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n1_to_2 for num 574
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Process 115: Created combinatorial complex for file data_912.hdf5
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_3 for num 574
[LOG] Computing n1_to_4 for num 574
[LOG] Computing n2_to_3 for num 574
[LOG] Computing n2_to_4 for num 574
[LOG] Computing n3_to_4 for num 574
[LOG] Global feature for num 574
[LOG] Global feature for num 574
[LOG] Saving tensor x_0_574.pt
[LOG] Saving tensor x_1_574.pt
[LOG] Saving tensor x_2_574.pt
[LOG] Saving tensor x_3_574.pt
[LOG] Saving tensor x_4_574.pt
[LOG] Saving tensor n0_to_0_574.pt
[LOG] Saving tensor n1_to_1_574.pt
[LOG] Saving tensor n2_to_2_574.pt
[LOG] Saving tensor n3_to_3_574.pt
[LOG] Saving tensor n4_to_4_574.pt
[LOG] Saving tensor n0_to_1_574.pt
[LOG] Saving tensor n0_to_2_574.pt
[LOG] Saving tensor n0_to_3_574.pt
[LOG] Saving tensor n0_to_4_574.pt
[LOG] Saving tensor n1_to_2_574.pt
[LOG] Saving tensor n1_to_3_574.pt
[LOG] Saving tensor n1_to_4_574.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n2_to_3_574.pt

    [LOG] We Currently have 3665 Tetrahedra.
    [LOG] Generated 103 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.495145631067961
    [LOG] Max number of nodes per cluster is 45 and the number is 102
[LOG] Saving tensor n2_to_4_574.pt
[LOG] Saving tensor n3_to_4_574.pt
[LOG] Saving tensor global_feature_574.pt
[LOG] Process 71: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 115: Calculating Neighbors
[LOG] Loading pickle file data_912.pickle
[LOG] Processing node features for num 912
[LOG] Processing edge features for num 912
[LOG] Calculating for cell ranks 2 and 4
[LOG] We will select 446 edges and 3665 tetra
[LOG] Edges from tetra 0 and KDTree 1528 with 0 edges in common.
[LOG] Processing tetra features for num 912
[LOG] Processing cluster features for num 912
[LOG] Processing cluster features for num 912
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing adjacency and incidence matrices for num 912
[LOG] Computing n0_to_0 for num 912
[LOG] Computing n1_to_1 for num 912
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n2_to_2 (adjacency) for num 912
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 59: Created combinatorial complex for file data_476.hdf5
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 59: Calculating Neighbors
[LOG] Loading pickle file data_476.pickle
[LOG] Processing node features for num 476
[LOG] Processing edge features for num 476
[LOG] Processing tetra features for num 476
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing cluster features for num 476
[LOG] Computing n3_to_3 (adjacency) for num 912
[LOG] Computing n4_to_4 (coadjacency) for num 912
[LOG] Computing n0_to_1 for num 912
[LOG] Processing cluster features for num 476
[LOG] Processing adjacency and incidence matrices for num 476
[LOG] Computing n0_to_0 for num 476
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_2 for num 912
[LOG] Computing n1_to_1 for num 476
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_2 (adjacency) for num 476
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] GENERATED TETRA
[LOG] Computing n0_to_3 for num 912
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_4 for num 912
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n1_to_2 for num 912
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1879 Tetrahedra.
    [LOG] Generated 40 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.475
    [LOG] Max number of nodes per cluster is 65 and the number is 36
[LOG] Computing n3_to_3 (adjacency) for num 476
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n4_to_4 (coadjacency) for num 476
[LOG] Computing n0_to_1 for num 476
[LOG] We will select 482 edges and 1879 tetra
[LOG] Edges from tetra 0 and KDTree 482 with 0 edges in common.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_2 for num 476
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2253 Tetrahedra.
    [LOG] Generated 68 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.808823529411764
    [LOG] Max number of nodes per cluster is 66 and the number is 37
[LOG] Computing n1_to_3 for num 912
[LOG] Computing n1_to_4 for num 912
[LOG] We will select 221 edges and 2253 tetra
[LOG] Edges from tetra 0 and KDTree 1039 with 0 edges in common.
[LOG] Computing n2_to_3 for num 912
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_4 for num 912
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_4 for num 912
[LOG] Global feature for num 912
[LOG] Global feature for num 912
[LOG] Saving tensor x_0_912.pt
[LOG] Saving tensor x_1_912.pt
[LOG] Saving tensor x_2_912.pt
[LOG] Saving tensor x_3_912.pt
[LOG] Saving tensor x_4_912.pt
[LOG] Saving tensor n0_to_0_912.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor n1_to_1_912.pt
[LOG] Saving tensor n2_to_2_912.pt
[LOG] Saving tensor n3_to_3_912.pt
[LOG] Saving tensor n4_to_4_912.pt
[LOG] Saving tensor n0_to_1_912.pt
[LOG] Saving tensor n0_to_2_912.pt
[LOG] Saving tensor n0_to_3_912.pt
[LOG] Saving tensor n0_to_4_912.pt
[LOG] Saving tensor n1_to_2_912.pt
[LOG] Saving tensor n1_to_3_912.pt
[LOG] Saving tensor n1_to_4_912.pt
[LOG] Saving tensor n2_to_3_912.pt
[LOG] Saving tensor n2_to_4_912.pt
[LOG] Saving tensor n3_to_4_912.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor global_feature_912.pt
[LOG] Process 115: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 476
[LOG] Computing n0_to_4 for num 476
[LOG] Computing n1_to_2 for num 476
[LOG] Process 3: Created combinatorial complex for file data_31.hdf5
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 0 subset clusters.
[LOG] Process 3: Calculating Neighbors
[LOG] Loading pickle file data_31.pickle
[LOG] Processing node features for num 31
[LOG] Processing edge features for num 31
[LOG] Processing tetra features for num 31
[LOG] Processing cluster features for num 31
[LOG] Processing cluster features for num 31
[LOG] Processing adjacency and incidence matrices for num 31
[LOG] Computing n0_to_0 for num 31
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_1 for num 31
[LOG] Process 111: Created combinatorial complex for file data_887.hdf5
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_3 for num 476
[LOG] Computing n1_to_4 for num 476
[LOG] Process 111: Calculating Neighbors
[LOG] Computing n2_to_3 for num 476
[LOG] Loading pickle file data_887.pickle
[LOG] Processing node features for num 887
[LOG] Processing edge features for num 887
[LOG] Processing tetra features for num 887
[LOG] Computing n2_to_2 (adjacency) for num 31
[LOG] Processing cluster features for num 887
[LOG] Computing n2_to_4 for num 476
[LOG] Processing cluster features for num 887
[LOG] Processing adjacency and incidence matrices for num 887
[LOG] Computing n0_to_0 for num 887
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_1 for num 887
[LOG] Computing n3_to_3 (adjacency) for num 31
[LOG] Computing n3_to_4 for num 476
[LOG] Global feature for num 476
[LOG] Global feature for num 476
[LOG] Saving tensor x_0_476.pt
[LOG] Computing n4_to_4 (coadjacency) for num 31
[LOG] Saving tensor x_1_476.pt
[LOG] Computing n0_to_1 for num 31
[LOG] Saving tensor x_2_476.pt
[LOG] Saving tensor x_3_476.pt
[LOG] Computing n0_to_2 for num 31
[LOG] Computing n2_to_2 (adjacency) for num 887
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] GENERATED TETRA
[LOG] Saving tensor x_4_476.pt
[LOG] Saving tensor n0_to_0_476.pt
[LOG] Saving tensor n1_to_1_476.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n2_to_2_476.pt
[LOG] Saving tensor n3_to_3_476.pt
[LOG] Saving tensor n4_to_4_476.pt
[LOG] Saving tensor n0_to_1_476.pt
[LOG] Saving tensor n0_to_2_476.pt
[LOG] Saving tensor n0_to_3_476.pt
[LOG] Saving tensor n0_to_4_476.pt
[LOG] Saving tensor n1_to_2_476.pt
[LOG] Saving tensor n1_to_3_476.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n1_to_4_476.pt
[LOG] Saving tensor n2_to_3_476.pt
[LOG] Saving tensor n2_to_4_476.pt
[LOG] Saving tensor n3_to_4_476.pt
[LOG] Saving tensor global_feature_476.pt
[LOG] Process 59: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 31
[LOG] Computing n0_to_4 for num 31
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n1_to_2 for num 31
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 887
[LOG] Computing n4_to_4 (coadjacency) for num 887
[LOG] Computing n0_to_1 for num 887
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2199 Tetrahedra.
    [LOG] Generated 54 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.018518518518519
    [LOG] Max number of nodes per cluster is 25 and the number is 34
[LOG] Computing n0_to_2 for num 887
[LOG] We will select 178 edges and 2199 tetra
[LOG] Edges from tetra 0 and KDTree 178 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_3 for num 31
[LOG] Computing n1_to_4 for num 31
[LOG] Computing n2_to_3 for num 31
[LOG] Computing n2_to_4 for num 31
[LOG] Computing n3_to_4 for num 31
[LOG] Global feature for num 31
[LOG] Global feature for num 31
[LOG] Saving tensor x_0_31.pt
[LOG] Saving tensor x_1_31.pt
[LOG] Saving tensor x_2_31.pt
[LOG] Saving tensor x_3_31.pt
[LOG] Saving tensor x_4_31.pt
[LOG] Saving tensor n0_to_0_31.pt
[LOG] Saving tensor n1_to_1_31.pt
[LOG] Saving tensor n2_to_2_31.pt
[LOG] Saving tensor n3_to_3_31.pt
[LOG] Saving tensor n4_to_4_31.pt
[LOG] Saving tensor n0_to_1_31.pt
[LOG] Saving tensor n0_to_2_31.pt
[LOG] Saving tensor n0_to_3_31.pt
[LOG] Saving tensor n0_to_4_31.pt
[LOG] Saving tensor n1_to_2_31.pt
[LOG] Saving tensor n1_to_3_31.pt
[LOG] Saving tensor n1_to_4_31.pt
[LOG] Saving tensor n2_to_3_31.pt
[LOG] Saving tensor n2_to_4_31.pt
[LOG] Saving tensor n3_to_4_31.pt
[LOG] Saving tensor global_feature_31.pt
[LOG] Process 3: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_3 for num 887
[LOG] Computing n0_to_4 for num 887
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_2 for num 887
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_3 for num 887
[LOG] Computing n1_to_4 for num 887
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n2_to_3 for num 887
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n2_to_4 for num 887
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n3_to_4 for num 887
[LOG] Global feature for num 887
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Global feature for num 887
[LOG] Saving tensor x_0_887.pt
[LOG] Saving tensor x_1_887.pt
[LOG] Saving tensor x_2_887.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor x_3_887.pt
[LOG] Saving tensor x_4_887.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n0_to_0_887.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n1_to_1_887.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n2_to_2_887.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n3_to_3_887.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n4_to_4_887.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n0_to_1_887.pt
[LOG] Saving tensor n0_to_2_887.pt
[LOG] Saving tensor n0_to_3_887.pt
[LOG] Saving tensor n0_to_4_887.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n1_to_2_887.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n1_to_3_887.pt
[LOG] Saving tensor n1_to_4_887.pt
[LOG] Saving tensor n2_to_3_887.pt
[LOG] Saving tensor n2_to_4_887.pt
[LOG] Saving tensor n3_to_4_887.pt
[LOG] Saving tensor global_feature_887.pt
[LOG] Process 111: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 116: Created combinatorial complex for file data_921.hdf5
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 116: Calculating Neighbors
[LOG] Loading pickle file data_921.pickle
[LOG] Processing node features for num 921
[LOG] Processing edge features for num 921
[LOG] Processing tetra features for num 921
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing cluster features for num 921
[LOG] Processing cluster features for num 921
[LOG] Processing adjacency and incidence matrices for num 921
[LOG] Computing n0_to_0 for num 921
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_1 for num 921
[LOG] Calculating for cell ranks 1 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_2 (adjacency) for num 921
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_3 (adjacency) for num 921
[LOG] Computing n4_to_4 (coadjacency) for num 921
[LOG] Computing n0_to_1 for num 921
[LOG] Computing n0_to_2 for num 921
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1487 Tetrahedra.
    [LOG] Generated 42 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.142857142857142
    [LOG] Max number of nodes per cluster is 31 and the number is 23
[LOG] We will select 278 edges and 1487 tetra
[LOG] Edges from tetra 0 and KDTree 767 with 0 edges in common.
[LOG] Computing n0_to_3 for num 921
[LOG] Computing n0_to_4 for num 921
[LOG] Computing n1_to_2 for num 921
[LOG] Computing n1_to_3 for num 921
[LOG] Computing n1_to_4 for num 921
[LOG] Computing n2_to_3 for num 921
[LOG] Computing n2_to_4 for num 921
[LOG] Computing n3_to_4 for num 921
[LOG] Global feature for num 921
[LOG] Global feature for num 921
[LOG] Saving tensor x_0_921.pt
[LOG] Saving tensor x_1_921.pt
[LOG] Saving tensor x_2_921.pt
[LOG] Saving tensor x_3_921.pt
[LOG] Saving tensor x_4_921.pt
[LOG] Saving tensor n0_to_0_921.pt
[LOG] Saving tensor n1_to_1_921.pt
[LOG] Saving tensor n2_to_2_921.pt
[LOG] Saving tensor n3_to_3_921.pt
[LOG] Saving tensor n4_to_4_921.pt
[LOG] Saving tensor n0_to_1_921.pt
[LOG] Saving tensor n0_to_2_921.pt
[LOG] Saving tensor n0_to_3_921.pt
[LOG] Saving tensor n0_to_4_921.pt
[LOG] Saving tensor n1_to_2_921.pt
[LOG] Saving tensor n1_to_3_921.pt
[LOG] Saving tensor n1_to_4_921.pt
[LOG] Saving tensor n2_to_3_921.pt
[LOG] Saving tensor n2_to_4_921.pt
[LOG] Saving tensor n3_to_4_921.pt
[LOG] Saving tensor global_feature_921.pt
[LOG] Process 116: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 3 subset clusters.
[LOG] Process 84: Created combinatorial complex for file data_677.hdf5
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 84: Calculating Neighbors
[LOG] Loading pickle file data_677.pickle
[LOG] Processing node features for num 677
[LOG] Processing edge features for num 677
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing tetra features for num 677
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing cluster features for num 677
[LOG] Processing cluster features for num 677
[LOG] Processing adjacency and incidence matrices for num 677
[LOG] Computing n0_to_0 for num 677
[LOG] Computing n1_to_1 for num 677
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 677
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 677
[LOG] Computing n4_to_4 (coadjacency) for num 677
[LOG] Computing n0_to_1 for num 677
[LOG] Computing n0_to_2 for num 677
[LOG] Computing n0_to_3 for num 677
[LOG] Computing n0_to_4 for num 677
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_2 for num 677
[LOG] Computing n1_to_3 for num 677
[LOG] Computing n1_to_4 for num 677
[LOG] Computing n2_to_3 for num 677
[LOG] Computing n2_to_4 for num 677
[LOG] Computing n3_to_4 for num 677
[LOG] Global feature for num 677
[LOG] Global feature for num 677
[LOG] Saving tensor x_0_677.pt
[LOG] Saving tensor x_1_677.pt
[LOG] Saving tensor x_2_677.pt
[LOG] Saving tensor x_3_677.pt
[LOG] Saving tensor x_4_677.pt
[LOG] Saving tensor n0_to_0_677.pt
[LOG] Saving tensor n1_to_1_677.pt
[LOG] Saving tensor n2_to_2_677.pt
[LOG] Saving tensor n3_to_3_677.pt
[LOG] Saving tensor n4_to_4_677.pt
[LOG] Saving tensor n0_to_1_677.pt
[LOG] Saving tensor n0_to_2_677.pt
[LOG] Saving tensor n0_to_3_677.pt
[LOG] Saving tensor n0_to_4_677.pt
[LOG] Saving tensor n1_to_2_677.pt
[LOG] Saving tensor n1_to_3_677.pt
[LOG] Saving tensor n1_to_4_677.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n2_to_3_677.pt
[LOG] Saving tensor n2_to_4_677.pt
[LOG] Saving tensor n3_to_4_677.pt
[LOG] Saving tensor global_feature_677.pt
[LOG] Process 84: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1998 Tetrahedra.
    [LOG] Generated 58 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.482758620689655
    [LOG] Max number of nodes per cluster is 45 and the number is 7
[LOG] Calculating for cell ranks 3 and 4
[LOG] We will select 284 edges and 1998 tetra
[LOG] Edges from tetra 0 and KDTree 921 with 0 edges in common.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Process 20: Created combinatorial complex for file data_167.hdf5
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Process 20: Calculating Neighbors
[LOG] Loading pickle file data_167.pickle
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Processing node features for num 167
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing edge features for num 167
[LOG] Processing tetra features for num 167
[LOG] Processing cluster features for num 167
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 167
[LOG] Processing adjacency and incidence matrices for num 167
[LOG] Computing n0_to_0 for num 167
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_1 for num 167
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_2 (adjacency) for num 167
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_3 (adjacency) for num 167
[LOG] Computing n4_to_4 (coadjacency) for num 167
[LOG] Computing n0_to_1 for num 167
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_2 for num 167
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n0_to_3 for num 167
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n0_to_4 for num 167
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_2 for num 167
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_3 for num 167
[LOG] Computing n1_to_4 for num 167
[LOG] Computing n2_to_3 for num 167
[LOG] Computing n2_to_4 for num 167
[LOG] Computing n3_to_4 for num 167
[LOG] Global feature for num 167
[LOG] Global feature for num 167
[LOG] Saving tensor x_0_167.pt
[LOG] Saving tensor x_1_167.pt
[LOG] Saving tensor x_2_167.pt
[LOG] Saving tensor x_3_167.pt
[LOG] Saving tensor x_4_167.pt
[LOG] Saving tensor n0_to_0_167.pt
[LOG] Saving tensor n1_to_1_167.pt
[LOG] Saving tensor n2_to_2_167.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n3_to_3_167.pt
[LOG] Saving tensor n4_to_4_167.pt
[LOG] Saving tensor n0_to_1_167.pt
[LOG] Saving tensor n0_to_2_167.pt
[LOG] Saving tensor n0_to_3_167.pt
[LOG] Saving tensor n0_to_4_167.pt
[LOG] Saving tensor n1_to_2_167.pt
[LOG] Saving tensor n1_to_3_167.pt
[LOG] Saving tensor n1_to_4_167.pt
[LOG] Saving tensor n2_to_3_167.pt
[LOG] Saving tensor n2_to_4_167.pt
[LOG] Saving tensor n3_to_4_167.pt
[LOG] Saving tensor global_feature_167.pt
[LOG] Process 20: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 3346 Tetrahedra.
    [LOG] Generated 84 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.857142857142858
    [LOG] Max number of nodes per cluster is 57 and the number is 23
[LOG] Calculating for cell ranks 3 and 3
[LOG] We will select 1082 edges and 3346 tetra
[LOG] Edges from tetra 0 and KDTree 1082 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2587 Tetrahedra.
    [LOG] Generated 80 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.5375
    [LOG] Max number of nodes per cluster is 33 and the number is 36
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] We will select 501 edges and 2587 tetra
[LOG] Edges from tetra 0 and KDTree 922 with 0 edges in common.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 2 subset clusters.
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 45: Created combinatorial complex for file data_367.hdf5
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1975 Tetrahedra.
    [LOG] Generated 27 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 28.37037037037037
    [LOG] Max number of nodes per cluster is 331 and the number is 26
[LOG] Process 110: Created combinatorial complex for file data_876.hdf5
[LOG] Process 45: Calculating Neighbors
[LOG] Loading pickle file data_367.pickle
[LOG] Processing node features for num 367
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing edge features for num 367
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing tetra features for num 367
[LOG] We will select 686 edges and 1975 tetra
[LOG] Edges from tetra 0 and KDTree 13491 with 0 edges in common.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing cluster features for num 367
[LOG] Processing cluster features for num 367
[LOG] Processing adjacency and incidence matrices for num 367
[LOG] Computing n0_to_0 for num 367
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 110: Calculating Neighbors
[LOG] Loading pickle file data_876.pickle
[LOG] Processing node features for num 876
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Processing edge features for num 876
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n1_to_1 for num 367
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Processing tetra features for num 876
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing cluster features for num 876
[LOG] Processing cluster features for num 876
[LOG] Processing adjacency and incidence matrices for num 876
[LOG] Computing n0_to_0 for num 876
[LOG] GENERATED TETRA
[LOG] Computing n1_to_1 for num 876
[LOG] Computing n2_to_2 (adjacency) for num 367
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] GENERATED TETRA
[LOG] Process 68: Created combinatorial complex for file data_547.hdf5
[LOG] Computing n3_to_3 (adjacency) for num 367
[LOG] Computing n4_to_4 (coadjacency) for num 367
[LOG] Computing n0_to_1 for num 367
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_2 for num 367
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2159 Tetrahedra.
    [LOG] Generated 64 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.71875
    [LOG] Max number of nodes per cluster is 40 and the number is 55
[LOG] We will select 396 edges and 2159 tetra
[LOG] Edges from tetra 0 and KDTree 396 with 0 edges in common.
[LOG] Process 68: Calculating Neighbors
[LOG] Loading pickle file data_547.pickle
[LOG] Processing node features for num 547
[LOG] Processing edge features for num 547
[LOG] Processing tetra features for num 547
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_2 (adjacency) for num 876
[LOG] Processing cluster features for num 547
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing cluster features for num 547
[LOG] Processing adjacency and incidence matrices for num 547
[LOG] Computing n0_to_0 for num 547
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_3 for num 367
[LOG] Computing n0_to_4 for num 367
[LOG] Computing n1_to_2 for num 367
[LOG] Computing n1_to_1 for num 547
[LOG] GENERATED TETRA
[LOG] Computing n3_to_3 (adjacency) for num 876
[LOG] Computing n4_to_4 (coadjacency) for num 876
[LOG] Computing n0_to_1 for num 876
[LOG] Removed 0 subset clusters.
[LOG] Computing n1_to_3 for num 367
[LOG] Computing n1_to_4 for num 367
[LOG] Computing n2_to_3 for num 367
[LOG] Computing n2_to_4 for num 367
[LOG] Computing n0_to_2 for num 876
[LOG] Computing n2_to_2 (adjacency) for num 547
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 1611 Tetrahedra.
    [LOG] Generated 38 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.552631578947368
    [LOG] Max number of nodes per cluster is 44 and the number is 11
[LOG] Computing n3_to_4 for num 367
[LOG] Global feature for num 367
[LOG] Global feature for num 367
[LOG] Saving tensor x_0_367.pt
[LOG] Saving tensor x_1_367.pt
[LOG] Saving tensor x_2_367.pt
[LOG] Saving tensor x_3_367.pt
[LOG] Saving tensor x_4_367.pt
[LOG] Saving tensor n0_to_0_367.pt
[LOG] Saving tensor n1_to_1_367.pt
[LOG] Saving tensor n2_to_2_367.pt
[LOG] Saving tensor n3_to_3_367.pt
[LOG] Saving tensor n4_to_4_367.pt
[LOG] We will select 335 edges and 1611 tetra
[LOG] Edges from tetra 0 and KDTree 335 with 0 edges in common.
[LOG] Saving tensor n0_to_1_367.pt
[LOG] Saving tensor n0_to_2_367.pt
[LOG] Saving tensor n0_to_3_367.pt
[LOG] Saving tensor n0_to_4_367.pt
[LOG] Saving tensor n1_to_2_367.pt
[LOG] Saving tensor n1_to_3_367.pt
[LOG] Saving tensor n1_to_4_367.pt
[LOG] Saving tensor n2_to_3_367.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 83: Created combinatorial complex for file data_670.hdf5
[LOG] Saving tensor n2_to_4_367.pt
[LOG] Saving tensor n3_to_4_367.pt
[LOG] Saving tensor global_feature_367.pt
[LOG] Process 45: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 83: Calculating Neighbors
[LOG] Loading pickle file data_670.pickle
[LOG] Processing node features for num 670
[LOG] Processing edge features for num 670
[LOG] Processing tetra features for num 670
[LOG] Processing cluster features for num 670
[LOG] Processing cluster features for num 670
[LOG] Computing n3_to_3 (adjacency) for num 547
[LOG] Computing n4_to_4 (coadjacency) for num 547
[LOG] Computing n0_to_1 for num 547
[LOG] Processing adjacency and incidence matrices for num 670
[LOG] Computing n0_to_0 for num 670
[LOG] Computing n1_to_1 for num 670
[LOG] Computing n0_to_3 for num 876
[LOG] Computing n0_to_4 for num 876
[LOG] Computing n1_to_2 for num 876
[LOG] Computing n0_to_2 for num 547
[LOG] Computing n2_to_2 (adjacency) for num 670
[LOG] Removed 1 subset clusters.
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n3_to_3 (adjacency) for num 670
[LOG] Computing n4_to_4 (coadjacency) for num 670
[LOG] Computing n0_to_1 for num 670
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 81: Created combinatorial complex for file data_652.hdf5
[LOG] Computing n0_to_2 for num 670
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 81: Calculating Neighbors
[LOG] Loading pickle file data_652.pickle
[LOG] Processing node features for num 652
[LOG] Processing edge features for num 652
[LOG] Processing tetra features for num 652
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Processing cluster features for num 652
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Processing cluster features for num 652
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Processing adjacency and incidence matrices for num 652
[LOG] Computing n0_to_0 for num 652
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n1_to_1 for num 652
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1370 Tetrahedra.
    [LOG] Generated 44 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.159090909090908
    [LOG] Max number of nodes per cluster is 43 and the number is 7
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_3 for num 670
[LOG] We will select 213 edges and 1370 tetra
[LOG] Edges from tetra 0 and KDTree 681 with 0 edges in common.
[LOG] Computing n0_to_4 for num 670
[LOG] Computing n1_to_2 for num 670
[LOG] Computing n2_to_2 (adjacency) for num 652
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_3 (adjacency) for num 652
[LOG] Computing n4_to_4 (coadjacency) for num 652
[LOG] Computing n0_to_1 for num 652
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_2 for num 652
[LOG] Computing n1_to_3 for num 670
[LOG] Computing n1_to_4 for num 670
[LOG] Computing n2_to_3 for num 670
[LOG] Computing n1_to_3 for num 876
[LOG] Computing n2_to_4 for num 670
[LOG] Removed 1 subset clusters.
[LOG] Computing n1_to_4 for num 876
[LOG] Computing n0_to_3 for num 547
[LOG] Computing n3_to_4 for num 670
[LOG] Global feature for num 670
[LOG] Global feature for num 670
[LOG] Saving tensor x_0_670.pt
[LOG] Saving tensor x_1_670.pt
[LOG] Saving tensor x_2_670.pt
[LOG] Saving tensor x_3_670.pt
[LOG] Saving tensor x_4_670.pt
[LOG] Saving tensor n0_to_0_670.pt
[LOG] Computing n2_to_3 for num 876
[LOG] Saving tensor n1_to_1_670.pt
[LOG] Computing n0_to_4 for num 547
[LOG] Saving tensor n2_to_2_670.pt
[LOG] Saving tensor n3_to_3_670.pt
[LOG] Saving tensor n4_to_4_670.pt
[LOG] Saving tensor n0_to_1_670.pt
[LOG] Computing n0_to_3 for num 652
[LOG] Saving tensor n0_to_2_670.pt
[LOG] Saving tensor n0_to_3_670.pt
[LOG] Computing n0_to_4 for num 652
[LOG] Saving tensor n0_to_4_670.pt
[LOG] Computing n1_to_2 for num 547
[LOG] Saving tensor n1_to_2_670.pt
[LOG] Saving tensor n1_to_3_670.pt
[LOG] Computing n1_to_2 for num 652
[LOG] Saving tensor n1_to_4_670.pt
[LOG] Saving tensor n2_to_3_670.pt
[LOG] Saving tensor n2_to_4_670.pt
[LOG] Saving tensor n3_to_4_670.pt
[LOG] Saving tensor global_feature_670.pt
[LOG] Process 83: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n2_to_4 for num 876
[LOG] Process 8: Created combinatorial complex for file data_71.hdf5
[LOG] Computing n3_to_4 for num 876
[LOG] Global feature for num 876
[LOG] Global feature for num 876
[LOG] Saving tensor x_0_876.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor x_1_876.pt
[LOG] Saving tensor x_2_876.pt
[LOG] Computing n1_to_3 for num 652
[LOG] Saving tensor x_3_876.pt
[LOG] Saving tensor x_4_876.pt
[LOG] Process 8: Calculating Neighbors
[LOG] Saving tensor n0_to_0_876.pt
[LOG] Loading pickle file data_71.pickle
[LOG] Processing node features for num 71
[LOG] Computing n1_to_4 for num 652
[LOG] Saving tensor n1_to_1_876.pt
[LOG] Processing edge features for num 71
[LOG] Computing n2_to_3 for num 652
[LOG] Saving tensor n2_to_2_876.pt
[LOG] Saving tensor n3_to_3_876.pt
[LOG] Saving tensor n4_to_4_876.pt
[LOG] Saving tensor n0_to_1_876.pt
[LOG] Saving tensor n0_to_2_876.pt
[LOG] Processing tetra features for num 71
[LOG] Saving tensor n0_to_3_876.pt
[LOG] Computing n2_to_4 for num 652
[LOG] Saving tensor n0_to_4_876.pt
[LOG] Saving tensor n1_to_2_876.pt
[LOG] Saving tensor n1_to_3_876.pt
[LOG] Saving tensor n1_to_4_876.pt
[LOG] Saving tensor n2_to_3_876.pt
[LOG] Saving tensor n2_to_4_876.pt
[LOG] Computing n3_to_4 for num 652
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n3_to_4_876.pt
[LOG] Global feature for num 652
[LOG] Global feature for num 652
[LOG] Processing cluster features for num 71
[LOG] Saving tensor x_0_652.pt
[LOG] Saving tensor global_feature_876.pt
[LOG] Process 110: Calculating Cross-Cell-Invariants
[LOG] Saving tensor x_1_652.pt
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor x_2_652.pt
[LOG] Saving tensor x_3_652.pt
[LOG] Saving tensor x_4_652.pt
[LOG] Saving tensor n0_to_0_652.pt
[LOG] Processing cluster features for num 71
[LOG] Saving tensor n1_to_1_652.pt
[LOG] Saving tensor n2_to_2_652.pt
[LOG] Saving tensor n3_to_3_652.pt
[LOG] Processing adjacency and incidence matrices for num 71
[LOG] Computing n0_to_0 for num 71
[LOG] Saving tensor n4_to_4_652.pt
[LOG] Saving tensor n0_to_1_652.pt
[LOG] Saving tensor n0_to_2_652.pt
[LOG] Saving tensor n0_to_3_652.pt
[LOG] Saving tensor n0_to_4_652.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n1_to_2_652.pt
[LOG] Saving tensor n1_to_3_652.pt
[LOG] Saving tensor n1_to_4_652.pt
[LOG] Saving tensor n2_to_3_652.pt
[LOG] Saving tensor n2_to_4_652.pt
[LOG] Saving tensor n3_to_4_652.pt
[LOG] Saving tensor global_feature_652.pt
[LOG] Process 81: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_1 for num 71
[LOG] Computing n1_to_3 for num 547
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n1_to_4 for num 547
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n2_to_2 (adjacency) for num 71
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Computing n2_to_3 for num 547
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n2_to_4 for num 547
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n3_to_4 for num 547
[LOG] Global feature for num 547
[LOG] Global feature for num 547
[LOG] Saving tensor x_0_547.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor x_1_547.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor x_2_547.pt
[LOG] Saving tensor x_3_547.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor x_4_547.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n0_to_0_547.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 71
[LOG] Saving tensor n1_to_1_547.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n2_to_2_547.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n4_to_4 (coadjacency) for num 71
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n0_to_1 for num 71
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n0_to_2 for num 71
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n3_to_3_547.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n4_to_4_547.pt
[LOG] Saving tensor n0_to_1_547.pt
[LOG] Saving tensor n0_to_2_547.pt
[LOG] Saving tensor n0_to_3_547.pt
[LOG] Saving tensor n0_to_4_547.pt
[LOG] Saving tensor n1_to_2_547.pt
[LOG] Saving tensor n1_to_3_547.pt
[LOG] Saving tensor n1_to_4_547.pt
[LOG] Saving tensor n2_to_3_547.pt
[LOG] Saving tensor n2_to_4_547.pt
[LOG] Saving tensor n3_to_4_547.pt
[LOG] Saving tensor global_feature_547.pt
[LOG] Process 68: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_3 for num 71
[LOG] Computing n0_to_4 for num 71
[LOG] Computing n1_to_2 for num 71
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_3 for num 71
[LOG] Computing n1_to_4 for num 71
[LOG] Computing n2_to_3 for num 71
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 7782 Tetrahedra.
    [LOG] Generated 157 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.095541401273884
    [LOG] Max number of nodes per cluster is 214 and the number is 155
[LOG] Computing n2_to_4 for num 71
[LOG] Computing n3_to_4 for num 71
[LOG] Global feature for num 71
[LOG] Global feature for num 71
[LOG] Saving tensor x_0_71.pt
[LOG] Saving tensor x_1_71.pt
[LOG] Saving tensor x_2_71.pt
[LOG] Saving tensor x_3_71.pt
[LOG] Saving tensor x_4_71.pt
[LOG] Saving tensor n0_to_0_71.pt
[LOG] Saving tensor n1_to_1_71.pt
[LOG] Saving tensor n2_to_2_71.pt
[LOG] Saving tensor n3_to_3_71.pt
[LOG] Saving tensor n4_to_4_71.pt
[LOG] Saving tensor n0_to_1_71.pt
[LOG] Saving tensor n0_to_2_71.pt
[LOG] Saving tensor n0_to_3_71.pt
[LOG] Saving tensor n0_to_4_71.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n1_to_2_71.pt
[LOG] Saving tensor n1_to_3_71.pt
[LOG] Saving tensor n1_to_4_71.pt
[LOG] Saving tensor n2_to_3_71.pt
[LOG] Saving tensor n2_to_4_71.pt
[LOG] Saving tensor n3_to_4_71.pt
[LOG] Saving tensor global_feature_71.pt
[LOG] Process 8: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] We will select 6889 edges and 7782 tetra
[LOG] Edges from tetra 0 and KDTree 7634 with 0 edges in common.
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2217 Tetrahedra.
    [LOG] Generated 58 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.431034482758621
    [LOG] Max number of nodes per cluster is 44 and the number is 47
[LOG] We will select 469 edges and 2217 tetra
[LOG] Edges from tetra 0 and KDTree 469 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1903 Tetrahedra.
    [LOG] Generated 41 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.78048780487805
    [LOG] Max number of nodes per cluster is 78 and the number is 40
[LOG] Calculating for cell ranks 0 and 3
[LOG] We will select 210 edges and 1903 tetra
[LOG] Edges from tetra 0 and KDTree 950 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 2 subset clusters.
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 14: Created combinatorial complex for file data_119.hdf5
[LOG] Process 66: Created combinatorial complex for file data_531.hdf5
[LOG] Process 14: Calculating Neighbors
[LOG] Loading pickle file data_119.pickle
[LOG] Processing node features for num 119
[LOG] Processing edge features for num 119
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing tetra features for num 119
[LOG] Processing cluster features for num 119
[LOG] Processing cluster features for num 119
[LOG] Processing adjacency and incidence matrices for num 119
[LOG] Computing n0_to_0 for num 119
[LOG] Computing n1_to_1 for num 119
[LOG] Computing n2_to_2 (adjacency) for num 119
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_3 (adjacency) for num 119
[LOG] Computing n4_to_4 (coadjacency) for num 119
[LOG] Computing n0_to_1 for num 119
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_2 for num 119
[LOG] Process 66: Calculating Neighbors
[LOG] Loading pickle file data_531.pickle
[LOG] Processing node features for num 531
[LOG] Processing edge features for num 531
[LOG] Processing tetra features for num 531
[LOG] Processing cluster features for num 531
[LOG] Processing cluster features for num 531
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing adjacency and incidence matrices for num 531
[LOG] Computing n0_to_0 for num 531
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_1 for num 531
[LOG] Computing n0_to_3 for num 119
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_4 for num 119
[LOG] Computing n1_to_2 for num 119
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_3 for num 119
[LOG] Computing n1_to_4 for num 119
[LOG] Computing n2_to_3 for num 119
[LOG] Computing n2_to_2 (adjacency) for num 531
[LOG] Computing n2_to_4 for num 119
[LOG] Computing n3_to_4 for num 119
[LOG] Global feature for num 119
[LOG] Global feature for num 119
[LOG] Saving tensor x_0_119.pt
[LOG] Saving tensor x_1_119.pt
[LOG] Saving tensor x_2_119.pt
[LOG] Saving tensor x_3_119.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor x_4_119.pt
[LOG] Saving tensor n0_to_0_119.pt
[LOG] Saving tensor n1_to_1_119.pt
[LOG] Saving tensor n2_to_2_119.pt
[LOG] Saving tensor n3_to_3_119.pt
[LOG] Saving tensor n4_to_4_119.pt
[LOG] Saving tensor n0_to_1_119.pt
[LOG] Saving tensor n0_to_2_119.pt
[LOG] Saving tensor n0_to_3_119.pt
[LOG] Saving tensor n0_to_4_119.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n1_to_2_119.pt
[LOG] Saving tensor n1_to_3_119.pt
[LOG] Saving tensor n1_to_4_119.pt
[LOG] Saving tensor n2_to_3_119.pt
[LOG] Saving tensor n2_to_4_119.pt
[LOG] Saving tensor n3_to_4_119.pt
[LOG] Saving tensor global_feature_119.pt
[LOG] Process 14: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_3 (adjacency) for num 531
[LOG] Computing n4_to_4 (coadjacency) for num 531
[LOG] Computing n0_to_1 for num 531
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_2 for num 531
[LOG] Calculating for cell ranks 2 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_3 for num 531
[LOG] Computing n0_to_4 for num 531
[LOG] Computing n1_to_2 for num 531
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_3 for num 531
[LOG] Computing n1_to_4 for num 531
[LOG] Computing n2_to_3 for num 531
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_4 for num 531
[LOG] GENERATED TETRA
[LOG] Computing n3_to_4 for num 531
[LOG] Global feature for num 531
[LOG] Global feature for num 531
[LOG] Saving tensor x_0_531.pt
[LOG] Saving tensor x_1_531.pt
[LOG] Saving tensor x_2_531.pt
[LOG] Saving tensor x_3_531.pt
[LOG] Saving tensor x_4_531.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor n0_to_0_531.pt
[LOG] Saving tensor n1_to_1_531.pt
[LOG] Saving tensor n2_to_2_531.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n3_to_3_531.pt
[LOG] Saving tensor n4_to_4_531.pt
[LOG] Saving tensor n0_to_1_531.pt
[LOG] Saving tensor n0_to_2_531.pt
[LOG] Saving tensor n0_to_3_531.pt
[LOG] Saving tensor n0_to_4_531.pt
[LOG] Saving tensor n1_to_2_531.pt
[LOG] Saving tensor n1_to_3_531.pt
[LOG] Saving tensor n1_to_4_531.pt
[LOG] Saving tensor n2_to_3_531.pt
[LOG] Saving tensor n2_to_4_531.pt
[LOG] Saving tensor n3_to_4_531.pt
[LOG] Saving tensor global_feature_531.pt
[LOG] Process 66: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2099 Tetrahedra.
    [LOG] Generated 57 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.824561403508772
    [LOG] Max number of nodes per cluster is 57 and the number is 55
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 2540 Tetrahedra.
    [LOG] Generated 68 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.0
    [LOG] Max number of nodes per cluster is 43 and the number is 57
[LOG] Calculating for cell ranks 3 and 3
[LOG] We will select 299 edges and 2099 tetra
[LOG] Edges from tetra 0 and KDTree 2855 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] We will select 571 edges and 2540 tetra
[LOG] Edges from tetra 0 and KDTree 1264 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Process 27: Created combinatorial complex for file data_217.hdf5
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 0 subset clusters.
[LOG] Process 122: Created combinatorial complex for file data_963.hdf5
[LOG] Process 122: Calculating Neighbors
[LOG] Loading pickle file data_963.pickle
[LOG] Processing node features for num 963
[LOG] Processing edge features for num 963
[LOG] Processing tetra features for num 963
[LOG] Processing cluster features for num 963
[LOG] Processing cluster features for num 963
[LOG] Processing adjacency and incidence matrices for num 963
[LOG] Computing n0_to_0 for num 963
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_1 for num 963
[LOG] Process 27: Calculating Neighbors
[LOG] Loading pickle file data_217.pickle
[LOG] Processing node features for num 217
[LOG] Processing edge features for num 217
[LOG] Computing n2_to_2 (adjacency) for num 963
[LOG] Processing tetra features for num 217
[LOG] Removed 1 subset clusters.
[LOG] Computing n3_to_3 (adjacency) for num 963
[LOG] Computing n4_to_4 (coadjacency) for num 963
[LOG] Computing n0_to_1 for num 963
[LOG] Processing cluster features for num 217
[LOG] Computing n0_to_2 for num 963
[LOG] Process 88: Created combinatorial complex for file data_710.hdf5
[LOG] Processing cluster features for num 217
[LOG] Processing adjacency and incidence matrices for num 217
[LOG] Computing n0_to_0 for num 217
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 88: Calculating Neighbors
[LOG] Loading pickle file data_710.pickle
[LOG] Processing node features for num 710
[LOG] Processing edge features for num 710
[LOG] Processing tetra features for num 710
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing cluster features for num 710
[LOG] Processing cluster features for num 710
[LOG] Processing adjacency and incidence matrices for num 710
[LOG] Computing n0_to_0 for num 710
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_1 for num 710
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 1701 Tetrahedra.
    [LOG] Generated 39 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.743589743589743
    [LOG] Max number of nodes per cluster is 50 and the number is 37
[LOG] Computing n0_to_3 for num 963
[LOG] We will select 178 edges and 1701 tetra
[LOG] Edges from tetra 0 and KDTree 239 with 0 edges in common.
[LOG] Computing n0_to_4 for num 963
[LOG] Computing n1_to_2 for num 963
[LOG] Computing n1_to_3 for num 963
[LOG] Computing n1_to_4 for num 963
[LOG] Computing n2_to_3 for num 963
[LOG] Computing n2_to_4 for num 963
[LOG] Computing n3_to_4 for num 963
[LOG] Global feature for num 963
[LOG] Global feature for num 963
[LOG] Computing n2_to_2 (adjacency) for num 710
[LOG] Saving tensor x_0_963.pt
[LOG] Saving tensor x_1_963.pt
[LOG] Saving tensor x_2_963.pt
[LOG] Saving tensor x_3_963.pt
[LOG] Saving tensor x_4_963.pt
[LOG] Saving tensor n0_to_0_963.pt
[LOG] Saving tensor n1_to_1_963.pt
[LOG] Saving tensor n2_to_2_963.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n3_to_3_963.pt
[LOG] Saving tensor n4_to_4_963.pt
[LOG] Saving tensor n0_to_1_963.pt
[LOG] Saving tensor n0_to_2_963.pt
[LOG] Saving tensor n0_to_3_963.pt
[LOG] Saving tensor n0_to_4_963.pt
[LOG] Saving tensor n1_to_2_963.pt
[LOG] Saving tensor n1_to_3_963.pt
[LOG] Saving tensor n1_to_4_963.pt
[LOG] Saving tensor n2_to_3_963.pt
[LOG] Saving tensor n2_to_4_963.pt
[LOG] Saving tensor n3_to_4_963.pt
[LOG] Saving tensor global_feature_963.pt
[LOG] Process 122: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 1 subset clusters.
[LOG] Computing n3_to_3 (adjacency) for num 710
[LOG] Computing n4_to_4 (coadjacency) for num 710
[LOG] Computing n0_to_1 for num 710
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_2 for num 710
[LOG] Process 116: Created combinatorial complex for file data_922.hdf5
[LOG] Process 116: Calculating Neighbors
[LOG] Loading pickle file data_922.pickle
[LOG] Processing node features for num 922
[LOG] Processing edge features for num 922
[LOG] Processing tetra features for num 922
[LOG] Processing cluster features for num 922
[LOG] Processing cluster features for num 922
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing adjacency and incidence matrices for num 922
[LOG] Computing n0_to_0 for num 922
[LOG] Computing n1_to_1 for num 922
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_2 (adjacency) for num 922
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 922
[LOG] Computing n4_to_4 (coadjacency) for num 922
[LOG] Computing n0_to_1 for num 922
[LOG] Computing n0_to_2 for num 922
[LOG] Computing n0_to_3 for num 710
[LOG] Computing n0_to_4 for num 710
[LOG] Computing n1_to_2 for num 710
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_3 for num 922
[LOG] Computing n0_to_4 for num 922
[LOG] Computing n1_to_2 for num 922
[LOG] Computing n1_to_3 for num 922
[LOG] Computing n1_to_4 for num 922
[LOG] Computing n2_to_3 for num 922
[LOG] Computing n2_to_4 for num 922
[LOG] Computing n3_to_4 for num 922
[LOG] Global feature for num 922
[LOG] Computing n1_to_1 for num 217
[LOG] Global feature for num 922
[LOG] Saving tensor x_0_922.pt
[LOG] Saving tensor x_1_922.pt
[LOG] Saving tensor x_2_922.pt
[LOG] Saving tensor x_3_922.pt
[LOG] Saving tensor x_4_922.pt
[LOG] Saving tensor n0_to_0_922.pt
[LOG] Saving tensor n1_to_1_922.pt
[LOG] Saving tensor n2_to_2_922.pt
[LOG] Saving tensor n3_to_3_922.pt
[LOG] Saving tensor n4_to_4_922.pt
[LOG] Saving tensor n0_to_1_922.pt
[LOG] Saving tensor n0_to_2_922.pt
[LOG] Saving tensor n0_to_3_922.pt
[LOG] Saving tensor n0_to_4_922.pt
[LOG] Saving tensor n1_to_2_922.pt
[LOG] Saving tensor n1_to_3_922.pt
[LOG] Saving tensor n1_to_4_922.pt
[LOG] Saving tensor n2_to_3_922.pt
[LOG] Saving tensor n2_to_4_922.pt
[LOG] Saving tensor n3_to_4_922.pt
[LOG] Saving tensor global_feature_922.pt
[LOG] Process 116: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_3 for num 710
[LOG] Computing n1_to_4 for num 710
[LOG] Computing n2_to_3 for num 710
[LOG] Computing n2_to_4 for num 710
[LOG] Computing n3_to_4 for num 710
[LOG] Global feature for num 710
[LOG] Global feature for num 710
[LOG] Saving tensor x_0_710.pt
[LOG] Saving tensor x_1_710.pt
[LOG] Saving tensor x_2_710.pt
[LOG] Saving tensor x_3_710.pt
[LOG] Saving tensor x_4_710.pt
[LOG] Saving tensor n0_to_0_710.pt
[LOG] Saving tensor n1_to_1_710.pt
[LOG] Saving tensor n2_to_2_710.pt
[LOG] Saving tensor n3_to_3_710.pt
[LOG] Saving tensor n4_to_4_710.pt
[LOG] Saving tensor n0_to_1_710.pt
[LOG] Saving tensor n0_to_2_710.pt
[LOG] Saving tensor n0_to_3_710.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n0_to_4_710.pt
[LOG] Saving tensor n1_to_2_710.pt
[LOG] Saving tensor n1_to_3_710.pt
[LOG] Saving tensor n1_to_4_710.pt
[LOG] Saving tensor n2_to_3_710.pt
[LOG] Saving tensor n2_to_4_710.pt
[LOG] Saving tensor n3_to_4_710.pt
[LOG] Saving tensor global_feature_710.pt
[LOG] Process 88: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1487 Tetrahedra.
    [LOG] Generated 40 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.7
    [LOG] Max number of nodes per cluster is 81 and the number is 18
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] We will select 278 edges and 1487 tetra
[LOG] Edges from tetra 0 and KDTree 1370 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 84: Created combinatorial complex for file data_678.hdf5
[LOG] Process 84: Calculating Neighbors
[LOG] Loading pickle file data_678.pickle
[LOG] Processing node features for num 678
[LOG] Processing edge features for num 678
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing tetra features for num 678
[LOG] Processing cluster features for num 678
[LOG] Processing cluster features for num 678
[LOG] Processing adjacency and incidence matrices for num 678
[LOG] Computing n0_to_0 for num 678
[LOG] Computing n1_to_1 for num 678
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_2 (adjacency) for num 678
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n3_to_3 (adjacency) for num 678
[LOG] Computing n4_to_4 (coadjacency) for num 678
[LOG] Computing n0_to_1 for num 678
[LOG] Computing n0_to_2 for num 678
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n0_to_3 for num 678
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n0_to_4 for num 678
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Computing n1_to_2 for num 678
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_3 for num 678
[LOG] Computing n1_to_4 for num 678
[LOG] Computing n2_to_3 for num 678
[LOG] Computing n2_to_4 for num 678
[LOG] Computing n3_to_4 for num 678
[LOG] Global feature for num 678
[LOG] Global feature for num 678
[LOG] Saving tensor x_0_678.pt
[LOG] Saving tensor x_1_678.pt
[LOG] Saving tensor x_2_678.pt
[LOG] Saving tensor x_3_678.pt
[LOG] Saving tensor x_4_678.pt
[LOG] Saving tensor n0_to_0_678.pt
[LOG] Saving tensor n1_to_1_678.pt
[LOG] Saving tensor n2_to_2_678.pt
[LOG] Saving tensor n3_to_3_678.pt
[LOG] Saving tensor n4_to_4_678.pt
[LOG] Saving tensor n0_to_1_678.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n0_to_2_678.pt
[LOG] Saving tensor n0_to_3_678.pt
[LOG] Saving tensor n0_to_4_678.pt
[LOG] Saving tensor n1_to_2_678.pt
[LOG] Saving tensor n1_to_3_678.pt
[LOG] Saving tensor n1_to_4_678.pt
[LOG] Saving tensor n2_to_3_678.pt
[LOG] Saving tensor n2_to_4_678.pt
[LOG] Saving tensor n3_to_4_678.pt
[LOG] Saving tensor global_feature_678.pt
[LOG] Process 84: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] GENERATED TETRA
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1484 Tetrahedra.
    [LOG] Generated 52 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.692307692307692
    [LOG] Max number of nodes per cluster is 21 and the number is 34
[LOG] We will select 179 edges and 1484 tetra
[LOG] Edges from tetra 0 and KDTree 179 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 33: Created combinatorial complex for file data_271.hdf5
[LOG] Process 33: Calculating Neighbors
[LOG] Loading pickle file data_271.pickle
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing node features for num 271
[LOG] Processing edge features for num 271
[LOG] Processing tetra features for num 271
[LOG] Processing cluster features for num 271
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing cluster features for num 271
[LOG] Processing adjacency and incidence matrices for num 271
[LOG] Computing n0_to_0 for num 271
[LOG] Computing n1_to_1 for num 271
[LOG] Computing n2_to_2 (adjacency) for num 271
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_3 (adjacency) for num 271
[LOG] Computing n4_to_4 (coadjacency) for num 271
[LOG] Computing n0_to_1 for num 271
[LOG] Computing n0_to_2 for num 271
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_3 for num 271
[LOG] Computing n0_to_4 for num 271
[LOG] Computing n1_to_2 for num 271
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_3 for num 271
[LOG] Computing n1_to_4 for num 271
[LOG] Computing n2_to_3 for num 271
[LOG] Computing n2_to_4 for num 271
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_4 for num 271
[LOG] Global feature for num 271
[LOG] Global feature for num 271
[LOG] Saving tensor x_0_271.pt
[LOG] Saving tensor x_1_271.pt
[LOG] Saving tensor x_2_271.pt
[LOG] Saving tensor x_3_271.pt
[LOG] Saving tensor x_4_271.pt
[LOG] Saving tensor n0_to_0_271.pt
[LOG] Saving tensor n1_to_1_271.pt
[LOG] Saving tensor n2_to_2_271.pt
[LOG] Saving tensor n3_to_3_271.pt
[LOG] Saving tensor n4_to_4_271.pt
[LOG] Saving tensor n0_to_1_271.pt
[LOG] Saving tensor n0_to_2_271.pt
[LOG] Saving tensor n0_to_3_271.pt
[LOG] Saving tensor n0_to_4_271.pt
[LOG] Saving tensor n1_to_2_271.pt
[LOG] Saving tensor n1_to_3_271.pt
[LOG] Saving tensor n1_to_4_271.pt
[LOG] Saving tensor n2_to_3_271.pt
[LOG] Saving tensor n2_to_4_271.pt
[LOG] Saving tensor n3_to_4_271.pt
[LOG] Saving tensor global_feature_271.pt
[LOG] Process 33: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 864 Tetrahedra.
    [LOG] Generated 28 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.5
    [LOG] Max number of nodes per cluster is 26 and the number is 17
[LOG] We will select 214 edges and 864 tetra
[LOG] Edges from tetra 0 and KDTree 484 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 29: Created combinatorial complex for file data_239.hdf5
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 29: Calculating Neighbors
[LOG] Loading pickle file data_239.pickle
[LOG] Processing node features for num 239
[LOG] Processing edge features for num 239
[LOG] Processing tetra features for num 239
[LOG] Processing cluster features for num 239
[LOG] Processing cluster features for num 239
[LOG] Processing adjacency and incidence matrices for num 239
[LOG] Computing n0_to_0 for num 239
[LOG] Computing n1_to_1 for num 239
[LOG] Computing n2_to_2 (adjacency) for num 239
[LOG] Computing n3_to_3 (adjacency) for num 239
[LOG] Computing n4_to_4 (coadjacency) for num 239
[LOG] Computing n0_to_1 for num 239
[LOG] Computing n0_to_2 for num 239
[LOG] Computing n0_to_3 for num 239
[LOG] Computing n0_to_4 for num 239
[LOG] Computing n1_to_2 for num 239
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2170 Tetrahedra.
    [LOG] Generated 59 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.796610169491526
    [LOG] Max number of nodes per cluster is 40 and the number is 55
[LOG] Computing n1_to_3 for num 239
[LOG] Computing n1_to_4 for num 239
[LOG] Computing n2_to_3 for num 239
[LOG] Computing n2_to_4 for num 239
[LOG] Computing n3_to_4 for num 239
[LOG] Global feature for num 239
[LOG] Global feature for num 239
[LOG] Saving tensor x_0_239.pt
[LOG] Saving tensor x_1_239.pt
[LOG] Saving tensor x_2_239.pt
[LOG] Saving tensor x_3_239.pt
[LOG] Saving tensor x_4_239.pt
[LOG] Saving tensor n0_to_0_239.pt
[LOG] Saving tensor n1_to_1_239.pt
[LOG] Saving tensor n2_to_2_239.pt
[LOG] Saving tensor n3_to_3_239.pt
[LOG] Saving tensor n4_to_4_239.pt
[LOG] Saving tensor n0_to_1_239.pt
[LOG] Saving tensor n0_to_2_239.pt
[LOG] Saving tensor n0_to_3_239.pt
[LOG] We will select 311 edges and 2170 tetra
[LOG] Edges from tetra 0 and KDTree 884 with 0 edges in common.
[LOG] Saving tensor n0_to_4_239.pt
[LOG] Saving tensor n1_to_2_239.pt
[LOG] Saving tensor n1_to_3_239.pt
[LOG] Saving tensor n1_to_4_239.pt
[LOG] Saving tensor n2_to_3_239.pt
[LOG] Saving tensor n2_to_4_239.pt
[LOG] Saving tensor n3_to_4_239.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor global_feature_239.pt
[LOG] Process 29: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 113: Created combinatorial complex for file data_901.hdf5
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 113: Calculating Neighbors
[LOG] Loading pickle file data_901.pickle
[LOG] Processing node features for num 901
[LOG] Processing edge features for num 901
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing tetra features for num 901
[LOG] Processing cluster features for num 901
[LOG] Processing cluster features for num 901
[LOG] Processing adjacency and incidence matrices for num 901
[LOG] Computing n0_to_0 for num 901
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_1 for num 901
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_2 (adjacency) for num 901
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n3_to_3 (adjacency) for num 901
[LOG] Computing n4_to_4 (coadjacency) for num 901
[LOG] Computing n0_to_1 for num 901
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_2 for num 901
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_3 for num 901
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_4 for num 901
[LOG] Computing n1_to_2 for num 901
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_3 for num 901
[LOG] Computing n1_to_4 for num 901
[LOG] Computing n2_to_3 for num 901
[LOG] Computing n2_to_4 for num 901
[LOG] Computing n3_to_4 for num 901
[LOG] Global feature for num 901
[LOG] Global feature for num 901
[LOG] Saving tensor x_0_901.pt
[LOG] Saving tensor x_1_901.pt
[LOG] Saving tensor x_2_901.pt
[LOG] Saving tensor x_3_901.pt
[LOG] Saving tensor x_4_901.pt
[LOG] Saving tensor n0_to_0_901.pt
[LOG] Saving tensor n1_to_1_901.pt
[LOG] Saving tensor n2_to_2_901.pt
[LOG] Saving tensor n3_to_3_901.pt
[LOG] Saving tensor n4_to_4_901.pt
[LOG] Saving tensor n0_to_1_901.pt
[LOG] Saving tensor n0_to_2_901.pt
[LOG] Saving tensor n0_to_3_901.pt
[LOG] Saving tensor n0_to_4_901.pt
[LOG] Saving tensor n1_to_2_901.pt
[LOG] Saving tensor n1_to_3_901.pt
[LOG] Saving tensor n1_to_4_901.pt
[LOG] Saving tensor n2_to_3_901.pt
[LOG] Saving tensor n2_to_4_901.pt
[LOG] Saving tensor n3_to_4_901.pt
[LOG] Saving tensor global_feature_901.pt
[LOG] Process 113: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1856 Tetrahedra.
    [LOG] Generated 49 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.020408163265307
    [LOG] Max number of nodes per cluster is 41 and the number is 9
[LOG] We will select 223 edges and 1856 tetra
[LOG] Edges from tetra 0 and KDTree 572 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2693 Tetrahedra.
    [LOG] Generated 78 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.538461538461538
    [LOG] Max number of nodes per cluster is 69 and the number is 28
[LOG] We will select 572 edges and 2693 tetra
[LOG] Edges from tetra 0 and KDTree 2370 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 2 subset clusters.
[LOG] Process 18: Created combinatorial complex for file data_149.hdf5
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 18: Calculating Neighbors
[LOG] Loading pickle file data_149.pickle
[LOG] Processing node features for num 149
[LOG] Processing edge features for num 149
[LOG] Processing tetra features for num 149
[LOG] Processing cluster features for num 149
[LOG] Processing cluster features for num 149
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing adjacency and incidence matrices for num 149
[LOG] Computing n0_to_0 for num 149
[LOG] Computing n1_to_1 for num 149
[LOG] Removed 0 subset clusters.
[LOG] Computing n2_to_2 (adjacency) for num 149
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_3 (adjacency) for num 149
[LOG] Computing n4_to_4 (coadjacency) for num 149
[LOG] Computing n0_to_1 for num 149
[LOG] Computing n0_to_2 for num 149
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 44: Created combinatorial complex for file data_356.hdf5
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n0_to_3 for num 149
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Process 44: Calculating Neighbors
[LOG] Loading pickle file data_356.pickle
[LOG] Processing node features for num 356
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n0_to_4 for num 149
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Processing edge features for num 356
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n1_to_2 for num 149
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Processing tetra features for num 356
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n2_to_2 (adjacency) for num 217
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Processing cluster features for num 356
[LOG] Computing n1_to_3 for num 149
[LOG] Computing n1_to_4 for num 149
[LOG] Computing n2_to_3 for num 149
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Processing cluster features for num 356
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_4 for num 149
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing adjacency and incidence matrices for num 356
[LOG] Computing n0_to_0 for num 356
[LOG] Computing n3_to_4 for num 149
[LOG] Global feature for num 149
[LOG] Global feature for num 149
[LOG] Saving tensor x_0_149.pt
[LOG] Saving tensor x_1_149.pt
[LOG] Saving tensor x_2_149.pt
[LOG] Saving tensor x_3_149.pt
[LOG] Saving tensor x_4_149.pt
[LOG] Saving tensor n0_to_0_149.pt
[LOG] Saving tensor n1_to_1_149.pt
[LOG] Saving tensor n2_to_2_149.pt
[LOG] Saving tensor n3_to_3_149.pt
[LOG] Saving tensor n4_to_4_149.pt
[LOG] Saving tensor n0_to_1_149.pt
[LOG] Saving tensor n0_to_2_149.pt
[LOG] Saving tensor n0_to_3_149.pt
[LOG] Saving tensor n0_to_4_149.pt
[LOG] Saving tensor n1_to_2_149.pt
[LOG] Saving tensor n1_to_3_149.pt
[LOG] Saving tensor n1_to_4_149.pt
[LOG] Saving tensor n2_to_3_149.pt
[LOG] Saving tensor n2_to_4_149.pt
[LOG] Saving tensor n3_to_4_149.pt
[LOG] Saving tensor global_feature_149.pt
[LOG] Process 18: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_1 for num 356
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n2_to_2 (adjacency) for num 356
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 356
[LOG] Computing n4_to_4 (coadjacency) for num 356
[LOG] Computing n0_to_1 for num 356
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_2 for num 356
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 2
[LOG] GENERATED TETRA
[LOG] Computing n0_to_3 for num 356
[LOG] Computing n0_to_4 for num 356
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3285 Tetrahedra.
    [LOG] Generated 74 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.743243243243244
    [LOG] Max number of nodes per cluster is 49 and the number is 43
[LOG] Computing n1_to_2 for num 356
[LOG] We will select 604 edges and 3285 tetra
[LOG] Edges from tetra 0 and KDTree 1441 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_3 for num 356
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_4 for num 356
[LOG] Computing n2_to_3 for num 356
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2372 Tetrahedra.
    [LOG] Generated 79 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.949367088607595
    [LOG] Max number of nodes per cluster is 31 and the number is 30
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n2_to_4 for num 356
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n3_to_4 for num 356
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Global feature for num 356
[LOG] Global feature for num 356
[LOG] Saving tensor x_0_356.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor x_1_356.pt
[LOG] Saving tensor x_2_356.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] We will select 1169 edges and 2372 tetra
[LOG] Edges from tetra 0 and KDTree 1169 with 0 edges in common.
[LOG] Saving tensor x_3_356.pt
[LOG] Saving tensor x_4_356.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n0_to_0_356.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n1_to_1_356.pt
[LOG] Saving tensor n2_to_2_356.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n3_to_3_356.pt
[LOG] Saving tensor n4_to_4_356.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n0_to_1_356.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n0_to_2_356.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n0_to_3_356.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n0_to_4_356.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n1_to_2_356.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n1_to_3_356.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n1_to_4_356.pt
[LOG] Saving tensor n2_to_3_356.pt
[LOG] Saving tensor n2_to_4_356.pt
[LOG] Saving tensor n3_to_4_356.pt
[LOG] Saving tensor global_feature_356.pt
[LOG] Process 44: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 1 subset clusters.
[LOG] Process 22: Created combinatorial complex for file data_180.hdf5
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 22: Calculating Neighbors
[LOG] Loading pickle file data_180.pickle
[LOG] Processing node features for num 180
[LOG] Processing edge features for num 180
[LOG] Processing tetra features for num 180
[LOG] Removed 3 subset clusters.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 180
[LOG] Processing cluster features for num 180
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing adjacency and incidence matrices for num 180
[LOG] Computing n0_to_0 for num 180
[LOG] Computing n1_to_1 for num 180
[LOG] Process 126: Created combinatorial complex for file data_988.hdf5
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 126: Calculating Neighbors
[LOG] Loading pickle file data_988.pickle
[LOG] Processing node features for num 988
[LOG] Processing edge features for num 988
[LOG] GENERATED TETRA
[LOG] Processing tetra features for num 988
[LOG] Computing n3_to_3 (adjacency) for num 217
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing cluster features for num 988
[LOG] Computing n4_to_4 (coadjacency) for num 217
[LOG] Computing n0_to_1 for num 217
[LOG] Processing cluster features for num 988
[LOG] Processing adjacency and incidence matrices for num 988
[LOG] Computing n2_to_2 (adjacency) for num 180
[LOG] Computing n0_to_0 for num 988
[LOG] Computing n1_to_1 for num 988
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n3_to_3 (adjacency) for num 180
[LOG] Computing n4_to_4 (coadjacency) for num 180
[LOG] Computing n0_to_1 for num 180
[LOG] Calculating for cell ranks 3 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2174 Tetrahedra.
    [LOG] Generated 53 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.30188679245283
    [LOG] Max number of nodes per cluster is 49 and the number is 51
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_2 for num 180
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] We will select 413 edges and 2174 tetra
[LOG] Edges from tetra 0 and KDTree 1577 with 0 edges in common.
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 988
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_3 (adjacency) for num 988
[LOG] Computing n4_to_4 (coadjacency) for num 988
[LOG] Computing n0_to_1 for num 988
[LOG] Computing n0_to_2 for num 988
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_3 for num 180
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_4 for num 180
[LOG] Computing n1_to_2 for num 180
[LOG] Calculating for cell ranks 1 and 3
[LOG] GENERATED TETRA
[LOG] Computing n0_to_3 for num 988
[LOG] Computing n0_to_4 for num 988
[LOG] Computing n1_to_2 for num 988
[LOG] Process 43: Created combinatorial complex for file data_350.hdf5
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 43: Calculating Neighbors
[LOG] Loading pickle file data_350.pickle
[LOG] Processing node features for num 350
[LOG] Processing edge features for num 350
[LOG] Processing tetra features for num 350
[LOG] Processing cluster features for num 350
[LOG] Processing cluster features for num 350
[LOG] Processing adjacency and incidence matrices for num 350
[LOG] Computing n0_to_0 for num 350
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_3 for num 180
[LOG] Computing n1_to_4 for num 180
[LOG] Computing n1_to_1 for num 350
[LOG] Computing n2_to_3 for num 180
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_2 for num 217
[LOG] Computing n2_to_4 for num 180
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_4 for num 180
[LOG] Global feature for num 180
[LOG] Global feature for num 180
[LOG] Saving tensor x_0_180.pt
[LOG] Saving tensor x_1_180.pt
[LOG] Saving tensor x_2_180.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n2_to_2 (adjacency) for num 350
[LOG] Saving tensor x_3_180.pt
[LOG] Saving tensor x_4_180.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n0_to_0_180.pt
[LOG] Saving tensor n1_to_1_180.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n2_to_2_180.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n3_to_3_180.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n4_to_4_180.pt
[LOG] Saving tensor n0_to_1_180.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n0_to_2_180.pt
[LOG] Computing n1_to_3 for num 988
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n0_to_3_180.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n0_to_4_180.pt
[LOG] Saving tensor n1_to_2_180.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n1_to_3_180.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n1_to_4_180.pt
[LOG] Saving tensor n2_to_3_180.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n1_to_4 for num 988
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_3 for num 988
[LOG] Computing n2_to_4 for num 988
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n2_to_4_180.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n3_to_4_180.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor global_feature_180.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 350
[LOG] Process 22: Calculating Cross-Cell-Invariants
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n3_to_4 for num 988
[LOG] Computing n4_to_4 (coadjacency) for num 350
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Global feature for num 988
[LOG] Global feature for num 988
[LOG] Saving tensor x_0_988.pt
[LOG] Computing n0_to_1 for num 350
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor x_1_988.pt
[LOG] Saving tensor x_2_988.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor x_3_988.pt
[LOG] Saving tensor x_4_988.pt
[LOG] Saving tensor n0_to_0_988.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n1_to_1_988.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n2_to_2_988.pt
[LOG] Saving tensor n3_to_3_988.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n0_to_2 for num 350
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor n4_to_4_988.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n0_to_1_988.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n0_to_2_988.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n0_to_3_988.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n0_to_4_988.pt
[LOG] Saving tensor n1_to_2_988.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n1_to_3_988.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n1_to_4_988.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n2_to_3_988.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n2_to_4_988.pt
[LOG] Saving tensor n3_to_4_988.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor global_feature_988.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Process 126: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_3 for num 350
[LOG] Computing n0_to_4 for num 350
[LOG] Computing n1_to_2 for num 350
[LOG] Removed 7 subset clusters.

    [LOG] We Currently have 4575 Tetrahedra.
    [LOG] Generated 112 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.767857142857142
    [LOG] Max number of nodes per cluster is 143 and the number is 109
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_3 for num 350
[LOG] Computing n1_to_4 for num 350
[LOG] We will select 2135 edges and 4575 tetra
[LOG] Edges from tetra 0 and KDTree 2135 with 0 edges in common.
[LOG] Computing n2_to_3 for num 350
[LOG] Computing n2_to_4 for num 350
[LOG] Computing n3_to_4 for num 350
[LOG] Global feature for num 350
[LOG] Global feature for num 350
[LOG] Saving tensor x_0_350.pt
[LOG] Saving tensor x_1_350.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor x_2_350.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor x_3_350.pt
[LOG] Saving tensor x_4_350.pt
[LOG] Saving tensor n0_to_0_350.pt
[LOG] Saving tensor n1_to_1_350.pt
[LOG] Saving tensor n2_to_2_350.pt
[LOG] Saving tensor n3_to_3_350.pt
[LOG] Saving tensor n4_to_4_350.pt
[LOG] Saving tensor n0_to_1_350.pt
[LOG] Saving tensor n0_to_2_350.pt
[LOG] Saving tensor n0_to_3_350.pt
[LOG] Saving tensor n0_to_4_350.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n1_to_2_350.pt
[LOG] Saving tensor n1_to_3_350.pt
[LOG] Saving tensor n1_to_4_350.pt
[LOG] Saving tensor n2_to_3_350.pt
[LOG] Saving tensor n2_to_4_350.pt
[LOG] Saving tensor n3_to_4_350.pt
[LOG] Saving tensor global_feature_350.pt
[LOG] Process 43: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 916 Tetrahedra.
    [LOG] Generated 24 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.208333333333334
    [LOG] Max number of nodes per cluster is 26 and the number is 21
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] We will select 179 edges and 916 tetra
[LOG] Edges from tetra 0 and KDTree 179 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1606 Tetrahedra.
    [LOG] Generated 52 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.346153846153847
    [LOG] Max number of nodes per cluster is 86 and the number is 49
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] We will select 327 edges and 1606 tetra
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Edges from tetra 0 and KDTree 3561 with 0 edges in common.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 83: Created combinatorial complex for file data_671.hdf5
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Process 83: Calculating Neighbors
[LOG] Loading pickle file data_671.pickle
[LOG] Processing node features for num 671
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing edge features for num 671
[LOG] Processing tetra features for num 671
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Processing cluster features for num 671
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Processing cluster features for num 671
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 671
[LOG] Computing n0_to_0 for num 671
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_1 for num 671
[LOG] GENERATED TETRA
[LOG] Computing n2_to_2 (adjacency) for num 671
[LOG] Computing n3_to_3 (adjacency) for num 671
[LOG] Computing n4_to_4 (coadjacency) for num 671
[LOG] Computing n0_to_1 for num 671
[LOG] Computing n0_to_2 for num 671
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_3 for num 671
[LOG] Computing n0_to_4 for num 671
[LOG] Computing n1_to_2 for num 671
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_3 for num 671
[LOG] Computing n1_to_4 for num 671
[LOG] Computing n2_to_3 for num 671
[LOG] Computing n2_to_4 for num 671
[LOG] Computing n3_to_4 for num 671
[LOG] Global feature for num 671
[LOG] Global feature for num 671
[LOG] Saving tensor x_0_671.pt
[LOG] Saving tensor x_1_671.pt
[LOG] Saving tensor x_2_671.pt
[LOG] Saving tensor x_3_671.pt
[LOG] Saving tensor x_4_671.pt
[LOG] Saving tensor n0_to_0_671.pt
[LOG] Saving tensor n1_to_1_671.pt
[LOG] Process 71: Created combinatorial complex for file data_575.hdf5
[LOG] Saving tensor n2_to_2_671.pt
[LOG] Saving tensor n3_to_3_671.pt
[LOG] Saving tensor n4_to_4_671.pt
[LOG] Saving tensor n0_to_1_671.pt
[LOG] Saving tensor n0_to_2_671.pt
[LOG] Saving tensor n0_to_3_671.pt
[LOG] Saving tensor n0_to_4_671.pt
[LOG] Saving tensor n1_to_2_671.pt
[LOG] Saving tensor n1_to_3_671.pt
[LOG] Saving tensor n1_to_4_671.pt
[LOG] Saving tensor n2_to_3_671.pt
[LOG] Saving tensor n2_to_4_671.pt
[LOG] Saving tensor n3_to_4_671.pt
[LOG] Saving tensor global_feature_671.pt
[LOG] Process 83: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 71: Calculating Neighbors
[LOG] Loading pickle file data_575.pickle
[LOG] Processing node features for num 575
[LOG] Processing edge features for num 575
[LOG] Processing tetra features for num 575
[LOG] Processing cluster features for num 575
[LOG] Processing cluster features for num 575
[LOG] Processing adjacency and incidence matrices for num 575
[LOG] Computing n0_to_0 for num 575
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_1 for num 575
[LOG] Calculating for cell ranks 0 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1454 Tetrahedra.
    [LOG] Generated 59 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.525423728813559
    [LOG] Max number of nodes per cluster is 56 and the number is 47
[LOG] Calculating for cell ranks 0 and 2
[LOG] We will select 232 edges and 1454 tetra
[LOG] Edges from tetra 0 and KDTree 1423 with 0 edges in common.
[LOG] Computing n2_to_2 (adjacency) for num 575
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_3 (adjacency) for num 575
[LOG] Computing n4_to_4 (coadjacency) for num 575
[LOG] Computing n0_to_1 for num 575
[LOG] Computing n0_to_2 for num 575
[LOG] Computing n0_to_3 for num 217
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_4 for num 217
[LOG] Process 55: Created combinatorial complex for file data_446.hdf5
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_2 for num 217
[LOG] Process 55: Calculating Neighbors
[LOG] Loading pickle file data_446.pickle
[LOG] Processing node features for num 446
[LOG] Processing edge features for num 446
[LOG] Processing tetra features for num 446
[LOG] Removed 2 subset clusters.
[LOG] Processing cluster features for num 446
[LOG] Processing cluster features for num 446
[LOG] Processing adjacency and incidence matrices for num 446
[LOG] Computing n0_to_0 for num 446
[LOG] Computing n1_to_1 for num 446
[LOG] GENERATED TETRA
[LOG] Computing n2_to_2 (adjacency) for num 446
[LOG] GENERATED TETRA
[LOG] Computing n0_to_3 for num 575
[LOG] Computing n0_to_4 for num 575
[LOG] Computing n1_to_2 for num 575
[LOG] Computing n3_to_3 (adjacency) for num 446
[LOG] Computing n4_to_4 (coadjacency) for num 446
[LOG] Computing n0_to_1 for num 446
[LOG] Computing n0_to_2 for num 446
[LOG] Computing n1_to_3 for num 575
[LOG] Computing n1_to_4 for num 575
[LOG] Computing n2_to_3 for num 575
[LOG] Computing n2_to_4 for num 575
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1557 Tetrahedra.
    [LOG] Generated 45 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.911111111111111
    [LOG] Max number of nodes per cluster is 30 and the number is 38
[LOG] Computing n3_to_4 for num 575
[LOG] Global feature for num 575
[LOG] Global feature for num 575
[LOG] Saving tensor x_0_575.pt
[LOG] Saving tensor x_1_575.pt
[LOG] Saving tensor x_2_575.pt
[LOG] We will select 241 edges and 1557 tetra
[LOG] Edges from tetra 0 and KDTree 403 with 0 edges in common.
[LOG] Saving tensor x_3_575.pt
[LOG] Process 9: Created combinatorial complex for file data_73.hdf5
[LOG] Saving tensor x_4_575.pt
[LOG] Saving tensor n0_to_0_575.pt
[LOG] Computing n0_to_3 for num 446
[LOG] Computing n0_to_4 for num 446
[LOG] Computing n1_to_2 for num 446
[LOG] Saving tensor n1_to_1_575.pt
[LOG] Computing n1_to_3 for num 446
[LOG] Computing n1_to_4 for num 446
[LOG] Computing n2_to_3 for num 446
[LOG] Computing n2_to_4 for num 446
[LOG] Computing n3_to_4 for num 446
[LOG] Saving tensor n2_to_2_575.pt
[LOG] Global feature for num 446
[LOG] Global feature for num 446
[LOG] Saving tensor x_0_446.pt
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n3_to_3_575.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 125: Created combinatorial complex for file data_985.hdf5
[LOG] Process 9: Calculating Neighbors
[LOG] Loading pickle file data_73.pickle
[LOG] Processing node features for num 73
[LOG] Processing edge features for num 73
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor x_1_446.pt
[LOG] Processing tetra features for num 73
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n4_to_4_575.pt
[LOG] Saving tensor x_2_446.pt
[LOG] Saving tensor x_3_446.pt
[LOG] Saving tensor n0_to_1_575.pt
[LOG] Saving tensor x_4_446.pt
[LOG] Saving tensor n0_to_2_575.pt
[LOG] Saving tensor n0_to_0_446.pt
[LOG] Saving tensor n0_to_3_575.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1651 Tetrahedra.
    [LOG] Generated 38 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.736842105263158
    [LOG] Max number of nodes per cluster is 63 and the number is 13
[LOG] Processing cluster features for num 73
[LOG] We will select 467 edges and 1651 tetra
[LOG] Edges from tetra 0 and KDTree 467 with 0 edges in common.
[LOG] Process 125: Calculating Neighbors
[LOG] Loading pickle file data_985.pickle
[LOG] Processing node features for num 985
[LOG] Processing edge features for num 985
[LOG] Saving tensor n1_to_1_446.pt
[LOG] Saving tensor n0_to_4_575.pt
[LOG] Processing cluster features for num 73
[LOG] Saving tensor n2_to_2_446.pt
[LOG] Saving tensor n1_to_2_575.pt
[LOG] Processing tetra features for num 985
[LOG] Saving tensor n3_to_3_446.pt
[LOG] Processing cluster features for num 985
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing adjacency and incidence matrices for num 73
[LOG] Computing n0_to_0 for num 73
[LOG] Processing cluster features for num 985
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing adjacency and incidence matrices for num 985
[LOG] Computing n0_to_0 for num 985
[LOG] Computing n1_to_1 for num 985
[LOG] Saving tensor n1_to_3_575.pt
[LOG] Saving tensor n4_to_4_446.pt
[LOG] Saving tensor n1_to_4_575.pt
[LOG] Saving tensor n0_to_1_446.pt
[LOG] Saving tensor n2_to_3_575.pt
[LOG] Saving tensor n0_to_2_446.pt
[LOG] Saving tensor n2_to_4_575.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_2 (adjacency) for num 985
[LOG] Saving tensor n0_to_3_446.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n3_to_3 (adjacency) for num 985
[LOG] Computing n4_to_4 (coadjacency) for num 985
[LOG] Computing n0_to_1 for num 985
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n3_to_4_575.pt
[LOG] Saving tensor n0_to_4_446.pt
[LOG] Computing n0_to_2 for num 985
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor global_feature_575.pt
[LOG] Computing n1_to_1 for num 73
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n1_to_2_446.pt
[LOG] Computing n0_to_3 for num 985
[LOG] Computing n0_to_4 for num 985
[LOG] Computing n1_to_2 for num 985
[LOG] Process 71: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n1_to_3_446.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n1_to_4_446.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n1_to_3 for num 985
[LOG] Computing n1_to_4 for num 985
[LOG] Computing n2_to_3 for num 985
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_4 for num 985
[LOG] Computing n3_to_4 for num 985
[LOG] Global feature for num 985
[LOG] Global feature for num 985
[LOG] Saving tensor x_0_985.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n2_to_3_446.pt
[LOG] Saving tensor x_1_985.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Process 57: Created combinatorial complex for file data_457.hdf5
[LOG] Saving tensor n2_to_4_446.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor x_2_985.pt
[LOG] Process 57: Calculating Neighbors
[LOG] Loading pickle file data_457.pickle
[LOG] Processing node features for num 457
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing edge features for num 457
[LOG] Processing tetra features for num 457
[LOG] Processing cluster features for num 457
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n3_to_4_446.pt
[LOG] Processing cluster features for num 457
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing adjacency and incidence matrices for num 457
[LOG] Computing n0_to_0 for num 457
[LOG] Computing n1_to_1 for num 457
[LOG] Saving tensor x_3_985.pt
[LOG] Saving tensor global_feature_446.pt
[LOG] Saving tensor x_4_985.pt
[LOG] Process 55: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n0_to_0_985.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n1_to_1_985.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n2_to_2_985.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n3_to_3_985.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n4_to_4_985.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n0_to_1_985.pt
[LOG] Saving tensor n0_to_2_985.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n0_to_3_985.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n0_to_4_985.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n1_to_2_985.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n1_to_3_985.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n1_to_4_985.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 457
[LOG] Saving tensor n2_to_3_985.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n2_to_4_985.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n3_to_4_985.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor global_feature_985.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Process 125: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_3 (adjacency) for num 457
[LOG] Computing n4_to_4 (coadjacency) for num 457
[LOG] Computing n0_to_1 for num 457
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n0_to_2 for num 457
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_3 for num 457
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n0_to_4 for num 457
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n1_to_2 for num 457
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_3 for num 457
[LOG] Computing n1_to_4 for num 457
[LOG] Computing n2_to_3 for num 457
[LOG] Computing n2_to_4 for num 457
[LOG] Computing n3_to_4 for num 457
[LOG] Global feature for num 457
[LOG] Global feature for num 457
[LOG] Saving tensor x_0_457.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor x_1_457.pt
[LOG] Saving tensor x_2_457.pt
[LOG] Saving tensor x_3_457.pt
[LOG] Saving tensor x_4_457.pt
[LOG] Saving tensor n0_to_0_457.pt
[LOG] Saving tensor n1_to_1_457.pt
[LOG] Saving tensor n2_to_2_457.pt
[LOG] Saving tensor n3_to_3_457.pt
[LOG] Saving tensor n4_to_4_457.pt
[LOG] Saving tensor n0_to_1_457.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n0_to_2_457.pt
[LOG] Saving tensor n0_to_3_457.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n0_to_4_457.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n1_to_2_457.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n1_to_3_457.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n1_to_4_457.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n2_to_3_457.pt
[LOG] Saving tensor n2_to_4_457.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n3_to_4_457.pt
[LOG] Saving tensor global_feature_457.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Process 57: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_2 (adjacency) for num 73
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1604 Tetrahedra.
    [LOG] Generated 54 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.62962962962963
    [LOG] Max number of nodes per cluster is 49 and the number is 23
[LOG] Calculating for cell ranks 2 and 4
[LOG] We will select 388 edges and 1604 tetra
[LOG] Edges from tetra 0 and KDTree 388 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_3 (adjacency) for num 73
[LOG] Computing n4_to_4 (coadjacency) for num 73
[LOG] Computing n0_to_1 for num 73
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 115: Created combinatorial complex for file data_913.hdf5
[LOG] Process 115: Calculating Neighbors
[LOG] Loading pickle file data_913.pickle
[LOG] Processing node features for num 913
[LOG] Processing edge features for num 913
[LOG] Computing n0_to_2 for num 73
[LOG] Processing tetra features for num 913
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 913
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing cluster features for num 913
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing adjacency and incidence matrices for num 913
[LOG] Computing n0_to_0 for num 913
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_1 for num 913
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_2 (adjacency) for num 913
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_3 (adjacency) for num 913
[LOG] Computing n4_to_4 (coadjacency) for num 913
[LOG] Computing n0_to_1 for num 913
[LOG] Computing n0_to_2 for num 913
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_3 for num 913
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n0_to_4 for num 913
[LOG] Computing n1_to_2 for num 913
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n1_to_3 for num 913
[LOG] Computing n1_to_4 for num 913
[LOG] Computing n2_to_3 for num 913
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n2_to_4 for num 913
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n3_to_4 for num 913
[LOG] Global feature for num 913
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Global feature for num 913
[LOG] Saving tensor x_0_913.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor x_1_913.pt
[LOG] Saving tensor x_2_913.pt
[LOG] Saving tensor x_3_913.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor x_4_913.pt
[LOG] Saving tensor n0_to_0_913.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n1_to_1_913.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n2_to_2_913.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n3_to_3_913.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n4_to_4_913.pt
[LOG] Saving tensor n0_to_1_913.pt
[LOG] Saving tensor n0_to_2_913.pt
[LOG] Saving tensor n0_to_3_913.pt
[LOG] Saving tensor n0_to_4_913.pt
[LOG] Saving tensor n1_to_2_913.pt
[LOG] Saving tensor n1_to_3_913.pt
[LOG] Saving tensor n1_to_4_913.pt
[LOG] Saving tensor n2_to_3_913.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n2_to_4_913.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n3_to_4_913.pt
[LOG] Saving tensor global_feature_913.pt
[LOG] Process 115: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 73
[LOG] Computing n0_to_4 for num 73
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_2 for num 73
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1572 Tetrahedra.
    [LOG] Generated 49 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.448979591836734
    [LOG] Max number of nodes per cluster is 31 and the number is 44
[LOG] We will select 335 edges and 1572 tetra
[LOG] Edges from tetra 0 and KDTree 2753 with 0 edges in common.
[LOG] Computing n1_to_3 for num 73
[LOG] Computing n1_to_4 for num 73
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_3 for num 73
[LOG] Computing n2_to_4 for num 73
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 4 subset clusters.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n3_to_4 for num 73
[LOG] Calculating for cell ranks 1 and 3
[LOG] Global feature for num 73
[LOG] Global feature for num 73
[LOG] Saving tensor x_0_73.pt
[LOG] Saving tensor x_1_73.pt
[LOG] Saving tensor x_2_73.pt
[LOG] Saving tensor x_3_73.pt
[LOG] Saving tensor x_4_73.pt
[LOG] Saving tensor n0_to_0_73.pt
[LOG] Saving tensor n1_to_1_73.pt
[LOG] Saving tensor n2_to_2_73.pt
[LOG] Saving tensor n3_to_3_73.pt
[LOG] Saving tensor n4_to_4_73.pt
[LOG] Saving tensor n0_to_1_73.pt
[LOG] Saving tensor n0_to_2_73.pt
[LOG] Saving tensor n0_to_3_73.pt
[LOG] Saving tensor n0_to_4_73.pt
[LOG] Saving tensor n1_to_2_73.pt
[LOG] Saving tensor n1_to_3_73.pt
[LOG] Saving tensor n1_to_4_73.pt
[LOG] Saving tensor n2_to_3_73.pt
[LOG] Saving tensor n2_to_4_73.pt
[LOG] Saving tensor n3_to_4_73.pt
[LOG] Saving tensor global_feature_73.pt
[LOG] Process 9: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 81: Created combinatorial complex for file data_653.hdf5
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 81: Calculating Neighbors
[LOG] Loading pickle file data_653.pickle
[LOG] Processing node features for num 653
[LOG] Processing edge features for num 653
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing tetra features for num 653
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing cluster features for num 653
[LOG] Processing cluster features for num 653
[LOG] Processing adjacency and incidence matrices for num 653
[LOG] Computing n0_to_0 for num 653
[LOG] Computing n1_to_1 for num 653
[LOG] Computing n2_to_2 (adjacency) for num 653
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n3_to_3 (adjacency) for num 653
[LOG] Computing n4_to_4 (coadjacency) for num 653
[LOG] Computing n0_to_1 for num 653
[LOG] GENERATED TETRA
[LOG] Computing n0_to_2 for num 653
[LOG] Computing n0_to_3 for num 653
[LOG] Computing n0_to_4 for num 653
[LOG] Computing n1_to_2 for num 653
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_3 for num 653
[LOG] Computing n1_to_4 for num 653
[LOG] Computing n2_to_3 for num 653
[LOG] Computing n2_to_4 for num 653
[LOG] Computing n3_to_4 for num 653
[LOG] Global feature for num 653
[LOG] Global feature for num 653
[LOG] Saving tensor x_0_653.pt
[LOG] Saving tensor x_1_653.pt
[LOG] Saving tensor x_2_653.pt
[LOG] Saving tensor x_3_653.pt
[LOG] Saving tensor x_4_653.pt
[LOG] Saving tensor n0_to_0_653.pt
[LOG] Saving tensor n1_to_1_653.pt
[LOG] Saving tensor n2_to_2_653.pt
[LOG] Saving tensor n3_to_3_653.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n4_to_4_653.pt
[LOG] Saving tensor n0_to_1_653.pt
[LOG] Saving tensor n0_to_2_653.pt
[LOG] Saving tensor n0_to_3_653.pt
[LOG] Saving tensor n0_to_4_653.pt
[LOG] Saving tensor n1_to_2_653.pt
[LOG] Saving tensor n1_to_3_653.pt
[LOG] Saving tensor n1_to_4_653.pt
[LOG] Saving tensor n2_to_3_653.pt
[LOG] Saving tensor n2_to_4_653.pt
[LOG] Saving tensor n3_to_4_653.pt
[LOG] Saving tensor global_feature_653.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 81: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1761 Tetrahedra.
    [LOG] Generated 52 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.153846153846153
    [LOG] Max number of nodes per cluster is 93 and the number is 32
[LOG] We will select 371 edges and 1761 tetra
[LOG] Edges from tetra 0 and KDTree 3163 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n1_to_3 for num 217
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Process 38: Created combinatorial complex for file data_309.hdf5
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Computing n1_to_4 for num 217
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Process 38: Calculating Neighbors
[LOG] Loading pickle file data_309.pickle
[LOG] Processing node features for num 309
[LOG] Processing edge features for num 309
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing tetra features for num 309
[LOG] Processing cluster features for num 309
[LOG] Processing cluster features for num 309
[LOG] GENERATED TETRA
[LOG] Processing adjacency and incidence matrices for num 309
[LOG] Computing n0_to_0 for num 309
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_1 for num 309
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1051 Tetrahedra.
    [LOG] Generated 35 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.142857142857142
    [LOG] Max number of nodes per cluster is 36 and the number is 25
[LOG] Computing n2_to_3 for num 217
[LOG] We will select 446 edges and 1051 tetra
[LOG] Edges from tetra 0 and KDTree 490 with 0 edges in common.
[LOG] Computing n2_to_2 (adjacency) for num 309
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n3_to_3 (adjacency) for num 309
[LOG] Computing n4_to_4 (coadjacency) for num 309
[LOG] Computing n0_to_1 for num 309
[LOG] Computing n2_to_4 for num 217
[LOG] Computing n0_to_2 for num 309
[LOG] Removed 1 subset clusters.
[LOG] Computing n3_to_4 for num 217
[LOG] Global feature for num 217
[LOG] Global feature for num 217
[LOG] Saving tensor x_0_217.pt
[LOG] Saving tensor x_1_217.pt
[LOG] Saving tensor x_2_217.pt
[LOG] Saving tensor x_3_217.pt
[LOG] Saving tensor x_4_217.pt
[LOG] Saving tensor n0_to_0_217.pt
[LOG] Process 59: Created combinatorial complex for file data_477.hdf5
[LOG] Saving tensor n1_to_1_217.pt
[LOG] Saving tensor n2_to_2_217.pt
[LOG] Process 59: Calculating Neighbors
[LOG] Loading pickle file data_477.pickle
[LOG] Processing node features for num 477
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing edge features for num 477
[LOG] Processing tetra features for num 477
[LOG] Processing cluster features for num 477
[LOG] Processing cluster features for num 477
[LOG] Processing adjacency and incidence matrices for num 477
[LOG] Computing n0_to_0 for num 477
[LOG] Computing n1_to_1 for num 477
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n2_to_2 (adjacency) for num 477
[LOG] Computing n0_to_3 for num 309
[LOG] Saving tensor n3_to_3_217.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n4_to_4_217.pt
[LOG] Saving tensor n0_to_1_217.pt
[LOG] Computing n0_to_4 for num 309
[LOG] Computing n3_to_3 (adjacency) for num 477
[LOG] Computing n4_to_4 (coadjacency) for num 477
[LOG] Computing n0_to_1 for num 477
[LOG] Saving tensor n0_to_2_217.pt
[LOG] Saving tensor n0_to_3_217.pt
[LOG] Saving tensor n0_to_4_217.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_2 for num 477
[LOG] Computing n1_to_2 for num 309
[LOG] Saving tensor n1_to_2_217.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n0_to_3 for num 477
[LOG] Computing n0_to_4 for num 477
[LOG] Computing n1_to_2 for num 477
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_3 for num 309
[LOG] Computing n1_to_4 for num 309
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n1_to_3_217.pt
[LOG] Computing n2_to_3 for num 309
[LOG] Saving tensor n1_to_4_217.pt
[LOG] Saving tensor n2_to_3_217.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n2_to_4_217.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n3_to_4_217.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor global_feature_217.pt
[LOG] Computing n2_to_4 for num 309
[LOG] Process 27: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n1_to_3 for num 477
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n1_to_4 for num 477
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n2_to_3 for num 477
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n3_to_4 for num 309
[LOG] Global feature for num 309
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Global feature for num 309
[LOG] Saving tensor x_0_309.pt
[LOG] Saving tensor x_1_309.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor x_2_309.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor x_3_309.pt
[LOG] Computing n2_to_4 for num 477
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor x_4_309.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n0_to_0_309.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n1_to_1_309.pt
[LOG] Saving tensor n2_to_2_309.pt
[LOG] Computing n3_to_4 for num 477
[LOG] Global feature for num 477
[LOG] Global feature for num 477
[LOG] Saving tensor x_0_477.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor x_1_477.pt
[LOG] Saving tensor n3_to_3_309.pt
[LOG] Saving tensor x_2_477.pt
[LOG] Saving tensor x_3_477.pt
[LOG] Saving tensor n4_to_4_309.pt
[LOG] Saving tensor x_4_477.pt
[LOG] Saving tensor n0_to_0_477.pt
[LOG] Saving tensor n0_to_1_309.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n0_to_2_309.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n0_to_3_309.pt
[LOG] Saving tensor n0_to_4_309.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n1_to_2_309.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n1_to_3_309.pt
[LOG] Saving tensor n1_to_1_477.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n2_to_2_477.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n1_to_4_309.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n3_to_3_477.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n4_to_4_477.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n2_to_3_309.pt
[LOG] Saving tensor n0_to_1_477.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n0_to_2_477.pt
[LOG] Saving tensor n0_to_3_477.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n0_to_4_477.pt
[LOG] Saving tensor n1_to_2_477.pt
[LOG] Saving tensor n1_to_3_477.pt
[LOG] Saving tensor n1_to_4_477.pt
[LOG] Saving tensor n2_to_3_477.pt
[LOG] Saving tensor n2_to_4_477.pt
[LOG] Saving tensor n3_to_4_477.pt
[LOG] Saving tensor global_feature_477.pt
[LOG] Process 59: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n2_to_4_309.pt
[LOG] Saving tensor n3_to_4_309.pt
[LOG] Saving tensor global_feature_309.pt
[LOG] Process 38: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3142 Tetrahedra.
    [LOG] Generated 71 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.366197183098592
    [LOG] Max number of nodes per cluster is 82 and the number is 45
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] We will select 831 edges and 3142 tetra
[LOG] Edges from tetra 0 and KDTree 2611 with 0 edges in common.
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 50: Created combinatorial complex for file data_405.hdf5
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Process 50: Calculating Neighbors
[LOG] Loading pickle file data_405.pickle
[LOG] Processing node features for num 405
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Processing edge features for num 405
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing tetra features for num 405
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Processing cluster features for num 405
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing cluster features for num 405
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Processing adjacency and incidence matrices for num 405
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n0_to_0 for num 405
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n1_to_1 for num 405
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_2 (adjacency) for num 405
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n3_to_3 (adjacency) for num 405
[LOG] Computing n4_to_4 (coadjacency) for num 405
[LOG] Computing n0_to_1 for num 405
[LOG] GENERATED TETRA
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_2 for num 405
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1806 Tetrahedra.
    [LOG] Generated 54 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.61111111111111
    [LOG] Max number of nodes per cluster is 39 and the number is 33
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] We will select 334 edges and 1806 tetra
[LOG] Edges from tetra 0 and KDTree 334 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2443 Tetrahedra.
    [LOG] Generated 56 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.053571428571429
    [LOG] Max number of nodes per cluster is 45 and the number is 50
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] We will select 1097 edges and 2443 tetra
[LOG] Edges from tetra 0 and KDTree 1097 with 0 edges in common.
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_3 for num 405
[LOG] Process 66: Created combinatorial complex for file data_532.hdf5
[LOG] Computing n0_to_4 for num 405
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n1_to_2 for num 405
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 66: Calculating Neighbors
[LOG] Loading pickle file data_532.pickle
[LOG] Processing node features for num 532
[LOG] Processing edge features for num 532
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Processing tetra features for num 532
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Processing cluster features for num 532
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Processing cluster features for num 532
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Processing adjacency and incidence matrices for num 532
[LOG] Computing n0_to_0 for num 532
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_1 for num 532
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Removed 4 subset clusters.
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 532
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 532
[LOG] Computing n4_to_4 (coadjacency) for num 532
[LOG] Computing n0_to_1 for num 532
[LOG] Computing n0_to_2 for num 532
[LOG] Process 94: Created combinatorial complex for file data_755.hdf5
[LOG] Computing n1_to_3 for num 405
[LOG] Computing n1_to_4 for num 405
[LOG] Computing n2_to_3 for num 405
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1618 Tetrahedra.
    [LOG] Generated 40 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.95
    [LOG] Max number of nodes per cluster is 52 and the number is 30
[LOG] Computing n2_to_4 for num 405
[LOG] Computing n0_to_3 for num 532
[LOG] Computing n0_to_4 for num 532
[LOG] We will select 456 edges and 1618 tetra
[LOG] Edges from tetra 0 and KDTree 896 with 0 edges in common.
[LOG] Computing n1_to_2 for num 532
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_4 for num 405
[LOG] Process 94: Calculating Neighbors
[LOG] Global feature for num 405
[LOG] Global feature for num 405
[LOG] Saving tensor x_0_405.pt
[LOG] Loading pickle file data_755.pickle
[LOG] Processing node features for num 755
[LOG] Processing edge features for num 755
[LOG] Saving tensor x_1_405.pt
[LOG] Saving tensor x_2_405.pt
[LOG] Saving tensor x_3_405.pt
[LOG] Saving tensor x_4_405.pt
[LOG] Saving tensor n0_to_0_405.pt
[LOG] Saving tensor n1_to_1_405.pt
[LOG] Saving tensor n2_to_2_405.pt
[LOG] Saving tensor n3_to_3_405.pt
[LOG] Saving tensor n4_to_4_405.pt
[LOG] Saving tensor n0_to_1_405.pt
[LOG] Processing tetra features for num 755
[LOG] Saving tensor n0_to_2_405.pt
[LOG] Saving tensor n0_to_3_405.pt
[LOG] Saving tensor n0_to_4_405.pt
[LOG] Saving tensor n1_to_2_405.pt
[LOG] Saving tensor n1_to_3_405.pt
[LOG] Saving tensor n1_to_4_405.pt
[LOG] Saving tensor n2_to_3_405.pt
[LOG] Saving tensor n2_to_4_405.pt
[LOG] Saving tensor n3_to_4_405.pt
[LOG] Saving tensor global_feature_405.pt
[LOG] Process 50: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing cluster features for num 755
[LOG] Computing n1_to_3 for num 532
[LOG] Computing n1_to_4 for num 532
[LOG] Computing n2_to_3 for num 532
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing cluster features for num 755
[LOG] Computing n2_to_4 for num 532
[LOG] Processing adjacency and incidence matrices for num 755
[LOG] Computing n0_to_0 for num 755
[LOG] Computing n3_to_4 for num 532
[LOG] Global feature for num 532
[LOG] Global feature for num 532
[LOG] Saving tensor x_0_532.pt
[LOG] Saving tensor x_1_532.pt
[LOG] Saving tensor x_2_532.pt
[LOG] Saving tensor x_3_532.pt
[LOG] Saving tensor x_4_532.pt
[LOG] Saving tensor n0_to_0_532.pt
[LOG] Saving tensor n1_to_1_532.pt
[LOG] Saving tensor n2_to_2_532.pt
[LOG] Saving tensor n3_to_3_532.pt
[LOG] Saving tensor n4_to_4_532.pt
[LOG] Saving tensor n0_to_1_532.pt
[LOG] Saving tensor n0_to_2_532.pt
[LOG] Saving tensor n0_to_3_532.pt
[LOG] Saving tensor n0_to_4_532.pt
[LOG] Saving tensor n1_to_2_532.pt
[LOG] Saving tensor n1_to_3_532.pt
[LOG] Saving tensor n1_to_4_532.pt
[LOG] Saving tensor n2_to_3_532.pt
[LOG] Saving tensor n2_to_4_532.pt
[LOG] Saving tensor n3_to_4_532.pt
[LOG] Saving tensor global_feature_532.pt
[LOG] Process 66: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_1 for num 755
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1278 Tetrahedra.
    [LOG] Generated 31 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.774193548387096
    [LOG] Max number of nodes per cluster is 90 and the number is 15
[LOG] We will select 120 edges and 1278 tetra
[LOG] Edges from tetra 0 and KDTree 2102 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 24: Created combinatorial complex for file data_199.hdf5
[LOG] Removed 0 subset clusters.
[LOG] Process 24: Calculating Neighbors
[LOG] Loading pickle file data_199.pickle
[LOG] Processing node features for num 199
[LOG] Processing edge features for num 199
[LOG] Processing tetra features for num 199
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing cluster features for num 199
[LOG] Processing cluster features for num 199
[LOG] Process 30: Created combinatorial complex for file data_246.hdf5
[LOG] Processing adjacency and incidence matrices for num 199
[LOG] Computing n0_to_0 for num 199
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 30: Calculating Neighbors
[LOG] Loading pickle file data_246.pickle
[LOG] Processing node features for num 246
[LOG] Computing n1_to_1 for num 199
[LOG] Processing edge features for num 246
[LOG] Processing tetra features for num 246
[LOG] Processing cluster features for num 246
[LOG] Computing n2_to_2 (adjacency) for num 755
[LOG] Processing cluster features for num 246
[LOG] Processing adjacency and incidence matrices for num 246
[LOG] Computing n0_to_0 for num 246
[LOG] Computing n1_to_1 for num 246
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_2 (adjacency) for num 246
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_2 (adjacency) for num 199
[LOG] Computing n3_to_3 (adjacency) for num 246
[LOG] Computing n4_to_4 (coadjacency) for num 246
[LOG] Computing n0_to_1 for num 246
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_2 for num 246
[LOG] Computing n3_to_3 (adjacency) for num 199
[LOG] Computing n4_to_4 (coadjacency) for num 199
[LOG] Computing n0_to_1 for num 199
[LOG] Computing n3_to_3 (adjacency) for num 755
[LOG] Computing n4_to_4 (coadjacency) for num 755
[LOG] Computing n0_to_1 for num 755
[LOG] Computing n0_to_2 for num 199
[LOG] GENERATED TETRA
[LOG] Computing n0_to_2 for num 755
[LOG] Computing n0_to_3 for num 246
[LOG] Computing n0_to_4 for num 246
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_2 for num 246
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 1

    [LOG] We Currently have 1916 Tetrahedra.
    [LOG] Generated 56 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.857142857142858
    [LOG] Max number of nodes per cluster is 44 and the number is 39
[LOG] Computing n1_to_3 for num 246
[LOG] Computing n1_to_4 for num 246
[LOG] Computing n2_to_3 for num 246
[LOG] Computing n0_to_3 for num 199
[LOG] Computing n2_to_4 for num 246
[LOG] Computing n0_to_4 for num 199
[LOG] Computing n3_to_4 for num 246
[LOG] Global feature for num 246
[LOG] Global feature for num 246
[LOG] Saving tensor x_0_246.pt
[LOG] Saving tensor x_1_246.pt
[LOG] Computing n1_to_2 for num 199
[LOG] Saving tensor x_2_246.pt
[LOG] Saving tensor x_3_246.pt
[LOG] Saving tensor x_4_246.pt
[LOG] Saving tensor n0_to_0_246.pt
[LOG] Saving tensor n1_to_1_246.pt
[LOG] Saving tensor n2_to_2_246.pt
[LOG] Saving tensor n3_to_3_246.pt
[LOG] Saving tensor n4_to_4_246.pt
[LOG] We will select 220 edges and 1916 tetra
[LOG] Edges from tetra 0 and KDTree 220 with 0 edges in common.
[LOG] Saving tensor n0_to_1_246.pt
[LOG] Saving tensor n0_to_2_246.pt
[LOG] Saving tensor n0_to_3_246.pt
[LOG] Saving tensor n0_to_4_246.pt
[LOG] Saving tensor n1_to_2_246.pt
[LOG] Saving tensor n1_to_3_246.pt
[LOG] Saving tensor n1_to_4_246.pt
[LOG] Saving tensor n2_to_3_246.pt
[LOG] Saving tensor n2_to_4_246.pt
[LOG] Computing n0_to_3 for num 755
[LOG] Saving tensor n3_to_4_246.pt
[LOG] Saving tensor global_feature_246.pt
[LOG] Process 30: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_4 for num 755
[LOG] Computing n1_to_2 for num 755
[LOG] Computing n1_to_3 for num 199
[LOG] Computing n1_to_4 for num 199
[LOG] Computing n2_to_3 for num 199
[LOG] Computing n2_to_4 for num 199
[LOG] Computing n3_to_4 for num 199
[LOG] Global feature for num 199
[LOG] Global feature for num 199
[LOG] Saving tensor x_0_199.pt
[LOG] Saving tensor x_1_199.pt
[LOG] Saving tensor x_2_199.pt
[LOG] Saving tensor x_3_199.pt
[LOG] Saving tensor x_4_199.pt
[LOG] Saving tensor n0_to_0_199.pt
[LOG] Saving tensor n1_to_1_199.pt
[LOG] Saving tensor n2_to_2_199.pt
[LOG] Saving tensor n3_to_3_199.pt
[LOG] Saving tensor n4_to_4_199.pt
[LOG] Saving tensor n0_to_1_199.pt
[LOG] Saving tensor n0_to_2_199.pt
[LOG] Saving tensor n0_to_3_199.pt
[LOG] Saving tensor n0_to_4_199.pt
[LOG] Saving tensor n1_to_2_199.pt
[LOG] Saving tensor n1_to_3_199.pt
[LOG] Saving tensor n1_to_4_199.pt
[LOG] Saving tensor n2_to_3_199.pt
[LOG] Saving tensor n2_to_4_199.pt
[LOG] Saving tensor n3_to_4_199.pt
[LOG] Saving tensor global_feature_199.pt
[LOG] Process 24: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_3 for num 755
[LOG] Computing n1_to_4 for num 755
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_3 for num 755
[LOG] Computing n2_to_4 for num 755
[LOG] Computing n3_to_4 for num 755
[LOG] Global feature for num 755
[LOG] Global feature for num 755
[LOG] Saving tensor x_0_755.pt
[LOG] Saving tensor x_1_755.pt
[LOG] Saving tensor x_2_755.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor x_3_755.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor x_4_755.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n0_to_0_755.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n1_to_1_755.pt
[LOG] Saving tensor n2_to_2_755.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n3_to_3_755.pt
[LOG] Saving tensor n4_to_4_755.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n0_to_1_755.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n0_to_2_755.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n0_to_3_755.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n0_to_4_755.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n1_to_2_755.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n1_to_3_755.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n1_to_4_755.pt
[LOG] Process 123: Created combinatorial complex for file data_970.hdf5
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n2_to_3_755.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n2_to_4_755.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n3_to_4_755.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor global_feature_755.pt
[LOG] Process 94: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Process 123: Calculating Neighbors
[LOG] Loading pickle file data_970.pickle
[LOG] Processing node features for num 970
[LOG] Processing edge features for num 970
[LOG] Processing tetra features for num 970
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing cluster features for num 970
[LOG] Processing cluster features for num 970
[LOG] Processing adjacency and incidence matrices for num 970
[LOG] Computing n0_to_0 for num 970
[LOG] Computing n1_to_1 for num 970
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1856 Tetrahedra.
    [LOG] Generated 42 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.928571428571429
    [LOG] Max number of nodes per cluster is 40 and the number is 36
[LOG] Computing n2_to_2 (adjacency) for num 970
[LOG] We will select 223 edges and 1856 tetra
[LOG] Edges from tetra 0 and KDTree 601 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_3 (adjacency) for num 970
[LOG] Computing n4_to_4 (coadjacency) for num 970
[LOG] Computing n0_to_1 for num 970
[LOG] Computing n0_to_2 for num 970
[LOG] Computing n0_to_3 for num 970
[LOG] Computing n0_to_4 for num 970
[LOG] Computing n1_to_2 for num 970
[LOG] Computing n1_to_3 for num 970
[LOG] Removed 0 subset clusters.
[LOG] Computing n1_to_4 for num 970
[LOG] Computing n2_to_3 for num 970
[LOG] Computing n2_to_4 for num 970
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_4 for num 970
[LOG] Global feature for num 970
[LOG] Global feature for num 970
[LOG] Saving tensor x_0_970.pt
[LOG] Saving tensor x_1_970.pt
[LOG] Saving tensor x_2_970.pt
[LOG] Saving tensor x_3_970.pt
[LOG] Saving tensor x_4_970.pt
[LOG] Saving tensor n0_to_0_970.pt
[LOG] Saving tensor n1_to_1_970.pt
[LOG] Saving tensor n2_to_2_970.pt
[LOG] Saving tensor n3_to_3_970.pt
[LOG] Saving tensor n4_to_4_970.pt
[LOG] Saving tensor n0_to_1_970.pt
[LOG] Saving tensor n0_to_2_970.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n0_to_3_970.pt

    [LOG] We Currently have 3056 Tetrahedra.
    [LOG] Generated 105 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.99047619047619
    [LOG] Max number of nodes per cluster is 53 and the number is 82
[LOG] Saving tensor n0_to_4_970.pt
[LOG] Saving tensor n1_to_2_970.pt
[LOG] Saving tensor n1_to_3_970.pt
[LOG] Saving tensor n1_to_4_970.pt
[LOG] Saving tensor n2_to_3_970.pt
[LOG] Process 18: Created combinatorial complex for file data_150.hdf5
[LOG] Saving tensor n2_to_4_970.pt
[LOG] Saving tensor n3_to_4_970.pt
[LOG] Saving tensor global_feature_970.pt
[LOG] Process 123: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 18: Calculating Neighbors
[LOG] Loading pickle file data_150.pickle
[LOG] Processing node features for num 150
[LOG] Processing edge features for num 150
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing tetra features for num 150
[LOG] Processing cluster features for num 150
[LOG] We will select 784 edges and 3056 tetra
[LOG] Edges from tetra 0 and KDTree 1812 with 0 edges in common.
[LOG] Processing cluster features for num 150
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing adjacency and incidence matrices for num 150
[LOG] Computing n0_to_0 for num 150
[LOG] Computing n1_to_1 for num 150
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_2 (adjacency) for num 150
[LOG] Computing n3_to_3 (adjacency) for num 150
[LOG] Computing n4_to_4 (coadjacency) for num 150
[LOG] Computing n0_to_1 for num 150
[LOG] Computing n0_to_2 for num 150
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_3 for num 150
[LOG] Computing n0_to_4 for num 150
[LOG] Computing n1_to_2 for num 150
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_3 for num 150
[LOG] Computing n1_to_4 for num 150
[LOG] Computing n2_to_3 for num 150
[LOG] Computing n2_to_4 for num 150
[LOG] Removed 0 subset clusters.
[LOG] Computing n3_to_4 for num 150
[LOG] Global feature for num 150
[LOG] Global feature for num 150
[LOG] Saving tensor x_0_150.pt
[LOG] Saving tensor x_1_150.pt
[LOG] Saving tensor x_2_150.pt
[LOG] Saving tensor x_3_150.pt
[LOG] Saving tensor x_4_150.pt
[LOG] Saving tensor n0_to_0_150.pt
[LOG] Saving tensor n1_to_1_150.pt
[LOG] Saving tensor n2_to_2_150.pt
[LOG] Saving tensor n3_to_3_150.pt
[LOG] Saving tensor n4_to_4_150.pt
[LOG] Saving tensor n0_to_1_150.pt
[LOG] Saving tensor n0_to_2_150.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n0_to_3_150.pt
[LOG] Saving tensor n0_to_4_150.pt
[LOG] Saving tensor n1_to_2_150.pt
[LOG] Saving tensor n1_to_3_150.pt
[LOG] Saving tensor n1_to_4_150.pt
[LOG] Saving tensor n2_to_3_150.pt
[LOG] Saving tensor n2_to_4_150.pt
[LOG] Saving tensor n3_to_4_150.pt
[LOG] Saving tensor global_feature_150.pt
[LOG] Process 18: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 61: Created combinatorial complex for file data_491.hdf5
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 61: Calculating Neighbors
[LOG] Loading pickle file data_491.pickle
[LOG] Processing node features for num 491
[LOG] Processing edge features for num 491
[LOG] Processing tetra features for num 491
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing cluster features for num 491
[LOG] Processing cluster features for num 491
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing adjacency and incidence matrices for num 491
[LOG] Computing n0_to_0 for num 491
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_1 for num 491
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_2 (adjacency) for num 491
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_3 (adjacency) for num 491
[LOG] Computing n4_to_4 (coadjacency) for num 491
[LOG] Computing n0_to_1 for num 491
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n0_to_2 for num 491
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2060 Tetrahedra.
    [LOG] Generated 59 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.559322033898304
    [LOG] Max number of nodes per cluster is 43 and the number is 44
[LOG] We will select 165 edges and 2060 tetra
[LOG] Edges from tetra 0 and KDTree 724 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_3 for num 491
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_4 for num 491
[LOG] Process 51: Created combinatorial complex for file data_414.hdf5
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n1_to_2 for num 491
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_3 for num 491
[LOG] Computing n1_to_4 for num 491
[LOG] Process 51: Calculating Neighbors
[LOG] Loading pickle file data_414.pickle
[LOG] Processing node features for num 414
[LOG] Computing n2_to_3 for num 491
[LOG] Processing edge features for num 414
[LOG] Processing tetra features for num 414
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing cluster features for num 414
[LOG] Computing n2_to_4 for num 491
[LOG] Processing cluster features for num 414
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing adjacency and incidence matrices for num 414
[LOG] Computing n0_to_0 for num 414
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_1 for num 414
[LOG] Computing n3_to_4 for num 491
[LOG] Global feature for num 491
[LOG] Global feature for num 491
[LOG] Saving tensor x_0_491.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor x_1_491.pt
[LOG] Saving tensor x_2_491.pt
[LOG] Saving tensor x_3_491.pt
[LOG] Saving tensor x_4_491.pt
[LOG] Saving tensor n0_to_0_491.pt
[LOG] Saving tensor n1_to_1_491.pt
[LOG] Saving tensor n2_to_2_491.pt
[LOG] Saving tensor n3_to_3_491.pt
[LOG] Saving tensor n4_to_4_491.pt
[LOG] Saving tensor n0_to_1_491.pt
[LOG] Saving tensor n0_to_2_491.pt
[LOG] Saving tensor n0_to_3_491.pt
[LOG] Saving tensor n0_to_4_491.pt
[LOG] Saving tensor n1_to_2_491.pt
[LOG] Saving tensor n1_to_3_491.pt
[LOG] Saving tensor n1_to_4_491.pt
[LOG] Saving tensor n2_to_3_491.pt
[LOG] Computing n2_to_2 (adjacency) for num 414
[LOG] Saving tensor n2_to_4_491.pt
[LOG] Saving tensor n3_to_4_491.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor global_feature_491.pt
[LOG] Process 61: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n3_to_3 (adjacency) for num 414
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n4_to_4 (coadjacency) for num 414
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n0_to_1 for num 414
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n0_to_2 for num 414
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_3 for num 414
[LOG] Computing n0_to_4 for num 414
[LOG] Computing n1_to_2 for num 414
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_3 for num 414
[LOG] Computing n1_to_4 for num 414
[LOG] Computing n2_to_3 for num 414
[LOG] Computing n2_to_4 for num 414
[LOG] Computing n3_to_4 for num 414
[LOG] Global feature for num 414
[LOG] Global feature for num 414
[LOG] Saving tensor x_0_414.pt
[LOG] Saving tensor x_1_414.pt
[LOG] Saving tensor x_2_414.pt
[LOG] Saving tensor x_3_414.pt
[LOG] Saving tensor x_4_414.pt
[LOG] Saving tensor n0_to_0_414.pt
[LOG] Saving tensor n1_to_1_414.pt
[LOG] Saving tensor n2_to_2_414.pt
[LOG] Saving tensor n3_to_3_414.pt
[LOG] Saving tensor n4_to_4_414.pt
[LOG] Saving tensor n0_to_1_414.pt
[LOG] Saving tensor n0_to_2_414.pt
[LOG] Saving tensor n0_to_3_414.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n0_to_4_414.pt
[LOG] Saving tensor n1_to_2_414.pt
[LOG] Saving tensor n1_to_3_414.pt
[LOG] Saving tensor n1_to_4_414.pt
[LOG] Saving tensor n2_to_3_414.pt
[LOG] Saving tensor n2_to_4_414.pt
[LOG] Saving tensor n3_to_4_414.pt
[LOG] Saving tensor global_feature_414.pt
[LOG] Process 51: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2307 Tetrahedra.
    [LOG] Generated 58 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.068965517241379
    [LOG] Max number of nodes per cluster is 41 and the number is 15
[LOG] Calculating for cell ranks 1 and 2
[LOG] We will select 365 edges and 2307 tetra
[LOG] Edges from tetra 0 and KDTree 365 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1330 Tetrahedra.
    [LOG] Generated 37 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.405405405405405
    [LOG] Max number of nodes per cluster is 33 and the number is 22
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 0 subset clusters.
[LOG] We will select 161 edges and 1330 tetra
[LOG] Edges from tetra 0 and KDTree 161 with 0 edges in common.
[LOG] Process 126: Created combinatorial complex for file data_989.hdf5
[LOG] Process 126: Calculating Neighbors
[LOG] Loading pickle file data_989.pickle
[LOG] Processing node features for num 989
[LOG] Processing edge features for num 989
[LOG] Processing tetra features for num 989
[LOG] Processing cluster features for num 989
[LOG] Processing cluster features for num 989
[LOG] Processing adjacency and incidence matrices for num 989
[LOG] Computing n0_to_0 for num 989
[LOG] Computing n1_to_1 for num 989
[LOG] Removed 0 subset clusters.
[LOG] Process 124: Created combinatorial complex for file data_978.hdf5
[LOG] Computing n2_to_2 (adjacency) for num 989
[LOG] GENERATED TETRA
[LOG] Process 124: Calculating Neighbors
[LOG] Loading pickle file data_978.pickle
[LOG] Processing node features for num 978
[LOG] Processing edge features for num 978
[LOG] Processing tetra features for num 978
[LOG] Processing cluster features for num 978
[LOG] Processing cluster features for num 978
[LOG] Processing adjacency and incidence matrices for num 978
[LOG] Computing n0_to_0 for num 978
[LOG] Computing n1_to_1 for num 978
[LOG] Computing n2_to_2 (adjacency) for num 978
[LOG] Computing n3_to_3 (adjacency) for num 989
[LOG] Computing n4_to_4 (coadjacency) for num 989
[LOG] Computing n0_to_1 for num 989
[LOG] Computing n0_to_2 for num 989
[LOG] Computing n3_to_3 (adjacency) for num 978
[LOG] Computing n4_to_4 (coadjacency) for num 978
[LOG] Computing n0_to_1 for num 978
[LOG] Computing n0_to_2 for num 978
[LOG] Computing n0_to_3 for num 978
[LOG] Computing n0_to_4 for num 978
[LOG] Computing n1_to_2 for num 978
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_3 for num 978
[LOG] Computing n1_to_4 for num 978
[LOG] Computing n2_to_3 for num 978
[LOG] Computing n2_to_4 for num 978
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_4 for num 978
[LOG] Global feature for num 978
[LOG] Global feature for num 978
[LOG] Saving tensor x_0_978.pt
[LOG] Saving tensor x_1_978.pt
[LOG] Saving tensor x_2_978.pt
[LOG] Saving tensor x_3_978.pt
[LOG] Saving tensor x_4_978.pt
[LOG] Saving tensor n0_to_0_978.pt
[LOG] Saving tensor n1_to_1_978.pt
[LOG] Saving tensor n2_to_2_978.pt
[LOG] Saving tensor n3_to_3_978.pt
[LOG] Saving tensor n4_to_4_978.pt
[LOG] Saving tensor n0_to_1_978.pt
[LOG] Saving tensor n0_to_2_978.pt
[LOG] Computing n0_to_3 for num 989
[LOG] Saving tensor n0_to_3_978.pt
[LOG] Saving tensor n0_to_4_978.pt
[LOG] Saving tensor n1_to_2_978.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n1_to_3_978.pt
[LOG] Saving tensor n1_to_4_978.pt
[LOG] Computing n0_to_4 for num 989
[LOG] Saving tensor n2_to_3_978.pt
[LOG] Saving tensor n2_to_4_978.pt
[LOG] Saving tensor n3_to_4_978.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor global_feature_978.pt
[LOG] Process 124: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_2 for num 989
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n1_to_3 for num 989
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] GENERATED TETRA
[LOG] Computing n1_to_4 for num 989
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n2_to_3 for num 989
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_4 for num 989
[LOG] Computing n3_to_4 for num 989
[LOG] Global feature for num 989
[LOG] Global feature for num 989
[LOG] Saving tensor x_0_989.pt
[LOG] Saving tensor x_1_989.pt
[LOG] Saving tensor x_2_989.pt
[LOG] Saving tensor x_3_989.pt
[LOG] Saving tensor x_4_989.pt
[LOG] Saving tensor n0_to_0_989.pt
[LOG] Saving tensor n1_to_1_989.pt
[LOG] Saving tensor n2_to_2_989.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n3_to_3_989.pt
[LOG] Saving tensor n4_to_4_989.pt
[LOG] Saving tensor n0_to_1_989.pt
[LOG] Saving tensor n0_to_2_989.pt
[LOG] Saving tensor n0_to_3_989.pt
[LOG] Saving tensor n0_to_4_989.pt
[LOG] Saving tensor n1_to_2_989.pt
[LOG] Saving tensor n1_to_3_989.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n1_to_4_989.pt
[LOG] Saving tensor n2_to_3_989.pt
[LOG] Saving tensor n2_to_4_989.pt
[LOG] Saving tensor n3_to_4_989.pt
[LOG] Saving tensor global_feature_989.pt
[LOG] Process 126: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 4172 Tetrahedra.
    [LOG] Generated 99 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.94949494949495
    [LOG] Max number of nodes per cluster is 65 and the number is 97
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 3033 Tetrahedra.
    [LOG] Generated 94 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.72340425531915
    [LOG] Max number of nodes per cluster is 40 and the number is 89
[LOG] We will select 1070 edges and 4172 tetra
[LOG] Edges from tetra 0 and KDTree 2556 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 4
[LOG] We will select 643 edges and 3033 tetra
[LOG] Edges from tetra 0 and KDTree 1039 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2540 Tetrahedra.
    [LOG] Generated 49 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 19.897959183673468
    [LOG] Max number of nodes per cluster is 148 and the number is 33
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] We will select 571 edges and 2540 tetra
[LOG] Edges from tetra 0 and KDTree 3514 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 60: Created combinatorial complex for file data_484.hdf5
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1672 Tetrahedra.
    [LOG] Generated 43 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.930232558139537
    [LOG] Max number of nodes per cluster is 104 and the number is 39
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 1 subset clusters.
[LOG] We will select 156 edges and 1672 tetra
[LOG] Edges from tetra 0 and KDTree 2598 with 0 edges in common.
[LOG] Process 60: Calculating Neighbors
[LOG] Loading pickle file data_484.pickle
[LOG] Processing node features for num 484
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing edge features for num 484
[LOG] Processing tetra features for num 484
[LOG] Removed 0 subset clusters.
[LOG] Processing cluster features for num 484
[LOG] Processing cluster features for num 484
[LOG] Processing adjacency and incidence matrices for num 484
[LOG] Computing n0_to_0 for num 484
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 6: Created combinatorial complex for file data_50.hdf5
[LOG] Process 88: Created combinatorial complex for file data_711.hdf5
[LOG] Computing n1_to_1 for num 484
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 88: Calculating Neighbors
[LOG] Loading pickle file data_711.pickle
[LOG] Processing node features for num 711
[LOG] Processing edge features for num 711
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing tetra features for num 711
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 6: Calculating Neighbors
[LOG] Loading pickle file data_50.pickle
[LOG] Processing node features for num 50
[LOG] Processing edge features for num 50
[LOG] Processing cluster features for num 711
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing cluster features for num 711
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing tetra features for num 50
[LOG] Processing adjacency and incidence matrices for num 711
[LOG] Computing n0_to_0 for num 711
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Processing cluster features for num 50
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 484
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Processing cluster features for num 50
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_1 for num 711
[LOG] Processing adjacency and incidence matrices for num 50
[LOG] Computing n0_to_0 for num 50
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 35: Created combinatorial complex for file data_287.hdf5
[LOG] Computing n1_to_1 for num 50
[LOG] Process 35: Calculating Neighbors
[LOG] Loading pickle file data_287.pickle
[LOG] Processing node features for num 287
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing edge features for num 287
[LOG] Processing tetra features for num 287
[LOG] Processing cluster features for num 287
[LOG] Processing cluster features for num 287
[LOG] Computing n2_to_2 (adjacency) for num 711
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing adjacency and incidence matrices for num 287
[LOG] Computing n0_to_0 for num 287
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n3_to_3 (adjacency) for num 484
[LOG] Computing n1_to_1 for num 287
[LOG] Computing n4_to_4 (coadjacency) for num 484
[LOG] Computing n0_to_1 for num 484
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_2 (adjacency) for num 287
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_2 for num 484
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_3 (adjacency) for num 287
[LOG] Computing n4_to_4 (coadjacency) for num 287
[LOG] Computing n0_to_1 for num 287
[LOG] Computing n0_to_2 for num 287
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n3_to_3 (adjacency) for num 711
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n4_to_4 (coadjacency) for num 711
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Computing n0_to_1 for num 711
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_2 for num 711
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_3 for num 287
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_4 for num 287
[LOG] Computing n1_to_2 for num 287
[LOG] Computing n1_to_3 for num 287
[LOG] Computing n1_to_4 for num 287
[LOG] Computing n2_to_3 for num 287
[LOG] Computing n2_to_2 (adjacency) for num 50
[LOG] Computing n2_to_4 for num 287
[LOG] Computing n0_to_3 for num 484
[LOG] GENERATED TETRA
[LOG] Computing n3_to_4 for num 287
[LOG] Global feature for num 287
[LOG] Global feature for num 287
[LOG] Saving tensor x_0_287.pt
[LOG] Computing n0_to_4 for num 484
[LOG] Saving tensor x_1_287.pt
[LOG] Saving tensor x_2_287.pt
[LOG] Saving tensor x_3_287.pt
[LOG] Saving tensor x_4_287.pt
[LOG] Saving tensor n0_to_0_287.pt
[LOG] Saving tensor n1_to_1_287.pt
[LOG] Saving tensor n2_to_2_287.pt
[LOG] Saving tensor n3_to_3_287.pt
[LOG] Computing n1_to_2 for num 484
[LOG] Saving tensor n4_to_4_287.pt
[LOG] Saving tensor n0_to_1_287.pt
[LOG] Saving tensor n0_to_2_287.pt
[LOG] Saving tensor n0_to_3_287.pt
[LOG] Saving tensor n0_to_4_287.pt
[LOG] Saving tensor n1_to_2_287.pt
[LOG] Saving tensor n1_to_3_287.pt
[LOG] Saving tensor n1_to_4_287.pt
[LOG] Saving tensor n2_to_3_287.pt
[LOG] Saving tensor n2_to_4_287.pt
[LOG] Saving tensor n3_to_4_287.pt
[LOG] Saving tensor global_feature_287.pt
[LOG] Process 35: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1051 Tetrahedra.
    [LOG] Generated 33 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.090909090909092
    [LOG] Max number of nodes per cluster is 32 and the number is 14
[LOG] We will select 224 edges and 1051 tetra
[LOG] Edges from tetra 0 and KDTree 224 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] Computing n0_to_3 for num 711
[LOG] Computing n0_to_4 for num 711
[LOG] Removed 2 subset clusters.
[LOG] Computing n1_to_3 for num 484
[LOG] Computing n1_to_4 for num 484
[LOG] Computing n1_to_2 for num 711
[LOG] Computing n2_to_3 for num 484
[LOG] Process 59: Created combinatorial complex for file data_478.hdf5
[LOG] Calculating for cell ranks 0 and 3
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1604 Tetrahedra.
    [LOG] Generated 56 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.732142857142858
    [LOG] Max number of nodes per cluster is 59 and the number is 18
[LOG] Computing n2_to_4 for num 484
[LOG] Process 59: Calculating Neighbors
[LOG] Loading pickle file data_478.pickle
[LOG] Processing node features for num 478
[LOG] Processing edge features for num 478
[LOG] Processing tetra features for num 478
[LOG] We will select 388 edges and 1604 tetra
[LOG] Edges from tetra 0 and KDTree 444 with 0 edges in common.
[LOG] Computing n3_to_4 for num 484
[LOG] Processing cluster features for num 478
[LOG] Global feature for num 484
[LOG] Calculating for cell ranks 0 and 1
[LOG] Global feature for num 484
[LOG] Saving tensor x_0_484.pt
[LOG] Saving tensor x_1_484.pt
[LOG] Saving tensor x_2_484.pt
[LOG] Processing cluster features for num 478
[LOG] Saving tensor x_3_484.pt
[LOG] Saving tensor x_4_484.pt
[LOG] Saving tensor n0_to_0_484.pt
[LOG] Saving tensor n1_to_1_484.pt
[LOG] Processing adjacency and incidence matrices for num 478
[LOG] Computing n0_to_0 for num 478
[LOG] Saving tensor n2_to_2_484.pt
[LOG] Saving tensor n3_to_3_484.pt
[LOG] Saving tensor n4_to_4_484.pt
[LOG] Saving tensor n0_to_1_484.pt
[LOG] Saving tensor n0_to_2_484.pt
[LOG] Saving tensor n0_to_3_484.pt
[LOG] Computing n1_to_1 for num 478
[LOG] Saving tensor n0_to_4_484.pt
[LOG] Saving tensor n1_to_2_484.pt
[LOG] Saving tensor n1_to_3_484.pt
[LOG] Saving tensor n1_to_4_484.pt
[LOG] Saving tensor n2_to_3_484.pt
[LOG] Saving tensor n2_to_4_484.pt
[LOG] Saving tensor n3_to_4_484.pt
[LOG] Saving tensor global_feature_484.pt
[LOG] Process 60: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n2_to_2 (adjacency) for num 478
[LOG] Computing n3_to_3 (adjacency) for num 478
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n4_to_4 (coadjacency) for num 478
[LOG] Computing n0_to_1 for num 478
[LOG] Computing n0_to_2 for num 478
[LOG] Computing n1_to_3 for num 711
[LOG] Computing n1_to_4 for num 711
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_3 for num 711
[LOG] Computing n3_to_3 (adjacency) for num 50
[LOG] Computing n2_to_4 for num 711
[LOG] Computing n4_to_4 (coadjacency) for num 50
[LOG] Computing n0_to_3 for num 478
[LOG] Computing n0_to_1 for num 50
[LOG] Computing n0_to_4 for num 478
[LOG] Computing n1_to_2 for num 478
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_4 for num 711
[LOG] Global feature for num 711
[LOG] Global feature for num 711
[LOG] Saving tensor x_0_711.pt
[LOG] Saving tensor x_1_711.pt
[LOG] Saving tensor x_2_711.pt
[LOG] Saving tensor x_3_711.pt
[LOG] Saving tensor x_4_711.pt
[LOG] Saving tensor n0_to_0_711.pt
[LOG] Saving tensor n1_to_1_711.pt
[LOG] Saving tensor n2_to_2_711.pt
[LOG] Computing n1_to_3 for num 478
[LOG] Computing n1_to_4 for num 478
[LOG] Computing n2_to_3 for num 478
[LOG] Saving tensor n3_to_3_711.pt
[LOG] Computing n2_to_4 for num 478
[LOG] Saving tensor n4_to_4_711.pt
[LOG] Saving tensor n0_to_1_711.pt
[LOG] Computing n3_to_4 for num 478
[LOG] Saving tensor n0_to_2_711.pt
[LOG] Global feature for num 478
[LOG] Global feature for num 478
[LOG] Saving tensor x_0_478.pt
[LOG] Saving tensor n0_to_3_711.pt
[LOG] Saving tensor x_1_478.pt
[LOG] Saving tensor x_2_478.pt
[LOG] Saving tensor n0_to_4_711.pt
[LOG] Saving tensor x_3_478.pt
[LOG] Saving tensor n1_to_2_711.pt
[LOG] Saving tensor x_4_478.pt
[LOG] Saving tensor n0_to_0_478.pt
[LOG] Saving tensor n1_to_3_711.pt
[LOG] Saving tensor n1_to_4_711.pt
[LOG] Saving tensor n1_to_1_478.pt
[LOG] Saving tensor n2_to_3_711.pt
[LOG] Saving tensor n2_to_2_478.pt
[LOG] Saving tensor n2_to_4_711.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n3_to_3_478.pt
[LOG] Saving tensor n4_to_4_478.pt
[LOG] Saving tensor n3_to_4_711.pt
[LOG] Saving tensor n0_to_1_478.pt
[LOG] Saving tensor global_feature_711.pt
[LOG] Process 88: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_2_478.pt
[LOG] Saving tensor n0_to_3_478.pt
[LOG] Saving tensor n0_to_4_478.pt
[LOG] Saving tensor n1_to_2_478.pt
[LOG] Saving tensor n1_to_3_478.pt
[LOG] Saving tensor n1_to_4_478.pt
[LOG] Saving tensor n2_to_3_478.pt
[LOG] Saving tensor n2_to_4_478.pt
[LOG] Saving tensor n3_to_4_478.pt
[LOG] Saving tensor global_feature_478.pt
[LOG] Process 59: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_2 for num 50
[LOG] Process 115: Created combinatorial complex for file data_914.hdf5
[LOG] GENERATED TETRA
[LOG] Process 115: Calculating Neighbors
[LOG] Loading pickle file data_914.pickle
[LOG] Processing node features for num 914
[LOG] Processing edge features for num 914
[LOG] Processing tetra features for num 914
[LOG] Processing cluster features for num 914
[LOG] Processing cluster features for num 914
[LOG] Processing adjacency and incidence matrices for num 914
[LOG] Computing n0_to_0 for num 914
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_1 for num 914
[LOG] Computing n2_to_2 (adjacency) for num 914
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_3 (adjacency) for num 914
[LOG] Computing n4_to_4 (coadjacency) for num 914
[LOG] Computing n0_to_1 for num 914
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1973 Tetrahedra.
    [LOG] Generated 59 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.305084745762711
    [LOG] Max number of nodes per cluster is 43 and the number is 40
[LOG] Computing n0_to_2 for num 914
[LOG] We will select 782 edges and 1973 tetra
[LOG] Edges from tetra 0 and KDTree 782 with 0 edges in common.
[LOG] Computing n0_to_3 for num 914
[LOG] Computing n0_to_4 for num 914
[LOG] Computing n1_to_2 for num 914
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n1_to_3 for num 914
[LOG] Computing n1_to_4 for num 914
[LOG] Computing n2_to_3 for num 914
[LOG] Computing n2_to_4 for num 914
[LOG] Computing n3_to_4 for num 914
[LOG] Global feature for num 914
[LOG] Global feature for num 914
[LOG] Saving tensor x_0_914.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor x_1_914.pt
[LOG] Saving tensor x_2_914.pt
[LOG] Saving tensor x_3_914.pt
[LOG] Saving tensor x_4_914.pt
[LOG] Saving tensor n0_to_0_914.pt
[LOG] Saving tensor n1_to_1_914.pt
[LOG] Saving tensor n2_to_2_914.pt
[LOG] Saving tensor n3_to_3_914.pt
[LOG] Saving tensor n4_to_4_914.pt
[LOG] Saving tensor n0_to_1_914.pt
[LOG] Saving tensor n0_to_2_914.pt
[LOG] Saving tensor n0_to_3_914.pt
[LOG] Saving tensor n0_to_4_914.pt
[LOG] Saving tensor n1_to_2_914.pt
[LOG] Saving tensor n1_to_3_914.pt
[LOG] Computing n0_to_3 for num 50
[LOG] Saving tensor n1_to_4_914.pt
[LOG] Saving tensor n2_to_3_914.pt
[LOG] Saving tensor n2_to_4_914.pt
[LOG] Saving tensor n3_to_4_914.pt
[LOG] Saving tensor global_feature_914.pt
[LOG] Process 115: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_4 for num 50
[LOG] Computing n1_to_2 for num 50
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 110: Created combinatorial complex for file data_877.hdf5
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 110: Calculating Neighbors
[LOG] Loading pickle file data_877.pickle
[LOG] Processing node features for num 877
[LOG] Processing edge features for num 877
[LOG] Processing tetra features for num 877
[LOG] Processing cluster features for num 877
[LOG] Processing cluster features for num 877
[LOG] Processing adjacency and incidence matrices for num 877
[LOG] Computing n0_to_0 for num 877
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n1_to_1 for num 877
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_3 for num 50
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_4 for num 50
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_3 for num 50
[LOG] Computing n2_to_2 (adjacency) for num 877
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n2_to_4 for num 50
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n3_to_3 (adjacency) for num 877
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n4_to_4 (coadjacency) for num 877
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n0_to_1 for num 877
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n3_to_4 for num 50
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Global feature for num 50
[LOG] Global feature for num 50
[LOG] Saving tensor x_0_50.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor x_1_50.pt
[LOG] Saving tensor x_2_50.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor x_3_50.pt
[LOG] Saving tensor x_4_50.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n0_to_0_50.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n1_to_1_50.pt
[LOG] Saving tensor n2_to_2_50.pt
[LOG] Saving tensor n3_to_3_50.pt
[LOG] Saving tensor n4_to_4_50.pt
[LOG] Computing n0_to_2 for num 877
[LOG] Saving tensor n0_to_1_50.pt
[LOG] Saving tensor n0_to_2_50.pt
[LOG] Saving tensor n0_to_3_50.pt
[LOG] Saving tensor n0_to_4_50.pt
[LOG] Saving tensor n1_to_2_50.pt
[LOG] Saving tensor n1_to_3_50.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n1_to_4_50.pt
[LOG] Saving tensor n2_to_3_50.pt
[LOG] Saving tensor n2_to_4_50.pt
[LOG] Saving tensor n3_to_4_50.pt
[LOG] Saving tensor global_feature_50.pt
[LOG] Process 6: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 877
[LOG] Computing n0_to_4 for num 877
[LOG] Computing n1_to_2 for num 877
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_3 for num 877
[LOG] Computing n1_to_4 for num 877
[LOG] Computing n2_to_3 for num 877
[LOG] Computing n2_to_4 for num 877
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_4 for num 877
[LOG] Global feature for num 877
[LOG] Global feature for num 877
[LOG] Saving tensor x_0_877.pt
[LOG] Saving tensor x_1_877.pt
[LOG] Saving tensor x_2_877.pt
[LOG] Saving tensor x_3_877.pt
[LOG] Saving tensor x_4_877.pt
[LOG] Saving tensor n0_to_0_877.pt
[LOG] Saving tensor n1_to_1_877.pt
[LOG] Saving tensor n2_to_2_877.pt
[LOG] Saving tensor n3_to_3_877.pt
[LOG] Saving tensor n4_to_4_877.pt
[LOG] Saving tensor n0_to_1_877.pt
[LOG] Saving tensor n0_to_2_877.pt
[LOG] Saving tensor n0_to_3_877.pt
[LOG] Saving tensor n0_to_4_877.pt
[LOG] Saving tensor n1_to_2_877.pt
[LOG] Saving tensor n1_to_3_877.pt
[LOG] Saving tensor n1_to_4_877.pt
[LOG] Saving tensor n2_to_3_877.pt
[LOG] Saving tensor n2_to_4_877.pt
[LOG] Saving tensor n3_to_4_877.pt
[LOG] Saving tensor global_feature_877.pt
[LOG] Process 110: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2460 Tetrahedra.
    [LOG] Generated 73 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.821917808219178
    [LOG] Max number of nodes per cluster is 50 and the number is 2
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1572 Tetrahedra.
    [LOG] Generated 53 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 10.320754716981131
    [LOG] Max number of nodes per cluster is 30 and the number is 46
[LOG] We will select 609 edges and 2460 tetra
[LOG] Edges from tetra 0 and KDTree 1226 with 0 edges in common.
[LOG] We will select 335 edges and 1572 tetra
[LOG] Edges from tetra 0 and KDTree 442 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 81: Created combinatorial complex for file data_654.hdf5
[LOG] Calculating for cell ranks 3 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Process 81: Calculating Neighbors
[LOG] Loading pickle file data_654.pickle
[LOG] Processing node features for num 654
[LOG] Processing edge features for num 654
[LOG] Processing tetra features for num 654
[LOG] Process 16: Created combinatorial complex for file data_132.hdf5
[LOG] Processing cluster features for num 654
[LOG] Processing cluster features for num 654
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Processing adjacency and incidence matrices for num 654
[LOG] Computing n0_to_0 for num 654
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n1_to_1 for num 654
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 654
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Process 16: Calculating Neighbors
[LOG] Calculating for cell ranks 2 and 4
[LOG] Loading pickle file data_132.pickle
[LOG] Processing node features for num 132
[LOG] Processing edge features for num 132
[LOG] Processing tetra features for num 132
[LOG] Computing n3_to_3 (adjacency) for num 654
[LOG] Computing n4_to_4 (coadjacency) for num 654
[LOG] Computing n0_to_1 for num 654
[LOG] Processing cluster features for num 132
[LOG] Computing n0_to_2 for num 654
[LOG] Processing cluster features for num 132
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing adjacency and incidence matrices for num 132
[LOG] Computing n0_to_0 for num 132
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_1 for num 132
[LOG] Computing n0_to_3 for num 654
[LOG] Computing n0_to_4 for num 654
[LOG] Computing n1_to_2 for num 654
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_3 for num 654
[LOG] Computing n1_to_4 for num 654
[LOG] Computing n2_to_3 for num 654
[LOG] Computing n2_to_4 for num 654
[LOG] Computing n3_to_4 for num 654
[LOG] Global feature for num 654
[LOG] Global feature for num 654
[LOG] Saving tensor x_0_654.pt
[LOG] Saving tensor x_1_654.pt
[LOG] Saving tensor x_2_654.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor x_3_654.pt
[LOG] Saving tensor x_4_654.pt
[LOG] Computing n2_to_2 (adjacency) for num 132
[LOG] Saving tensor n0_to_0_654.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n1_to_1_654.pt
[LOG] Saving tensor n2_to_2_654.pt
[LOG] Computing n3_to_3 (adjacency) for num 132
[LOG] Computing n4_to_4 (coadjacency) for num 132
[LOG] Computing n0_to_1 for num 132
[LOG] Saving tensor n3_to_3_654.pt
[LOG] Saving tensor n4_to_4_654.pt
[LOG] Saving tensor n0_to_1_654.pt
[LOG] Computing n0_to_2 for num 132
[LOG] Saving tensor n0_to_2_654.pt
[LOG] Saving tensor n0_to_3_654.pt
[LOG] Saving tensor n0_to_4_654.pt
[LOG] Saving tensor n1_to_2_654.pt
[LOG] Saving tensor n1_to_3_654.pt
[LOG] Saving tensor n1_to_4_654.pt
[LOG] Saving tensor n2_to_3_654.pt
[LOG] Saving tensor n2_to_4_654.pt
[LOG] Saving tensor n3_to_4_654.pt
[LOG] Saving tensor global_feature_654.pt
[LOG] Process 81: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_3 for num 132
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_4 for num 132
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_2 for num 132
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 1454 Tetrahedra.
    [LOG] Generated 47 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.553191489361701
    [LOG] Max number of nodes per cluster is 27 and the number is 43
[LOG] Computing n1_to_3 for num 132
[LOG] Computing n1_to_4 for num 132
[LOG] We will select 232 edges and 1454 tetra
[LOG] Edges from tetra 0 and KDTree 1362 with 0 edges in common.
[LOG] Computing n2_to_3 for num 132
[LOG] Computing n2_to_4 for num 132
[LOG] Computing n3_to_4 for num 132
[LOG] Global feature for num 132
[LOG] Global feature for num 132
[LOG] Saving tensor x_0_132.pt
[LOG] Saving tensor x_1_132.pt
[LOG] Saving tensor x_2_132.pt
[LOG] Saving tensor x_3_132.pt
[LOG] Saving tensor x_4_132.pt
[LOG] Saving tensor n0_to_0_132.pt
[LOG] Saving tensor n1_to_1_132.pt
[LOG] Saving tensor n2_to_2_132.pt
[LOG] Saving tensor n3_to_3_132.pt
[LOG] Saving tensor n4_to_4_132.pt
[LOG] Saving tensor n0_to_1_132.pt
[LOG] Saving tensor n0_to_2_132.pt
[LOG] Saving tensor n0_to_3_132.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n0_to_4_132.pt
[LOG] Saving tensor n1_to_2_132.pt
[LOG] Saving tensor n1_to_3_132.pt
[LOG] Saving tensor n1_to_4_132.pt
[LOG] Saving tensor n2_to_3_132.pt
[LOG] Saving tensor n2_to_4_132.pt
[LOG] Saving tensor n3_to_4_132.pt
[LOG] Saving tensor global_feature_132.pt
[LOG] Process 16: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Process 55: Created combinatorial complex for file data_447.hdf5
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Process 55: Calculating Neighbors
[LOG] Loading pickle file data_447.pickle
[LOG] Processing node features for num 447
[LOG] Processing edge features for num 447
[LOG] Processing tetra features for num 447
[LOG] Processing cluster features for num 447
[LOG] Processing cluster features for num 447
[LOG] Processing adjacency and incidence matrices for num 447
[LOG] Computing n0_to_0 for num 447
[LOG] Computing n1_to_1 for num 447
[LOG] Computing n2_to_2 (adjacency) for num 447
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_3 (adjacency) for num 447
[LOG] Computing n4_to_4 (coadjacency) for num 447
[LOG] Computing n0_to_1 for num 447
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 6149 Tetrahedra.
    [LOG] Generated 134 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.917910447761194
    [LOG] Max number of nodes per cluster is 140 and the number is 112
[LOG] Computing n0_to_2 for num 447
[LOG] Computing n0_to_3 for num 447
[LOG] Computing n0_to_4 for num 447
[LOG] Computing n1_to_2 for num 447
[LOG] Computing n1_to_3 for num 447
[LOG] Computing n1_to_4 for num 447
[LOG] Computing n2_to_3 for num 447
[LOG] We will select 1398 edges and 6149 tetra
[LOG] Edges from tetra 0 and KDTree 3847 with 0 edges in common.
[LOG] Computing n2_to_4 for num 447
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n3_to_4 for num 447
[LOG] Global feature for num 447
[LOG] Global feature for num 447
[LOG] Saving tensor x_0_447.pt
[LOG] Saving tensor x_1_447.pt
[LOG] Saving tensor x_2_447.pt
[LOG] Saving tensor x_3_447.pt
[LOG] Saving tensor x_4_447.pt
[LOG] Saving tensor n0_to_0_447.pt
[LOG] Saving tensor n1_to_1_447.pt
[LOG] Saving tensor n2_to_2_447.pt
[LOG] Saving tensor n3_to_3_447.pt
[LOG] Saving tensor n4_to_4_447.pt
[LOG] Saving tensor n0_to_1_447.pt
[LOG] Saving tensor n0_to_2_447.pt
[LOG] Saving tensor n0_to_3_447.pt
[LOG] Saving tensor n0_to_4_447.pt
[LOG] Saving tensor n1_to_2_447.pt
[LOG] Saving tensor n1_to_3_447.pt
[LOG] Saving tensor n1_to_4_447.pt
[LOG] Saving tensor n2_to_3_447.pt
[LOG] Saving tensor n2_to_4_447.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n3_to_4_447.pt
[LOG] Saving tensor global_feature_447.pt
[LOG] Process 55: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 4 subset clusters.

    [LOG] We Currently have 1018 Tetrahedra.
    [LOG] Generated 35 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.971428571428572
    [LOG] Max number of nodes per cluster is 45 and the number is 8
[LOG] We will select 220 edges and 1018 tetra
[LOG] Edges from tetra 0 and KDTree 303 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 4 subset clusters.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 123: Created combinatorial complex for file data_971.hdf5
[LOG] Process 123: Calculating Neighbors
[LOG] Loading pickle file data_971.pickle
[LOG] Processing node features for num 971
[LOG] Processing edge features for num 971
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing tetra features for num 971
[LOG] Processing cluster features for num 971
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 971
[LOG] Processing adjacency and incidence matrices for num 971
[LOG] Computing n0_to_0 for num 971
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_1 for num 971
[LOG] Computing n2_to_2 (adjacency) for num 971
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_3 (adjacency) for num 971
[LOG] Computing n4_to_4 (coadjacency) for num 971
[LOG] Computing n0_to_1 for num 971
[LOG] Computing n0_to_2 for num 971
[LOG] Computing n0_to_3 for num 971
[LOG] Computing n0_to_4 for num 971
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_2 for num 971
[LOG] Computing n1_to_3 for num 971
[LOG] Computing n1_to_4 for num 971
[LOG] Computing n2_to_3 for num 971
[LOG] Computing n2_to_4 for num 971
[LOG] Computing n3_to_4 for num 971
[LOG] Global feature for num 971
[LOG] Global feature for num 971
[LOG] Saving tensor x_0_971.pt
[LOG] Saving tensor x_1_971.pt
[LOG] Saving tensor x_2_971.pt
[LOG] Saving tensor x_3_971.pt
[LOG] Saving tensor x_4_971.pt
[LOG] Saving tensor n0_to_0_971.pt
[LOG] Saving tensor n1_to_1_971.pt
[LOG] Saving tensor n2_to_2_971.pt
[LOG] Saving tensor n3_to_3_971.pt
[LOG] Saving tensor n4_to_4_971.pt
[LOG] Saving tensor n0_to_1_971.pt
[LOG] Saving tensor n0_to_2_971.pt
[LOG] Saving tensor n0_to_3_971.pt
[LOG] Saving tensor n0_to_4_971.pt
[LOG] Saving tensor n1_to_2_971.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n1_to_3_971.pt
[LOG] Saving tensor n1_to_4_971.pt
[LOG] Saving tensor n2_to_3_971.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n2_to_4_971.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n3_to_4_971.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor global_feature_971.pt
[LOG] Process 123: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 40: Created combinatorial complex for file data_322.hdf5
[LOG] Process 40: Calculating Neighbors
[LOG] Loading pickle file data_322.pickle
[LOG] Processing node features for num 322
[LOG] Processing edge features for num 322
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing tetra features for num 322
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing cluster features for num 322
[LOG] Processing cluster features for num 322
[LOG] Processing adjacency and incidence matrices for num 322
[LOG] Computing n0_to_0 for num 322
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_1 for num 322
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_2 (adjacency) for num 322
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2912 Tetrahedra.
    [LOG] Generated 80 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.9375
    [LOG] Max number of nodes per cluster is 52 and the number is 24
[LOG] Calculating for cell ranks 2 and 2
[LOG] We will select 1446 edges and 2912 tetra
[LOG] Edges from tetra 0 and KDTree 1446 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1806 Tetrahedra.
    [LOG] Generated 48 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.770833333333332
    [LOG] Max number of nodes per cluster is 60 and the number is 19
[LOG] Calculating for cell ranks 1 and 3
[LOG] We will select 334 edges and 1806 tetra
[LOG] Edges from tetra 0 and KDTree 2290 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 66: Created combinatorial complex for file data_533.hdf5
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 66: Calculating Neighbors
[LOG] Loading pickle file data_533.pickle
[LOG] Processing node features for num 533
[LOG] Processing edge features for num 533
[LOG] Processing tetra features for num 533
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Processing cluster features for num 533
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Processing cluster features for num 533
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Removed 1 subset clusters.
[LOG] Processing adjacency and incidence matrices for num 533
[LOG] Computing n0_to_0 for num 533
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_1 for num 533
[LOG] Computing n2_to_2 (adjacency) for num 533
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_3 (adjacency) for num 533
[LOG] Computing n4_to_4 (coadjacency) for num 533
[LOG] Computing n0_to_1 for num 533
[LOG] Process 98: Created combinatorial complex for file data_788.hdf5
[LOG] Computing n0_to_2 for num 533
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_3 (adjacency) for num 322
[LOG] Computing n4_to_4 (coadjacency) for num 322
[LOG] Process 98: Calculating Neighbors
[LOG] Loading pickle file data_788.pickle
[LOG] Processing node features for num 788
[LOG] Computing n0_to_1 for num 322
[LOG] Processing edge features for num 788
[LOG] Processing tetra features for num 788
[LOG] Processing cluster features for num 788
[LOG] Processing cluster features for num 788
[LOG] Processing adjacency and incidence matrices for num 788
[LOG] Computing n0_to_0 for num 788
[LOG] Computing n1_to_1 for num 788
[LOG] Computing n0_to_3 for num 533
[LOG] Computing n0_to_4 for num 533
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_2 for num 533
[LOG] Computing n0_to_2 for num 322
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_3 for num 533
[LOG] Computing n1_to_4 for num 533
[LOG] Computing n2_to_3 for num 533
[LOG] Computing n2_to_4 for num 533
[LOG] Computing n3_to_4 for num 533
[LOG] Global feature for num 533
[LOG] Global feature for num 533
[LOG] Saving tensor x_0_533.pt
[LOG] Saving tensor x_1_533.pt
[LOG] Saving tensor x_2_533.pt
[LOG] Saving tensor x_3_533.pt
[LOG] Saving tensor x_4_533.pt
[LOG] Saving tensor n0_to_0_533.pt
[LOG] Saving tensor n1_to_1_533.pt
[LOG] Saving tensor n2_to_2_533.pt
[LOG] Saving tensor n3_to_3_533.pt
[LOG] Saving tensor n4_to_4_533.pt
[LOG] Saving tensor n0_to_1_533.pt
[LOG] Saving tensor n0_to_2_533.pt
[LOG] Saving tensor n0_to_3_533.pt
[LOG] Saving tensor n0_to_4_533.pt
[LOG] Saving tensor n1_to_2_533.pt
[LOG] Saving tensor n1_to_3_533.pt
[LOG] Saving tensor n1_to_4_533.pt
[LOG] Saving tensor n2_to_3_533.pt
[LOG] Saving tensor n2_to_4_533.pt
[LOG] Saving tensor n3_to_4_533.pt
[LOG] Saving tensor global_feature_533.pt
[LOG] Process 66: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 5 subset clusters.

    [LOG] We Currently have 1734 Tetrahedra.
    [LOG] Generated 54 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.148148148148149
    [LOG] Max number of nodes per cluster is 33 and the number is 17
[LOG] Computing n2_to_2 (adjacency) for num 788
[LOG] We will select 299 edges and 1734 tetra
[LOG] Edges from tetra 0 and KDTree 360 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] GENERATED TETRA
[LOG] Computing n3_to_3 (adjacency) for num 788
[LOG] Computing n4_to_4 (coadjacency) for num 788
[LOG] Computing n0_to_1 for num 788
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1487 Tetrahedra.
    [LOG] Generated 56 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 10.964285714285714
    [LOG] Max number of nodes per cluster is 22 and the number is 33
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2112 Tetrahedra.
    [LOG] Generated 82 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.548780487804878
    [LOG] Max number of nodes per cluster is 40 and the number is 8
[LOG] We will select 278 edges and 1487 tetra
[LOG] Edges from tetra 0 and KDTree 468 with 0 edges in common.
[LOG] Computing n0_to_2 for num 788
[LOG] Calculating for cell ranks 2 and 4
[LOG] We will select 503 edges and 2112 tetra
[LOG] Edges from tetra 0 and KDTree 686 with 0 edges in common.
[LOG] Removed 2 subset clusters.
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 0 subset clusters.
[LOG] Process 122: Created combinatorial complex for file data_964.hdf5
[LOG] Computing n0_to_3 for num 788
[LOG] Computing n0_to_4 for num 788
[LOG] Process 122: Calculating Neighbors
[LOG] Process 84: Created combinatorial complex for file data_679.hdf5
[LOG] Loading pickle file data_964.pickle
[LOG] Processing node features for num 964
[LOG] Processing edge features for num 964
[LOG] Computing n1_to_2 for num 788
[LOG] Processing tetra features for num 964
[LOG] Processing cluster features for num 964
[LOG] Processing cluster features for num 964
[LOG] Process 84: Calculating Neighbors
[LOG] Loading pickle file data_679.pickle
[LOG] Processing node features for num 679
[LOG] Processing adjacency and incidence matrices for num 964
[LOG] Computing n0_to_0 for num 964
[LOG] Processing edge features for num 679
[LOG] Processing tetra features for num 679
[LOG] Computing n1_to_1 for num 964
[LOG] Processing cluster features for num 679
[LOG] Processing cluster features for num 679
[LOG] Processing adjacency and incidence matrices for num 679
[LOG] Computing n0_to_0 for num 679
[LOG] Computing n1_to_1 for num 679
[LOG] Removed 2 subset clusters.
[LOG] Computing n2_to_2 (adjacency) for num 964
[LOG] Computing n0_to_3 for num 322
[LOG] Computing n2_to_2 (adjacency) for num 679
[LOG] Computing n3_to_3 (adjacency) for num 964
[LOG] Computing n4_to_4 (coadjacency) for num 964
[LOG] Computing n0_to_1 for num 964
[LOG] Computing n0_to_4 for num 322
[LOG] Computing n3_to_3 (adjacency) for num 679
[LOG] Computing n0_to_2 for num 964
[LOG] Computing n4_to_4 (coadjacency) for num 679
[LOG] Computing n0_to_1 for num 679
[LOG] Computing n0_to_2 for num 679
[LOG] Computing n1_to_2 for num 322
[LOG] Process 17: Created combinatorial complex for file data_143.hdf5
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1051 Tetrahedra.
    [LOG] Generated 22 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 21.09090909090909
    [LOG] Max number of nodes per cluster is 87 and the number is 10
[LOG] We will select 224 edges and 1051 tetra
[LOG] Edges from tetra 0 and KDTree 2256 with 0 edges in common.
[LOG] Computing n0_to_3 for num 964
[LOG] Computing n0_to_4 for num 964
[LOG] Process 17: Calculating Neighbors
[LOG] Loading pickle file data_143.pickle
[LOG] Processing node features for num 143
[LOG] Computing n1_to_2 for num 964
[LOG] Processing edge features for num 143
[LOG] Processing tetra features for num 143
[LOG] Computing n0_to_3 for num 679
[LOG] Computing n0_to_4 for num 679
[LOG] Computing n1_to_2 for num 679
[LOG] Processing cluster features for num 143
[LOG] Processing cluster features for num 143
[LOG] Computing n1_to_3 for num 964
[LOG] Processing adjacency and incidence matrices for num 143
[LOG] Computing n0_to_0 for num 143
[LOG] Computing n1_to_4 for num 964
[LOG] Computing n2_to_3 for num 964
[LOG] Computing n2_to_4 for num 964
[LOG] Computing n1_to_3 for num 679
[LOG] Computing n1_to_4 for num 679
[LOG] Computing n2_to_3 for num 679
[LOG] Removed 0 subset clusters.
[LOG] Computing n3_to_4 for num 964
[LOG] Global feature for num 964
[LOG] Global feature for num 964
[LOG] Saving tensor x_0_964.pt
[LOG] Saving tensor x_1_964.pt
[LOG] Computing n1_to_1 for num 143
[LOG] Computing n2_to_4 for num 679
[LOG] Saving tensor x_2_964.pt
[LOG] Saving tensor x_3_964.pt
[LOG] Saving tensor x_4_964.pt
[LOG] Saving tensor n0_to_0_964.pt
[LOG] Saving tensor n1_to_1_964.pt
[LOG] Saving tensor n2_to_2_964.pt
[LOG] Saving tensor n3_to_3_964.pt
[LOG] Saving tensor n4_to_4_964.pt
[LOG] Computing n3_to_4 for num 679
[LOG] Saving tensor n0_to_1_964.pt
[LOG] Global feature for num 679
[LOG] Global feature for num 679
[LOG] Saving tensor x_0_679.pt
[LOG] Saving tensor n0_to_2_964.pt
[LOG] Saving tensor x_1_679.pt
[LOG] Saving tensor n0_to_3_964.pt
[LOG] Saving tensor x_2_679.pt
[LOG] Saving tensor n0_to_4_964.pt
[LOG] Saving tensor x_3_679.pt
[LOG] Saving tensor x_4_679.pt
[LOG] Saving tensor n1_to_2_964.pt
[LOG] Saving tensor n0_to_0_679.pt
[LOG] Saving tensor n1_to_3_964.pt
[LOG] Saving tensor n1_to_1_679.pt
[LOG] Saving tensor n1_to_4_964.pt
[LOG] Saving tensor n2_to_2_679.pt
[LOG] Saving tensor n2_to_3_964.pt
[LOG] Saving tensor n3_to_3_679.pt
[LOG] Saving tensor n2_to_4_964.pt
[LOG] Saving tensor n4_to_4_679.pt
[LOG] Saving tensor n3_to_4_964.pt
[LOG] Process 59: Created combinatorial complex for file data_479.hdf5
[LOG] Saving tensor n0_to_1_679.pt
[LOG] Saving tensor global_feature_964.pt
[LOG] Process 122: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_2_679.pt
[LOG] Saving tensor n0_to_3_679.pt
[LOG] Saving tensor n0_to_4_679.pt
[LOG] Computing n1_to_3 for num 788
[LOG] Saving tensor n1_to_2_679.pt
[LOG] Computing n1_to_4 for num 788
[LOG] Saving tensor n1_to_3_679.pt
[LOG] Saving tensor n1_to_4_679.pt
[LOG] Saving tensor n2_to_3_679.pt
[LOG] Saving tensor n2_to_4_679.pt
[LOG] Process 59: Calculating Neighbors
[LOG] Saving tensor n3_to_4_679.pt
[LOG] Loading pickle file data_479.pickle
[LOG] Processing node features for num 479
[LOG] Saving tensor global_feature_679.pt
[LOG] Process 84: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n2_to_2 (adjacency) for num 143
[LOG] Processing edge features for num 479
[LOG] Computing n2_to_3 for num 788
[LOG] Processing tetra features for num 479
[LOG] Processing cluster features for num 479
[LOG] Processing cluster features for num 479
[LOG] Computing n2_to_4 for num 788
[LOG] Processing adjacency and incidence matrices for num 479
[LOG] Computing n0_to_0 for num 479
[LOG] Computing n1_to_1 for num 479
[LOG] Computing n3_to_4 for num 788
[LOG] Global feature for num 788
[LOG] Global feature for num 788
[LOG] Saving tensor x_0_788.pt
[LOG] Saving tensor x_1_788.pt
[LOG] Saving tensor x_2_788.pt
[LOG] Saving tensor x_3_788.pt
[LOG] Saving tensor x_4_788.pt
[LOG] Saving tensor n0_to_0_788.pt
[LOG] Saving tensor n1_to_1_788.pt
[LOG] Saving tensor n2_to_2_788.pt
[LOG] Saving tensor n3_to_3_788.pt
[LOG] Saving tensor n4_to_4_788.pt
[LOG] Saving tensor n0_to_1_788.pt
[LOG] Saving tensor n0_to_2_788.pt
[LOG] Saving tensor n0_to_3_788.pt
[LOG] Saving tensor n0_to_4_788.pt
[LOG] Saving tensor n1_to_2_788.pt
[LOG] Computing n2_to_2 (adjacency) for num 479
[LOG] Saving tensor n1_to_3_788.pt
[LOG] Saving tensor n1_to_4_788.pt
[LOG] Saving tensor n2_to_3_788.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n2_to_4_788.pt
[LOG] Saving tensor n3_to_4_788.pt
[LOG] Computing n3_to_3 (adjacency) for num 143
[LOG] Saving tensor global_feature_788.pt
[LOG] Computing n4_to_4 (coadjacency) for num 143
[LOG] Process 98: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_1 for num 143
[LOG] Computing n3_to_3 (adjacency) for num 479
[LOG] Computing n4_to_4 (coadjacency) for num 479
[LOG] Computing n0_to_1 for num 479
[LOG] Computing n0_to_2 for num 479
[LOG] Computing n0_to_2 for num 143
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n0_to_3 for num 479
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n0_to_4 for num 479
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n1_to_2 for num 479
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_3 for num 479
[LOG] Computing n1_to_4 for num 479
[LOG] Computing n2_to_3 for num 479
[LOG] Computing n2_to_4 for num 479
[LOG] Computing n3_to_4 for num 479
[LOG] Global feature for num 479
[LOG] Global feature for num 479
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor x_0_479.pt
[LOG] Saving tensor x_1_479.pt
[LOG] Saving tensor x_2_479.pt
[LOG] Saving tensor x_3_479.pt
[LOG] Saving tensor x_4_479.pt
[LOG] Saving tensor n0_to_0_479.pt
[LOG] Saving tensor n1_to_1_479.pt
[LOG] Saving tensor n2_to_2_479.pt
[LOG] Saving tensor n3_to_3_479.pt
[LOG] Saving tensor n4_to_4_479.pt
[LOG] Computing n0_to_3 for num 143
[LOG] Saving tensor n0_to_1_479.pt
[LOG] Saving tensor n0_to_2_479.pt
[LOG] Saving tensor n0_to_3_479.pt
[LOG] Saving tensor n0_to_4_479.pt
[LOG] Saving tensor n1_to_2_479.pt
[LOG] Saving tensor n1_to_3_479.pt
[LOG] Computing n0_to_4 for num 143
[LOG] Saving tensor n1_to_4_479.pt
[LOG] Saving tensor n2_to_3_479.pt
[LOG] Saving tensor n2_to_4_479.pt
[LOG] Saving tensor n3_to_4_479.pt
[LOG] Saving tensor global_feature_479.pt
[LOG] Process 59: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_2 for num 143
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_3 for num 143
[LOG] Computing n1_to_4 for num 143
[LOG] Computing n2_to_3 for num 143
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_4 for num 143
[LOG] Computing n3_to_4 for num 143
[LOG] Global feature for num 143
[LOG] Global feature for num 143
[LOG] Saving tensor x_0_143.pt
[LOG] Saving tensor x_1_143.pt
[LOG] Saving tensor x_2_143.pt
[LOG] Saving tensor x_3_143.pt
[LOG] Saving tensor x_4_143.pt
[LOG] Saving tensor n0_to_0_143.pt
[LOG] Saving tensor n1_to_1_143.pt
[LOG] Saving tensor n2_to_2_143.pt
[LOG] Saving tensor n3_to_3_143.pt
[LOG] Saving tensor n4_to_4_143.pt
[LOG] Saving tensor n0_to_1_143.pt
[LOG] Saving tensor n0_to_2_143.pt
[LOG] Saving tensor n0_to_3_143.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n0_to_4_143.pt
[LOG] Saving tensor n1_to_2_143.pt
[LOG] Computing n1_to_3 for num 322
[LOG] Saving tensor n1_to_3_143.pt
[LOG] Saving tensor n1_to_4_143.pt
[LOG] Saving tensor n2_to_3_143.pt
[LOG] Saving tensor n2_to_4_143.pt
[LOG] Saving tensor n3_to_4_143.pt
[LOG] Saving tensor global_feature_143.pt
[LOG] Process 17: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_4 for num 322
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_3 for num 322
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_4 for num 322
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_4 for num 322
[LOG] Global feature for num 322
[LOG] Global feature for num 322
[LOG] Saving tensor x_0_322.pt
[LOG] Saving tensor x_1_322.pt
[LOG] Saving tensor x_2_322.pt
[LOG] Saving tensor x_3_322.pt
[LOG] Saving tensor x_4_322.pt
[LOG] Saving tensor n0_to_0_322.pt
[LOG] Saving tensor n1_to_1_322.pt
[LOG] Saving tensor n2_to_2_322.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n3_to_3_322.pt
[LOG] Saving tensor n4_to_4_322.pt
[LOG] Saving tensor n0_to_1_322.pt
[LOG] Saving tensor n0_to_2_322.pt
[LOG] Saving tensor n0_to_3_322.pt
[LOG] Saving tensor n0_to_4_322.pt
[LOG] Saving tensor n1_to_2_322.pt
[LOG] Saving tensor n1_to_3_322.pt
[LOG] Saving tensor n1_to_4_322.pt
[LOG] Saving tensor n2_to_3_322.pt
[LOG] Saving tensor n2_to_4_322.pt
[LOG] Saving tensor n3_to_4_322.pt
[LOG] Saving tensor global_feature_322.pt
[LOG] Process 40: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1651 Tetrahedra.
    [LOG] Generated 72 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.930555555555555
    [LOG] Max number of nodes per cluster is 38 and the number is 45
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] We will select 467 edges and 1651 tetra
[LOG] Edges from tetra 0 and KDTree 1320 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Process 57: Created combinatorial complex for file data_458.hdf5
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Process 57: Calculating Neighbors
[LOG] Loading pickle file data_458.pickle
[LOG] Processing node features for num 458
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing edge features for num 458
[LOG] Processing tetra features for num 458
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing cluster features for num 458
[LOG] Processing cluster features for num 458
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing adjacency and incidence matrices for num 458
[LOG] Computing n0_to_0 for num 458
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_1 for num 458
[LOG] Computing n2_to_2 (adjacency) for num 458
[LOG] Computing n3_to_3 (adjacency) for num 458
[LOG] Computing n4_to_4 (coadjacency) for num 458
[LOG] Computing n0_to_1 for num 458
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_2 for num 458
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_3 for num 458
[LOG] Computing n0_to_4 for num 458
[LOG] Computing n1_to_2 for num 458
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n1_to_3 for num 458
[LOG] Computing n1_to_4 for num 458
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_3 for num 458
[LOG] Computing n2_to_4 for num 458
[LOG] Computing n3_to_4 for num 458
[LOG] Global feature for num 458
[LOG] Global feature for num 458
[LOG] Saving tensor x_0_458.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor x_1_458.pt
[LOG] Saving tensor x_2_458.pt
[LOG] Saving tensor x_3_458.pt
[LOG] Saving tensor x_4_458.pt
[LOG] Saving tensor n0_to_0_458.pt
[LOG] Saving tensor n1_to_1_458.pt
[LOG] Saving tensor n2_to_2_458.pt
[LOG] Saving tensor n3_to_3_458.pt
[LOG] Saving tensor n4_to_4_458.pt
[LOG] Saving tensor n0_to_1_458.pt
[LOG] Saving tensor n0_to_2_458.pt
[LOG] Saving tensor n0_to_3_458.pt
[LOG] Saving tensor n0_to_4_458.pt
[LOG] Saving tensor n1_to_2_458.pt
[LOG] Saving tensor n1_to_3_458.pt
[LOG] Saving tensor n1_to_4_458.pt
[LOG] Saving tensor n2_to_3_458.pt
[LOG] Saving tensor n2_to_4_458.pt
[LOG] Saving tensor n3_to_4_458.pt
[LOG] Saving tensor global_feature_458.pt
[LOG] Process 57: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Removed 2 subset clusters.
[LOG] Saving tensor hausdorff_1_to_2.pt

    [LOG] We Currently have 1856 Tetrahedra.
    [LOG] Generated 50 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.2
    [LOG] Max number of nodes per cluster is 61 and the number is 48
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] We will select 223 edges and 1856 tetra
[LOG] Edges from tetra 0 and KDTree 780 with 0 edges in common.
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Process 18: Created combinatorial complex for file data_151.hdf5
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Process 18: Calculating Neighbors
[LOG] Loading pickle file data_151.pickle
[LOG] Processing node features for num 151
[LOG] Processing edge features for num 151
[LOG] Processing tetra features for num 151
[LOG] Processing cluster features for num 151
[LOG] Processing cluster features for num 151
[LOG] Processing adjacency and incidence matrices for num 151
[LOG] Computing n0_to_0 for num 151
[LOG] Computing n1_to_1 for num 151
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_2 (adjacency) for num 151
[LOG] Computing n3_to_3 (adjacency) for num 151
[LOG] Computing n4_to_4 (coadjacency) for num 151
[LOG] Computing n0_to_1 for num 151
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_2 for num 151
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n0_to_3 for num 151
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n0_to_4 for num 151
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n1_to_2 for num 151
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n1_to_3 for num 151
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n1_to_4 for num 151
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Computing n2_to_3 for num 151
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_4 for num 151
[LOG] GENERATED TETRA
[LOG] Computing n3_to_4 for num 151
[LOG] Global feature for num 151
[LOG] Global feature for num 151
[LOG] Saving tensor x_0_151.pt
[LOG] Saving tensor x_1_151.pt
[LOG] Saving tensor x_2_151.pt
[LOG] Saving tensor x_3_151.pt
[LOG] Saving tensor x_4_151.pt
[LOG] Saving tensor n0_to_0_151.pt
[LOG] Saving tensor n1_to_1_151.pt
[LOG] Saving tensor n2_to_2_151.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n3_to_3_151.pt
[LOG] Saving tensor n4_to_4_151.pt
[LOG] Saving tensor n0_to_1_151.pt
[LOG] Saving tensor n0_to_2_151.pt
[LOG] Saving tensor n0_to_3_151.pt
[LOG] Saving tensor n0_to_4_151.pt
[LOG] Saving tensor n1_to_2_151.pt
[LOG] Saving tensor n1_to_3_151.pt
[LOG] Saving tensor n1_to_4_151.pt
[LOG] Saving tensor n2_to_3_151.pt
[LOG] Saving tensor n2_to_4_151.pt
[LOG] Saving tensor n3_to_4_151.pt
[LOG] Saving tensor global_feature_151.pt
[LOG] Process 18: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1582 Tetrahedra.
    [LOG] Generated 51 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.411764705882353
    [LOG] Max number of nodes per cluster is 32 and the number is 21
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] We will select 356 edges and 1582 tetra
[LOG] Edges from tetra 0 and KDTree 356 with 0 edges in common.
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_1_to_1.pt

    [LOG] We Currently have 1572 Tetrahedra.
    [LOG] Generated 32 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 22.0625
    [LOG] Max number of nodes per cluster is 113 and the number is 20
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] We will select 335 edges and 1572 tetra
[LOG] Edges from tetra 0 and KDTree 5695 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3285 Tetrahedra.
    [LOG] Generated 70 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.642857142857142
    [LOG] Max number of nodes per cluster is 78 and the number is 61
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] We will select 604 edges and 3285 tetra
[LOG] Edges from tetra 0 and KDTree 2967 with 0 edges in common.
[LOG] Removed 1 subset clusters.
[LOG] GENERATED TETRA
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 5465 Tetrahedra.
    [LOG] Generated 144 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.333333333333334
    [LOG] Max number of nodes per cluster is 42 and the number is 47
[LOG] Process 96: Created combinatorial complex for file data_773.hdf5
[LOG] Removed 0 subset clusters.
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 2307 Tetrahedra.
    [LOG] Generated 73 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 10.547945205479452
    [LOG] Max number of nodes per cluster is 21 and the number is 56
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 96: Calculating Neighbors
[LOG] Loading pickle file data_773.pickle
[LOG] Processing node features for num 773
[LOG] Processing edge features for num 773
[LOG] We will select 365 edges and 2307 tetra
[LOG] Edges from tetra 0 and KDTree 925 with 0 edges in common.
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing tetra features for num 773
[LOG] Process 81: Created combinatorial complex for file data_655.hdf5
[LOG] Processing cluster features for num 773
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing cluster features for num 773
[LOG] Processing adjacency and incidence matrices for num 773
[LOG] Computing n0_to_0 for num 773
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] We will select 1152 edges and 5465 tetra
[LOG] Edges from tetra 0 and KDTree 1152 with 0 edges in common.
[LOG] Removed 2 subset clusters.
[LOG] Computing n1_to_1 for num 773

    [LOG] We Currently have 1836 Tetrahedra.
    [LOG] Generated 60 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.0
    [LOG] Max number of nodes per cluster is 27 and the number is 58
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] We will select 1040 edges and 1836 tetra
[LOG] Edges from tetra 0 and KDTree 1040 with 0 edges in common.
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Process 81: Calculating Neighbors
[LOG] Loading pickle file data_655.pickle
[LOG] Processing node features for num 655
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Processing edge features for num 655
[LOG] Computing n2_to_2 (adjacency) for num 773
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Processing tetra features for num 655
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing cluster features for num 655
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 773
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n4_to_4 (coadjacency) for num 773
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Processing cluster features for num 655
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Computing n0_to_1 for num 773
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Processing adjacency and incidence matrices for num 655
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n0_to_0 for num 655
[LOG] Computing n0_to_2 for num 773
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_3 for num 773
[LOG] Computing n0_to_4 for num 773
[LOG] Computing n1_to_2 for num 773
[LOG] Computing n1_to_1 for num 655
[LOG] Calculating for cell ranks 1 and 2
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.
[LOG] Process 22: Created combinatorial complex for file data_181.hdf5
[LOG] Computing n1_to_3 for num 773
[LOG] Computing n1_to_4 for num 773
[LOG] Computing n2_to_3 for num 773
[LOG] Computing n2_to_2 (adjacency) for num 655
[LOG] Computing n2_to_4 for num 773
[LOG] Computing n3_to_4 for num 773
[LOG] Global feature for num 773
[LOG] Global feature for num 773
[LOG] Saving tensor x_0_773.pt
[LOG] Saving tensor x_1_773.pt
[LOG] Saving tensor x_2_773.pt
[LOG] Saving tensor x_3_773.pt
[LOG] Saving tensor x_4_773.pt
[LOG] Saving tensor n0_to_0_773.pt
[LOG] Saving tensor n1_to_1_773.pt
[LOG] Saving tensor n2_to_2_773.pt
[LOG] Saving tensor n3_to_3_773.pt
[LOG] Saving tensor n4_to_4_773.pt
[LOG] Saving tensor n0_to_1_773.pt
[LOG] Saving tensor n0_to_2_773.pt
[LOG] Saving tensor n0_to_3_773.pt
[LOG] Saving tensor n0_to_4_773.pt
[LOG] Saving tensor n1_to_2_773.pt
[LOG] Saving tensor n1_to_3_773.pt
[LOG] Saving tensor n1_to_4_773.pt
[LOG] Saving tensor n2_to_3_773.pt
[LOG] Saving tensor n2_to_4_773.pt
[LOG] Saving tensor n3_to_4_773.pt
[LOG] Saving tensor global_feature_773.pt
[LOG] Computing n3_to_3 (adjacency) for num 655
[LOG] Process 126: Created combinatorial complex for file data_990.hdf5
[LOG] Computing n4_to_4 (coadjacency) for num 655
[LOG] Computing n0_to_1 for num 655
[LOG] Process 96: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 22: Calculating Neighbors
[LOG] Loading pickle file data_181.pickle
[LOG] Processing node features for num 181
[LOG] Processing edge features for num 181
[LOG] Processing tetra features for num 181
[LOG] Computing n0_to_2 for num 655
[LOG] Process 126: Calculating Neighbors
[LOG] Loading pickle file data_990.pickle
[LOG] Processing node features for num 990
[LOG] Processing edge features for num 990
[LOG] Processing cluster features for num 181
[LOG] Processing tetra features for num 990
[LOG] Processing cluster features for num 181
[LOG] Removed 3 subset clusters.
[LOG] Processing cluster features for num 990
[LOG] Processing adjacency and incidence matrices for num 181
[LOG] Computing n0_to_0 for num 181
[LOG] Processing cluster features for num 990
[LOG] Processing adjacency and incidence matrices for num 990
[LOG] Computing n0_to_0 for num 990
[LOG] Computing n1_to_1 for num 990
[LOG] Computing n1_to_1 for num 181
[LOG] Process 94: Created combinatorial complex for file data_756.hdf5
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_2 (adjacency) for num 990
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 94: Calculating Neighbors
[LOG] Loading pickle file data_756.pickle
[LOG] Processing node features for num 756
[LOG] Processing edge features for num 756
[LOG] Processing tetra features for num 756
[LOG] Processing cluster features for num 756
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing cluster features for num 756
[LOG] Processing adjacency and incidence matrices for num 756
[LOG] Computing n0_to_0 for num 756
[LOG] Computing n3_to_3 (adjacency) for num 990
[LOG] Computing n4_to_4 (coadjacency) for num 990
[LOG] Computing n0_to_1 for num 990
[LOG] Computing n0_to_3 for num 655
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_1 for num 756
[LOG] Computing n0_to_4 for num 655
[LOG] Computing n0_to_2 for num 990
[LOG] Computing n1_to_2 for num 655
[LOG] Computing n2_to_2 (adjacency) for num 181
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_3 for num 655
[LOG] Computing n1_to_4 for num 655
[LOG] Computing n2_to_3 for num 655
[LOG] Computing n2_to_4 for num 655
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 3455 Tetrahedra.
    [LOG] Generated 94 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.659574468085106
    [LOG] Max number of nodes per cluster is 62 and the number is 77
[LOG] Computing n3_to_4 for num 655
[LOG] Global feature for num 655
[LOG] Global feature for num 655
[LOG] Saving tensor x_0_655.pt
[LOG] Saving tensor x_1_655.pt
[LOG] Saving tensor x_2_655.pt
[LOG] Saving tensor x_3_655.pt
[LOG] Saving tensor x_4_655.pt
[LOG] Saving tensor n0_to_0_655.pt
[LOG] Saving tensor n1_to_1_655.pt
[LOG] Saving tensor n2_to_2_655.pt
[LOG] Saving tensor n3_to_3_655.pt
[LOG] Saving tensor n4_to_4_655.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n0_to_1_655.pt
[LOG] We will select 2378 edges and 3455 tetra
[LOG] Edges from tetra 0 and KDTree 2378 with 0 edges in common.
[LOG] Saving tensor n0_to_2_655.pt
[LOG] Saving tensor n0_to_3_655.pt
[LOG] Saving tensor n0_to_4_655.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n1_to_2_655.pt
[LOG] Saving tensor n1_to_3_655.pt
[LOG] Saving tensor n1_to_4_655.pt
[LOG] Saving tensor n2_to_3_655.pt
[LOG] Computing n0_to_3 for num 990
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_4 for num 990
[LOG] Computing n2_to_2 (adjacency) for num 756
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_2 for num 990
[LOG] Saving tensor n2_to_4_655.pt
[LOG] Saving tensor n3_to_4_655.pt
[LOG] Saving tensor global_feature_655.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n3_to_3 (adjacency) for num 756
[LOG] Computing n4_to_4 (coadjacency) for num 756
[LOG] Computing n0_to_1 for num 756
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 81: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_2 for num 756
[LOG] Computing n1_to_3 for num 990
[LOG] Computing n1_to_4 for num 990
[LOG] Computing n2_to_3 for num 990
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n2_to_4 for num 990
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_3 (adjacency) for num 181
[LOG] Computing n3_to_4 for num 990
[LOG] Global feature for num 990
[LOG] Computing n4_to_4 (coadjacency) for num 181
[LOG] Global feature for num 990
[LOG] Saving tensor x_0_990.pt
[LOG] Computing n0_to_1 for num 181
[LOG] Saving tensor x_1_990.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor x_2_990.pt
[LOG] Computing n0_to_3 for num 756
[LOG] Computing n0_to_4 for num 756
[LOG] Computing n1_to_2 for num 756
[LOG] Saving tensor x_3_990.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor x_4_990.pt
[LOG] Saving tensor n0_to_0_990.pt
[LOG] Computing n0_to_2 for num 181
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n1_to_1_990.pt
[LOG] Saving tensor n2_to_2_990.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n3_to_3_990.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n4_to_4_990.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n0_to_1_990.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n0_to_2_990.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n0_to_3_990.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n0_to_4_990.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n1_to_2_990.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n1_to_3_990.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n1_to_4_990.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n2_to_3_990.pt
[LOG] Saving tensor n2_to_4_990.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n3_to_4_990.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor global_feature_990.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Process 126: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_3 for num 756
[LOG] Removed 2 subset clusters.
[LOG] Computing n1_to_4 for num 756
[LOG] Computing n2_to_3 for num 756
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_4 for num 756
[LOG] Computing n3_to_4 for num 756
[LOG] Global feature for num 756
[LOG] Global feature for num 756
[LOG] Saving tensor x_0_756.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 36: Created combinatorial complex for file data_290.hdf5
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor x_1_756.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor x_2_756.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor x_3_756.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor x_4_756.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n0_to_0_756.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n1_to_1_756.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n2_to_2_756.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n3_to_3_756.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n4_to_4_756.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n0_to_1_756.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n0_to_2_756.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n0_to_3_756.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n0_to_4_756.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Removed 4 subset clusters.
[LOG] Process 36: Calculating Neighbors
[LOG] Loading pickle file data_290.pickle
[LOG] Processing node features for num 290
[LOG] Processing edge features for num 290
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n1_to_2_756.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n1_to_3_756.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Processing tetra features for num 290
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n1_to_4_756.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n2_to_3_756.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n2_to_4_756.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n3_to_4_756.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor global_feature_756.pt
[LOG] Computing n0_to_3 for num 181
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Process 94: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Processing cluster features for num 290
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n0_to_4 for num 181
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing cluster features for num 290
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_2 for num 181
[LOG] Processing adjacency and incidence matrices for num 290
[LOG] Computing n0_to_0 for num 290
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 127: Created combinatorial complex for file data_995.hdf5
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2616 Tetrahedra.
    [LOG] Generated 77 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.415584415584416
    [LOG] Max number of nodes per cluster is 71 and the number is 73
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n1_to_1 for num 290
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] We will select 636 edges and 2616 tetra
[LOG] Edges from tetra 0 and KDTree 2343 with 0 edges in common.
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2174 Tetrahedra.
    [LOG] Generated 60 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.233333333333333
    [LOG] Max number of nodes per cluster is 73 and the number is 32
[LOG] Process 127: Calculating Neighbors
[LOG] Loading pickle file data_995.pickle
[LOG] Processing node features for num 995
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Processing edge features for num 995
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] We will select 413 edges and 2174 tetra
[LOG] Edges from tetra 0 and KDTree 1896 with 0 edges in common.
[LOG] Computing n1_to_3 for num 181
[LOG] Processing tetra features for num 995
[LOG] Computing n1_to_4 for num 181
[LOG] Computing n2_to_3 for num 181
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing cluster features for num 995
[LOG] Computing n2_to_4 for num 181
[LOG] Processing cluster features for num 995
[LOG] Computing n3_to_4 for num 181
[LOG] Global feature for num 181
[LOG] Global feature for num 181
[LOG] Saving tensor x_0_181.pt
[LOG] Saving tensor x_1_181.pt
[LOG] Processing adjacency and incidence matrices for num 995
[LOG] Computing n0_to_0 for num 995
[LOG] Saving tensor x_2_181.pt
[LOG] Saving tensor x_3_181.pt
[LOG] Saving tensor x_4_181.pt
[LOG] Saving tensor n0_to_0_181.pt
[LOG] Saving tensor n1_to_1_181.pt
[LOG] Saving tensor n2_to_2_181.pt
[LOG] Saving tensor n3_to_3_181.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n4_to_4_181.pt
[LOG] Saving tensor n0_to_1_181.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n0_to_2_181.pt
[LOG] Saving tensor n0_to_3_181.pt
[LOG] Saving tensor n0_to_4_181.pt
[LOG] Saving tensor n1_to_2_181.pt
[LOG] Saving tensor n1_to_3_181.pt
[LOG] Saving tensor n1_to_4_181.pt
[LOG] Saving tensor n2_to_3_181.pt
[LOG] Saving tensor n2_to_4_181.pt
[LOG] Saving tensor n3_to_4_181.pt
[LOG] Saving tensor global_feature_181.pt
[LOG] Process 22: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n1_to_1 for num 995
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 43: Created combinatorial complex for file data_351.hdf5
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 43: Calculating Neighbors
[LOG] Loading pickle file data_351.pickle
[LOG] Processing node features for num 351
[LOG] Processing edge features for num 351
[LOG] Removed 0 subset clusters.
[LOG] Processing tetra features for num 351
[LOG] Processing cluster features for num 351
[LOG] Processing cluster features for num 351
[LOG] Processing adjacency and incidence matrices for num 351
[LOG] Computing n0_to_0 for num 351
[LOG] Computing n1_to_1 for num 351
[LOG] Computing n2_to_2 (adjacency) for num 290
[LOG] Process 82: Created combinatorial complex for file data_661.hdf5
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_2 (adjacency) for num 351
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 82: Calculating Neighbors
[LOG] Loading pickle file data_661.pickle
[LOG] Processing node features for num 661
[LOG] Processing edge features for num 661
[LOG] Processing tetra features for num 661
[LOG] Processing cluster features for num 661
[LOG] Processing cluster features for num 661
[LOG] Computing n3_to_3 (adjacency) for num 351
[LOG] Processing adjacency and incidence matrices for num 661
[LOG] Computing n0_to_0 for num 661
[LOG] Computing n4_to_4 (coadjacency) for num 351
[LOG] Computing n0_to_1 for num 351
[LOG] Computing n1_to_1 for num 661
[LOG] Computing n0_to_2 for num 351
[LOG] Calculating for cell ranks 0 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_2 (adjacency) for num 661
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1811 Tetrahedra.
    [LOG] Generated 55 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.236363636363636
    [LOG] Max number of nodes per cluster is 41 and the number is 27
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] We will select 238 edges and 1811 tetra
[LOG] Edges from tetra 0 and KDTree 238 with 0 edges in common.
[LOG] Computing n0_to_3 for num 351
[LOG] Computing n0_to_4 for num 351
[LOG] Computing n1_to_2 for num 351
[LOG] Computing n3_to_3 (adjacency) for num 661
[LOG] Computing n4_to_4 (coadjacency) for num 661
[LOG] Computing n0_to_1 for num 661
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_2 (adjacency) for num 995
[LOG] Computing n0_to_2 for num 661
[LOG] Computing n1_to_3 for num 351
[LOG] Computing n1_to_4 for num 351
[LOG] Computing n2_to_3 for num 351
[LOG] Computing n2_to_4 for num 351
[LOG] Computing n3_to_4 for num 351
[LOG] Global feature for num 351
[LOG] Global feature for num 351
[LOG] Saving tensor x_0_351.pt
[LOG] Saving tensor x_1_351.pt
[LOG] Saving tensor x_2_351.pt
[LOG] Saving tensor x_3_351.pt
[LOG] Saving tensor x_4_351.pt
[LOG] Saving tensor n0_to_0_351.pt
[LOG] Saving tensor n1_to_1_351.pt
[LOG] Saving tensor n2_to_2_351.pt
[LOG] Saving tensor n3_to_3_351.pt
[LOG] Saving tensor n4_to_4_351.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n0_to_1_351.pt
[LOG] Saving tensor n0_to_2_351.pt
[LOG] Saving tensor n0_to_3_351.pt
[LOG] Saving tensor n0_to_4_351.pt
[LOG] Saving tensor n1_to_2_351.pt
[LOG] Saving tensor n1_to_3_351.pt
[LOG] Saving tensor n1_to_4_351.pt
[LOG] Saving tensor n2_to_3_351.pt
[LOG] Removed 1 subset clusters.
[LOG] Computing n0_to_3 for num 661
[LOG] Saving tensor n2_to_4_351.pt
[LOG] Saving tensor n3_to_4_351.pt
[LOG] Computing n0_to_4 for num 661
[LOG] Saving tensor global_feature_351.pt
[LOG] Process 43: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_2 for num 661
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_3 (adjacency) for num 290
[LOG] Computing n4_to_4 (coadjacency) for num 290
[LOG] Computing n0_to_1 for num 290
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_3 (adjacency) for num 995
[LOG] Computing n4_to_4 (coadjacency) for num 995
[LOG] Computing n0_to_1 for num 995
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 72: Created combinatorial complex for file data_582.hdf5
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 72: Calculating Neighbors
[LOG] Computing n0_to_2 for num 290
[LOG] Loading pickle file data_582.pickle
[LOG] Processing node features for num 582
[LOG] Processing edge features for num 582
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Processing tetra features for num 582
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Processing cluster features for num 582
[LOG] Processing cluster features for num 582
[LOG] Processing adjacency and incidence matrices for num 582
[LOG] Computing n0_to_0 for num 582
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_3 for num 661
[LOG] Computing n1_to_1 for num 582
[LOG] Computing n1_to_4 for num 661
[LOG] Computing n2_to_3 for num 661
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n0_to_2 for num 995
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n2_to_4 for num 661
[LOG] Computing n2_to_2 (adjacency) for num 582
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n3_to_4 for num 661
[LOG] Global feature for num 661
[LOG] Global feature for num 661
[LOG] Saving tensor x_0_661.pt
[LOG] Computing n3_to_3 (adjacency) for num 582
[LOG] Saving tensor x_1_661.pt
[LOG] Computing n4_to_4 (coadjacency) for num 582
[LOG] Saving tensor x_2_661.pt
[LOG] Saving tensor x_3_661.pt
[LOG] Computing n0_to_1 for num 582
[LOG] Saving tensor x_4_661.pt
[LOG] Saving tensor n0_to_0_661.pt
[LOG] Saving tensor n1_to_1_661.pt
[LOG] Saving tensor n2_to_2_661.pt
[LOG] Computing n0_to_2 for num 582
[LOG] Saving tensor n3_to_3_661.pt
[LOG] Saving tensor n4_to_4_661.pt
[LOG] Saving tensor n0_to_1_661.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n0_to_2_661.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor n0_to_3_661.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor n0_to_4_661.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n1_to_2_661.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n1_to_3_661.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n1_to_4_661.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n2_to_3_661.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n2_to_4_661.pt
[LOG] Saving tensor n3_to_4_661.pt
[LOG] Saving tensor global_feature_661.pt
[LOG] Process 82: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 582
[LOG] Computing n0_to_4 for num 582
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_2 for num 582
[LOG] Computing n1_to_3 for num 582
[LOG] Computing n1_to_4 for num 582
[LOG] Computing n0_to_3 for num 995
[LOG] Computing n2_to_3 for num 582
[LOG] Computing n0_to_4 for num 995
[LOG] Computing n2_to_4 for num 582
[LOG] Computing n1_to_2 for num 995
[LOG] Computing n3_to_4 for num 582
[LOG] Global feature for num 582
[LOG] Global feature for num 582
[LOG] Saving tensor x_0_582.pt
[LOG] Saving tensor x_1_582.pt
[LOG] Saving tensor x_2_582.pt
[LOG] Saving tensor x_3_582.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor x_4_582.pt
[LOG] Saving tensor n0_to_0_582.pt
[LOG] Saving tensor n1_to_1_582.pt
[LOG] Saving tensor n2_to_2_582.pt
[LOG] Saving tensor n3_to_3_582.pt
[LOG] Saving tensor n4_to_4_582.pt
[LOG] Saving tensor n0_to_1_582.pt
[LOG] Saving tensor n0_to_2_582.pt
[LOG] Saving tensor n0_to_3_582.pt
[LOG] Saving tensor n0_to_4_582.pt
[LOG] Saving tensor n1_to_2_582.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n1_to_3_582.pt
[LOG] Saving tensor n1_to_4_582.pt
[LOG] Saving tensor n2_to_3_582.pt
[LOG] Saving tensor n2_to_4_582.pt
[LOG] Saving tensor n3_to_4_582.pt
[LOG] Saving tensor global_feature_582.pt
[LOG] Process 72: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_3 for num 290
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_4 for num 290
[LOG] Computing n1_to_2 for num 290
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] GENERATED TETRA
[LOG] Computing n1_to_3 for num 995
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_4 for num 995
[LOG] Computing n2_to_3 for num 995
[LOG] Computing n1_to_3 for num 290
[LOG] Computing n1_to_4 for num 290
[LOG] Computing n2_to_4 for num 995
[LOG] Computing n2_to_3 for num 290
[LOG] Computing n3_to_4 for num 995
[LOG] Global feature for num 995
[LOG] Global feature for num 995
[LOG] Saving tensor x_0_995.pt
[LOG] Saving tensor x_1_995.pt
[LOG] Saving tensor x_2_995.pt
[LOG] Saving tensor x_3_995.pt
[LOG] Saving tensor x_4_995.pt
[LOG] Saving tensor n0_to_0_995.pt
[LOG] Saving tensor n1_to_1_995.pt
[LOG] Saving tensor n2_to_2_995.pt
[LOG] Saving tensor n3_to_3_995.pt
[LOG] Saving tensor n4_to_4_995.pt
[LOG] Saving tensor n0_to_1_995.pt
[LOG] Saving tensor n0_to_2_995.pt
[LOG] Saving tensor n0_to_3_995.pt
[LOG] Saving tensor n0_to_4_995.pt
[LOG] Saving tensor n1_to_2_995.pt
[LOG] Saving tensor n1_to_3_995.pt
[LOG] Saving tensor n1_to_4_995.pt
[LOG] Saving tensor n2_to_3_995.pt
[LOG] Saving tensor n2_to_4_995.pt
[LOG] Saving tensor n3_to_4_995.pt
[LOG] Saving tensor global_feature_995.pt
[LOG] Process 127: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n2_to_4 for num 290
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1973 Tetrahedra.
    [LOG] Generated 61 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.19672131147541
    [LOG] Max number of nodes per cluster is 58 and the number is 34
[LOG] Computing n3_to_4 for num 290
[LOG] Global feature for num 290
[LOG] Global feature for num 290
[LOG] Saving tensor x_0_290.pt
[LOG] Saving tensor x_1_290.pt
[LOG] GENERATED TETRA
[LOG] We will select 782 edges and 1973 tetra
[LOG] Edges from tetra 0 and KDTree 1441 with 0 edges in common.
[LOG] Saving tensor x_2_290.pt
[LOG] Saving tensor x_3_290.pt
[LOG] Saving tensor x_4_290.pt
[LOG] Saving tensor n0_to_0_290.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n1_to_1_290.pt
[LOG] Saving tensor n2_to_2_290.pt
[LOG] Saving tensor n3_to_3_290.pt
[LOG] Saving tensor n4_to_4_290.pt
[LOG] Saving tensor n0_to_1_290.pt
[LOG] Saving tensor n0_to_2_290.pt
[LOG] Saving tensor n0_to_3_290.pt
[LOG] Saving tensor n0_to_4_290.pt
[LOG] Saving tensor n1_to_2_290.pt
[LOG] Saving tensor n1_to_3_290.pt
[LOG] Saving tensor n1_to_4_290.pt
[LOG] Saving tensor n2_to_3_290.pt
[LOG] Saving tensor n2_to_4_290.pt
[LOG] Removed 3 subset clusters.
[LOG] Saving tensor n3_to_4_290.pt
[LOG] Saving tensor global_feature_290.pt
[LOG] Process 36: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 110: Created combinatorial complex for file data_878.hdf5
[LOG] Process 110: Calculating Neighbors
[LOG] Loading pickle file data_878.pickle
[LOG] Processing node features for num 878
[LOG] Processing edge features for num 878
[LOG] Processing tetra features for num 878
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing cluster features for num 878
[LOG] Processing cluster features for num 878
[LOG] Processing adjacency and incidence matrices for num 878
[LOG] Computing n0_to_0 for num 878
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_1 for num 878
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2060 Tetrahedra.
    [LOG] Generated 53 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 18.30188679245283
    [LOG] Max number of nodes per cluster is 81 and the number is 49
[LOG] Calculating for cell ranks 0 and 3
[LOG] We will select 165 edges and 2060 tetra
[LOG] Edges from tetra 0 and KDTree 3758 with 0 edges in common.
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1604 Tetrahedra.
    [LOG] Generated 47 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 18.382978723404257
    [LOG] Max number of nodes per cluster is 64 and the number is 4
[LOG] Computing n2_to_2 (adjacency) for num 878
[LOG] Calculating for cell ranks 0 and 4
[LOG] We will select 388 edges and 1604 tetra
[LOG] Edges from tetra 0 and KDTree 2513 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_3 (adjacency) for num 878
[LOG] Computing n4_to_4 (coadjacency) for num 878
[LOG] Computing n0_to_1 for num 878
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1909 Tetrahedra.
    [LOG] Generated 51 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.392156862745098
    [LOG] Max number of nodes per cluster is 83 and the number is 49
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_2 for num 878
[LOG] We will select 740 edges and 1909 tetra
[LOG] Edges from tetra 0 and KDTree 1398 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 51: Created combinatorial complex for file data_415.hdf5
[LOG] Process 115: Created combinatorial complex for file data_915.hdf5
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 115: Calculating Neighbors
[LOG] Loading pickle file data_915.pickle
[LOG] Processing node features for num 915
[LOG] Process 51: Calculating Neighbors
[LOG] Loading pickle file data_415.pickle
[LOG] Processing node features for num 415
[LOG] Processing edge features for num 915
[LOG] Processing edge features for num 415
[LOG] Processing tetra features for num 915
[LOG] Processing tetra features for num 415
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing cluster features for num 915
[LOG] Processing cluster features for num 915
[LOG] Processing cluster features for num 415
[LOG] Processing adjacency and incidence matrices for num 915
[LOG] Computing n0_to_0 for num 915
[LOG] Processing cluster features for num 415
[LOG] Processing adjacency and incidence matrices for num 415
[LOG] Computing n0_to_0 for num 415
[LOG] Computing n0_to_3 for num 878
[LOG] Computing n1_to_1 for num 915
[LOG] Computing n0_to_4 for num 878
[LOG] Computing n1_to_1 for num 415
[LOG] Removed 0 subset clusters.
[LOG] Computing n1_to_2 for num 878
[LOG] Computing n2_to_2 (adjacency) for num 415
[LOG] Computing n2_to_2 (adjacency) for num 915
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 74: Created combinatorial complex for file data_597.hdf5
[LOG] Computing n3_to_3 (adjacency) for num 915
[LOG] Computing n4_to_4 (coadjacency) for num 915
[LOG] Computing n0_to_1 for num 915
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 74: Calculating Neighbors
[LOG] Loading pickle file data_597.pickle
[LOG] Processing node features for num 597
[LOG] Processing edge features for num 597
[LOG] Computing n0_to_2 for num 915
[LOG] Computing n3_to_3 (adjacency) for num 415
[LOG] Processing tetra features for num 597
[LOG] Computing n4_to_4 (coadjacency) for num 415
[LOG] Computing n0_to_1 for num 415
[LOG] Computing n1_to_3 for num 878
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_4 for num 878
[LOG] Processing cluster features for num 597
[LOG] Computing n2_to_3 for num 878
[LOG] Computing n0_to_2 for num 415
[LOG] Processing cluster features for num 597
[LOG] Computing n2_to_4 for num 878
[LOG] Processing adjacency and incidence matrices for num 597
[LOG] Computing n0_to_0 for num 597
[LOG] Computing n3_to_4 for num 878
[LOG] Global feature for num 878
[LOG] Global feature for num 878
[LOG] Saving tensor x_0_878.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor x_1_878.pt
[LOG] Saving tensor x_2_878.pt
[LOG] Saving tensor x_3_878.pt
[LOG] Saving tensor x_4_878.pt
[LOG] Saving tensor n0_to_0_878.pt
[LOG] Saving tensor n1_to_1_878.pt
[LOG] Saving tensor n2_to_2_878.pt
[LOG] Saving tensor n3_to_3_878.pt
[LOG] Saving tensor n4_to_4_878.pt
[LOG] Computing n1_to_1 for num 597
[LOG] Saving tensor n0_to_1_878.pt
[LOG] Saving tensor n0_to_2_878.pt
[LOG] Saving tensor n0_to_3_878.pt
[LOG] Saving tensor n0_to_4_878.pt
[LOG] Saving tensor n1_to_2_878.pt
[LOG] Saving tensor n1_to_3_878.pt
[LOG] Saving tensor n1_to_4_878.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n2_to_3_878.pt
[LOG] Saving tensor n2_to_4_878.pt
[LOG] Saving tensor n3_to_4_878.pt
[LOG] Saving tensor global_feature_878.pt
[LOG] Process 110: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_3 for num 915
[LOG] Computing n2_to_2 (adjacency) for num 597
[LOG] Computing n0_to_4 for num 915
[LOG] Computing n1_to_2 for num 915
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_3 for num 915
[LOG] Computing n1_to_4 for num 915
[LOG] Computing n2_to_3 for num 915
[LOG] Computing n2_to_4 for num 915
[LOG] Computing n3_to_3 (adjacency) for num 597
[LOG] Computing n4_to_4 (coadjacency) for num 597
[LOG] Computing n0_to_1 for num 597
[LOG] Computing n3_to_4 for num 915
[LOG] Global feature for num 915
[LOG] Global feature for num 915
[LOG] Saving tensor x_0_915.pt
[LOG] Saving tensor x_1_915.pt
[LOG] Saving tensor x_2_915.pt
[LOG] Saving tensor x_3_915.pt
[LOG] Saving tensor x_4_915.pt
[LOG] Saving tensor n0_to_0_915.pt
[LOG] Saving tensor n1_to_1_915.pt
[LOG] Saving tensor n2_to_2_915.pt
[LOG] Saving tensor n3_to_3_915.pt
[LOG] Saving tensor n4_to_4_915.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n0_to_1_915.pt
[LOG] Saving tensor n0_to_2_915.pt
[LOG] Saving tensor n0_to_3_915.pt
[LOG] Saving tensor n0_to_4_915.pt
[LOG] Saving tensor n1_to_2_915.pt
[LOG] Saving tensor n1_to_3_915.pt
[LOG] Saving tensor n1_to_4_915.pt
[LOG] Saving tensor n2_to_3_915.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor n2_to_4_915.pt
[LOG] Saving tensor n3_to_4_915.pt
[LOG] Computing n0_to_3 for num 415
[LOG] Saving tensor global_feature_915.pt
[LOG] Process 115: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_4 for num 415
[LOG] Computing n0_to_2 for num 597
[LOG] Computing n1_to_2 for num 415
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_3 for num 415
[LOG] Computing n1_to_4 for num 415
[LOG] Computing n2_to_3 for num 415
[LOG] Computing n2_to_4 for num 415
[LOG] Computing n3_to_4 for num 415
[LOG] Global feature for num 415
[LOG] Global feature for num 415
[LOG] Saving tensor x_0_415.pt
[LOG] Saving tensor x_1_415.pt
[LOG] Saving tensor x_2_415.pt
[LOG] Saving tensor x_3_415.pt
[LOG] Saving tensor x_4_415.pt
[LOG] Saving tensor n0_to_0_415.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n1_to_1_415.pt
[LOG] Saving tensor n2_to_2_415.pt
[LOG] Saving tensor n3_to_3_415.pt
[LOG] Saving tensor n4_to_4_415.pt
[LOG] Saving tensor n0_to_1_415.pt
[LOG] Saving tensor n0_to_2_415.pt
[LOG] Saving tensor n0_to_3_415.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n0_to_4_415.pt
[LOG] Saving tensor n1_to_2_415.pt
[LOG] Saving tensor n1_to_3_415.pt
[LOG] Saving tensor n1_to_4_415.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor n2_to_3_415.pt
[LOG] Saving tensor n2_to_4_415.pt
[LOG] Saving tensor n3_to_4_415.pt
[LOG] Saving tensor global_feature_415.pt
[LOG] Process 51: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_3 for num 597
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_4 for num 597
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_2 for num 597
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_3 for num 597
[LOG] Computing n1_to_4 for num 597
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Computing n2_to_3 for num 597
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_4 for num 597
[LOG] Computing n3_to_4 for num 597
[LOG] Calculating for cell ranks 0 and 1
[LOG] Global feature for num 597
[LOG] Global feature for num 597
[LOG] Saving tensor x_0_597.pt
[LOG] Saving tensor x_1_597.pt
[LOG] Saving tensor x_2_597.pt
[LOG] Saving tensor x_3_597.pt
[LOG] Saving tensor x_4_597.pt
[LOG] Saving tensor n0_to_0_597.pt
[LOG] Saving tensor n1_to_1_597.pt
[LOG] Saving tensor n2_to_2_597.pt
[LOG] Saving tensor n3_to_3_597.pt
[LOG] Saving tensor n4_to_4_597.pt
[LOG] Saving tensor n0_to_1_597.pt
[LOG] Saving tensor n0_to_2_597.pt
[LOG] Saving tensor n0_to_3_597.pt
[LOG] Saving tensor n0_to_4_597.pt
[LOG] Saving tensor n1_to_2_597.pt
[LOG] Saving tensor n1_to_3_597.pt
[LOG] Saving tensor n1_to_4_597.pt
[LOG] Saving tensor n2_to_3_597.pt
[LOG] Saving tensor n2_to_4_597.pt
[LOG] Saving tensor n3_to_4_597.pt
[LOG] Saving tensor global_feature_597.pt
[LOG] Process 74: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3033 Tetrahedra.
    [LOG] Generated 97 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.690721649484535
    [LOG] Max number of nodes per cluster is 45 and the number is 81
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] We will select 643 edges and 3033 tetra
[LOG] Edges from tetra 0 and KDTree 1360 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2693 Tetrahedra.
    [LOG] Generated 75 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.32
    [LOG] Max number of nodes per cluster is 47 and the number is 55
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] We will select 572 edges and 2693 tetra
[LOG] Edges from tetra 0 and KDTree 594 with 0 edges in common.
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 60: Created combinatorial complex for file data_485.hdf5
[LOG] Removed 0 subset clusters.
[LOG] Process 60: Calculating Neighbors
[LOG] Loading pickle file data_485.pickle
[LOG] Processing node features for num 485
[LOG] Processing edge features for num 485
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing tetra features for num 485
[LOG] Processing cluster features for num 485
[LOG] Processing cluster features for num 485
[LOG] Processing adjacency and incidence matrices for num 485
[LOG] Computing n0_to_0 for num 485
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 44: Created combinatorial complex for file data_357.hdf5
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_1 for num 485
[LOG] Process 44: Calculating Neighbors
[LOG] Loading pickle file data_357.pickle
[LOG] Processing node features for num 357
[LOG] Processing edge features for num 357
[LOG] Processing tetra features for num 357
[LOG] Processing cluster features for num 357
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing cluster features for num 357
[LOG] Processing adjacency and incidence matrices for num 357
[LOG] Computing n0_to_0 for num 357
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_1 for num 357
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_2 (adjacency) for num 485
[LOG] Calculating for cell ranks 2 and 2
[LOG] GENERATED TETRA
[LOG] Computing n2_to_2 (adjacency) for num 357
[LOG] GENERATED TETRA
[LOG] Computing n3_to_3 (adjacency) for num 485
[LOG] Computing n4_to_4 (coadjacency) for num 485
[LOG] Computing n0_to_1 for num 485
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1464 Tetrahedra.
    [LOG] Generated 44 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.886363636363637
    [LOG] Max number of nodes per cluster is 63 and the number is 10
[LOG] Computing n3_to_3 (adjacency) for num 357
[LOG] Computing n0_to_2 for num 485
[LOG] Computing n4_to_4 (coadjacency) for num 357
[LOG] Computing n0_to_1 for num 357
[LOG] We will select 795 edges and 1464 tetra
[LOG] Edges from tetra 0 and KDTree 795 with 0 edges in common.
[LOG] Computing n0_to_2 for num 357
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_3 for num 357
[LOG] Computing n0_to_4 for num 357
[LOG] Computing n1_to_2 for num 357
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_3 for num 485
[LOG] Computing n0_to_4 for num 485
[LOG] Computing n1_to_2 for num 485
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 3 subset clusters.
[LOG] Computing n1_to_3 for num 357
[LOG] Computing n1_to_4 for num 357
[LOG] Process 106: Created combinatorial complex for file data_849.hdf5
[LOG] Computing n2_to_3 for num 357
[LOG] Computing n2_to_4 for num 357
[LOG] Process 106: Calculating Neighbors
[LOG] Loading pickle file data_849.pickle
[LOG] Processing node features for num 849
[LOG] Processing edge features for num 849
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_4 for num 357
[LOG] Global feature for num 357
[LOG] Global feature for num 357
[LOG] Saving tensor x_0_357.pt
[LOG] Saving tensor x_1_357.pt
[LOG] Saving tensor x_2_357.pt
[LOG] Saving tensor x_3_357.pt
[LOG] Saving tensor x_4_357.pt
[LOG] Saving tensor n0_to_0_357.pt
[LOG] Saving tensor n1_to_1_357.pt
[LOG] Processing tetra features for num 849
[LOG] Saving tensor n2_to_2_357.pt
[LOG] Saving tensor n3_to_3_357.pt
[LOG] Computing n1_to_3 for num 485
[LOG] Saving tensor n4_to_4_357.pt
[LOG] Saving tensor n0_to_1_357.pt
[LOG] Saving tensor n0_to_2_357.pt
[LOG] Saving tensor n0_to_3_357.pt
[LOG] Saving tensor n0_to_4_357.pt
[LOG] Computing n1_to_4 for num 485
[LOG] Processing cluster features for num 849
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2513 Tetrahedra.
    [LOG] Generated 71 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.901408450704226
    [LOG] Max number of nodes per cluster is 90 and the number is 61[LOG] Saving tensor n1_to_2_357.pt

[LOG] Saving tensor n1_to_3_357.pt
[LOG] Computing n2_to_3 for num 485
[LOG] Processing cluster features for num 849
[LOG] Saving tensor n1_to_4_357.pt
[LOG] Saving tensor n2_to_3_357.pt
[LOG] Saving tensor n2_to_4_357.pt
[LOG] Saving tensor n3_to_4_357.pt
[LOG] Processing adjacency and incidence matrices for num 849
[LOG] Saving tensor global_feature_357.pt
[LOG] Computing n0_to_0 for num 849
[LOG] Process 44: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_1 for num 849
[LOG] Computing n2_to_4 for num 485
[LOG] We will select 448 edges and 2513 tetra
[LOG] Edges from tetra 0 and KDTree 3247 with 0 edges in common.
[LOG] Computing n3_to_4 for num 485
[LOG] Global feature for num 485
[LOG] Global feature for num 485
[LOG] Saving tensor x_0_485.pt
[LOG] Saving tensor x_1_485.pt
[LOG] Saving tensor x_2_485.pt
[LOG] Saving tensor x_3_485.pt
[LOG] Saving tensor x_4_485.pt
[LOG] Saving tensor n0_to_0_485.pt
[LOG] Saving tensor n1_to_1_485.pt
[LOG] Saving tensor n2_to_2_485.pt
[LOG] Saving tensor n3_to_3_485.pt
[LOG] Saving tensor n4_to_4_485.pt
[LOG] Saving tensor n0_to_1_485.pt
[LOG] Saving tensor n0_to_2_485.pt
[LOG] Saving tensor n0_to_3_485.pt
[LOG] Saving tensor n0_to_4_485.pt
[LOG] Saving tensor n1_to_2_485.pt
[LOG] Saving tensor n1_to_3_485.pt
[LOG] Saving tensor n1_to_4_485.pt
[LOG] Saving tensor n2_to_3_485.pt
[LOG] Saving tensor n2_to_4_485.pt
[LOG] Saving tensor n3_to_4_485.pt
[LOG] Saving tensor global_feature_485.pt
[LOG] Process 60: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n2_to_2 (adjacency) for num 849
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_3 (adjacency) for num 849
[LOG] Computing n4_to_4 (coadjacency) for num 849
[LOG] Computing n0_to_1 for num 849
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_2 for num 849
[LOG] Computing n0_to_3 for num 849
[LOG] Computing n0_to_4 for num 849
[LOG] Computing n1_to_2 for num 849
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 52: Created combinatorial complex for file data_420.hdf5
[LOG] Computing n1_to_3 for num 849
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_4 for num 849
[LOG] Computing n2_to_3 for num 849
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n2_to_4 for num 849
[LOG] Computing n3_to_4 for num 849
[LOG] Global feature for num 849
[LOG] Global feature for num 849
[LOG] Saving tensor x_0_849.pt
[LOG] Saving tensor x_1_849.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor x_2_849.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor x_3_849.pt
[LOG] Saving tensor x_4_849.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n0_to_0_849.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n1_to_1_849.pt
[LOG] Process 52: Calculating Neighbors
[LOG] Loading pickle file data_420.pickle
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Processing node features for num 420
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n2_to_2_849.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n3_to_3_849.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Processing edge features for num 420
[LOG] Saving tensor n4_to_4_849.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n0_to_1_849.pt
[LOG] Saving tensor n0_to_2_849.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n0_to_3_849.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n0_to_4_849.pt
[LOG] Saving tensor n1_to_2_849.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n1_to_3_849.pt
[LOG] Processing tetra features for num 420
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n1_to_4_849.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n2_to_3_849.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n2_to_4_849.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n3_to_4_849.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor global_feature_849.pt
[LOG] Process 106: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Processing cluster features for num 420
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing cluster features for num 420
[LOG] Processing adjacency and incidence matrices for num 420
[LOG] Computing n0_to_0 for num 420
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_1 for num 420
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Computing n2_to_2 (adjacency) for num 420
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 420
[LOG] Computing n4_to_4 (coadjacency) for num 420
[LOG] Computing n0_to_1 for num 420
[LOG] Computing n0_to_2 for num 420
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_3 for num 420
[LOG] Computing n0_to_4 for num 420
[LOG] Computing n1_to_2 for num 420
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_3 for num 420
[LOG] Computing n1_to_4 for num 420
[LOG] Computing n2_to_3 for num 420
[LOG] Computing n2_to_4 for num 420
[LOG] Computing n3_to_4 for num 420
[LOG] Global feature for num 420
[LOG] Global feature for num 420
[LOG] Saving tensor x_0_420.pt
[LOG] Saving tensor x_1_420.pt
[LOG] Saving tensor x_2_420.pt
[LOG] Saving tensor x_3_420.pt
[LOG] Saving tensor x_4_420.pt
[LOG] Saving tensor n0_to_0_420.pt
[LOG] Saving tensor n1_to_1_420.pt
[LOG] Saving tensor n2_to_2_420.pt
[LOG] Saving tensor n3_to_3_420.pt
[LOG] Saving tensor n4_to_4_420.pt
[LOG] Saving tensor n0_to_1_420.pt
[LOG] Saving tensor n0_to_2_420.pt
[LOG] Saving tensor n0_to_3_420.pt
[LOG] Saving tensor n0_to_4_420.pt
[LOG] Saving tensor n1_to_2_420.pt
[LOG] Saving tensor n1_to_3_420.pt
[LOG] Saving tensor n1_to_4_420.pt
[LOG] Saving tensor n2_to_3_420.pt
[LOG] Saving tensor n2_to_4_420.pt
[LOG] Saving tensor n3_to_4_420.pt
[LOG] Saving tensor global_feature_420.pt
[LOG] Process 52: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 3886 Tetrahedra.
    [LOG] Generated 85 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.894117647058824
    [LOG] Max number of nodes per cluster is 56 and the number is 30
[LOG] We will select 870 edges and 3886 tetra
[LOG] Edges from tetra 0 and KDTree 870 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2307 Tetrahedra.
    [LOG] Generated 43 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 18.3953488372093
    [LOG] Max number of nodes per cluster is 133 and the number is 42
[LOG] We will select 365 edges and 2307 tetra
[LOG] Edges from tetra 0 and KDTree 2187 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 126: Created combinatorial complex for file data_991.hdf5
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 126: Calculating Neighbors
[LOG] Loading pickle file data_991.pickle
[LOG] Processing node features for num 991
[LOG] Processing edge features for num 991
[LOG] Processing tetra features for num 991
[LOG] Processing cluster features for num 991
[LOG] Processing cluster features for num 991
[LOG] Processing adjacency and incidence matrices for num 991
[LOG] Computing n0_to_0 for num 991
[LOG] Computing n1_to_1 for num 991
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n2_to_2 (adjacency) for num 991
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 3 subset clusters.
[LOG] Computing n3_to_3 (adjacency) for num 991
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n4_to_4 (coadjacency) for num 991
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n0_to_1 for num 991
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Computing n0_to_2 for num 991
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] GENERATED TETRA
[LOG] Process 109: Created combinatorial complex for file data_869.hdf5
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 109: Calculating Neighbors
[LOG] Loading pickle file data_869.pickle
[LOG] Processing node features for num 869
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing edge features for num 869
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_3 for num 991
[LOG] Processing tetra features for num 869
[LOG] Computing n0_to_4 for num 991
[LOG] Computing n1_to_2 for num 991
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Processing cluster features for num 869
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Processing cluster features for num 869
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 869
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n0_to_0 for num 869
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n1_to_3 for num 991
[LOG] Computing n1_to_4 for num 991
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_3 for num 991
[LOG] Computing n1_to_1 for num 869
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n2_to_4 for num 991
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3056 Tetrahedra.
    [LOG] Generated 93 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.311827956989248
    [LOG] Max number of nodes per cluster is 48 and the number is 75
[LOG] Computing n3_to_4 for num 991
[LOG] Global feature for num 991
[LOG] Global feature for num 991
[LOG] Saving tensor x_0_991.pt
[LOG] Saving tensor x_1_991.pt
[LOG] Saving tensor x_2_991.pt
[LOG] Saving tensor x_3_991.pt
[LOG] Saving tensor x_4_991.pt
[LOG] Saving tensor n0_to_0_991.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n1_to_1_991.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor n2_to_2_991.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n3_to_3_991.pt
[LOG] Saving tensor n4_to_4_991.pt
[LOG] Saving tensor n0_to_1_991.pt
[LOG] Saving tensor n0_to_2_991.pt
[LOG] Saving tensor n0_to_3_991.pt
[LOG] Saving tensor n0_to_4_991.pt
[LOG] Saving tensor n1_to_2_991.pt
[LOG] Saving tensor n1_to_3_991.pt
[LOG] Saving tensor n1_to_4_991.pt
[LOG] Saving tensor n2_to_3_991.pt
[LOG] Saving tensor n2_to_4_991.pt
[LOG] Saving tensor n3_to_4_991.pt
[LOG] Saving tensor global_feature_991.pt
[LOG] Process 126: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] We will select 784 edges and 3056 tetra
[LOG] Edges from tetra 0 and KDTree 1368 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_2 (adjacency) for num 869
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_3 (adjacency) for num 869
[LOG] Computing n4_to_4 (coadjacency) for num 869
[LOG] Computing n0_to_1 for num 869
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_2 for num 869
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 1 subset clusters.
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1582 Tetrahedra.
    [LOG] Generated 45 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.555555555555555
    [LOG] Max number of nodes per cluster is 58 and the number is 43
[LOG] We will select 356 edges and 1582 tetra
[LOG] Edges from tetra 0 and KDTree 3208 with 0 edges in common.
[LOG] Process 61: Created combinatorial complex for file data_492.hdf5
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 61: Calculating Neighbors
[LOG] Loading pickle file data_492.pickle
[LOG] Processing node features for num 492
[LOG] Processing edge features for num 492
[LOG] Processing tetra features for num 492
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_3 for num 869
[LOG] Computing n0_to_4 for num 869
[LOG] Processing cluster features for num 492
[LOG] Computing n1_to_2 for num 869
[LOG] Processing cluster features for num 492
[LOG] Process 96: Created combinatorial complex for file data_774.hdf5
[LOG] Processing adjacency and incidence matrices for num 492
[LOG] Computing n0_to_0 for num 492
[LOG] Computing n1_to_1 for num 492
[LOG] Process 96: Calculating Neighbors
[LOG] Loading pickle file data_774.pickle
[LOG] Processing node features for num 774
[LOG] Processing edge features for num 774
[LOG] Processing tetra features for num 774
[LOG] Processing cluster features for num 774
[LOG] Processing cluster features for num 774
[LOG] Processing adjacency and incidence matrices for num 774
[LOG] Computing n0_to_0 for num 774
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_1 for num 774
[LOG] GENERATED TETRA
[LOG] Computing n2_to_2 (adjacency) for num 774
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n3_to_3 (adjacency) for num 774
[LOG] Computing n4_to_4 (coadjacency) for num 774
[LOG] Computing n0_to_1 for num 774
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_2 for num 774
[LOG] Computing n2_to_2 (adjacency) for num 492
[LOG] Computing n1_to_3 for num 869
[LOG] Computing n1_to_4 for num 869
[LOG] Computing n2_to_3 for num 869
[LOG] Computing n2_to_4 for num 869
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 3039 Tetrahedra.
    [LOG] Generated 78 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.243589743589743
    [LOG] Max number of nodes per cluster is 42 and the number is 10
[LOG] Computing n3_to_4 for num 869
[LOG] Global feature for num 869
[LOG] Global feature for num 869
[LOG] Saving tensor x_0_869.pt
[LOG] Saving tensor x_1_869.pt
[LOG] Saving tensor x_2_869.pt
[LOG] Saving tensor x_3_869.pt
[LOG] Saving tensor x_4_869.pt
[LOG] Saving tensor n0_to_0_869.pt
[LOG] Computing n0_to_3 for num 774
[LOG] Saving tensor n1_to_1_869.pt
[LOG] Saving tensor n2_to_2_869.pt
[LOG] Saving tensor n3_to_3_869.pt
[LOG] Saving tensor n4_to_4_869.pt
[LOG] Computing n0_to_4 for num 774
[LOG] Saving tensor n0_to_1_869.pt
[LOG] Saving tensor n0_to_2_869.pt
[LOG] Saving tensor n0_to_3_869.pt
[LOG] Saving tensor n0_to_4_869.pt
[LOG] Saving tensor n1_to_2_869.pt
[LOG] Saving tensor n1_to_3_869.pt
[LOG] Computing n1_to_2 for num 774
[LOG] Saving tensor n1_to_4_869.pt
[LOG] Saving tensor n2_to_3_869.pt
[LOG] Saving tensor n2_to_4_869.pt
[LOG] Saving tensor n3_to_4_869.pt
[LOG] Saving tensor global_feature_869.pt
[LOG] Process 109: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1811 Tetrahedra.
    [LOG] Generated 39 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.794871794871796
    [LOG] Max number of nodes per cluster is 89 and the number is 38
[LOG] We will select 500 edges and 3039 tetra
[LOG] Edges from tetra 0 and KDTree 500 with 0 edges in common.
[LOG] Computing n3_to_3 (adjacency) for num 492
[LOG] Computing n4_to_4 (coadjacency) for num 492
[LOG] Computing n0_to_1 for num 492
[LOG] We will select 238 edges and 1811 tetra
[LOG] Edges from tetra 0 and KDTree 981 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_3 for num 774
[LOG] Computing n1_to_4 for num 774
[LOG] Computing n2_to_3 for num 774
[LOG] Computing n2_to_4 for num 774
[LOG] Computing n0_to_2 for num 492
[LOG] Computing n3_to_4 for num 774
[LOG] Global feature for num 774
[LOG] Global feature for num 774
[LOG] Saving tensor x_0_774.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor x_1_774.pt
[LOG] Saving tensor x_2_774.pt
[LOG] Saving tensor x_3_774.pt
[LOG] Saving tensor x_4_774.pt
[LOG] Saving tensor n0_to_0_774.pt
[LOG] Saving tensor n1_to_1_774.pt
[LOG] Saving tensor n2_to_2_774.pt
[LOG] Saving tensor n3_to_3_774.pt
[LOG] Saving tensor n4_to_4_774.pt
[LOG] Saving tensor n0_to_1_774.pt
[LOG] Saving tensor n0_to_2_774.pt
[LOG] Saving tensor n0_to_3_774.pt
[LOG] Saving tensor n0_to_4_774.pt
[LOG] Saving tensor n1_to_2_774.pt
[LOG] Saving tensor n1_to_3_774.pt
[LOG] Saving tensor n1_to_4_774.pt
[LOG] Saving tensor n2_to_3_774.pt
[LOG] Saving tensor n2_to_4_774.pt
[LOG] Saving tensor n3_to_4_774.pt
[LOG] Saving tensor global_feature_774.pt
[LOG] Process 96: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] GENERATED TETRA
[LOG] Computing n0_to_3 for num 492
[LOG] Computing n0_to_4 for num 492
[LOG] Computing n1_to_2 for num 492
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1651 Tetrahedra.
    [LOG] Generated 50 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.14
    [LOG] Max number of nodes per cluster is 46 and the number is 4
[LOG] We will select 467 edges and 1651 tetra
[LOG] Edges from tetra 0 and KDTree 640 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 0 subset clusters.
[LOG] Removed 1 subset clusters.
[LOG] Process 72: Created combinatorial complex for file data_583.hdf5
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_3 for num 492
[LOG] Computing n1_to_4 for num 492
[LOG] Process 72: Calculating Neighbors
[LOG] Loading pickle file data_583.pickle
[LOG] Processing node features for num 583
[LOG] Processing edge features for num 583
[LOG] Computing n2_to_3 for num 492
[LOG] Processing tetra features for num 583
[LOG] Processing cluster features for num 583
[LOG] Computing n2_to_4 for num 492
[LOG] Removed 0 subset clusters.
[LOG] Processing cluster features for num 583
[LOG] Processing adjacency and incidence matrices for num 583
[LOG] Computing n0_to_0 for num 583
[LOG] Computing n1_to_1 for num 583
[LOG] Computing n3_to_4 for num 492
[LOG] Global feature for num 492
[LOG] Global feature for num 492
[LOG] Saving tensor x_0_492.pt
[LOG] Saving tensor x_1_492.pt
[LOG] Saving tensor x_2_492.pt
[LOG] Saving tensor x_3_492.pt
[LOG] Saving tensor x_4_492.pt
[LOG] Saving tensor n0_to_0_492.pt
[LOG] Saving tensor n1_to_1_492.pt
[LOG] Saving tensor n2_to_2_492.pt
[LOG] Saving tensor n3_to_3_492.pt
[LOG] Saving tensor n4_to_4_492.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n0_to_1_492.pt
[LOG] Saving tensor n0_to_2_492.pt
[LOG] Saving tensor n0_to_3_492.pt
[LOG] Saving tensor n0_to_4_492.pt
[LOG] Saving tensor n1_to_2_492.pt
[LOG] Saving tensor n1_to_3_492.pt
[LOG] Process 107: Created combinatorial complex for file data_856.hdf5
[LOG] Saving tensor n1_to_4_492.pt
[LOG] Saving tensor n2_to_3_492.pt
[LOG] Saving tensor n2_to_4_492.pt
[LOG] Process 57: Created combinatorial complex for file data_459.hdf5
[LOG] Saving tensor n3_to_4_492.pt
[LOG] Saving tensor global_feature_492.pt
[LOG] Process 61: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n2_to_2 (adjacency) for num 583
[LOG] Process 57: Calculating Neighbors
[LOG] Loading pickle file data_459.pickle
[LOG] Processing node features for num 459
[LOG] Processing edge features for num 459
[LOG] Processing tetra features for num 459
[LOG] Process 107: Calculating Neighbors
[LOG] Loading pickle file data_856.pickle
[LOG] Processing node features for num 856
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing edge features for num 856
[LOG] Processing cluster features for num 459
[LOG] Computing n3_to_3 (adjacency) for num 583
[LOG] Computing n4_to_4 (coadjacency) for num 583
[LOG] Computing n0_to_1 for num 583
[LOG] Processing cluster features for num 459
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing tetra features for num 856
[LOG] Processing adjacency and incidence matrices for num 459
[LOG] Computing n0_to_0 for num 459
[LOG] Computing n0_to_2 for num 583
[LOG] Processing cluster features for num 856
[LOG] Computing n1_to_1 for num 459
[LOG] Processing cluster features for num 856
[LOG] Processing adjacency and incidence matrices for num 856
[LOG] Computing n0_to_0 for num 856
[LOG] Computing n1_to_1 for num 856
[LOG] Computing n2_to_2 (adjacency) for num 459
[LOG] Computing n0_to_3 for num 583
[LOG] Computing n0_to_4 for num 583
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_2 for num 583
[LOG] Computing n3_to_3 (adjacency) for num 459
[LOG] Computing n4_to_4 (coadjacency) for num 459
[LOG] Computing n0_to_1 for num 459
[LOG] Computing n0_to_2 for num 459
[LOG] Computing n1_to_3 for num 583
[LOG] Computing n1_to_4 for num 583
[LOG] Computing n2_to_3 for num 583
[LOG] Computing n2_to_4 for num 583
[LOG] Computing n3_to_4 for num 583
[LOG] Global feature for num 583
[LOG] Computing n2_to_2 (adjacency) for num 856
[LOG] Global feature for num 583
[LOG] Saving tensor x_0_583.pt
[LOG] Saving tensor x_1_583.pt
[LOG] Saving tensor x_2_583.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1836 Tetrahedra.
    [LOG] Generated 56 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.410714285714285
    [LOG] Max number of nodes per cluster is 73 and the number is 45
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor x_3_583.pt
[LOG] Saving tensor x_4_583.pt
[LOG] Saving tensor n0_to_0_583.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n1_to_1_583.pt
[LOG] We will select 1040 edges and 1836 tetra
[LOG] Edges from tetra 0 and KDTree 2077 with 0 edges in common.
[LOG] Saving tensor n2_to_2_583.pt
[LOG] Saving tensor n3_to_3_583.pt
[LOG] Saving tensor n4_to_4_583.pt
[LOG] Saving tensor n0_to_1_583.pt
[LOG] Saving tensor n0_to_2_583.pt
[LOG] Saving tensor n0_to_3_583.pt
[LOG] Saving tensor n0_to_4_583.pt
[LOG] Saving tensor n1_to_2_583.pt
[LOG] Saving tensor n1_to_3_583.pt
[LOG] Saving tensor n1_to_4_583.pt
[LOG] Saving tensor n2_to_3_583.pt
[LOG] Saving tensor n2_to_4_583.pt
[LOG] Saving tensor n3_to_4_583.pt
[LOG] Saving tensor global_feature_583.pt
[LOG] Process 72: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_3 for num 459
[LOG] Computing n0_to_4 for num 459
[LOG] Computing n1_to_2 for num 459
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n1_to_3 for num 459
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n1_to_4 for num 459
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n2_to_3 for num 459
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Computing n3_to_3 (adjacency) for num 856
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n4_to_4 (coadjacency) for num 856
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n0_to_1 for num 856
[LOG] Computing n2_to_4 for num 459
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n3_to_4 for num 459
[LOG] Global feature for num 459
[LOG] Global feature for num 459
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor x_0_459.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor x_1_459.pt
[LOG] Saving tensor x_2_459.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor x_3_459.pt
[LOG] Saving tensor x_4_459.pt
[LOG] Saving tensor n0_to_0_459.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n1_to_1_459.pt
[LOG] Computing n0_to_2 for num 856
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor n2_to_2_459.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor n3_to_3_459.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n4_to_4_459.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n0_to_1_459.pt
[LOG] Saving tensor n0_to_2_459.pt
[LOG] Saving tensor n0_to_3_459.pt
[LOG] Saving tensor n0_to_4_459.pt
[LOG] Saving tensor n1_to_2_459.pt
[LOG] Saving tensor n1_to_3_459.pt
[LOG] Saving tensor n1_to_4_459.pt
[LOG] Saving tensor n2_to_3_459.pt
[LOG] Saving tensor n2_to_4_459.pt
[LOG] Saving tensor n3_to_4_459.pt
[LOG] Saving tensor global_feature_459.pt
[LOG] Process 57: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 94: Created combinatorial complex for file data_757.hdf5
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 94: Calculating Neighbors
[LOG] Loading pickle file data_757.pickle
[LOG] Processing node features for num 757
[LOG] Processing edge features for num 757
[LOG] Computing n0_to_3 for num 856
[LOG] Computing n0_to_4 for num 856
[LOG] Processing tetra features for num 757
[LOG] Computing n1_to_2 for num 856
[LOG] Processing cluster features for num 757
[LOG] Processing cluster features for num 757
[LOG] Processing adjacency and incidence matrices for num 757
[LOG] Computing n0_to_0 for num 757
[LOG] Computing n1_to_1 for num 757
[LOG] Computing n1_to_3 for num 856
[LOG] Computing n1_to_4 for num 856
[LOG] Computing n2_to_3 for num 856
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_4 for num 856
[LOG] Computing n3_to_4 for num 856
[LOG] Global feature for num 856
[LOG] Global feature for num 856
[LOG] Saving tensor x_0_856.pt
[LOG] Saving tensor x_1_856.pt
[LOG] Saving tensor x_2_856.pt
[LOG] Saving tensor x_3_856.pt
[LOG] Saving tensor x_4_856.pt
[LOG] Saving tensor n0_to_0_856.pt
[LOG] Saving tensor n1_to_1_856.pt
[LOG] Saving tensor n2_to_2_856.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n3_to_3_856.pt
[LOG] Saving tensor n4_to_4_856.pt
[LOG] Saving tensor n0_to_1_856.pt
[LOG] Saving tensor n0_to_2_856.pt
[LOG] Saving tensor n0_to_3_856.pt
[LOG] Saving tensor n0_to_4_856.pt
[LOG] Saving tensor n1_to_2_856.pt
[LOG] Saving tensor n1_to_3_856.pt
[LOG] Saving tensor n1_to_4_856.pt
[LOG] Saving tensor n2_to_3_856.pt
[LOG] Saving tensor n2_to_4_856.pt
[LOG] Saving tensor n3_to_4_856.pt
[LOG] Saving tensor global_feature_856.pt
[LOG] Process 107: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n2_to_2 (adjacency) for num 757
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_3 (adjacency) for num 757
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n4_to_4 (coadjacency) for num 757
[LOG] Computing n0_to_1 for num 757
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_2 for num 757
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_3 for num 757
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_4 for num 757
[LOG] Computing n1_to_2 for num 757
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_3 for num 757
[LOG] Computing n1_to_4 for num 757
[LOG] Computing n2_to_3 for num 757
[LOG] Computing n2_to_4 for num 757
[LOG] Computing n3_to_4 for num 757
[LOG] Global feature for num 757
[LOG] Global feature for num 757
[LOG] Saving tensor x_0_757.pt
[LOG] Saving tensor x_1_757.pt
[LOG] Saving tensor x_2_757.pt
[LOG] Saving tensor x_3_757.pt
[LOG] Saving tensor x_4_757.pt
[LOG] Saving tensor n0_to_0_757.pt
[LOG] Saving tensor n1_to_1_757.pt
[LOG] Saving tensor n2_to_2_757.pt
[LOG] Saving tensor n3_to_3_757.pt
[LOG] Saving tensor n4_to_4_757.pt
[LOG] Saving tensor n0_to_1_757.pt
[LOG] Saving tensor n0_to_2_757.pt
[LOG] Saving tensor n0_to_3_757.pt
[LOG] Saving tensor n0_to_4_757.pt
[LOG] Saving tensor n1_to_2_757.pt
[LOG] Saving tensor n1_to_3_757.pt
[LOG] Saving tensor n1_to_4_757.pt
[LOG] Saving tensor n2_to_3_757.pt
[LOG] Saving tensor n2_to_4_757.pt
[LOG] Saving tensor n3_to_4_757.pt
[LOG] Saving tensor global_feature_757.pt
[LOG] Process 94: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2158 Tetrahedra.
    [LOG] Generated 62 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.306451612903226
    [LOG] Max number of nodes per cluster is 37 and the number is 43
[LOG] We will select 484 edges and 2158 tetra
[LOG] Edges from tetra 0 and KDTree 997 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 80: Created combinatorial complex for file data_644.hdf5
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 80: Calculating Neighbors
[LOG] Loading pickle file data_644.pickle
[LOG] Processing node features for num 644
[LOG] Processing edge features for num 644
[LOG] Processing tetra features for num 644
[LOG] Processing cluster features for num 644
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing cluster features for num 644
[LOG] Processing adjacency and incidence matrices for num 644
[LOG] Computing n0_to_0 for num 644
[LOG] Computing n1_to_1 for num 644
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_2 (adjacency) for num 644
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_3 (adjacency) for num 644
[LOG] Computing n4_to_4 (coadjacency) for num 644
[LOG] Computing n0_to_1 for num 644
[LOG] Computing n0_to_2 for num 644
[LOG] Computing n0_to_3 for num 644
[LOG] Computing n0_to_4 for num 644
[LOG] Computing n1_to_2 for num 644
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_3 for num 644
[LOG] Computing n1_to_4 for num 644
[LOG] Computing n2_to_3 for num 644
[LOG] Computing n2_to_4 for num 644
[LOG] Computing n3_to_4 for num 644
[LOG] Global feature for num 644
[LOG] Global feature for num 644
[LOG] Saving tensor x_0_644.pt
[LOG] Saving tensor x_1_644.pt
[LOG] Saving tensor x_2_644.pt
[LOG] Saving tensor x_3_644.pt
[LOG] Saving tensor x_4_644.pt
[LOG] Saving tensor n0_to_0_644.pt
[LOG] Saving tensor n1_to_1_644.pt
[LOG] Saving tensor n2_to_2_644.pt
[LOG] Saving tensor n3_to_3_644.pt
[LOG] Saving tensor n4_to_4_644.pt
[LOG] Saving tensor n0_to_1_644.pt
[LOG] Saving tensor n0_to_2_644.pt
[LOG] Saving tensor n0_to_3_644.pt
[LOG] Saving tensor n0_to_4_644.pt
[LOG] Saving tensor n1_to_2_644.pt
[LOG] Saving tensor n1_to_3_644.pt
[LOG] Saving tensor n1_to_4_644.pt
[LOG] Saving tensor n2_to_3_644.pt
[LOG] Saving tensor n2_to_4_644.pt
[LOG] Saving tensor n3_to_4_644.pt
[LOG] Saving tensor global_feature_644.pt
[LOG] Process 80: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2460 Tetrahedra.
    [LOG] Generated 72 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.86111111111111
    [LOG] Max number of nodes per cluster is 122 and the number is 60
[LOG] Calculating for cell ranks 1 and 2
[LOG] We will select 609 edges and 2460 tetra
[LOG] Edges from tetra 0 and KDTree 3379 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 1 subset clusters.
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1761 Tetrahedra.
    [LOG] Generated 45 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.244444444444444
    [LOG] Max number of nodes per cluster is 38 and the number is 34
[LOG] We will select 371 edges and 1761 tetra
[LOG] Edges from tetra 0 and KDTree 1172 with 0 edges in common.
[LOG] Process 16: Created combinatorial complex for file data_133.hdf5
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 16: Calculating Neighbors
[LOG] Loading pickle file data_133.pickle
[LOG] Processing node features for num 133
[LOG] Processing edge features for num 133
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing tetra features for num 133
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing cluster features for num 133
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Processing cluster features for num 133
[LOG] Processing adjacency and incidence matrices for num 133
[LOG] Computing n0_to_0 for num 133
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Process 38: Created combinatorial complex for file data_310.hdf5
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n1_to_1 for num 133
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 133
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 38: Calculating Neighbors
[LOG] Loading pickle file data_310.pickle
[LOG] Processing node features for num 310
[LOG] Processing edge features for num 310
[LOG] Computing n3_to_3 (adjacency) for num 133
[LOG] Computing n4_to_4 (coadjacency) for num 133
[LOG] Processing tetra features for num 310
[LOG] Computing n0_to_1 for num 133
[LOG] Processing cluster features for num 310
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing cluster features for num 310
[LOG] Processing adjacency and incidence matrices for num 310
[LOG] Computing n0_to_0 for num 310
[LOG] Computing n1_to_1 for num 310
[LOG] Computing n0_to_2 for num 133
[LOG] Computing n2_to_2 (adjacency) for num 310
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_3 (adjacency) for num 310
[LOG] Computing n4_to_4 (coadjacency) for num 310
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_1 for num 310
[LOG] Computing n0_to_2 for num 310
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_3 for num 310
[LOG] Computing n0_to_4 for num 310
[LOG] Computing n1_to_2 for num 310
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n0_to_3 for num 133
[LOG] Computing n0_to_4 for num 133
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n1_to_3 for num 310
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n1_to_4 for num 310
[LOG] Computing n1_to_2 for num 133
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Computing n2_to_3 for num 310
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n2_to_4 for num 310
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n3_to_4 for num 310
[LOG] Global feature for num 310
[LOG] Global feature for num 310
[LOG] Saving tensor x_0_310.pt
[LOG] Saving tensor x_1_310.pt
[LOG] Saving tensor x_2_310.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor x_3_310.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor x_4_310.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n0_to_0_310.pt
[LOG] Saving tensor n1_to_1_310.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n2_to_2_310.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n3_to_3_310.pt
[LOG] Saving tensor n4_to_4_310.pt
[LOG] Saving tensor n0_to_1_310.pt
[LOG] Saving tensor n0_to_2_310.pt
[LOG] Saving tensor n0_to_3_310.pt
[LOG] Saving tensor n0_to_4_310.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n1_to_2_310.pt
[LOG] Saving tensor n1_to_3_310.pt
[LOG] Saving tensor n1_to_4_310.pt
[LOG] Saving tensor n2_to_3_310.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n2_to_4_310.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor n3_to_4_310.pt
[LOG] Saving tensor global_feature_310.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Process 38: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_3 for num 133
[LOG] Computing n1_to_4 for num 133
[LOG] Computing n2_to_3 for num 133
[LOG] Computing n2_to_4 for num 133
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_4 for num 133
[LOG] Global feature for num 133
[LOG] Global feature for num 133
[LOG] Saving tensor x_0_133.pt
[LOG] Saving tensor x_1_133.pt
[LOG] Saving tensor x_2_133.pt
[LOG] Saving tensor x_3_133.pt
[LOG] Saving tensor x_4_133.pt
[LOG] Saving tensor n0_to_0_133.pt
[LOG] Saving tensor n1_to_1_133.pt
[LOG] Saving tensor n2_to_2_133.pt
[LOG] Saving tensor n3_to_3_133.pt
[LOG] Saving tensor n4_to_4_133.pt
[LOG] Saving tensor n0_to_1_133.pt
[LOG] Saving tensor n0_to_2_133.pt
[LOG] Saving tensor n0_to_3_133.pt
[LOG] Saving tensor n0_to_4_133.pt
[LOG] Saving tensor n1_to_2_133.pt
[LOG] Saving tensor n1_to_3_133.pt
[LOG] Saving tensor n1_to_4_133.pt
[LOG] Saving tensor n2_to_3_133.pt
[LOG] Saving tensor n2_to_4_133.pt
[LOG] Saving tensor n3_to_4_133.pt
[LOG] Saving tensor global_feature_133.pt
[LOG] Process 16: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1806 Tetrahedra.
    [LOG] Generated 51 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.607843137254902
    [LOG] Max number of nodes per cluster is 32 and the number is 13
[LOG] We will select 170 edges and 1806 tetra
[LOG] Edges from tetra 0 and KDTree 170 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 66: Created combinatorial complex for file data_534.hdf5
[LOG] Process 66: Calculating Neighbors
[LOG] Loading pickle file data_534.pickle
[LOG] Processing node features for num 534
[LOG] Processing edge features for num 534
[LOG] Processing tetra features for num 534
[LOG] Processing cluster features for num 534
[LOG] Processing cluster features for num 534
[LOG] Calculating for cell ranks 0 and 3
[LOG] GENERATED TETRA
[LOG] Processing adjacency and incidence matrices for num 534
[LOG] Computing n0_to_0 for num 534
[LOG] Computing n1_to_1 for num 534
[LOG] Computing n2_to_2 (adjacency) for num 534
[LOG] Computing n3_to_3 (adjacency) for num 534
[LOG] Computing n4_to_4 (coadjacency) for num 534
[LOG] Computing n0_to_1 for num 534
[LOG] Computing n0_to_2 for num 534
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_3 for num 534
[LOG] Computing n0_to_4 for num 534
[LOG] Computing n1_to_2 for num 534
[LOG] Computing n1_to_3 for num 534
[LOG] Computing n1_to_4 for num 534
[LOG] Computing n2_to_3 for num 534
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2732 Tetrahedra.
    [LOG] Generated 89 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.101123595505618
    [LOG] Max number of nodes per cluster is 40 and the number is 45
[LOG] Computing n2_to_4 for num 534
[LOG] Computing n3_to_4 for num 534
[LOG] Global feature for num 534
[LOG] Global feature for num 534
[LOG] Saving tensor x_0_534.pt
[LOG] Saving tensor x_1_534.pt
[LOG] Saving tensor x_2_534.pt
[LOG] Saving tensor x_3_534.pt
[LOG] Saving tensor x_4_534.pt
[LOG] Saving tensor n0_to_0_534.pt
[LOG] Saving tensor n1_to_1_534.pt
[LOG] Saving tensor n2_to_2_534.pt
[LOG] Saving tensor n3_to_3_534.pt
[LOG] Saving tensor n4_to_4_534.pt
[LOG] Saving tensor n0_to_1_534.pt
[LOG] Saving tensor n0_to_2_534.pt
[LOG] Saving tensor n0_to_3_534.pt
[LOG] Saving tensor n0_to_4_534.pt
[LOG] Saving tensor n1_to_2_534.pt
[LOG] Saving tensor n1_to_3_534.pt
[LOG] Saving tensor n1_to_4_534.pt
[LOG] Saving tensor n2_to_3_534.pt
[LOG] We will select 492 edges and 2732 tetra
[LOG] Edges from tetra 0 and KDTree 769 with 0 edges in common.
[LOG] Saving tensor n2_to_4_534.pt
[LOG] Saving tensor n3_to_4_534.pt
[LOG] Saving tensor global_feature_534.pt
[LOG] Process 66: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 1 subset clusters.
[LOG] Process 99: Created combinatorial complex for file data_798.hdf5
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 99: Calculating Neighbors
[LOG] Loading pickle file data_798.pickle
[LOG] Processing node features for num 798
[LOG] Processing edge features for num 798
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing tetra features for num 798
[LOG] Processing cluster features for num 798
[LOG] Processing cluster features for num 798
[LOG] Processing adjacency and incidence matrices for num 798
[LOG] Computing n0_to_0 for num 798
[LOG] Computing n1_to_1 for num 798
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_2 (adjacency) for num 798
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n3_to_3 (adjacency) for num 798
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n4_to_4 (coadjacency) for num 798
[LOG] Computing n0_to_1 for num 798
[LOG] Computing n0_to_2 for num 798
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_3 for num 798
[LOG] Computing n0_to_4 for num 798
[LOG] Computing n1_to_2 for num 798
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n1_to_3 for num 798
[LOG] Computing n1_to_4 for num 798
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n2_to_3 for num 798
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_4 for num 798
[LOG] Computing n3_to_4 for num 798
[LOG] Global feature for num 798
[LOG] Global feature for num 798
[LOG] Saving tensor x_0_798.pt
[LOG] Saving tensor x_1_798.pt
[LOG] Saving tensor x_2_798.pt
[LOG] Saving tensor x_3_798.pt
[LOG] Saving tensor x_4_798.pt
[LOG] Saving tensor n0_to_0_798.pt
[LOG] Saving tensor n1_to_1_798.pt
[LOG] Saving tensor n2_to_2_798.pt
[LOG] Saving tensor n3_to_3_798.pt
[LOG] Saving tensor n4_to_4_798.pt
[LOG] Saving tensor n0_to_1_798.pt
[LOG] Saving tensor n0_to_2_798.pt
[LOG] Saving tensor n0_to_3_798.pt
[LOG] Saving tensor n0_to_4_798.pt
[LOG] Saving tensor n1_to_2_798.pt
[LOG] Saving tensor n1_to_3_798.pt
[LOG] Saving tensor n1_to_4_798.pt
[LOG] Saving tensor n2_to_3_798.pt
[LOG] Saving tensor n2_to_4_798.pt
[LOG] Saving tensor n3_to_4_798.pt
[LOG] Saving tensor global_feature_798.pt
[LOG] Process 99: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2912 Tetrahedra.
    [LOG] Generated 53 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 19.37735849056604
    [LOG] Max number of nodes per cluster is 205 and the number is 34[LOG] Saving tensor euclidean_2_to_2.pt

[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] We will select 1446 edges and 2912 tetra
[LOG] Edges from tetra 0 and KDTree 3191 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Process 98: Created combinatorial complex for file data_789.hdf5
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 98: Calculating Neighbors
[LOG] Loading pickle file data_789.pickle
[LOG] Processing node features for num 789
[LOG] Processing edge features for num 789
[LOG] Processing tetra features for num 789
[LOG] Processing cluster features for num 789
[LOG] Processing cluster features for num 789
[LOG] Processing adjacency and incidence matrices for num 789
[LOG] Computing n0_to_0 for num 789
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_1 for num 789
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_2 (adjacency) for num 789
[LOG] Calculating for cell ranks 2 and 2
[LOG] GENERATED TETRA
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1278 Tetrahedra.
    [LOG] Generated 54 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.333333333333334
    [LOG] Max number of nodes per cluster is 25 and the number is 13
[LOG] We will select 120 edges and 1278 tetra
[LOG] Edges from tetra 0 and KDTree 882 with 0 edges in common.
[LOG] Computing n3_to_3 (adjacency) for num 789
[LOG] Computing n4_to_4 (coadjacency) for num 789
[LOG] Computing n0_to_1 for num 789
[LOG] Removed 0 subset clusters.
[LOG] Computing n0_to_2 for num 789
[LOG] Process 30: Created combinatorial complex for file data_247.hdf5
[LOG] GENERATED TETRA
[LOG] Process 30: Calculating Neighbors
[LOG] Loading pickle file data_247.pickle
[LOG] Processing node features for num 247
[LOG] Processing edge features for num 247
[LOG] Processing tetra features for num 247
[LOG] Processing cluster features for num 247
[LOG] Processing cluster features for num 247
[LOG] Processing adjacency and incidence matrices for num 247
[LOG] Computing n0_to_0 for num 247
[LOG] Computing n1_to_1 for num 247
[LOG] Computing n2_to_2 (adjacency) for num 247
[LOG] Computing n3_to_3 (adjacency) for num 247
[LOG] Computing n4_to_4 (coadjacency) for num 247
[LOG] Computing n0_to_1 for num 247
[LOG] Computing n0_to_2 for num 247
[LOG] GENERATED TETRA
[LOG] Computing n0_to_3 for num 247
[LOG] Computing n0_to_4 for num 247
[LOG] Computing n1_to_2 for num 247
[LOG] Computing n1_to_3 for num 247
[LOG] Computing n1_to_4 for num 247
[LOG] Computing n2_to_3 for num 247
[LOG] Computing n2_to_4 for num 247
[LOG] Computing n3_to_4 for num 247
[LOG] Global feature for num 247
[LOG] Global feature for num 247
[LOG] Saving tensor x_0_247.pt
[LOG] Saving tensor x_1_247.pt
[LOG] Saving tensor x_2_247.pt
[LOG] Saving tensor x_3_247.pt
[LOG] Saving tensor x_4_247.pt
[LOG] Saving tensor n0_to_0_247.pt
[LOG] Saving tensor n1_to_1_247.pt
[LOG] Saving tensor n2_to_2_247.pt
[LOG] Saving tensor n3_to_3_247.pt
[LOG] Saving tensor n4_to_4_247.pt
[LOG] Saving tensor n0_to_1_247.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_3 for num 789
[LOG] Computing n0_to_4 for num 789
[LOG] Computing n1_to_2 for num 789
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1464 Tetrahedra.
    [LOG] Generated 44 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.25
    [LOG] Max number of nodes per cluster is 100 and the number is 39
[LOG] Saving tensor n0_to_2_247.pt
[LOG] We will select 586 edges and 1464 tetra
[LOG] Edges from tetra 0 and KDTree 2015 with 0 edges in common.
[LOG] Saving tensor n0_to_3_247.pt
[LOG] Saving tensor n0_to_4_247.pt
[LOG] Saving tensor n1_to_2_247.pt
[LOG] Saving tensor n1_to_3_247.pt
[LOG] Saving tensor n1_to_4_247.pt
[LOG] Saving tensor n2_to_3_247.pt
[LOG] Saving tensor n2_to_4_247.pt
[LOG] Saving tensor n3_to_4_247.pt
[LOG] Saving tensor global_feature_247.pt
[LOG] Process 30: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1464 Tetrahedra.
    [LOG] Generated 60 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.483333333333333
    [LOG] Max number of nodes per cluster is 44 and the number is 56
[LOG] We will select 795 edges and 1464 tetra
[LOG] Edges from tetra 0 and KDTree 1699 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 78: Created combinatorial complex for file data_631.hdf5
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 1 subset clusters.
[LOG] Process 78: Calculating Neighbors
[LOG] Loading pickle file data_631.pickle
[LOG] Processing node features for num 631
[LOG] Processing edge features for num 631
[LOG] Processing tetra features for num 631
[LOG] Processing cluster features for num 631
[LOG] Processing cluster features for num 631
[LOG] Processing adjacency and incidence matrices for num 631
[LOG] Computing n0_to_0 for num 631
[LOG] Process 106: Created combinatorial complex for file data_850.hdf5
[LOG] Computing n1_to_3 for num 789
[LOG] Computing n1_to_4 for num 789
[LOG] Computing n2_to_3 for num 789
[LOG] Computing n1_to_1 for num 631
[LOG] Process 106: Calculating Neighbors
[LOG] Loading pickle file data_850.pickle
[LOG] Processing node features for num 850
[LOG] Computing n2_to_4 for num 789
[LOG] Processing edge features for num 850
[LOG] Processing tetra features for num 850
[LOG] Computing n3_to_4 for num 789
[LOG] Global feature for num 789
[LOG] Global feature for num 789
[LOG] Saving tensor x_0_789.pt
[LOG] Saving tensor x_1_789.pt
[LOG] Saving tensor x_2_789.pt
[LOG] Processing cluster features for num 850
[LOG] Processing cluster features for num 850
[LOG] Processing adjacency and incidence matrices for num 850
[LOG] Computing n0_to_0 for num 850
[LOG] Saving tensor x_3_789.pt
[LOG] Saving tensor x_4_789.pt
[LOG] Saving tensor n0_to_0_789.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor n1_to_1_789.pt
[LOG] Saving tensor n2_to_2_789.pt
[LOG] Computing n2_to_2 (adjacency) for num 631
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_1 for num 850
[LOG] Computing n3_to_3 (adjacency) for num 631
[LOG] Computing n4_to_4 (coadjacency) for num 631
[LOG] Computing n0_to_1 for num 631
[LOG] Saving tensor n3_to_3_789.pt
[LOG] Computing n0_to_2 for num 631
[LOG] Saving tensor n4_to_4_789.pt
[LOG] Saving tensor n0_to_1_789.pt
[LOG] Saving tensor n0_to_2_789.pt
[LOG] Saving tensor n0_to_3_789.pt
[LOG] Saving tensor n0_to_4_789.pt
[LOG] Saving tensor n1_to_2_789.pt
[LOG] Saving tensor n1_to_3_789.pt
[LOG] Saving tensor n1_to_4_789.pt
[LOG] Saving tensor n2_to_3_789.pt
[LOG] Computing n2_to_2 (adjacency) for num 850
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n3_to_3 (adjacency) for num 850
[LOG] Computing n4_to_4 (coadjacency) for num 850
[LOG] Computing n0_to_1 for num 850
[LOG] Saving tensor n2_to_4_789.pt
[LOG] Saving tensor n3_to_4_789.pt
[LOG] Saving tensor global_feature_789.pt
[LOG] Process 98: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_2 for num 850
[LOG] Computing n0_to_3 for num 631
[LOG] Computing n0_to_4 for num 631
[LOG] Computing n1_to_2 for num 631
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_3 for num 631
[LOG] Computing n1_to_4 for num 631
[LOG] Computing n2_to_3 for num 631
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_4 for num 631
[LOG] Computing n3_to_4 for num 631
[LOG] Global feature for num 631
[LOG] Global feature for num 631
[LOG] Saving tensor x_0_631.pt
[LOG] Saving tensor x_1_631.pt
[LOG] Computing n0_to_3 for num 850
[LOG] Computing n0_to_4 for num 850
[LOG] Computing n1_to_2 for num 850
[LOG] Saving tensor x_2_631.pt
[LOG] Saving tensor x_3_631.pt
[LOG] Saving tensor x_4_631.pt
[LOG] Saving tensor n0_to_0_631.pt
[LOG] Saving tensor n1_to_1_631.pt
[LOG] Saving tensor n2_to_2_631.pt
[LOG] Saving tensor n3_to_3_631.pt
[LOG] Saving tensor n4_to_4_631.pt
[LOG] Saving tensor n0_to_1_631.pt
[LOG] Saving tensor n0_to_2_631.pt
[LOG] Saving tensor n0_to_3_631.pt
[LOG] Saving tensor n0_to_4_631.pt
[LOG] Saving tensor n1_to_2_631.pt
[LOG] Saving tensor n1_to_3_631.pt
[LOG] Saving tensor n1_to_4_631.pt
[LOG] Saving tensor n2_to_3_631.pt
[LOG] Saving tensor n2_to_4_631.pt
[LOG] Saving tensor n3_to_4_631.pt
[LOG] Saving tensor global_feature_631.pt
[LOG] Process 78: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_3 for num 850
[LOG] Computing n1_to_4 for num 850
[LOG] Computing n2_to_3 for num 850
[LOG] Computing n2_to_4 for num 850
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n3_to_4 for num 850
[LOG] Global feature for num 850
[LOG] Global feature for num 850
[LOG] Saving tensor x_0_850.pt
[LOG] Saving tensor x_1_850.pt
[LOG] Saving tensor x_2_850.pt
[LOG] Saving tensor x_3_850.pt
[LOG] Saving tensor x_4_850.pt
[LOG] Saving tensor n0_to_0_850.pt
[LOG] Saving tensor n1_to_1_850.pt
[LOG] Saving tensor n2_to_2_850.pt
[LOG] Saving tensor n3_to_3_850.pt
[LOG] Saving tensor n4_to_4_850.pt
[LOG] Saving tensor n0_to_1_850.pt
[LOG] Saving tensor n0_to_2_850.pt
[LOG] Saving tensor n0_to_3_850.pt
[LOG] Saving tensor n0_to_4_850.pt
[LOG] Saving tensor n1_to_2_850.pt
[LOG] Saving tensor n1_to_3_850.pt
[LOG] Saving tensor n1_to_4_850.pt
[LOG] Saving tensor n2_to_3_850.pt
[LOG] Saving tensor n2_to_4_850.pt
[LOG] Saving tensor n3_to_4_850.pt
[LOG] Saving tensor global_feature_850.pt
[LOG] Process 106: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1651 Tetrahedra.
    [LOG] Generated 34 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.029411764705882
    [LOG] Max number of nodes per cluster is 110 and the number is 2
[LOG] We will select 326 edges and 1651 tetra
[LOG] Edges from tetra 0 and KDTree 326 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.
[LOG] Process 57: Created combinatorial complex for file data_460.hdf5
[LOG] Process 57: Calculating Neighbors
[LOG] Loading pickle file data_460.pickle
[LOG] Processing node features for num 460
[LOG] Processing edge features for num 460
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing tetra features for num 460
[LOG] Processing cluster features for num 460
[LOG] Processing cluster features for num 460
[LOG] Processing adjacency and incidence matrices for num 460
[LOG] Computing n0_to_0 for num 460
[LOG] Computing n1_to_1 for num 460
[LOG] Computing n2_to_2 (adjacency) for num 460
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_3 (adjacency) for num 460
[LOG] Computing n4_to_4 (coadjacency) for num 460
[LOG] Computing n0_to_1 for num 460
[LOG] Computing n0_to_2 for num 460
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_3 for num 460
[LOG] Computing n0_to_4 for num 460
[LOG] Computing n1_to_2 for num 460
[LOG] Computing n1_to_3 for num 460
[LOG] Computing n1_to_4 for num 460
[LOG] Computing n2_to_3 for num 460
[LOG] Computing n2_to_4 for num 460
[LOG] Computing n3_to_4 for num 460
[LOG] Global feature for num 460
[LOG] Global feature for num 460
[LOG] Saving tensor x_0_460.pt
[LOG] Saving tensor x_1_460.pt
[LOG] Saving tensor x_2_460.pt
[LOG] Saving tensor x_3_460.pt
[LOG] Saving tensor x_4_460.pt
[LOG] Saving tensor n0_to_0_460.pt
[LOG] Saving tensor n1_to_1_460.pt
[LOG] Saving tensor n2_to_2_460.pt
[LOG] Saving tensor n3_to_3_460.pt
[LOG] Saving tensor n4_to_4_460.pt
[LOG] Saving tensor n0_to_1_460.pt
[LOG] Saving tensor n0_to_2_460.pt
[LOG] Saving tensor n0_to_3_460.pt
[LOG] Saving tensor n0_to_4_460.pt
[LOG] Saving tensor n1_to_2_460.pt
[LOG] Saving tensor n1_to_3_460.pt
[LOG] Saving tensor n1_to_4_460.pt
[LOG] Saving tensor n2_to_3_460.pt
[LOG] Saving tensor n2_to_4_460.pt
[LOG] Saving tensor n3_to_4_460.pt
[LOG] Saving tensor global_feature_460.pt
[LOG] Process 57: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor hausdorff_0_to_2.pt

    [LOG] We Currently have 2693 Tetrahedra.
    [LOG] Generated 58 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.70689655172414
    [LOG] Max number of nodes per cluster is 147 and the number is 50
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] We will select 572 edges and 2693 tetra
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Edges from tetra 0 and KDTree 3026 with 0 edges in common.
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 44: Created combinatorial complex for file data_358.hdf5
[LOG] Process 44: Calculating Neighbors
[LOG] Loading pickle file data_358.pickle
[LOG] Processing node features for num 358
[LOG] Processing edge features for num 358
[LOG] Processing tetra features for num 358
[LOG] Processing cluster features for num 358
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing cluster features for num 358
[LOG] Processing adjacency and incidence matrices for num 358
[LOG] Computing n0_to_0 for num 358
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_1 for num 358
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n2_to_2 (adjacency) for num 358
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_3 (adjacency) for num 358
[LOG] Computing n4_to_4 (coadjacency) for num 358
[LOG] Computing n0_to_1 for num 358
[LOG] Computing n0_to_2 for num 358
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 807 Tetrahedra.
    [LOG] Generated 22 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.181818181818182
    [LOG] Max number of nodes per cluster is 30 and the number is 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1559 Tetrahedra.
    [LOG] Generated 49 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.979591836734693
    [LOG] Max number of nodes per cluster is 37 and the number is 39
[LOG] We will select 71 edges and 807 tetra
[LOG] Edges from tetra 0 and KDTree 71 with 0 edges in common.
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] We will select 142 edges and 1559 tetra
[LOG] Edges from tetra 0 and KDTree 584 with 0 edges in common.
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 80: Created combinatorial complex for file data_645.hdf5
[LOG] Computing n0_to_3 for num 358
[LOG] GENERATED TETRA
[LOG] Process 80: Calculating Neighbors
[LOG] Loading pickle file data_645.pickle
[LOG] Processing node features for num 645
[LOG] Processing edge features for num 645
[LOG] Processing tetra features for num 645
[LOG] Computing n0_to_4 for num 358
[LOG] Processing cluster features for num 645
[LOG] Processing cluster features for num 645
[LOG] Processing adjacency and incidence matrices for num 645
[LOG] Computing n0_to_0 for num 645
[LOG] Computing n1_to_2 for num 358
[LOG] Computing n1_to_1 for num 645
[LOG] Computing n2_to_2 (adjacency) for num 645
[LOG] Removed 1 subset clusters.
[LOG] Computing n3_to_3 (adjacency) for num 645
[LOG] Computing n4_to_4 (coadjacency) for num 645
[LOG] Computing n0_to_1 for num 645
[LOG] Computing n0_to_2 for num 645
[LOG] Computing n0_to_3 for num 645
[LOG] Computing n0_to_4 for num 645
[LOG] Computing n1_to_2 for num 645
[LOG] Computing n1_to_3 for num 645
[LOG] Computing n1_to_4 for num 645
[LOG] Computing n2_to_3 for num 645
[LOG] Computing n2_to_4 for num 645
[LOG] Computing n3_to_4 for num 645
[LOG] Global feature for num 645
[LOG] Global feature for num 645
[LOG] Saving tensor x_0_645.pt
[LOG] Saving tensor x_1_645.pt
[LOG] Saving tensor x_2_645.pt
[LOG] Saving tensor x_3_645.pt
[LOG] Saving tensor x_4_645.pt
[LOG] Saving tensor n0_to_0_645.pt
[LOG] Saving tensor n1_to_1_645.pt
[LOG] Saving tensor n2_to_2_645.pt
[LOG] Saving tensor n3_to_3_645.pt
[LOG] Saving tensor n4_to_4_645.pt
[LOG] Saving tensor n0_to_1_645.pt
[LOG] Process 85: Created combinatorial complex for file data_686.hdf5
[LOG] Saving tensor n0_to_2_645.pt
[LOG] Saving tensor n0_to_3_645.pt
[LOG] Saving tensor n0_to_4_645.pt
[LOG] Saving tensor n1_to_2_645.pt
[LOG] Saving tensor n1_to_3_645.pt
[LOG] Saving tensor n1_to_4_645.pt
[LOG] Saving tensor n2_to_3_645.pt
[LOG] Saving tensor n2_to_4_645.pt
[LOG] Saving tensor n3_to_4_645.pt
[LOG] Saving tensor global_feature_645.pt
[LOG] Process 80: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 85: Calculating Neighbors
[LOG] Loading pickle file data_686.pickle
[LOG] Processing node features for num 686
[LOG] Processing edge features for num 686
[LOG] Processing tetra features for num 686
[LOG] Processing cluster features for num 686
[LOG] Processing cluster features for num 686
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Processing adjacency and incidence matrices for num 686
[LOG] Computing n0_to_0 for num 686
[LOG] Computing n1_to_1 for num 686
[LOG] Computing n1_to_3 for num 358
[LOG] Computing n1_to_4 for num 358
[LOG] Computing n2_to_3 for num 358
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_2 (adjacency) for num 686
[LOG] Computing n2_to_4 for num 358
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n3_to_4 for num 358
[LOG] Global feature for num 358
[LOG] Global feature for num 358
[LOG] Saving tensor x_0_358.pt
[LOG] Saving tensor x_1_358.pt
[LOG] Saving tensor x_2_358.pt
[LOG] Saving tensor x_3_358.pt
[LOG] Saving tensor x_4_358.pt
[LOG] Saving tensor n0_to_0_358.pt
[LOG] Saving tensor n1_to_1_358.pt
[LOG] Saving tensor n2_to_2_358.pt
[LOG] Computing n3_to_3 (adjacency) for num 686
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n4_to_4 (coadjacency) for num 686
[LOG] Computing n0_to_1 for num 686
[LOG] Computing n0_to_2 for num 686
[LOG] Saving tensor n3_to_3_358.pt
[LOG] Saving tensor n4_to_4_358.pt
[LOG] Saving tensor n0_to_1_358.pt
[LOG] Saving tensor n0_to_2_358.pt
[LOG] Saving tensor n0_to_3_358.pt
[LOG] Saving tensor n0_to_4_358.pt
[LOG] Saving tensor n1_to_2_358.pt
[LOG] Saving tensor n1_to_3_358.pt
[LOG] Saving tensor n1_to_4_358.pt
[LOG] Saving tensor n2_to_3_358.pt
[LOG] Saving tensor n2_to_4_358.pt
[LOG] Saving tensor n3_to_4_358.pt
[LOG] Saving tensor global_feature_358.pt
[LOG] Process 44: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3033 Tetrahedra.
    [LOG] Generated 89 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.775280898876405
    [LOG] Max number of nodes per cluster is 62 and the number is 34
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n0_to_3 for num 686
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n0_to_4 for num 686
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n1_to_2 for num 686
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] We will select 643 edges and 3033 tetra
[LOG] Computing n1_to_3 for num 686
[LOG] Edges from tetra 0 and KDTree 1157 with 0 edges in common.
[LOG] Computing n1_to_4 for num 686
[LOG] Computing n2_to_3 for num 686
[LOG] Computing n2_to_4 for num 686
[LOG] Computing n3_to_4 for num 686
[LOG] Global feature for num 686
[LOG] Global feature for num 686
[LOG] Saving tensor x_0_686.pt
[LOG] Saving tensor x_1_686.pt
[LOG] Saving tensor x_2_686.pt
[LOG] Saving tensor x_3_686.pt
[LOG] Saving tensor x_4_686.pt
[LOG] Saving tensor n0_to_0_686.pt
[LOG] Saving tensor n1_to_1_686.pt
[LOG] Saving tensor n2_to_2_686.pt
[LOG] Saving tensor n3_to_3_686.pt
[LOG] Saving tensor n4_to_4_686.pt
[LOG] Saving tensor n0_to_1_686.pt
[LOG] Saving tensor n0_to_2_686.pt
[LOG] Saving tensor n0_to_3_686.pt
[LOG] Saving tensor n0_to_4_686.pt
[LOG] Saving tensor n1_to_2_686.pt
[LOG] Saving tensor n1_to_3_686.pt
[LOG] Saving tensor n1_to_4_686.pt
[LOG] Saving tensor n2_to_3_686.pt
[LOG] Saving tensor n2_to_4_686.pt
[LOG] Saving tensor n3_to_4_686.pt
[LOG] Saving tensor global_feature_686.pt
[LOG] Process 85: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1674 Tetrahedra.
    [LOG] Generated 52 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.846153846153847
    [LOG] Max number of nodes per cluster is 37 and the number is 50
[LOG] We will select 444 edges and 1674 tetra
[LOG] Edges from tetra 0 and KDTree 444 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 60: Created combinatorial complex for file data_486.hdf5
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 672 Tetrahedra.
    [LOG] Generated 24 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.625
    [LOG] Max number of nodes per cluster is 33 and the number is 10
[LOG] We will select 129 edges and 672 tetra
[LOG] Edges from tetra 0 and KDTree 129 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 60: Calculating Neighbors
[LOG] Loading pickle file data_486.pickle
[LOG] Processing node features for num 486
[LOG] Processing edge features for num 486
[LOG] Removed 1 subset clusters.
[LOG] Processing tetra features for num 486
[LOG] Processing cluster features for num 486
[LOG] Processing cluster features for num 486
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing adjacency and incidence matrices for num 486
[LOG] Computing n0_to_0 for num 486
[LOG] Process 110: Created combinatorial complex for file data_879.hdf5
[LOG] Computing n1_to_1 for num 486
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Computing n2_to_2 (adjacency) for num 486
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Process 66: Created combinatorial complex for file data_535.hdf5
[LOG] Process 110: Calculating Neighbors
[LOG] Loading pickle file data_879.pickle
[LOG] Processing node features for num 879
[LOG] Processing edge features for num 879
[LOG] Process 66: Calculating Neighbors
[LOG] Loading pickle file data_535.pickle
[LOG] Processing node features for num 535
[LOG] Processing tetra features for num 879
[LOG] Processing edge features for num 535
[LOG] Processing tetra features for num 535
[LOG] Processing cluster features for num 535
[LOG] Processing cluster features for num 535
[LOG] Processing cluster features for num 879
[LOG] Processing adjacency and incidence matrices for num 535
[LOG] Computing n0_to_0 for num 535
[LOG] Computing n1_to_1 for num 535
[LOG] Processing cluster features for num 879
[LOG] Processing adjacency and incidence matrices for num 879
[LOG] Computing n0_to_0 for num 879
[LOG] Computing n2_to_2 (adjacency) for num 535
[LOG] Computing n3_to_3 (adjacency) for num 535
[LOG] Computing n4_to_4 (coadjacency) for num 535
[LOG] Computing n0_to_1 for num 535
[LOG] Computing n1_to_1 for num 879
[LOG] Computing n0_to_2 for num 535
[LOG] Computing n0_to_3 for num 535
[LOG] Computing n0_to_4 for num 535
[LOG] Computing n1_to_2 for num 535
[LOG] Computing n1_to_3 for num 535
[LOG] Computing n1_to_4 for num 535
[LOG] Computing n2_to_3 for num 535
[LOG] Computing n2_to_4 for num 535
[LOG] Computing n3_to_4 for num 535
[LOG] Global feature for num 535
[LOG] Global feature for num 535
[LOG] Saving tensor x_0_535.pt
[LOG] Saving tensor x_1_535.pt
[LOG] Saving tensor x_2_535.pt
[LOG] Saving tensor x_3_535.pt
[LOG] Saving tensor x_4_535.pt
[LOG] Saving tensor n0_to_0_535.pt
[LOG] Saving tensor n1_to_1_535.pt
[LOG] Saving tensor n2_to_2_535.pt
[LOG] Saving tensor n3_to_3_535.pt
[LOG] Saving tensor n4_to_4_535.pt
[LOG] Saving tensor n0_to_1_535.pt
[LOG] Saving tensor n0_to_2_535.pt
[LOG] Saving tensor n0_to_3_535.pt
[LOG] Saving tensor n0_to_4_535.pt
[LOG] Saving tensor n1_to_2_535.pt
[LOG] Saving tensor n1_to_3_535.pt
[LOG] Saving tensor n1_to_4_535.pt
[LOG] Saving tensor n2_to_3_535.pt
[LOG] Saving tensor n2_to_4_535.pt
[LOG] Saving tensor n3_to_4_535.pt
[LOG] Saving tensor global_feature_535.pt
[LOG] Process 66: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n2_to_2 (adjacency) for num 879
[LOG] Computing n3_to_3 (adjacency) for num 486
[LOG] Computing n4_to_4 (coadjacency) for num 486
[LOG] Computing n0_to_1 for num 486
[LOG] Computing n3_to_3 (adjacency) for num 879
[LOG] Computing n4_to_4 (coadjacency) for num 879
[LOG] Computing n0_to_1 for num 879
[LOG] Computing n0_to_2 for num 879
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_2 for num 486
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_3 for num 879
[LOG] Computing n0_to_4 for num 879
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_2 for num 879
[LOG] Computing n1_to_3 for num 879
[LOG] Computing n1_to_4 for num 879
[LOG] Computing n2_to_3 for num 879
[LOG] Computing n2_to_4 for num 879
[LOG] Computing n3_to_4 for num 879
[LOG] Global feature for num 879
[LOG] Global feature for num 879
[LOG] Saving tensor x_0_879.pt
[LOG] Saving tensor x_1_879.pt
[LOG] Saving tensor x_2_879.pt
[LOG] Saving tensor x_3_879.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor x_4_879.pt
[LOG] Saving tensor n0_to_0_879.pt
[LOG] Saving tensor n1_to_1_879.pt
[LOG] Saving tensor n2_to_2_879.pt
[LOG] Saving tensor n3_to_3_879.pt
[LOG] Saving tensor n4_to_4_879.pt
[LOG] Saving tensor n0_to_1_879.pt
[LOG] Saving tensor n0_to_2_879.pt
[LOG] Saving tensor n0_to_3_879.pt
[LOG] Saving tensor n0_to_4_879.pt
[LOG] Saving tensor n1_to_2_879.pt
[LOG] Saving tensor n1_to_3_879.pt
[LOG] Saving tensor n1_to_4_879.pt
[LOG] Saving tensor n2_to_3_879.pt
[LOG] Saving tensor n2_to_4_879.pt
[LOG] Saving tensor n3_to_4_879.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2616 Tetrahedra.
    [LOG] Generated 64 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.265625
    [LOG] Max number of nodes per cluster is 37 and the number is 16
[LOG] Saving tensor global_feature_879.pt
[LOG] Process 110: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 486
[LOG] We will select 581 edges and 2616 tetra
[LOG] Edges from tetra 0 and KDTree 581 with 0 edges in common.
[LOG] Computing n0_to_4 for num 486
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_2 for num 486
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n1_to_3 for num 486
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n1_to_4 for num 486
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Computing n2_to_3 for num 486
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_4 for num 486
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_4 for num 486
[LOG] Global feature for num 486
[LOG] Global feature for num 486
[LOG] Saving tensor x_0_486.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor x_1_486.pt
[LOG] Saving tensor x_2_486.pt
[LOG] Saving tensor x_3_486.pt
[LOG] Saving tensor x_4_486.pt
[LOG] Saving tensor n0_to_0_486.pt
[LOG] Saving tensor n1_to_1_486.pt
[LOG] Saving tensor n2_to_2_486.pt
[LOG] Saving tensor n3_to_3_486.pt
[LOG] Saving tensor n4_to_4_486.pt
[LOG] Saving tensor n0_to_1_486.pt
[LOG] Saving tensor n0_to_2_486.pt
[LOG] Saving tensor n0_to_3_486.pt
[LOG] Saving tensor n0_to_4_486.pt
[LOG] Saving tensor n1_to_2_486.pt
[LOG] Saving tensor n1_to_3_486.pt
[LOG] Saving tensor n1_to_4_486.pt
[LOG] Saving tensor n2_to_3_486.pt
[LOG] Saving tensor n2_to_4_486.pt
[LOG] Saving tensor n3_to_4_486.pt
[LOG] Saving tensor global_feature_486.pt
[LOG] Process 60: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 82: Created combinatorial complex for file data_662.hdf5
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 82: Calculating Neighbors
[LOG] Loading pickle file data_662.pickle
[LOG] Processing node features for num 662
[LOG] Processing edge features for num 662
[LOG] Processing tetra features for num 662
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 662
[LOG] Processing cluster features for num 662
[LOG] Processing adjacency and incidence matrices for num 662
[LOG] Computing n0_to_0 for num 662
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_1 for num 662
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_2 (adjacency) for num 662
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n3_to_3 (adjacency) for num 662
[LOG] Computing n4_to_4 (coadjacency) for num 662
[LOG] Computing n0_to_1 for num 662
[LOG] Computing n0_to_2 for num 662
[LOG] Computing n0_to_3 for num 662
[LOG] Computing n0_to_4 for num 662
[LOG] Computing n1_to_2 for num 662
[LOG] Computing n1_to_3 for num 662
[LOG] Computing n1_to_4 for num 662
[LOG] Computing n2_to_3 for num 662
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_4 for num 662
[LOG] Computing n3_to_4 for num 662
[LOG] Global feature for num 662
[LOG] Global feature for num 662
[LOG] Saving tensor x_0_662.pt
[LOG] Saving tensor x_1_662.pt
[LOG] Saving tensor x_2_662.pt
[LOG] Saving tensor x_3_662.pt
[LOG] Saving tensor x_4_662.pt
[LOG] Saving tensor n0_to_0_662.pt
[LOG] Saving tensor n1_to_1_662.pt
[LOG] Saving tensor n2_to_2_662.pt
[LOG] Saving tensor n3_to_3_662.pt
[LOG] Saving tensor n4_to_4_662.pt
[LOG] Saving tensor n0_to_1_662.pt
[LOG] Saving tensor n0_to_2_662.pt
[LOG] Saving tensor n0_to_3_662.pt
[LOG] Saving tensor n0_to_4_662.pt
[LOG] Saving tensor n1_to_2_662.pt
[LOG] Saving tensor n1_to_3_662.pt
[LOG] Saving tensor n1_to_4_662.pt
[LOG] Saving tensor n2_to_3_662.pt
[LOG] Saving tensor n2_to_4_662.pt
[LOG] Saving tensor n3_to_4_662.pt
[LOG] Saving tensor global_feature_662.pt
[LOG] Process 82: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] GENERATED TETRA
[LOG] GENERATED TETRA
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 807 Tetrahedra.
    [LOG] Generated 33 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 9.969696969696969
    [LOG] Max number of nodes per cluster is 21 and the number is 3
[LOG] We will select 71 edges and 807 tetra
[LOG] Edges from tetra 0 and KDTree 145 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.
[LOG] Process 80: Created combinatorial complex for file data_646.hdf5
[LOG] Process 80: Calculating Neighbors
[LOG] Loading pickle file data_646.pickle
[LOG] Processing node features for num 646
[LOG] Processing edge features for num 646
[LOG] Processing tetra features for num 646
[LOG] Processing cluster features for num 646
[LOG] Processing cluster features for num 646
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing adjacency and incidence matrices for num 646
[LOG] Computing n0_to_0 for num 646
[LOG] Computing n1_to_1 for num 646
[LOG] Computing n2_to_2 (adjacency) for num 646
[LOG] Computing n3_to_3 (adjacency) for num 646
[LOG] Computing n4_to_4 (coadjacency) for num 646
[LOG] Computing n0_to_1 for num 646
[LOG] Computing n0_to_2 for num 646
[LOG] Computing n0_to_3 for num 646
[LOG] Computing n0_to_4 for num 646
[LOG] Computing n1_to_2 for num 646
[LOG] Computing n1_to_3 for num 646
[LOG] Computing n1_to_4 for num 646
[LOG] Computing n2_to_3 for num 646
[LOG] Computing n2_to_4 for num 646
[LOG] Computing n3_to_4 for num 646
[LOG] Global feature for num 646
[LOG] Global feature for num 646
[LOG] Saving tensor x_0_646.pt
[LOG] Saving tensor x_1_646.pt
[LOG] Saving tensor x_2_646.pt
[LOG] Saving tensor x_3_646.pt
[LOG] Saving tensor x_4_646.pt
[LOG] Saving tensor n0_to_0_646.pt
[LOG] Saving tensor n1_to_1_646.pt
[LOG] Saving tensor n2_to_2_646.pt
[LOG] Saving tensor n3_to_3_646.pt
[LOG] Saving tensor n4_to_4_646.pt
[LOG] Saving tensor n0_to_1_646.pt
[LOG] Saving tensor n0_to_2_646.pt
[LOG] Saving tensor n0_to_3_646.pt
[LOG] Saving tensor n0_to_4_646.pt
[LOG] Saving tensor n1_to_2_646.pt
[LOG] Saving tensor n1_to_3_646.pt
[LOG] Saving tensor n1_to_4_646.pt
[LOG] Saving tensor n2_to_3_646.pt
[LOG] Saving tensor n2_to_4_646.pt
[LOG] Saving tensor n3_to_4_646.pt
[LOG] Saving tensor global_feature_646.pt
[LOG] Process 80: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3142 Tetrahedra.
    [LOG] Generated 92 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.565217391304348
    [LOG] Max number of nodes per cluster is 66 and the number is 76
[LOG] We will select 831 edges and 3142 tetra
[LOG] Edges from tetra 0 and KDTree 2267 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 50: Created combinatorial complex for file data_406.hdf5
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 50: Calculating Neighbors
[LOG] Loading pickle file data_406.pickle
[LOG] Processing node features for num 406
[LOG] Processing edge features for num 406
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing tetra features for num 406
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing cluster features for num 406
[LOG] Processing cluster features for num 406
[LOG] Processing adjacency and incidence matrices for num 406
[LOG] Computing n0_to_0 for num 406
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_1 for num 406
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_2 (adjacency) for num 406
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_3 (adjacency) for num 406
[LOG] Computing n4_to_4 (coadjacency) for num 406
[LOG] Computing n0_to_1 for num 406
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_2 for num 406
[LOG] Computing n0_to_3 for num 406
[LOG] Computing n0_to_4 for num 406
[LOG] Computing n1_to_2 for num 406
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_3 for num 406
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_4 for num 406
[LOG] Computing n2_to_3 for num 406
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n2_to_4 for num 406
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n3_to_4 for num 406
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Global feature for num 406
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Global feature for num 406
[LOG] Saving tensor x_0_406.pt
[LOG] Saving tensor x_1_406.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor x_2_406.pt
[LOG] Saving tensor x_3_406.pt
[LOG] Saving tensor x_4_406.pt
[LOG] Saving tensor n0_to_0_406.pt
[LOG] Saving tensor n1_to_1_406.pt
[LOG] Saving tensor n2_to_2_406.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n3_to_3_406.pt
[LOG] Saving tensor n4_to_4_406.pt
[LOG] Saving tensor n0_to_1_406.pt
[LOG] Saving tensor n0_to_2_406.pt
[LOG] Saving tensor n0_to_3_406.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n0_to_4_406.pt
[LOG] Saving tensor n1_to_2_406.pt
[LOG] Saving tensor n1_to_3_406.pt
[LOG] Saving tensor n1_to_4_406.pt
[LOG] Saving tensor n2_to_3_406.pt
[LOG] Saving tensor n2_to_4_406.pt
[LOG] Saving tensor n3_to_4_406.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor global_feature_406.pt
[LOG] Process 50: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 877 Tetrahedra.
    [LOG] Generated 29 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.24137931034483
    [LOG] Max number of nodes per cluster is 60 and the number is 24
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] We will select 73 edges and 877 tetra
[LOG] Edges from tetra 0 and KDTree 73 with 0 edges in common.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 1 subset clusters.
[LOG] Process 6: Created combinatorial complex for file data_51.hdf5
[LOG] Process 6: Calculating Neighbors
[LOG] Loading pickle file data_51.pickle
[LOG] Processing node features for num 51
[LOG] Processing edge features for num 51
[LOG] Processing tetra features for num 51
[LOG] Processing cluster features for num 51
[LOG] Processing cluster features for num 51
[LOG] Processing adjacency and incidence matrices for num 51
[LOG] Computing n0_to_0 for num 51
[LOG] Computing n1_to_1 for num 51
[LOG] Computing n2_to_2 (adjacency) for num 51
[LOG] Computing n3_to_3 (adjacency) for num 51
[LOG] Computing n4_to_4 (coadjacency) for num 51
[LOG] Computing n0_to_1 for num 51
[LOG] Computing n0_to_2 for num 51
[LOG] Computing n0_to_3 for num 51
[LOG] Computing n0_to_4 for num 51
[LOG] Computing n1_to_2 for num 51
[LOG] Computing n1_to_3 for num 51
[LOG] Computing n1_to_4 for num 51
[LOG] Computing n2_to_3 for num 51
[LOG] Computing n2_to_4 for num 51
[LOG] Computing n3_to_4 for num 51
[LOG] Global feature for num 51
[LOG] Global feature for num 51
[LOG] Saving tensor x_0_51.pt
[LOG] Saving tensor x_1_51.pt
[LOG] Saving tensor x_2_51.pt
[LOG] Saving tensor x_3_51.pt
[LOG] Saving tensor x_4_51.pt
[LOG] Saving tensor n0_to_0_51.pt
[LOG] Saving tensor n1_to_1_51.pt
[LOG] Saving tensor n2_to_2_51.pt
[LOG] Saving tensor n3_to_3_51.pt
[LOG] Saving tensor n4_to_4_51.pt
[LOG] Saving tensor n0_to_1_51.pt
[LOG] Saving tensor n0_to_2_51.pt
[LOG] Saving tensor n0_to_3_51.pt
[LOG] Saving tensor n0_to_4_51.pt
[LOG] Saving tensor n1_to_2_51.pt
[LOG] Saving tensor n1_to_3_51.pt
[LOG] Saving tensor n1_to_4_51.pt
[LOG] Saving tensor n2_to_3_51.pt
[LOG] Saving tensor n2_to_4_51.pt
[LOG] Saving tensor n3_to_4_51.pt
[LOG] Saving tensor global_feature_51.pt
[LOG] Process 6: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3056 Tetrahedra.
    [LOG] Generated 81 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.950617283950617
    [LOG] Max number of nodes per cluster is 30 and the number is 38
[LOG] We will select 784 edges and 3056 tetra
[LOG] Edges from tetra 0 and KDTree 1023 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 3
[LOG] Removed 1 subset clusters.
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 61: Created combinatorial complex for file data_493.hdf5
[LOG] Process 61: Calculating Neighbors
[LOG] Loading pickle file data_493.pickle
[LOG] Processing node features for num 493
[LOG] Processing edge features for num 493
[LOG] Processing tetra features for num 493
[LOG] Processing cluster features for num 493
[LOG] Processing cluster features for num 493
[LOG] Processing adjacency and incidence matrices for num 493
[LOG] Computing n0_to_0 for num 493
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_1 for num 493
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1761 Tetrahedra.
    [LOG] Generated 49 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.877551020408163
    [LOG] Max number of nodes per cluster is 101 and the number is 40
[LOG] Calculating for cell ranks 1 and 3
[LOG] We will select 371 edges and 1761 tetra
[LOG] Edges from tetra 0 and KDTree 2162 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] GENERATED TETRA
[LOG] Removed 4 subset clusters.

    [LOG] We Currently have 3455 Tetrahedra.
    [LOG] Generated 104 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.509615384615385
    [LOG] Max number of nodes per cluster is 44 and the number is 90
[LOG] Computing n2_to_2 (adjacency) for num 493
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 3 and 3
[LOG] We will select 2378 edges and 3455 tetra
[LOG] Edges from tetra 0 and KDTree 3246 with 0 edges in common.
[LOG] Process 38: Created combinatorial complex for file data_311.hdf5
[LOG] Calculating for cell ranks 3 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1582 Tetrahedra.
    [LOG] Generated 39 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.512820512820513
    [LOG] Max number of nodes per cluster is 41 and the number is 5
[LOG] We will select 312 edges and 1582 tetra
[LOG] Edges from tetra 0 and KDTree 312 with 0 edges in common.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 38: Calculating Neighbors
[LOG] Loading pickle file data_311.pickle
[LOG] Processing node features for num 311
[LOG] Processing edge features for num 311
[LOG] Processing tetra features for num 311
[LOG] Processing cluster features for num 311
[LOG] Processing cluster features for num 311
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Processing adjacency and incidence matrices for num 311
[LOG] Computing n0_to_0 for num 311
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n3_to_3 (adjacency) for num 493
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n4_to_4 (coadjacency) for num 493
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n0_to_1 for num 493
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_1 for num 311
[LOG] Computing n0_to_2 for num 493
[LOG] Removed 0 subset clusters.
[LOG] Computing n2_to_2 (adjacency) for num 311
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 96: Created combinatorial complex for file data_775.hdf5
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_3 (adjacency) for num 311
[LOG] Computing n4_to_4 (coadjacency) for num 311
[LOG] Computing n0_to_1 for num 311
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 96: Calculating Neighbors
[LOG] Loading pickle file data_775.pickle
[LOG] Processing node features for num 775
[LOG] Processing edge features for num 775
[LOG] Processing tetra features for num 775
[LOG] Computing n0_to_2 for num 311
[LOG] Processing cluster features for num 775
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Processing cluster features for num 775
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Processing adjacency and incidence matrices for num 775
[LOG] Computing n0_to_0 for num 775
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n1_to_1 for num 775
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 775
[LOG] Computing n3_to_3 (adjacency) for num 775
[LOG] Computing n0_to_3 for num 493
[LOG] Computing n4_to_4 (coadjacency) for num 775
[LOG] Computing n0_to_1 for num 775
[LOG] Computing n0_to_4 for num 493
[LOG] Computing n0_to_2 for num 775
[LOG] Computing n1_to_2 for num 493
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3039 Tetrahedra.
    [LOG] Generated 71 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.929577464788732
    [LOG] Max number of nodes per cluster is 55 and the number is 69
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_3 for num 311
[LOG] Computing n0_to_4 for num 311
[LOG] Computing n1_to_2 for num 311
[LOG] Computing n0_to_3 for num 775
[LOG] Computing n0_to_4 for num 775
[LOG] Computing n1_to_2 for num 775
[LOG] Removed 1 subset clusters.
[LOG] Computing n1_to_3 for num 775
[LOG] Computing n1_to_4 for num 775
[LOG] Computing n1_to_3 for num 311
[LOG] Computing n2_to_3 for num 775
[LOG] Computing n1_to_4 for num 311
[LOG] Computing n2_to_3 for num 311
[LOG] Computing n2_to_4 for num 775
[LOG] Computing n3_to_4 for num 775
[LOG] Computing n2_to_4 for num 311
[LOG] Global feature for num 775
[LOG] Global feature for num 775
[LOG] Saving tensor x_0_775.pt
[LOG] Saving tensor x_1_775.pt
[LOG] Saving tensor x_2_775.pt
[LOG] Saving tensor x_3_775.pt
[LOG] Saving tensor x_4_775.pt
[LOG] Saving tensor n0_to_0_775.pt
[LOG] Saving tensor n1_to_1_775.pt
[LOG] Computing n3_to_4 for num 311
[LOG] Saving tensor n2_to_2_775.pt
[LOG] Global feature for num 311
[LOG] Global feature for num 311
[LOG] Saving tensor x_0_311.pt
[LOG] Saving tensor n3_to_3_775.pt
[LOG] Saving tensor x_1_311.pt
[LOG] Saving tensor x_2_311.pt
[LOG] Saving tensor n4_to_4_775.pt
[LOG] Saving tensor x_3_311.pt
[LOG] Saving tensor x_4_311.pt
[LOG] Saving tensor n0_to_1_775.pt
[LOG] Saving tensor n0_to_0_311.pt
[LOG] Saving tensor n0_to_2_775.pt
[LOG] Saving tensor n1_to_1_311.pt
[LOG] Saving tensor n0_to_3_775.pt
[LOG] Saving tensor n0_to_4_775.pt
[LOG] Saving tensor n2_to_2_311.pt
[LOG] Saving tensor n1_to_2_775.pt
[LOG] Saving tensor n1_to_3_775.pt
[LOG] Saving tensor n1_to_4_775.pt
[LOG] Saving tensor n3_to_3_311.pt
[LOG] Saving tensor n2_to_3_775.pt
[LOG] Saving tensor n4_to_4_311.pt
[LOG] Saving tensor n2_to_4_775.pt
[LOG] Saving tensor n0_to_1_311.pt
[LOG] Saving tensor n3_to_4_775.pt
[LOG] Saving tensor n0_to_2_311.pt
[LOG] Saving tensor global_feature_775.pt
[LOG] Process 96: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor n0_to_3_311.pt
[LOG] Saving tensor n0_to_4_311.pt
[LOG] Saving tensor n1_to_2_311.pt
[LOG] Saving tensor n1_to_3_311.pt
[LOG] Saving tensor n1_to_4_311.pt
[LOG] Saving tensor n2_to_3_311.pt
[LOG] Saving tensor n2_to_4_311.pt
[LOG] Saving tensor n3_to_4_311.pt
[LOG] Saving tensor global_feature_311.pt
[LOG] Process 38: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_3 for num 493
[LOG] Computing n1_to_4 for num 493
[LOG] Process 127: Created combinatorial complex for file data_996.hdf5
[LOG] Computing n2_to_3 for num 493
[LOG] Computing n2_to_4 for num 493
[LOG] We will select 500 edges and 3039 tetra
[LOG] Edges from tetra 0 and KDTree 1810 with 0 edges in common.
[LOG] Computing n3_to_4 for num 493
[LOG] Global feature for num 493
[LOG] Global feature for num 493
[LOG] Saving tensor x_0_493.pt
[LOG] Saving tensor x_1_493.pt
[LOG] Saving tensor x_2_493.pt
[LOG] Saving tensor x_3_493.pt
[LOG] Saving tensor x_4_493.pt
[LOG] Saving tensor n0_to_0_493.pt
[LOG] Saving tensor n1_to_1_493.pt
[LOG] Saving tensor n2_to_2_493.pt
[LOG] Saving tensor n3_to_3_493.pt
[LOG] Saving tensor n4_to_4_493.pt
[LOG] Saving tensor n0_to_1_493.pt
[LOG] Saving tensor n0_to_2_493.pt
[LOG] Saving tensor n0_to_3_493.pt
[LOG] Saving tensor n0_to_4_493.pt
[LOG] Saving tensor n1_to_2_493.pt
[LOG] Saving tensor n1_to_3_493.pt
[LOG] Saving tensor n1_to_4_493.pt
[LOG] Saving tensor n2_to_3_493.pt
[LOG] Saving tensor n2_to_4_493.pt
[LOG] Saving tensor n3_to_4_493.pt
[LOG] Saving tensor global_feature_493.pt
[LOG] Process 61: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 127: Calculating Neighbors
[LOG] Loading pickle file data_996.pickle
[LOG] Processing node features for num 996
[LOG] Processing edge features for num 996
[LOG] Processing tetra features for num 996
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing cluster features for num 996
[LOG] Removed 0 subset clusters.
[LOG] Processing cluster features for num 996
[LOG] GENERATED TETRA
[LOG] Processing adjacency and incidence matrices for num 996
[LOG] Computing n0_to_0 for num 996
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 807 Tetrahedra.
    [LOG] Generated 24 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.541666666666668
    [LOG] Max number of nodes per cluster is 95 and the number is 18
[LOG] We will select 71 edges and 807 tetra
[LOG] Edges from tetra 0 and KDTree 4966 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 107: Created combinatorial complex for file data_857.hdf5
[LOG] Removed 0 subset clusters.
[LOG] Process 80: Created combinatorial complex for file data_647.hdf5
[LOG] Process 107: Calculating Neighbors
[LOG] Loading pickle file data_857.pickle
[LOG] Processing node features for num 857
[LOG] Processing edge features for num 857
[LOG] Process 80: Calculating Neighbors
[LOG] Loading pickle file data_647.pickle
[LOG] Processing node features for num 647
[LOG] Processing tetra features for num 857
[LOG] Processing edge features for num 647
[LOG] Processing tetra features for num 647
[LOG] Processing cluster features for num 647
[LOG] Processing cluster features for num 647
[LOG] Processing cluster features for num 857
[LOG] Processing adjacency and incidence matrices for num 647
[LOG] Computing n0_to_0 for num 647
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing cluster features for num 857
[LOG] Computing n1_to_1 for num 647
[LOG] Computing n2_to_2 (adjacency) for num 647
[LOG] Processing adjacency and incidence matrices for num 857
[LOG] Computing n0_to_0 for num 857
[LOG] Computing n1_to_1 for num 996
[LOG] Computing n3_to_3 (adjacency) for num 647
[LOG] Computing n4_to_4 (coadjacency) for num 647
[LOG] Computing n0_to_1 for num 647
[LOG] Computing n0_to_2 for num 647
[LOG] Removed 0 subset clusters.
[LOG] Computing n1_to_1 for num 857

    [LOG] We Currently have 2732 Tetrahedra.
    [LOG] Generated 74 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.91891891891892
    [LOG] Max number of nodes per cluster is 28 and the number is 64
[LOG] We will select 485 edges and 2732 tetra
[LOG] Edges from tetra 0 and KDTree 485 with 0 edges in common.
[LOG] Computing n0_to_3 for num 647
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_4 for num 647
[LOG] Computing n1_to_2 for num 647
[LOG] Computing n1_to_3 for num 647
[LOG] Computing n1_to_4 for num 647
[LOG] Computing n2_to_3 for num 647
[LOG] Computing n2_to_4 for num 647
[LOG] Computing n3_to_4 for num 647
[LOG] Global feature for num 647
[LOG] Global feature for num 647
[LOG] Saving tensor x_0_647.pt
[LOG] Saving tensor x_1_647.pt
[LOG] Saving tensor x_2_647.pt
[LOG] Saving tensor x_3_647.pt
[LOG] Saving tensor x_4_647.pt
[LOG] Saving tensor n0_to_0_647.pt
[LOG] Saving tensor n1_to_1_647.pt
[LOG] Saving tensor n2_to_2_647.pt
[LOG] Saving tensor n3_to_3_647.pt
[LOG] Saving tensor n4_to_4_647.pt
[LOG] Saving tensor n0_to_1_647.pt
[LOG] Saving tensor n0_to_2_647.pt
[LOG] Saving tensor n0_to_3_647.pt
[LOG] Saving tensor n0_to_4_647.pt
[LOG] Saving tensor n1_to_2_647.pt
[LOG] Saving tensor n1_to_3_647.pt
[LOG] Saving tensor n1_to_4_647.pt
[LOG] Saving tensor n2_to_3_647.pt
[LOG] Saving tensor n2_to_4_647.pt
[LOG] Saving tensor n3_to_4_647.pt
[LOG] Saving tensor global_feature_647.pt
[LOG] Process 80: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n2_to_2 (adjacency) for num 857
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 857
[LOG] Computing n4_to_4 (coadjacency) for num 857
[LOG] Computing n0_to_1 for num 857
[LOG] Computing n0_to_2 for num 857
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 0 subset clusters.
[LOG] Process 99: Created combinatorial complex for file data_799.hdf5
[LOG] Process 99: Calculating Neighbors
[LOG] Loading pickle file data_799.pickle
[LOG] Processing node features for num 799
[LOG] Computing n0_to_3 for num 857
[LOG] Processing edge features for num 799
[LOG] Computing n0_to_4 for num 857
[LOG] Processing tetra features for num 799
[LOG] Computing n1_to_2 for num 857
[LOG] Processing cluster features for num 799
[LOG] Processing cluster features for num 799
[LOG] Calculating for cell ranks 0 and 3
[LOG] Processing adjacency and incidence matrices for num 799
[LOG] Computing n0_to_0 for num 799
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_1 for num 799
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 5465 Tetrahedra.
    [LOG] Generated 123 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.552845528455284
    [LOG] Max number of nodes per cluster is 65 and the number is 121
[LOG] Computing n2_to_2 (adjacency) for num 996
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_3 for num 857
[LOG] Computing n1_to_4 for num 857
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n2_to_3 for num 857
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n2_to_4 for num 857
[LOG] Computing n2_to_2 (adjacency) for num 799
[LOG] We will select 1152 edges and 5465 tetra
[LOG] Edges from tetra 0 and KDTree 5260 with 0 edges in common.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_4 for num 857
[LOG] Global feature for num 857
[LOG] Global feature for num 857
[LOG] Saving tensor x_0_857.pt
[LOG] Saving tensor x_1_857.pt
[LOG] Saving tensor x_2_857.pt
[LOG] Saving tensor x_3_857.pt
[LOG] Saving tensor x_4_857.pt
[LOG] Saving tensor n0_to_0_857.pt
[LOG] Saving tensor n1_to_1_857.pt
[LOG] Saving tensor n2_to_2_857.pt
[LOG] Saving tensor n3_to_3_857.pt
[LOG] Saving tensor n4_to_4_857.pt
[LOG] Saving tensor n0_to_1_857.pt
[LOG] Saving tensor n0_to_2_857.pt
[LOG] Saving tensor n0_to_3_857.pt
[LOG] Saving tensor n0_to_4_857.pt
[LOG] Saving tensor n1_to_2_857.pt
[LOG] Saving tensor n1_to_3_857.pt
[LOG] Saving tensor n1_to_4_857.pt
[LOG] Saving tensor n2_to_3_857.pt
[LOG] Saving tensor n2_to_4_857.pt
[LOG] Saving tensor n3_to_4_857.pt
[LOG] Saving tensor global_feature_857.pt
[LOG] Process 107: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_3 (adjacency) for num 799
[LOG] Computing n4_to_4 (coadjacency) for num 799
[LOG] Computing n0_to_1 for num 799
[LOG] Computing n0_to_2 for num 799
[LOG] Calculating for cell ranks 2 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_3 (adjacency) for num 996
[LOG] Computing n4_to_4 (coadjacency) for num 996
[LOG] Computing n0_to_1 for num 996
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1559 Tetrahedra.
    [LOG] Generated 42 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.904761904761905
    [LOG] Max number of nodes per cluster is 39 and the number is 17
[LOG] We will select 142 edges and 1559 tetra
[LOG] Edges from tetra 0 and KDTree 283 with 0 edges in common.
[LOG] Computing n0_to_3 for num 799
[LOG] Computing n0_to_4 for num 799
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_2 for num 799
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_2 for num 996
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_3 for num 799
[LOG] Computing n1_to_4 for num 799
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_3 for num 799
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_4 for num 799
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 85: Created combinatorial complex for file data_687.hdf5
[LOG] Computing n3_to_4 for num 799
[LOG] Global feature for num 799
[LOG] Global feature for num 799
[LOG] Saving tensor x_0_799.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor x_1_799.pt
[LOG] Saving tensor x_2_799.pt
[LOG] Saving tensor x_3_799.pt
[LOG] Saving tensor x_4_799.pt
[LOG] Saving tensor n0_to_0_799.pt
[LOG] Saving tensor n1_to_1_799.pt
[LOG] Saving tensor n2_to_2_799.pt
[LOG] Saving tensor n3_to_3_799.pt
[LOG] Saving tensor n4_to_4_799.pt
[LOG] Saving tensor n0_to_1_799.pt
[LOG] Saving tensor n0_to_2_799.pt
[LOG] Saving tensor n0_to_3_799.pt
[LOG] Saving tensor n0_to_4_799.pt
[LOG] Saving tensor n1_to_2_799.pt
[LOG] Saving tensor n1_to_3_799.pt
[LOG] Process 85: Calculating Neighbors
[LOG] Loading pickle file data_687.pickle
[LOG] Processing node features for num 687
[LOG] Saving tensor n1_to_4_799.pt
[LOG] Processing edge features for num 687
[LOG] Saving tensor n2_to_3_799.pt
[LOG] Saving tensor n2_to_4_799.pt
[LOG] Saving tensor n3_to_4_799.pt
[LOG] Saving tensor global_feature_799.pt
[LOG] Process 99: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Processing tetra features for num 687
[LOG] Processing cluster features for num 687
[LOG] Processing cluster features for num 687
[LOG] Processing adjacency and incidence matrices for num 687
[LOG] Computing n0_to_0 for num 687
[LOG] Computing n1_to_1 for num 687
[LOG] Computing n2_to_2 (adjacency) for num 687
[LOG] Computing n3_to_3 (adjacency) for num 687
[LOG] Computing n4_to_4 (coadjacency) for num 687
[LOG] Computing n0_to_1 for num 687
[LOG] Computing n0_to_2 for num 687
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_3 for num 687
[LOG] Computing n0_to_4 for num 687
[LOG] Computing n1_to_2 for num 687
[LOG] Computing n1_to_3 for num 687
[LOG] Computing n1_to_4 for num 687
[LOG] Computing n2_to_3 for num 687
[LOG] Computing n2_to_4 for num 687
[LOG] Computing n3_to_4 for num 687
[LOG] Global feature for num 687
[LOG] Global feature for num 687
[LOG] Saving tensor x_0_687.pt
[LOG] Saving tensor x_1_687.pt
[LOG] Saving tensor x_2_687.pt
[LOG] Saving tensor x_3_687.pt
[LOG] Saving tensor x_4_687.pt
[LOG] Saving tensor n0_to_0_687.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n1_to_1_687.pt
[LOG] Saving tensor n2_to_2_687.pt
[LOG] Saving tensor n3_to_3_687.pt
[LOG] Saving tensor n4_to_4_687.pt
[LOG] Saving tensor n0_to_1_687.pt
[LOG] Saving tensor n0_to_2_687.pt
[LOG] Saving tensor n0_to_3_687.pt
[LOG] Saving tensor n0_to_4_687.pt
[LOG] Saving tensor n1_to_2_687.pt
[LOG] Saving tensor n1_to_3_687.pt
[LOG] Saving tensor n1_to_4_687.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n2_to_3_687.pt
[LOG] Saving tensor n2_to_4_687.pt
[LOG] Saving tensor n3_to_4_687.pt
[LOG] Saving tensor global_feature_687.pt
[LOG] Process 85: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 996
[LOG] Computing n0_to_4 for num 996
[LOG] Computing n1_to_2 for num 996
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Process 36: Created combinatorial complex for file data_291.hdf5
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Process 36: Calculating Neighbors
[LOG] Loading pickle file data_291.pickle
[LOG] Processing node features for num 291
[LOG] Processing edge features for num 291
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Processing tetra features for num 291
[LOG] Processing cluster features for num 291
[LOG] Processing cluster features for num 291
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing adjacency and incidence matrices for num 291
[LOG] Computing n0_to_0 for num 291
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_1 for num 291
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_3 for num 996
[LOG] Computing n1_to_4 for num 996
[LOG] Computing n2_to_3 for num 996
[LOG] Computing n2_to_4 for num 996
[LOG] Computing n3_to_4 for num 996
[LOG] Global feature for num 996
[LOG] Global feature for num 996
[LOG] Saving tensor x_0_996.pt
[LOG] Saving tensor x_1_996.pt
[LOG] Saving tensor x_2_996.pt
[LOG] Saving tensor x_3_996.pt
[LOG] Saving tensor x_4_996.pt
[LOG] Saving tensor n0_to_0_996.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n1_to_1_996.pt
[LOG] Saving tensor n2_to_2_996.pt
[LOG] Saving tensor n3_to_3_996.pt
[LOG] Saving tensor n4_to_4_996.pt
[LOG] Saving tensor n0_to_1_996.pt
[LOG] Saving tensor n0_to_2_996.pt
[LOG] Saving tensor n0_to_3_996.pt
[LOG] Saving tensor n0_to_4_996.pt
[LOG] Saving tensor n1_to_2_996.pt
[LOG] Saving tensor n1_to_3_996.pt
[LOG] Saving tensor n1_to_4_996.pt
[LOG] Saving tensor n2_to_3_996.pt
[LOG] Saving tensor n2_to_4_996.pt
[LOG] Saving tensor n3_to_4_996.pt
[LOG] Saving tensor global_feature_996.pt
[LOG] Process 127: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_2 (adjacency) for num 291
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1909 Tetrahedra.
    [LOG] Generated 47 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.085106382978722
    [LOG] Max number of nodes per cluster is 111 and the number is 40
[LOG] We will select 740 edges and 1909 tetra
[LOG] Edges from tetra 0 and KDTree 2342 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_3 (adjacency) for num 291
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n4_to_4 (coadjacency) for num 291
[LOG] Computing n0_to_1 for num 291
[LOG] Process 74: Created combinatorial complex for file data_598.hdf5
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 74: Calculating Neighbors
[LOG] Loading pickle file data_598.pickle
[LOG] Processing node features for num 598
[LOG] Processing edge features for num 598
[LOG] Processing tetra features for num 598
[LOG] Processing cluster features for num 598
[LOG] Calculating for cell ranks 1 and 2
[LOG] Processing cluster features for num 598
[LOG] Processing adjacency and incidence matrices for num 598
[LOG] Computing n0_to_0 for num 598
[LOG] Computing n0_to_2 for num 291
[LOG] Computing n1_to_1 for num 598
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_2 (adjacency) for num 598
[LOG] Computing n3_to_3 (adjacency) for num 598
[LOG] Computing n4_to_4 (coadjacency) for num 598
[LOG] Computing n0_to_1 for num 598
[LOG] Computing n0_to_2 for num 598
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1464 Tetrahedra.
    [LOG] Generated 43 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.255813953488373
    [LOG] Max number of nodes per cluster is 92 and the number is 39
[LOG] Calculating for cell ranks 1 and 1
[LOG] We will select 795 edges and 1464 tetra
[LOG] Edges from tetra 0 and KDTree 1828 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_3 for num 598
[LOG] Computing n0_to_4 for num 598
[LOG] Computing n1_to_2 for num 598
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_3 for num 598
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_4 for num 598
[LOG] Computing n2_to_3 for num 598
[LOG] Computing n2_to_4 for num 598
[LOG] Computing n3_to_4 for num 598
[LOG] Global feature for num 598
[LOG] Global feature for num 598
[LOG] Saving tensor x_0_598.pt
[LOG] Saving tensor x_1_598.pt
[LOG] Saving tensor x_2_598.pt
[LOG] Saving tensor x_3_598.pt
[LOG] Saving tensor x_4_598.pt
[LOG] Saving tensor n0_to_0_598.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor n1_to_1_598.pt
[LOG] Saving tensor n2_to_2_598.pt
[LOG] Saving tensor n3_to_3_598.pt
[LOG] Saving tensor n4_to_4_598.pt
[LOG] Saving tensor n0_to_1_598.pt
[LOG] Saving tensor n0_to_2_598.pt
[LOG] Saving tensor n0_to_3_598.pt
[LOG] Saving tensor n0_to_4_598.pt
[LOG] Saving tensor n1_to_2_598.pt
[LOG] Saving tensor n1_to_3_598.pt
[LOG] Saving tensor n1_to_4_598.pt
[LOG] Saving tensor n2_to_3_598.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor n2_to_4_598.pt
[LOG] Saving tensor n3_to_4_598.pt
[LOG] Saving tensor global_feature_598.pt
[LOG] Process 74: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 0 subset clusters.
[LOG] Process 106: Created combinatorial complex for file data_851.hdf5
[LOG] Process 106: Calculating Neighbors
[LOG] Loading pickle file data_851.pickle
[LOG] Processing node features for num 851
[LOG] Computing n0_to_3 for num 291
[LOG] Processing edge features for num 851
[LOG] Processing tetra features for num 851
[LOG] Computing n0_to_4 for num 291
[LOG] Processing cluster features for num 851
[LOG] Processing cluster features for num 851
[LOG] Processing adjacency and incidence matrices for num 851
[LOG] Computing n0_to_0 for num 851
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_2 for num 291
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_1 for num 851
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_2 (adjacency) for num 851
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 851
[LOG] Computing n4_to_4 (coadjacency) for num 851
[LOG] Computing n0_to_1 for num 851
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_2 for num 851
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_3 for num 851
[LOG] Computing n0_to_4 for num 851
[LOG] Computing n1_to_2 for num 851
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_3 for num 851
[LOG] Computing n1_to_4 for num 851
[LOG] Computing n2_to_3 for num 851
[LOG] Computing n2_to_4 for num 851
[LOG] Computing n3_to_4 for num 851
[LOG] Global feature for num 851
[LOG] Global feature for num 851
[LOG] Saving tensor x_0_851.pt
[LOG] Saving tensor x_1_851.pt
[LOG] Saving tensor x_2_851.pt
[LOG] Saving tensor x_3_851.pt
[LOG] Saving tensor x_4_851.pt
[LOG] Saving tensor n0_to_0_851.pt
[LOG] Saving tensor n1_to_1_851.pt
[LOG] Saving tensor n2_to_2_851.pt
[LOG] Saving tensor n3_to_3_851.pt
[LOG] Saving tensor n4_to_4_851.pt
[LOG] Saving tensor n0_to_1_851.pt
[LOG] Saving tensor n0_to_2_851.pt
[LOG] Saving tensor n0_to_3_851.pt
[LOG] Computing n1_to_3 for num 291
[LOG] Saving tensor n0_to_4_851.pt
[LOG] Saving tensor n1_to_2_851.pt
[LOG] Saving tensor n1_to_3_851.pt
[LOG] Saving tensor n1_to_4_851.pt
[LOG] Saving tensor n2_to_3_851.pt
[LOG] Saving tensor n2_to_4_851.pt
[LOG] Saving tensor n3_to_4_851.pt
[LOG] Saving tensor global_feature_851.pt
[LOG] Computing n1_to_4 for num 291
[LOG] Computing n2_to_3 for num 291
[LOG] Process 106: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] GENERATED TETRA
[LOG] Computing n2_to_4 for num 291
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 877 Tetrahedra.
    [LOG] Generated 28 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.642857142857142
    [LOG] Max number of nodes per cluster is 36 and the number is 2
[LOG] We will select 73 edges and 877 tetra
[LOG] Edges from tetra 0 and KDTree 210 with 0 edges in common.
[LOG] Computing n3_to_4 for num 291
[LOG] Global feature for num 291
[LOG] Global feature for num 291
[LOG] Saving tensor x_0_291.pt
[LOG] Saving tensor x_1_291.pt
[LOG] Saving tensor x_2_291.pt
[LOG] Saving tensor x_3_291.pt
[LOG] Saving tensor x_4_291.pt
[LOG] Saving tensor n0_to_0_291.pt
[LOG] Saving tensor n1_to_1_291.pt
[LOG] Saving tensor n2_to_2_291.pt
[LOG] Saving tensor n3_to_3_291.pt
[LOG] Saving tensor n4_to_4_291.pt
[LOG] Saving tensor n0_to_1_291.pt
[LOG] Saving tensor n0_to_2_291.pt
[LOG] Saving tensor n0_to_3_291.pt
[LOG] Saving tensor n0_to_4_291.pt
[LOG] Saving tensor n1_to_2_291.pt
[LOG] Saving tensor n1_to_3_291.pt
[LOG] Saving tensor n1_to_4_291.pt
[LOG] Saving tensor n2_to_3_291.pt
[LOG] Saving tensor n2_to_4_291.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor n3_to_4_291.pt
[LOG] Saving tensor global_feature_291.pt
[LOG] Process 36: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 6: Created combinatorial complex for file data_52.hdf5
[LOG] Process 6: Calculating Neighbors
[LOG] Loading pickle file data_52.pickle
[LOG] Processing node features for num 52
[LOG] Processing edge features for num 52
[LOG] Processing tetra features for num 52
[LOG] Processing cluster features for num 52
[LOG] Processing cluster features for num 52
[LOG] Processing adjacency and incidence matrices for num 52
[LOG] Computing n0_to_0 for num 52
[LOG] Computing n1_to_1 for num 52
[LOG] Computing n2_to_2 (adjacency) for num 52
[LOG] Computing n3_to_3 (adjacency) for num 52
[LOG] Computing n4_to_4 (coadjacency) for num 52
[LOG] Computing n0_to_1 for num 52
[LOG] Computing n0_to_2 for num 52
[LOG] Computing n0_to_3 for num 52
[LOG] Computing n0_to_4 for num 52
[LOG] Computing n1_to_2 for num 52
[LOG] Computing n1_to_3 for num 52
[LOG] Computing n1_to_4 for num 52
[LOG] Computing n2_to_3 for num 52
[LOG] Computing n2_to_4 for num 52
[LOG] Computing n3_to_4 for num 52
[LOG] Global feature for num 52
[LOG] Global feature for num 52
[LOG] Saving tensor x_0_52.pt
[LOG] Saving tensor x_1_52.pt
[LOG] Saving tensor x_2_52.pt
[LOG] Saving tensor x_3_52.pt
[LOG] Saving tensor x_4_52.pt
[LOG] Saving tensor n0_to_0_52.pt
[LOG] Saving tensor n1_to_1_52.pt
[LOG] Saving tensor n2_to_2_52.pt
[LOG] Saving tensor n3_to_3_52.pt
[LOG] Saving tensor n4_to_4_52.pt
[LOG] Saving tensor n0_to_1_52.pt
[LOG] Saving tensor n0_to_2_52.pt
[LOG] Saving tensor n0_to_3_52.pt
[LOG] Saving tensor n0_to_4_52.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n1_to_2_52.pt
[LOG] Saving tensor n1_to_3_52.pt
[LOG] Saving tensor n1_to_4_52.pt
[LOG] Saving tensor n2_to_3_52.pt
[LOG] Saving tensor n2_to_4_52.pt
[LOG] Saving tensor n3_to_4_52.pt
[LOG] Saving tensor global_feature_52.pt
[LOG] Process 6: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1674 Tetrahedra.
    [LOG] Generated 55 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.418181818181818
    [LOG] Max number of nodes per cluster is 62 and the number is 28
[LOG] We will select 444 edges and 1674 tetra
[LOG] Edges from tetra 0 and KDTree 4088 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.
[LOG] Process 110: Created combinatorial complex for file data_880.hdf5
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 110: Calculating Neighbors
[LOG] Loading pickle file data_880.pickle
[LOG] Processing node features for num 880
[LOG] Processing edge features for num 880
[LOG] Processing tetra features for num 880
[LOG] Processing cluster features for num 880
[LOG] Processing cluster features for num 880
[LOG] Processing adjacency and incidence matrices for num 880
[LOG] Computing n0_to_0 for num 880
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_1 for num 880
[LOG] Computing n2_to_2 (adjacency) for num 880
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_3 (adjacency) for num 880
[LOG] Computing n4_to_4 (coadjacency) for num 880
[LOG] Computing n0_to_1 for num 880
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_2 for num 880
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_3 for num 880
[LOG] Computing n0_to_4 for num 880
[LOG] Computing n1_to_2 for num 880
[LOG] Computing n1_to_3 for num 880
[LOG] Computing n1_to_4 for num 880
[LOG] Computing n2_to_3 for num 880
[LOG] Computing n2_to_4 for num 880
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_4 for num 880
[LOG] Global feature for num 880
[LOG] Global feature for num 880
[LOG] Saving tensor x_0_880.pt
[LOG] Saving tensor x_1_880.pt
[LOG] Saving tensor x_2_880.pt
[LOG] Saving tensor x_3_880.pt
[LOG] Saving tensor x_4_880.pt
[LOG] Saving tensor n0_to_0_880.pt
[LOG] Saving tensor n1_to_1_880.pt
[LOG] Saving tensor n2_to_2_880.pt
[LOG] Saving tensor n3_to_3_880.pt
[LOG] Saving tensor n4_to_4_880.pt
[LOG] Saving tensor n0_to_1_880.pt
[LOG] Saving tensor n0_to_2_880.pt
[LOG] Saving tensor n0_to_3_880.pt
[LOG] Saving tensor n0_to_4_880.pt
[LOG] Saving tensor n1_to_2_880.pt
[LOG] Saving tensor n1_to_3_880.pt
[LOG] Saving tensor n1_to_4_880.pt
[LOG] Saving tensor n2_to_3_880.pt
[LOG] Saving tensor n2_to_4_880.pt
[LOG] Saving tensor n3_to_4_880.pt
[LOG] Saving tensor global_feature_880.pt
[LOG] Process 110: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] GENERATED TETRA
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1856 Tetrahedra.
    [LOG] Generated 55 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.618181818181819
    [LOG] Max number of nodes per cluster is 43 and the number is 16
[LOG] We will select 550 edges and 1856 tetra
[LOG] Edges from tetra 0 and KDTree 550 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 109: Created combinatorial complex for file data_870.hdf5
[LOG] Process 109: Calculating Neighbors
[LOG] Loading pickle file data_870.pickle
[LOG] Processing node features for num 870
[LOG] Processing edge features for num 870
[LOG] Processing tetra features for num 870
[LOG] Processing cluster features for num 870
[LOG] Processing cluster features for num 870
[LOG] Processing adjacency and incidence matrices for num 870
[LOG] Computing n0_to_0 for num 870
[LOG] Computing n1_to_1 for num 870
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_2 (adjacency) for num 870
[LOG] Computing n3_to_3 (adjacency) for num 870
[LOG] Computing n4_to_4 (coadjacency) for num 870
[LOG] Computing n0_to_1 for num 870
[LOG] Computing n0_to_2 for num 870
[LOG] Computing n0_to_3 for num 870
[LOG] Computing n0_to_4 for num 870
[LOG] Computing n1_to_2 for num 870
[LOG] Computing n1_to_3 for num 870
[LOG] GENERATED TETRA
[LOG] Computing n1_to_4 for num 870
[LOG] Computing n2_to_3 for num 870
[LOG] Computing n2_to_4 for num 870
[LOG] Computing n3_to_4 for num 870
[LOG] Global feature for num 870
[LOG] Global feature for num 870
[LOG] Saving tensor x_0_870.pt
[LOG] Saving tensor x_1_870.pt
[LOG] Saving tensor x_2_870.pt
[LOG] Saving tensor x_3_870.pt
[LOG] Saving tensor x_4_870.pt
[LOG] Saving tensor n0_to_0_870.pt
[LOG] Saving tensor n1_to_1_870.pt
[LOG] Saving tensor n2_to_2_870.pt
[LOG] Saving tensor n3_to_3_870.pt
[LOG] Saving tensor n4_to_4_870.pt
[LOG] Saving tensor n0_to_1_870.pt
[LOG] Saving tensor n0_to_2_870.pt
[LOG] Saving tensor n0_to_3_870.pt
[LOG] Saving tensor n0_to_4_870.pt
[LOG] Saving tensor n1_to_2_870.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor n1_to_3_870.pt
[LOG] Saving tensor n1_to_4_870.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor n2_to_3_870.pt
[LOG] Saving tensor n2_to_4_870.pt
[LOG] Saving tensor n3_to_4_870.pt
[LOG] Saving tensor global_feature_870.pt
[LOG] Process 109: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2513 Tetrahedra.
    [LOG] Generated 59 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.152542372881356
    [LOG] Max number of nodes per cluster is 57 and the number is 22
[LOG] We will select 448 edges and 2513 tetra
[LOG] Edges from tetra 0 and KDTree 649 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 52: Created combinatorial complex for file data_421.hdf5
[LOG] Process 52: Calculating Neighbors
[LOG] Loading pickle file data_421.pickle
[LOG] Processing node features for num 421
[LOG] Processing edge features for num 421
[LOG] Processing tetra features for num 421
[LOG] Processing cluster features for num 421
[LOG] Processing cluster features for num 421
[LOG] Processing adjacency and incidence matrices for num 421
[LOG] Computing n0_to_0 for num 421
[LOG] Computing n1_to_1 for num 421
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_2 (adjacency) for num 421
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_3 (adjacency) for num 421
[LOG] Computing n4_to_4 (coadjacency) for num 421
[LOG] Computing n0_to_1 for num 421
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_2 for num 421
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n0_to_3 for num 421
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n0_to_4 for num 421
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n1_to_2 for num 421
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_3 for num 421
[LOG] Computing n1_to_4 for num 421
[LOG] Computing n2_to_3 for num 421
[LOG] Computing n2_to_4 for num 421
[LOG] Computing n3_to_4 for num 421
[LOG] Global feature for num 421
[LOG] Global feature for num 421
[LOG] Saving tensor x_0_421.pt
[LOG] Saving tensor x_1_421.pt
[LOG] Saving tensor x_2_421.pt
[LOG] Saving tensor x_3_421.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor x_4_421.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n0_to_0_421.pt
[LOG] Saving tensor n1_to_1_421.pt
[LOG] Saving tensor n2_to_2_421.pt
[LOG] Saving tensor n3_to_3_421.pt
[LOG] Saving tensor n4_to_4_421.pt
[LOG] Saving tensor n0_to_1_421.pt
[LOG] Saving tensor n0_to_2_421.pt
[LOG] Saving tensor n0_to_3_421.pt
[LOG] Saving tensor n0_to_4_421.pt
[LOG] Saving tensor n1_to_2_421.pt
[LOG] Saving tensor n1_to_3_421.pt
[LOG] Saving tensor n1_to_4_421.pt
[LOG] Saving tensor n2_to_3_421.pt
[LOG] Saving tensor n2_to_4_421.pt
[LOG] Saving tensor n3_to_4_421.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor global_feature_421.pt
[LOG] Process 52: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 4 subset clusters.

    [LOG] We Currently have 2616 Tetrahedra.
    [LOG] Generated 78 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.871794871794872
    [LOG] Max number of nodes per cluster is 33 and the number is 54
[LOG] We will select 581 edges and 2616 tetra
[LOG] Edges from tetra 0 and KDTree 1258 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Removed 1 subset clusters.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 82: Created combinatorial complex for file data_663.hdf5
[LOG] Process 82: Calculating Neighbors
[LOG] Loading pickle file data_663.pickle
[LOG] Processing node features for num 663
[LOG] Processing edge features for num 663
[LOG] Processing tetra features for num 663
[LOG] Processing cluster features for num 663
[LOG] Processing cluster features for num 663
[LOG] Processing adjacency and incidence matrices for num 663
[LOG] Computing n0_to_0 for num 663
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_1 for num 663
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_2 (adjacency) for num 663
[LOG] Computing n3_to_3 (adjacency) for num 663
[LOG] Computing n4_to_4 (coadjacency) for num 663
[LOG] Computing n0_to_1 for num 663
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_2 for num 663
[LOG] Calculating for cell ranks 3 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_3 for num 663
[LOG] Computing n0_to_4 for num 663
[LOG] Computing n1_to_2 for num 663
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 877 Tetrahedra.
    [LOG] Generated 33 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.696969696969697
    [LOG] Max number of nodes per cluster is 94 and the number is 29
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] We will select 73 edges and 877 tetra
[LOG] Edges from tetra 0 and KDTree 1574 with 0 edges in common.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n1_to_3 for num 663
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Computing n1_to_4 for num 663
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Computing n2_to_3 for num 663
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Process 6: Created combinatorial complex for file data_53.hdf5
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Computing n2_to_4 for num 663
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Process 6: Calculating Neighbors
[LOG] Loading pickle file data_53.pickle
[LOG] Processing node features for num 53
[LOG] Computing n3_to_4 for num 663
[LOG] Processing edge features for num 53
[LOG] Global feature for num 663
[LOG] Global feature for num 663
[LOG] Saving tensor x_0_663.pt
[LOG] Saving tensor x_1_663.pt
[LOG] Saving tensor x_2_663.pt
[LOG] Saving tensor x_3_663.pt
[LOG] Saving tensor x_4_663.pt
[LOG] Processing tetra features for num 53
[LOG] Saving tensor n0_to_0_663.pt
[LOG] Saving tensor n1_to_1_663.pt
[LOG] Saving tensor n2_to_2_663.pt
[LOG] Saving tensor n3_to_3_663.pt
[LOG] Saving tensor n4_to_4_663.pt
[LOG] Saving tensor n0_to_1_663.pt
[LOG] Processing cluster features for num 53
[LOG] Saving tensor n0_to_2_663.pt
[LOG] Saving tensor n0_to_3_663.pt
[LOG] Saving tensor n0_to_4_663.pt
[LOG] Saving tensor n1_to_2_663.pt
[LOG] Processing cluster features for num 53
[LOG] Saving tensor n1_to_3_663.pt
[LOG] Saving tensor n1_to_4_663.pt
[LOG] Saving tensor n2_to_3_663.pt
[LOG] Processing adjacency and incidence matrices for num 53
[LOG] Computing n0_to_0 for num 53
[LOG] Saving tensor n2_to_4_663.pt
[LOG] Saving tensor n3_to_4_663.pt
[LOG] Saving tensor global_feature_663.pt
[LOG] Process 82: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_1 for num 53
[LOG] Computing n2_to_2 (adjacency) for num 53
[LOG] Computing n3_to_3 (adjacency) for num 53
[LOG] Computing n4_to_4 (coadjacency) for num 53
[LOG] Computing n0_to_1 for num 53
[LOG] Computing n0_to_2 for num 53
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_3 for num 53
[LOG] Computing n0_to_4 for num 53
[LOG] Computing n1_to_2 for num 53
[LOG] Computing n1_to_3 for num 53
[LOG] Computing n1_to_4 for num 53
[LOG] Computing n2_to_3 for num 53
[LOG] Computing n2_to_4 for num 53
[LOG] Computing n3_to_4 for num 53
[LOG] Global feature for num 53
[LOG] Global feature for num 53
[LOG] Saving tensor x_0_53.pt
[LOG] Saving tensor x_1_53.pt
[LOG] Saving tensor x_2_53.pt
[LOG] Saving tensor x_3_53.pt
[LOG] Saving tensor x_4_53.pt
[LOG] Saving tensor n0_to_0_53.pt
[LOG] Saving tensor n1_to_1_53.pt
[LOG] Saving tensor n2_to_2_53.pt
[LOG] Saving tensor n3_to_3_53.pt
[LOG] Saving tensor n4_to_4_53.pt
[LOG] Saving tensor n0_to_1_53.pt
[LOG] Saving tensor n0_to_2_53.pt
[LOG] Saving tensor n0_to_3_53.pt
[LOG] Saving tensor n0_to_4_53.pt
[LOG] Saving tensor n1_to_2_53.pt
[LOG] Saving tensor n1_to_3_53.pt
[LOG] Saving tensor n1_to_4_53.pt
[LOG] Saving tensor n2_to_3_53.pt
[LOG] Saving tensor n2_to_4_53.pt
[LOG] Saving tensor n3_to_4_53.pt
[LOG] Saving tensor global_feature_53.pt
[LOG] Process 6: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1836 Tetrahedra.
    [LOG] Generated 55 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.163636363636364
    [LOG] Max number of nodes per cluster is 61 and the number is 31
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] We will select 1040 edges and 1836 tetra
[LOG] Edges from tetra 0 and KDTree 2272 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Process 94: Created combinatorial complex for file data_758.hdf5
[LOG] Process 94: Calculating Neighbors
[LOG] Loading pickle file data_758.pickle
[LOG] Processing node features for num 758
[LOG] Processing edge features for num 758
[LOG] Processing tetra features for num 758
[LOG] Processing cluster features for num 758
[LOG] Processing cluster features for num 758
[LOG] Processing adjacency and incidence matrices for num 758
[LOG] Computing n0_to_0 for num 758
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_1 for num 758
[LOG] Computing n2_to_2 (adjacency) for num 758
[LOG] Computing n3_to_3 (adjacency) for num 758
[LOG] Computing n4_to_4 (coadjacency) for num 758
[LOG] Computing n0_to_1 for num 758
[LOG] Computing n0_to_2 for num 758
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_3 for num 758
[LOG] Computing n0_to_4 for num 758
[LOG] Computing n1_to_2 for num 758
[LOG] Computing n1_to_3 for num 758
[LOG] Computing n1_to_4 for num 758
[LOG] Computing n2_to_3 for num 758
[LOG] Computing n2_to_4 for num 758
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n3_to_4 for num 758
[LOG] Global feature for num 758
[LOG] Global feature for num 758
[LOG] Saving tensor x_0_758.pt
[LOG] Saving tensor x_1_758.pt
[LOG] Saving tensor x_2_758.pt
[LOG] Saving tensor x_3_758.pt
[LOG] Saving tensor x_4_758.pt
[LOG] Saving tensor n0_to_0_758.pt
[LOG] Saving tensor n1_to_1_758.pt
[LOG] Saving tensor n2_to_2_758.pt
[LOG] Saving tensor n3_to_3_758.pt
[LOG] Saving tensor n4_to_4_758.pt
[LOG] Saving tensor n0_to_1_758.pt
[LOG] Saving tensor n0_to_2_758.pt
[LOG] Saving tensor n0_to_3_758.pt
[LOG] Saving tensor n0_to_4_758.pt
[LOG] Saving tensor n1_to_2_758.pt
[LOG] Saving tensor n1_to_3_758.pt
[LOG] Saving tensor n1_to_4_758.pt
[LOG] Saving tensor n2_to_3_758.pt
[LOG] Saving tensor n2_to_4_758.pt
[LOG] Saving tensor n3_to_4_758.pt
[LOG] Saving tensor global_feature_758.pt
[LOG] Process 94: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1689 Tetrahedra.
    [LOG] Generated 2 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 156.0
    [LOG] Max number of nodes per cluster is 297 and the number is 0
[LOG] We will select 138 edges and 1689 tetra
[LOG] Edges from tetra 0 and KDTree 138 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 61: Created combinatorial complex for file data_494.hdf5
[LOG] Process 61: Calculating Neighbors
[LOG] Loading pickle file data_494.pickle
[LOG] Processing node features for num 494
[LOG] Processing edge features for num 494
[LOG] Processing tetra features for num 494
[LOG] Processing cluster features for num 494
[LOG] Processing cluster features for num 494
[LOG] Processing adjacency and incidence matrices for num 494
[LOG] Computing n0_to_0 for num 494
[LOG] Computing n1_to_1 for num 494
[LOG] Computing n2_to_2 (adjacency) for num 494
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_3 (adjacency) for num 494
[LOG] Computing n4_to_4 (coadjacency) for num 494
[LOG] Computing n0_to_1 for num 494
[LOG] Computing n0_to_2 for num 494
[LOG] Computing n0_to_3 for num 494
[LOG] Computing n0_to_4 for num 494
[LOG] Computing n1_to_2 for num 494
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_3 for num 494
[LOG] Computing n1_to_4 for num 494
[LOG] Computing n2_to_3 for num 494
[LOG] Computing n2_to_4 for num 494
[LOG] Computing n3_to_4 for num 494
[LOG] Global feature for num 494
[LOG] Global feature for num 494
[LOG] Saving tensor x_0_494.pt
[LOG] Saving tensor x_1_494.pt
[LOG] Saving tensor x_2_494.pt
[LOG] Saving tensor x_3_494.pt
[LOG] Saving tensor x_4_494.pt
[LOG] Saving tensor n0_to_0_494.pt
[LOG] Saving tensor n1_to_1_494.pt
[LOG] Saving tensor n2_to_2_494.pt
[LOG] Saving tensor n3_to_3_494.pt
[LOG] Saving tensor n4_to_4_494.pt
[LOG] Saving tensor n0_to_1_494.pt
[LOG] Saving tensor n0_to_2_494.pt
[LOG] Saving tensor n0_to_3_494.pt
[LOG] Saving tensor n0_to_4_494.pt
[LOG] Saving tensor n1_to_2_494.pt
[LOG] Saving tensor n1_to_3_494.pt
[LOG] Saving tensor n1_to_4_494.pt
[LOG] Saving tensor n2_to_3_494.pt
[LOG] Saving tensor n2_to_4_494.pt
[LOG] Saving tensor n3_to_4_494.pt
[LOG] Saving tensor global_feature_494.pt
[LOG] Process 61: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 2743 Tetrahedra.
    [LOG] Generated 67 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.223880597014926
    [LOG] Max number of nodes per cluster is 41 and the number is 35
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] We will select 604 edges and 2743 tetra
[LOG] Edges from tetra 0 and KDTree 1287 with 0 edges in common.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 2 subset clusters.
[LOG] Process 22: Created combinatorial complex for file data_182.hdf5
[LOG] Process 22: Calculating Neighbors
[LOG] Loading pickle file data_182.pickle
[LOG] Processing node features for num 182
[LOG] Processing edge features for num 182
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 3033 Tetrahedra.
    [LOG] Generated 85 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.352941176470589
    [LOG] Max number of nodes per cluster is 98 and the number is 66
[LOG] Processing tetra features for num 182
[LOG] Processing cluster features for num 182
[LOG] Processing cluster features for num 182
[LOG] Processing adjacency and incidence matrices for num 182
[LOG] Computing n0_to_0 for num 182
[LOG] We will select 643 edges and 3033 tetra
[LOG] Edges from tetra 0 and KDTree 2199 with 0 edges in common.
[LOG] Computing n1_to_1 for num 182
[LOG] Computing n2_to_2 (adjacency) for num 182
[LOG] Computing n3_to_3 (adjacency) for num 182
[LOG] Computing n4_to_4 (coadjacency) for num 182
[LOG] Computing n0_to_1 for num 182
[LOG] Computing n0_to_2 for num 182
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 3 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 60: Created combinatorial complex for file data_487.hdf5
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Computing n0_to_3 for num 182
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n0_to_4 for num 182
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Computing n1_to_2 for num 182
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Process 60: Calculating Neighbors
[LOG] Loading pickle file data_487.pickle
[LOG] Processing node features for num 487
[LOG] Processing edge features for num 487
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1856 Tetrahedra.
    [LOG] Generated 50 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.98
    [LOG] Max number of nodes per cluster is 43 and the number is 23
[LOG] Processing tetra features for num 487
[LOG] We will select 550 edges and 1856 tetra
[LOG] Edges from tetra 0 and KDTree 627 with 0 edges in common.
[LOG] Processing cluster features for num 487
[LOG] Processing cluster features for num 487
[LOG] Processing adjacency and incidence matrices for num 487
[LOG] Computing n0_to_0 for num 487
[LOG] Computing n1_to_3 for num 182
[LOG] Computing n1_to_4 for num 182
[LOG] Computing n2_to_3 for num 182
[LOG] Computing n1_to_1 for num 487
[LOG] Computing n2_to_4 for num 182
[LOG] Computing n3_to_4 for num 182
[LOG] Global feature for num 182
[LOG] Global feature for num 182
[LOG] Saving tensor x_0_182.pt
[LOG] Saving tensor x_1_182.pt
[LOG] Saving tensor x_2_182.pt
[LOG] Saving tensor x_3_182.pt
[LOG] Saving tensor x_4_182.pt
[LOG] Saving tensor n0_to_0_182.pt
[LOG] Saving tensor n1_to_1_182.pt
[LOG] Saving tensor n2_to_2_182.pt
[LOG] Saving tensor n3_to_3_182.pt
[LOG] Saving tensor n4_to_4_182.pt
[LOG] Saving tensor n0_to_1_182.pt
[LOG] Saving tensor n0_to_2_182.pt
[LOG] Saving tensor n0_to_3_182.pt
[LOG] Saving tensor n0_to_4_182.pt
[LOG] Saving tensor n1_to_2_182.pt
[LOG] Saving tensor n1_to_3_182.pt
[LOG] Saving tensor n1_to_4_182.pt
[LOG] Saving tensor n2_to_3_182.pt
[LOG] Saving tensor n2_to_4_182.pt
[LOG] Saving tensor n3_to_4_182.pt
[LOG] Saving tensor global_feature_182.pt
[LOG] Process 22: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 1 subset clusters.
[LOG] Computing n2_to_2 (adjacency) for num 487
[LOG] Process 109: Created combinatorial complex for file data_871.hdf5
[LOG] Process 109: Calculating Neighbors
[LOG] Loading pickle file data_871.pickle
[LOG] Processing node features for num 871
[LOG] Processing edge features for num 871
[LOG] Processing tetra features for num 871
[LOG] Processing cluster features for num 871
[LOG] Processing cluster features for num 871
[LOG] Processing adjacency and incidence matrices for num 871
[LOG] Computing n0_to_0 for num 871
[LOG] Computing n1_to_1 for num 871
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n3_to_3 (adjacency) for num 487
[LOG] Computing n4_to_4 (coadjacency) for num 487
[LOG] Computing n0_to_1 for num 487
[LOG] Computing n2_to_2 (adjacency) for num 871
[LOG] Computing n0_to_2 for num 487
[LOG] Computing n3_to_3 (adjacency) for num 871
[LOG] Computing n4_to_4 (coadjacency) for num 871
[LOG] Computing n0_to_1 for num 871
[LOG] Computing n0_to_2 for num 871
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_3 for num 871
[LOG] Computing n0_to_4 for num 871
[LOG] Computing n1_to_2 for num 871
[LOG] Computing n1_to_3 for num 871
[LOG] Computing n1_to_4 for num 871
[LOG] Computing n2_to_3 for num 871
[LOG] Computing n2_to_4 for num 871
[LOG] Computing n0_to_3 for num 487
[LOG] Computing n3_to_4 for num 871
[LOG] Global feature for num 871
[LOG] Global feature for num 871
[LOG] Saving tensor x_0_871.pt
[LOG] Saving tensor x_1_871.pt
[LOG] Saving tensor x_2_871.pt
[LOG] Saving tensor x_3_871.pt
[LOG] Saving tensor x_4_871.pt
[LOG] Saving tensor n0_to_0_871.pt
[LOG] Saving tensor n1_to_1_871.pt
[LOG] Computing n0_to_4 for num 487
[LOG] Saving tensor n2_to_2_871.pt
[LOG] Saving tensor n3_to_3_871.pt
[LOG] Saving tensor n4_to_4_871.pt
[LOG] Saving tensor n0_to_1_871.pt
[LOG] Saving tensor n0_to_2_871.pt
[LOG] Saving tensor n0_to_3_871.pt
[LOG] Saving tensor n0_to_4_871.pt
[LOG] Computing n1_to_2 for num 487
[LOG] Saving tensor n1_to_2_871.pt
[LOG] Saving tensor n1_to_3_871.pt
[LOG] Saving tensor n1_to_4_871.pt
[LOG] Saving tensor n2_to_3_871.pt
[LOG] Saving tensor n2_to_4_871.pt
[LOG] Saving tensor n3_to_4_871.pt
[LOG] Saving tensor global_feature_871.pt
[LOG] Process 109: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_3 for num 487
[LOG] Computing n1_to_4 for num 487
[LOG] Computing n2_to_3 for num 487
[LOG] Computing n2_to_4 for num 487
[LOG] Computing n3_to_4 for num 487
[LOG] Global feature for num 487
[LOG] Global feature for num 487
[LOG] Saving tensor x_0_487.pt
[LOG] Saving tensor x_1_487.pt
[LOG] Saving tensor x_2_487.pt
[LOG] Saving tensor x_3_487.pt
[LOG] Saving tensor x_4_487.pt
[LOG] Saving tensor n0_to_0_487.pt
[LOG] Saving tensor n1_to_1_487.pt
[LOG] Saving tensor n2_to_2_487.pt
[LOG] Saving tensor n3_to_3_487.pt
[LOG] Saving tensor n4_to_4_487.pt
[LOG] Saving tensor n0_to_1_487.pt
[LOG] Saving tensor n0_to_2_487.pt
[LOG] Saving tensor n0_to_3_487.pt
[LOG] Saving tensor n0_to_4_487.pt
[LOG] Saving tensor n1_to_2_487.pt
[LOG] Saving tensor n1_to_3_487.pt
[LOG] Saving tensor n1_to_4_487.pt
[LOG] Saving tensor n2_to_3_487.pt
[LOG] Saving tensor n2_to_4_487.pt
[LOG] Saving tensor n3_to_4_487.pt
[LOG] Saving tensor global_feature_487.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 60: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 3039 Tetrahedra.
    [LOG] Generated 65 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.569230769230769
    [LOG] Max number of nodes per cluster is 101 and the number is 63
[LOG] Calculating for cell ranks 0 and 2
[LOG] We will select 500 edges and 3039 tetra
[LOG] Edges from tetra 0 and KDTree 1244 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Process 107: Created combinatorial complex for file data_858.hdf5
[LOG] Process 107: Calculating Neighbors
[LOG] Loading pickle file data_858.pickle
[LOG] Processing node features for num 858
[LOG] Processing edge features for num 858
[LOG] Processing tetra features for num 858
[LOG] Processing cluster features for num 858
[LOG] Processing cluster features for num 858
[LOG] Processing adjacency and incidence matrices for num 858
[LOG] Computing n0_to_0 for num 858
[LOG] Computing n1_to_1 for num 858
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_2 (adjacency) for num 858
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_3 (adjacency) for num 858
[LOG] Computing n4_to_4 (coadjacency) for num 858
[LOG] Computing n0_to_1 for num 858
[LOG] Computing n0_to_2 for num 858
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_3 for num 858
[LOG] Computing n0_to_4 for num 858
[LOG] Computing n1_to_2 for num 858
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_3 for num 858
[LOG] Computing n1_to_4 for num 858
[LOG] Computing n2_to_3 for num 858
[LOG] Computing n2_to_4 for num 858
[LOG] Computing n3_to_4 for num 858
[LOG] Global feature for num 858
[LOG] Global feature for num 858
[LOG] Saving tensor x_0_858.pt
[LOG] Saving tensor x_1_858.pt
[LOG] Saving tensor x_2_858.pt
[LOG] Saving tensor x_3_858.pt
[LOG] Saving tensor x_4_858.pt
[LOG] Saving tensor n0_to_0_858.pt
[LOG] Saving tensor n1_to_1_858.pt
[LOG] Saving tensor n2_to_2_858.pt
[LOG] Saving tensor n3_to_3_858.pt
[LOG] Saving tensor n4_to_4_858.pt
[LOG] Saving tensor n0_to_1_858.pt
[LOG] Saving tensor n0_to_2_858.pt
[LOG] Saving tensor n0_to_3_858.pt
[LOG] Saving tensor n0_to_4_858.pt
[LOG] Saving tensor n1_to_2_858.pt
[LOG] Saving tensor n1_to_3_858.pt
[LOG] Saving tensor n1_to_4_858.pt
[LOG] Saving tensor n2_to_3_858.pt
[LOG] Saving tensor n2_to_4_858.pt
[LOG] Saving tensor n3_to_4_858.pt
[LOG] Saving tensor global_feature_858.pt
[LOG] Process 107: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1651 Tetrahedra.
    [LOG] Generated 47 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.106382978723403
    [LOG] Max number of nodes per cluster is 63 and the number is 24
[LOG] Calculating for cell ranks 1 and 3
[LOG] We will select 326 edges and 1651 tetra
[LOG] Edges from tetra 0 and KDTree 1930 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 57: Created combinatorial complex for file data_461.hdf5
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 57: Calculating Neighbors
[LOG] Loading pickle file data_461.pickle
[LOG] Processing node features for num 461
[LOG] Processing edge features for num 461
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing tetra features for num 461
[LOG] Processing cluster features for num 461
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Processing cluster features for num 461
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Processing adjacency and incidence matrices for num 461
[LOG] Computing n0_to_0 for num 461
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_1 for num 461
[LOG] Computing n2_to_2 (adjacency) for num 461
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n3_to_3 (adjacency) for num 461
[LOG] Computing n4_to_4 (coadjacency) for num 461
[LOG] Computing n0_to_1 for num 461
[LOG] Computing n0_to_2 for num 461
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n0_to_3 for num 461
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_4 for num 461
[LOG] Computing n1_to_2 for num 461
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Computing n1_to_3 for num 461
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Computing n1_to_4 for num 461
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Computing n2_to_3 for num 461
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n2_to_4 for num 461
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_4 for num 461
[LOG] Global feature for num 461
[LOG] Global feature for num 461
[LOG] Saving tensor x_0_461.pt
[LOG] Saving tensor x_1_461.pt
[LOG] Saving tensor x_2_461.pt
[LOG] Saving tensor x_3_461.pt
[LOG] Saving tensor x_4_461.pt
[LOG] Saving tensor n0_to_0_461.pt
[LOG] Saving tensor n1_to_1_461.pt
[LOG] Saving tensor n2_to_2_461.pt
[LOG] Saving tensor n3_to_3_461.pt
[LOG] Saving tensor n4_to_4_461.pt
[LOG] Saving tensor n0_to_1_461.pt
[LOG] Saving tensor n0_to_2_461.pt
[LOG] Saving tensor n0_to_3_461.pt
[LOG] Saving tensor n0_to_4_461.pt
[LOG] Saving tensor n1_to_2_461.pt
[LOG] Saving tensor n1_to_3_461.pt
[LOG] Saving tensor n1_to_4_461.pt
[LOG] Saving tensor n2_to_3_461.pt
[LOG] Saving tensor n2_to_4_461.pt
[LOG] Saving tensor n3_to_4_461.pt
[LOG] Saving tensor global_feature_461.pt
[LOG] Process 57: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2513 Tetrahedra.
    [LOG] Generated 54 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 19.37037037037037
    [LOG] Max number of nodes per cluster is 132 and the number is 52
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] We will select 448 edges and 2513 tetra
[LOG] Edges from tetra 0 and KDTree 4138 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Process 52: Created combinatorial complex for file data_422.hdf5
[LOG] Process 52: Calculating Neighbors
[LOG] Loading pickle file data_422.pickle
[LOG] Processing node features for num 422
[LOG] Processing edge features for num 422
[LOG] Processing tetra features for num 422
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing cluster features for num 422
[LOG] Processing cluster features for num 422
[LOG] Processing adjacency and incidence matrices for num 422
[LOG] Computing n0_to_0 for num 422
[LOG] Computing n1_to_1 for num 422
[LOG] Computing n2_to_2 (adjacency) for num 422
[LOG] GENERATED TETRA
[LOG] Computing n3_to_3 (adjacency) for num 422
[LOG] Computing n4_to_4 (coadjacency) for num 422
[LOG] Computing n0_to_1 for num 422
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_2 for num 422
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 3091 Tetrahedra.
    [LOG] Generated 101 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.673267326732674
    [LOG] Max number of nodes per cluster is 32 and the number is 54
[LOG] We will select 1460 edges and 3091 tetra
[LOG] Edges from tetra 0 and KDTree 1460 with 0 edges in common.
[LOG] Computing n0_to_3 for num 422
[LOG] Computing n0_to_4 for num 422
[LOG] Computing n1_to_2 for num 422
[LOG] Computing n1_to_3 for num 422
[LOG] Computing n1_to_4 for num 422
[LOG] Computing n2_to_3 for num 422
[LOG] Computing n2_to_4 for num 422
[LOG] Computing n3_to_4 for num 422
[LOG] Global feature for num 422
[LOG] Global feature for num 422
[LOG] Saving tensor x_0_422.pt
[LOG] Saving tensor x_1_422.pt
[LOG] Saving tensor x_2_422.pt
[LOG] Saving tensor x_3_422.pt
[LOG] Saving tensor x_4_422.pt
[LOG] Saving tensor n0_to_0_422.pt
[LOG] Saving tensor n1_to_1_422.pt
[LOG] Saving tensor n2_to_2_422.pt
[LOG] Saving tensor n3_to_3_422.pt
[LOG] Saving tensor n4_to_4_422.pt
[LOG] Saving tensor n0_to_1_422.pt
[LOG] Saving tensor n0_to_2_422.pt
[LOG] Saving tensor n0_to_3_422.pt
[LOG] Saving tensor n0_to_4_422.pt
[LOG] Saving tensor n1_to_2_422.pt
[LOG] Saving tensor n1_to_3_422.pt
[LOG] Saving tensor n1_to_4_422.pt
[LOG] Saving tensor n2_to_3_422.pt
[LOG] Saving tensor n2_to_4_422.pt
[LOG] Saving tensor n3_to_4_422.pt
[LOG] Saving tensor global_feature_422.pt
[LOG] Process 52: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Removed 4 subset clusters.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 41: Created combinatorial complex for file data_330.hdf5
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 41: Calculating Neighbors
[LOG] Loading pickle file data_330.pickle
[LOG] Processing node features for num 330
[LOG] Processing edge features for num 330
[LOG] Processing tetra features for num 330
[LOG] Processing cluster features for num 330
[LOG] Calculating for cell ranks 0 and 2
[LOG] Processing cluster features for num 330
[LOG] Processing adjacency and incidence matrices for num 330
[LOG] Computing n0_to_0 for num 330
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_1 for num 330
[LOG] Computing n2_to_2 (adjacency) for num 330
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 330
[LOG] Computing n4_to_4 (coadjacency) for num 330
[LOG] Computing n0_to_1 for num 330
[LOG] Computing n0_to_2 for num 330
[LOG] Computing n0_to_3 for num 330
[LOG] Computing n0_to_4 for num 330
[LOG] Computing n1_to_2 for num 330
[LOG] Computing n1_to_3 for num 330
[LOG] Computing n1_to_4 for num 330
[LOG] Computing n2_to_3 for num 330
[LOG] Computing n2_to_4 for num 330
[LOG] Computing n3_to_4 for num 330
[LOG] Global feature for num 330
[LOG] Global feature for num 330
[LOG] Saving tensor x_0_330.pt
[LOG] Saving tensor x_1_330.pt
[LOG] Saving tensor x_2_330.pt
[LOG] Saving tensor x_3_330.pt
[LOG] Saving tensor x_4_330.pt
[LOG] Saving tensor n0_to_0_330.pt
[LOG] Saving tensor n1_to_1_330.pt
[LOG] Saving tensor n2_to_2_330.pt
[LOG] Saving tensor n3_to_3_330.pt
[LOG] Saving tensor n4_to_4_330.pt
[LOG] Saving tensor n0_to_1_330.pt
[LOG] Saving tensor n0_to_2_330.pt
[LOG] Saving tensor n0_to_3_330.pt
[LOG] Saving tensor n0_to_4_330.pt
[LOG] Saving tensor n1_to_2_330.pt
[LOG] Saving tensor n1_to_3_330.pt
[LOG] Saving tensor n1_to_4_330.pt
[LOG] Saving tensor n2_to_3_330.pt
[LOG] Saving tensor n2_to_4_330.pt
[LOG] Saving tensor n3_to_4_330.pt
[LOG] Saving tensor global_feature_330.pt
[LOG] Process 41: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 877 Tetrahedra.
    [LOG] Generated 34 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.852941176470589
    [LOG] Max number of nodes per cluster is 41 and the number is 32
[LOG] We will select 73 edges and 877 tetra
[LOG] Edges from tetra 0 and KDTree 1283 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Process 6: Created combinatorial complex for file data_54.hdf5
[LOG] Process 6: Calculating Neighbors
[LOG] Loading pickle file data_54.pickle
[LOG] Processing node features for num 54
[LOG] Processing edge features for num 54
[LOG] Processing tetra features for num 54
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing cluster features for num 54
[LOG] Processing cluster features for num 54
[LOG] Processing adjacency and incidence matrices for num 54
[LOG] Computing n0_to_0 for num 54
[LOG] Computing n1_to_1 for num 54
[LOG] Computing n2_to_2 (adjacency) for num 54
[LOG] Computing n3_to_3 (adjacency) for num 54
[LOG] Computing n4_to_4 (coadjacency) for num 54
[LOG] Computing n0_to_1 for num 54
[LOG] Computing n0_to_2 for num 54
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_3 for num 54
[LOG] Computing n0_to_4 for num 54
[LOG] Computing n1_to_2 for num 54
[LOG] Computing n1_to_3 for num 54
[LOG] Computing n1_to_4 for num 54
[LOG] Computing n2_to_3 for num 54
[LOG] Computing n2_to_4 for num 54
[LOG] Computing n3_to_4 for num 54
[LOG] Global feature for num 54
[LOG] Global feature for num 54
[LOG] Saving tensor x_0_54.pt
[LOG] Saving tensor x_1_54.pt
[LOG] Saving tensor x_2_54.pt
[LOG] Saving tensor x_3_54.pt
[LOG] Saving tensor x_4_54.pt
[LOG] Saving tensor n0_to_0_54.pt
[LOG] Saving tensor n1_to_1_54.pt
[LOG] Saving tensor n2_to_2_54.pt
[LOG] Saving tensor n3_to_3_54.pt
[LOG] Saving tensor n4_to_4_54.pt
[LOG] Saving tensor n0_to_1_54.pt
[LOG] Saving tensor n0_to_2_54.pt
[LOG] Saving tensor n0_to_3_54.pt
[LOG] Saving tensor n0_to_4_54.pt
[LOG] Saving tensor n1_to_2_54.pt
[LOG] Saving tensor n1_to_3_54.pt
[LOG] Saving tensor n1_to_4_54.pt
[LOG] Saving tensor n2_to_3_54.pt
[LOG] Saving tensor n2_to_4_54.pt
[LOG] Saving tensor n3_to_4_54.pt
[LOG] Saving tensor global_feature_54.pt
[LOG] Process 6: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2885 Tetrahedra.
    [LOG] Generated 97 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.639175257731958
    [LOG] Max number of nodes per cluster is 39 and the number is 19
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] We will select 1083 edges and 2885 tetra
[LOG] Edges from tetra 0 and KDTree 1083 with 0 edges in common.
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 2 subset clusters.
[LOG] Process 127: Created combinatorial complex for file data_997.hdf5
[LOG] Process 127: Calculating Neighbors
[LOG] Loading pickle file data_997.pickle
[LOG] Processing node features for num 997
[LOG] Processing edge features for num 997
[LOG] Processing tetra features for num 997
[LOG] Processing cluster features for num 997
[LOG] Processing cluster features for num 997
[LOG] Processing adjacency and incidence matrices for num 997
[LOG] Computing n0_to_0 for num 997
[LOG] Computing n1_to_1 for num 997
[LOG] Computing n2_to_2 (adjacency) for num 997
[LOG] GENERATED TETRA
[LOG] Computing n3_to_3 (adjacency) for num 997
[LOG] Computing n4_to_4 (coadjacency) for num 997
[LOG] Computing n0_to_1 for num 997
[LOG] Computing n0_to_2 for num 997
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 2970 Tetrahedra.
    [LOG] Generated 66 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.606060606060606
    [LOG] Max number of nodes per cluster is 55 and the number is 65
[LOG] We will select 562 edges and 2970 tetra
[LOG] Edges from tetra 0 and KDTree 562 with 0 edges in common.
[LOG] Computing n0_to_3 for num 997
[LOG] Computing n0_to_4 for num 997
[LOG] Computing n1_to_2 for num 997
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_3 for num 997
[LOG] Computing n1_to_4 for num 997
[LOG] Computing n2_to_3 for num 997
[LOG] Removed 0 subset clusters.
[LOG] Computing n2_to_4 for num 997
[LOG] Computing n3_to_4 for num 997
[LOG] Global feature for num 997
[LOG] Global feature for num 997
[LOG] Saving tensor x_0_997.pt
[LOG] Saving tensor x_1_997.pt
[LOG] Saving tensor x_2_997.pt
[LOG] Saving tensor x_3_997.pt
[LOG] Saving tensor x_4_997.pt
[LOG] Saving tensor n0_to_0_997.pt
[LOG] Saving tensor n1_to_1_997.pt
[LOG] Saving tensor n2_to_2_997.pt
[LOG] Saving tensor n3_to_3_997.pt
[LOG] Saving tensor n4_to_4_997.pt
[LOG] Saving tensor n0_to_1_997.pt
[LOG] Saving tensor n0_to_2_997.pt
[LOG] Saving tensor n0_to_3_997.pt
[LOG] Saving tensor n0_to_4_997.pt
[LOG] Saving tensor n1_to_2_997.pt
[LOG] Saving tensor n1_to_3_997.pt
[LOG] Saving tensor n1_to_4_997.pt
[LOG] Saving tensor n2_to_3_997.pt
[LOG] Saving tensor n2_to_4_997.pt
[LOG] Saving tensor n3_to_4_997.pt
[LOG] Saving tensor global_feature_997.pt
[LOG] Process 127: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 50: Created combinatorial complex for file data_407.hdf5
[LOG] Process 50: Calculating Neighbors
[LOG] Loading pickle file data_407.pickle
[LOG] Processing node features for num 407
[LOG] Processing edge features for num 407
[LOG] Processing tetra features for num 407
[LOG] Processing cluster features for num 407
[LOG] Processing cluster features for num 407
[LOG] Processing adjacency and incidence matrices for num 407
[LOG] Computing n0_to_0 for num 407
[LOG] Computing n1_to_1 for num 407
[LOG] Computing n2_to_2 (adjacency) for num 407
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n3_to_3 (adjacency) for num 407
[LOG] Computing n4_to_4 (coadjacency) for num 407
[LOG] Computing n0_to_1 for num 407
[LOG] Computing n0_to_2 for num 407
[LOG] GENERATED TETRA
[LOG] Computing n0_to_3 for num 407
[LOG] Computing n0_to_4 for num 407
[LOG] Computing n1_to_2 for num 407
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_3 for num 407
[LOG] Computing n1_to_4 for num 407
[LOG] Computing n2_to_3 for num 407
[LOG] Computing n2_to_4 for num 407
[LOG] Computing n3_to_4 for num 407
[LOG] Global feature for num 407
[LOG] Global feature for num 407
[LOG] Saving tensor x_0_407.pt
[LOG] Saving tensor x_1_407.pt
[LOG] Saving tensor x_2_407.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor x_3_407.pt

    [LOG] We Currently have 1856 Tetrahedra.
    [LOG] Generated 60 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.7
    [LOG] Max number of nodes per cluster is 84 and the number is 57[LOG] Saving tensor x_4_407.pt

[LOG] Saving tensor n0_to_0_407.pt
[LOG] Saving tensor n1_to_1_407.pt
[LOG] Saving tensor n2_to_2_407.pt
[LOG] Saving tensor n3_to_3_407.pt
[LOG] Saving tensor n4_to_4_407.pt
[LOG] Saving tensor n0_to_1_407.pt
[LOG] Saving tensor n0_to_2_407.pt
[LOG] Saving tensor n0_to_3_407.pt
[LOG] Saving tensor n0_to_4_407.pt
[LOG] Saving tensor n1_to_2_407.pt
[LOG] Saving tensor n1_to_3_407.pt
[LOG] Saving tensor n1_to_4_407.pt
[LOG] Saving tensor n2_to_3_407.pt
[LOG] Saving tensor n2_to_4_407.pt
[LOG] Saving tensor n3_to_4_407.pt
[LOG] Saving tensor global_feature_407.pt
[LOG] Process 50: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] We will select 550 edges and 1856 tetra
[LOG] Edges from tetra 0 and KDTree 2069 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 0 subset clusters.
[LOG] Process 109: Created combinatorial complex for file data_872.hdf5
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 109: Calculating Neighbors
[LOG] Loading pickle file data_872.pickle
[LOG] Processing node features for num 872
[LOG] Processing edge features for num 872
[LOG] Calculating for cell ranks 3 and 3
[LOG] Processing tetra features for num 872
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing cluster features for num 872
[LOG] Processing cluster features for num 872
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing adjacency and incidence matrices for num 872
[LOG] Computing n0_to_0 for num 872
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_1 for num 872
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 872
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_3 (adjacency) for num 872
[LOG] Computing n4_to_4 (coadjacency) for num 872
[LOG] Computing n0_to_1 for num 872
[LOG] Computing n0_to_2 for num 872
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 776 Tetrahedra.
    [LOG] Generated 18 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.11111111111111
    [LOG] Max number of nodes per cluster is 31 and the number is 17
[LOG] We will select 285 edges and 776 tetra
[LOG] Edges from tetra 0 and KDTree 285 with 0 edges in common.
[LOG] Computing n0_to_3 for num 872
[LOG] Computing n0_to_4 for num 872
[LOG] Computing n1_to_2 for num 872
[LOG] Removed 0 subset clusters.
[LOG] Process 22: Created combinatorial complex for file data_183.hdf5
[LOG] Process 22: Calculating Neighbors
[LOG] Loading pickle file data_183.pickle
[LOG] Processing node features for num 183
[LOG] Processing edge features for num 183
[LOG] Processing tetra features for num 183
[LOG] Processing cluster features for num 183
[LOG] Processing cluster features for num 183
[LOG] Processing adjacency and incidence matrices for num 183
[LOG] Computing n0_to_0 for num 183
[LOG] Computing n1_to_1 for num 183
[LOG] Computing n1_to_3 for num 872
[LOG] Computing n1_to_4 for num 872
[LOG] Computing n2_to_3 for num 872
[LOG] Computing n2_to_2 (adjacency) for num 183
[LOG] Computing n2_to_4 for num 872
[LOG] Computing n3_to_3 (adjacency) for num 183
[LOG] Computing n4_to_4 (coadjacency) for num 183
[LOG] Computing n0_to_1 for num 183
[LOG] Computing n0_to_2 for num 183
[LOG] Computing n3_to_4 for num 872
[LOG] Global feature for num 872
[LOG] Global feature for num 872
[LOG] Saving tensor x_0_872.pt
[LOG] Saving tensor x_1_872.pt
[LOG] Saving tensor x_2_872.pt
[LOG] Saving tensor x_3_872.pt
[LOG] Saving tensor x_4_872.pt
[LOG] Saving tensor n0_to_0_872.pt
[LOG] Saving tensor n1_to_1_872.pt
[LOG] Saving tensor n2_to_2_872.pt
[LOG] Saving tensor n3_to_3_872.pt
[LOG] Saving tensor n4_to_4_872.pt
[LOG] Saving tensor n0_to_1_872.pt
[LOG] Saving tensor n0_to_2_872.pt
[LOG] Computing n0_to_3 for num 183
[LOG] Computing n0_to_4 for num 183
[LOG] Saving tensor n0_to_3_872.pt
[LOG] Saving tensor n0_to_4_872.pt
[LOG] Computing n1_to_2 for num 183
[LOG] Saving tensor n1_to_2_872.pt
[LOG] Saving tensor n1_to_3_872.pt
[LOG] Saving tensor n1_to_4_872.pt
[LOG] Saving tensor n2_to_3_872.pt
[LOG] Saving tensor n2_to_4_872.pt
[LOG] Saving tensor n3_to_4_872.pt
[LOG] Saving tensor global_feature_872.pt
[LOG] Process 109: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_3 for num 183
[LOG] Computing n1_to_4 for num 183
[LOG] Computing n2_to_3 for num 183
[LOG] Computing n2_to_4 for num 183
[LOG] Computing n3_to_4 for num 183
[LOG] Global feature for num 183
[LOG] Global feature for num 183
[LOG] Saving tensor x_0_183.pt
[LOG] Saving tensor x_1_183.pt
[LOG] Saving tensor x_2_183.pt
[LOG] Saving tensor x_3_183.pt
[LOG] Saving tensor x_4_183.pt
[LOG] Saving tensor n0_to_0_183.pt
[LOG] Saving tensor n1_to_1_183.pt
[LOG] Saving tensor n2_to_2_183.pt
[LOG] Saving tensor n3_to_3_183.pt
[LOG] Saving tensor n4_to_4_183.pt
[LOG] Saving tensor n0_to_1_183.pt
[LOG] Saving tensor n0_to_2_183.pt
[LOG] Saving tensor n0_to_3_183.pt
[LOG] Saving tensor n0_to_4_183.pt
[LOG] Saving tensor n1_to_2_183.pt
[LOG] Saving tensor n1_to_3_183.pt
[LOG] Saving tensor n1_to_4_183.pt
[LOG] Saving tensor n2_to_3_183.pt
[LOG] Saving tensor n2_to_4_183.pt
[LOG] Saving tensor n3_to_4_183.pt
[LOG] Saving tensor global_feature_183.pt
[LOG] Process 22: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2569 Tetrahedra.
    [LOG] Generated 69 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.08695652173913
    [LOG] Max number of nodes per cluster is 48 and the number is 12
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] We will select 562 edges and 2569 tetra
[LOG] Edges from tetra 0 and KDTree 562 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Removed 0 subset clusters.
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 9: Created combinatorial complex for file data_74.hdf5
[LOG] Process 9: Calculating Neighbors
[LOG] Loading pickle file data_74.pickle
[LOG] Processing node features for num 74
[LOG] Processing edge features for num 74
[LOG] Processing tetra features for num 74
[LOG] Processing cluster features for num 74
[LOG] Processing cluster features for num 74
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing adjacency and incidence matrices for num 74
[LOG] Computing n0_to_0 for num 74
[LOG] Computing n1_to_1 for num 74
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_2 (adjacency) for num 74
[LOG] Computing n3_to_3 (adjacency) for num 74
[LOG] Computing n4_to_4 (coadjacency) for num 74
[LOG] Computing n0_to_1 for num 74
[LOG] Computing n0_to_2 for num 74
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_3 for num 74
[LOG] Computing n0_to_4 for num 74
[LOG] Computing n1_to_2 for num 74
[LOG] Computing n1_to_3 for num 74
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_4 for num 74
[LOG] Computing n2_to_3 for num 74
[LOG] Computing n2_to_4 for num 74
[LOG] Computing n3_to_4 for num 74
[LOG] Global feature for num 74
[LOG] Global feature for num 74
[LOG] Saving tensor x_0_74.pt
[LOG] Saving tensor x_1_74.pt
[LOG] Saving tensor x_2_74.pt
[LOG] Saving tensor x_3_74.pt
[LOG] Saving tensor x_4_74.pt
[LOG] Saving tensor n0_to_0_74.pt
[LOG] Saving tensor n1_to_1_74.pt
[LOG] Saving tensor n2_to_2_74.pt
[LOG] Saving tensor n3_to_3_74.pt
[LOG] Saving tensor n4_to_4_74.pt
[LOG] Saving tensor n0_to_1_74.pt
[LOG] Saving tensor n0_to_2_74.pt
[LOG] Saving tensor n0_to_3_74.pt
[LOG] Saving tensor n0_to_4_74.pt
[LOG] Saving tensor n1_to_2_74.pt
[LOG] Saving tensor n1_to_3_74.pt
[LOG] Saving tensor n1_to_4_74.pt
[LOG] Saving tensor n2_to_3_74.pt
[LOG] Saving tensor n2_to_4_74.pt
[LOG] Saving tensor n3_to_4_74.pt
[LOG] Saving tensor global_feature_74.pt
[LOG] Process 9: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1464 Tetrahedra.
    [LOG] Generated 49 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.183673469387756
    [LOG] Max number of nodes per cluster is 57 and the number is 10
[LOG] We will select 795 edges and 1464 tetra
[LOG] Edges from tetra 0 and KDTree 1135 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.
[LOG] Process 106: Created combinatorial complex for file data_852.hdf5
[LOG] Calculating for cell ranks 3 and 3
[LOG] Process 106: Calculating Neighbors
[LOG] Loading pickle file data_852.pickle
[LOG] Processing node features for num 852
[LOG] Calculating for cell ranks 3 and 4
[LOG] Processing edge features for num 852
[LOG] Calculating for cell ranks 4 and 4
[LOG] Processing tetra features for num 852
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Processing cluster features for num 852
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Processing cluster features for num 852
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 852
[LOG] Computing n0_to_0 for num 852
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 877 Tetrahedra.
    [LOG] Generated 47 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.46808510638298
    [LOG] Max number of nodes per cluster is 33 and the number is 38
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] We will select 73 edges and 877 tetra
[LOG] Edges from tetra 0 and KDTree 1124 with 0 edges in common.
[LOG] Computing n1_to_1 for num 852
[LOG] Removed 0 subset clusters.
[LOG] Process 6: Created combinatorial complex for file data_55.hdf5
[LOG] Process 6: Calculating Neighbors
[LOG] Loading pickle file data_55.pickle
[LOG] Processing node features for num 55
[LOG] Processing edge features for num 55
[LOG] Computing n2_to_2 (adjacency) for num 852
[LOG] Processing tetra features for num 55
[LOG] Processing cluster features for num 55
[LOG] Processing cluster features for num 55
[LOG] Processing adjacency and incidence matrices for num 55
[LOG] Computing n0_to_0 for num 55
[LOG] Computing n3_to_3 (adjacency) for num 852
[LOG] Computing n1_to_1 for num 55
[LOG] Computing n4_to_4 (coadjacency) for num 852
[LOG] Computing n0_to_1 for num 852
[LOG] Computing n2_to_2 (adjacency) for num 55
[LOG] Computing n3_to_3 (adjacency) for num 55
[LOG] Computing n4_to_4 (coadjacency) for num 55
[LOG] Computing n0_to_1 for num 55
[LOG] Computing n0_to_2 for num 55
[LOG] Computing n0_to_2 for num 852
[LOG] Computing n0_to_3 for num 55
[LOG] Computing n0_to_4 for num 55
[LOG] Computing n1_to_2 for num 55
[LOG] Computing n1_to_3 for num 55
[LOG] Computing n1_to_4 for num 55
[LOG] Computing n2_to_3 for num 55
[LOG] Computing n0_to_3 for num 852
[LOG] Computing n2_to_4 for num 55
[LOG] Computing n0_to_4 for num 852
[LOG] Computing n3_to_4 for num 55
[LOG] Global feature for num 55
[LOG] Global feature for num 55
[LOG] Saving tensor x_0_55.pt
[LOG] Saving tensor x_1_55.pt
[LOG] Saving tensor x_2_55.pt
[LOG] Saving tensor x_3_55.pt
[LOG] Saving tensor x_4_55.pt
[LOG] Saving tensor n0_to_0_55.pt
[LOG] Computing n1_to_2 for num 852
[LOG] Saving tensor n1_to_1_55.pt
[LOG] Saving tensor n2_to_2_55.pt
[LOG] Saving tensor n3_to_3_55.pt
[LOG] Saving tensor n4_to_4_55.pt
[LOG] Saving tensor n0_to_1_55.pt
[LOG] Saving tensor n0_to_2_55.pt
[LOG] Saving tensor n0_to_3_55.pt
[LOG] Saving tensor n0_to_4_55.pt
[LOG] Saving tensor n1_to_2_55.pt
[LOG] Saving tensor n1_to_3_55.pt
[LOG] Saving tensor n1_to_4_55.pt
[LOG] Saving tensor n2_to_3_55.pt
[LOG] Saving tensor n2_to_4_55.pt
[LOG] Saving tensor n3_to_4_55.pt
[LOG] Saving tensor global_feature_55.pt
[LOG] Process 6: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_3 for num 852
[LOG] Computing n1_to_4 for num 852
[LOG] Computing n2_to_3 for num 852
[LOG] Computing n2_to_4 for num 852
[LOG] Computing n3_to_4 for num 852
[LOG] Global feature for num 852
[LOG] Global feature for num 852
[LOG] Saving tensor x_0_852.pt
[LOG] Saving tensor x_1_852.pt
[LOG] Saving tensor x_2_852.pt
[LOG] Saving tensor x_3_852.pt
[LOG] Saving tensor x_4_852.pt
[LOG] Saving tensor n0_to_0_852.pt
[LOG] Saving tensor n1_to_1_852.pt
[LOG] Saving tensor n2_to_2_852.pt
[LOG] Saving tensor n3_to_3_852.pt
[LOG] Saving tensor n4_to_4_852.pt
[LOG] Saving tensor n0_to_1_852.pt
[LOG] Saving tensor n0_to_2_852.pt
[LOG] Saving tensor n0_to_3_852.pt
[LOG] Saving tensor n0_to_4_852.pt
[LOG] Saving tensor n1_to_2_852.pt
[LOG] Saving tensor n1_to_3_852.pt
[LOG] Saving tensor n1_to_4_852.pt
[LOG] Saving tensor n2_to_3_852.pt
[LOG] Saving tensor n2_to_4_852.pt
[LOG] Saving tensor n3_to_4_852.pt
[LOG] Saving tensor global_feature_852.pt
[LOG] Process 106: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2361 Tetrahedra.
    [LOG] Generated 54 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.77777777777778
    [LOG] Max number of nodes per cluster is 69 and the number is 51
[LOG] We will select 528 edges and 2361 tetra
[LOG] Edges from tetra 0 and KDTree 528 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Process 41: Created combinatorial complex for file data_331.hdf5
[LOG] Process 41: Calculating Neighbors
[LOG] Loading pickle file data_331.pickle
[LOG] Processing node features for num 331
[LOG] Processing edge features for num 331
[LOG] Processing tetra features for num 331
[LOG] Processing cluster features for num 331
[LOG] Processing cluster features for num 331
[LOG] Processing adjacency and incidence matrices for num 331
[LOG] Computing n0_to_0 for num 331
[LOG] Computing n1_to_1 for num 331
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n2_to_2 (adjacency) for num 331
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 331
[LOG] Computing n4_to_4 (coadjacency) for num 331
[LOG] Computing n0_to_1 for num 331
[LOG] Computing n0_to_2 for num 331
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_3 for num 331
[LOG] Computing n0_to_4 for num 331
[LOG] Computing n1_to_2 for num 331
[LOG] Computing n1_to_3 for num 331
[LOG] Computing n1_to_4 for num 331
[LOG] Computing n2_to_3 for num 331
[LOG] Computing n2_to_4 for num 331
[LOG] Computing n3_to_4 for num 331
[LOG] Global feature for num 331
[LOG] Global feature for num 331
[LOG] Saving tensor x_0_331.pt
[LOG] Saving tensor x_1_331.pt
[LOG] Saving tensor x_2_331.pt
[LOG] Saving tensor x_3_331.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor x_4_331.pt
[LOG] Saving tensor n0_to_0_331.pt
[LOG] Saving tensor n1_to_1_331.pt
[LOG] Saving tensor n2_to_2_331.pt
[LOG] Saving tensor n3_to_3_331.pt
[LOG] Saving tensor n4_to_4_331.pt
[LOG] Saving tensor n0_to_1_331.pt
[LOG] Saving tensor n0_to_2_331.pt
[LOG] Saving tensor n0_to_3_331.pt
[LOG] Saving tensor n0_to_4_331.pt
[LOG] Saving tensor n1_to_2_331.pt
[LOG] Saving tensor n1_to_3_331.pt
[LOG] Saving tensor n1_to_4_331.pt
[LOG] Saving tensor n2_to_3_331.pt
[LOG] Saving tensor n2_to_4_331.pt
[LOG] Saving tensor n3_to_4_331.pt
[LOG] Saving tensor global_feature_331.pt
[LOG] Process 41: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 3312 Tetrahedra.
    [LOG] Generated 86 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.976744186046512
    [LOG] Max number of nodes per cluster is 48 and the number is 85
[LOG] We will select 553 edges and 3312 tetra
[LOG] Edges from tetra 0 and KDTree 1185 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Process 90: Created combinatorial complex for file data_724.hdf5
[LOG] Process 90: Calculating Neighbors
[LOG] Loading pickle file data_724.pickle
[LOG] Processing node features for num 724
[LOG] Processing edge features for num 724
[LOG] Processing tetra features for num 724
[LOG] Processing cluster features for num 724
[LOG] Processing cluster features for num 724
[LOG] Processing adjacency and incidence matrices for num 724
[LOG] Computing n0_to_0 for num 724
[LOG] Computing n1_to_1 for num 724
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_2 (adjacency) for num 724
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_3 (adjacency) for num 724
[LOG] Computing n4_to_4 (coadjacency) for num 724
[LOG] Computing n0_to_1 for num 724
[LOG] Computing n0_to_2 for num 724
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_3 for num 724
[LOG] Computing n0_to_4 for num 724
[LOG] Computing n1_to_2 for num 724
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_3 for num 724
[LOG] Computing n1_to_4 for num 724
[LOG] Computing n2_to_3 for num 724
[LOG] Computing n2_to_4 for num 724
[LOG] GENERATED TETRA
[LOG] Computing n3_to_4 for num 724
[LOG] Global feature for num 724
[LOG] Global feature for num 724
[LOG] Saving tensor x_0_724.pt
[LOG] Saving tensor x_1_724.pt
[LOG] Saving tensor x_2_724.pt
[LOG] Saving tensor x_3_724.pt
[LOG] Saving tensor x_4_724.pt
[LOG] Saving tensor n0_to_0_724.pt
[LOG] Saving tensor n1_to_1_724.pt
[LOG] Saving tensor n2_to_2_724.pt
[LOG] Saving tensor n3_to_3_724.pt
[LOG] Saving tensor n4_to_4_724.pt
[LOG] Saving tensor n0_to_1_724.pt
[LOG] Saving tensor n0_to_2_724.pt
[LOG] Saving tensor n0_to_3_724.pt
[LOG] Saving tensor n0_to_4_724.pt
[LOG] Saving tensor n1_to_2_724.pt
[LOG] Saving tensor n1_to_3_724.pt
[LOG] Saving tensor n1_to_4_724.pt
[LOG] Saving tensor n2_to_3_724.pt
[LOG] Saving tensor n2_to_4_724.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n3_to_4_724.pt
[LOG] Saving tensor global_feature_724.pt
[LOG] Process 90: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1651 Tetrahedra.
    [LOG] Generated 47 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.46808510638298
    [LOG] Max number of nodes per cluster is 60 and the number is 38
[LOG] Calculating for cell ranks 4 and 4
[LOG] We will select 326 edges and 1651 tetra
[LOG] Edges from tetra 0 and KDTree 2958 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 0 subset clusters.
[LOG] Process 57: Created combinatorial complex for file data_462.hdf5
[LOG] Process 57: Calculating Neighbors
[LOG] Loading pickle file data_462.pickle
[LOG] Processing node features for num 462
[LOG] Processing edge features for num 462
[LOG] Processing tetra features for num 462
[LOG] Processing cluster features for num 462
[LOG] Processing cluster features for num 462
[LOG] Processing adjacency and incidence matrices for num 462
[LOG] Computing n0_to_0 for num 462
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_1 for num 462
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_2 (adjacency) for num 462
[LOG] Computing n3_to_3 (adjacency) for num 462
[LOG] Computing n4_to_4 (coadjacency) for num 462
[LOG] Computing n0_to_1 for num 462
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_2 for num 462
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_3 for num 462
[LOG] Computing n0_to_4 for num 462
[LOG] Computing n1_to_2 for num 462
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_3 for num 462
[LOG] Computing n1_to_4 for num 462
[LOG] Computing n2_to_3 for num 462
[LOG] Computing n2_to_4 for num 462
[LOG] Computing n3_to_4 for num 462
[LOG] Global feature for num 462
[LOG] Global feature for num 462
[LOG] Saving tensor x_0_462.pt
[LOG] Saving tensor x_1_462.pt
[LOG] Saving tensor x_2_462.pt
[LOG] Saving tensor x_3_462.pt
[LOG] Saving tensor x_4_462.pt
[LOG] Saving tensor n0_to_0_462.pt
[LOG] Saving tensor n1_to_1_462.pt
[LOG] Saving tensor n2_to_2_462.pt
[LOG] Saving tensor n3_to_3_462.pt
[LOG] Saving tensor n4_to_4_462.pt
[LOG] Saving tensor n0_to_1_462.pt
[LOG] Saving tensor n0_to_2_462.pt
[LOG] Saving tensor n0_to_3_462.pt
[LOG] Saving tensor n0_to_4_462.pt
[LOG] Saving tensor n1_to_2_462.pt
[LOG] Saving tensor n1_to_3_462.pt
[LOG] Saving tensor n1_to_4_462.pt
[LOG] Saving tensor n2_to_3_462.pt
[LOG] Saving tensor n2_to_4_462.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n3_to_4_462.pt
[LOG] Saving tensor global_feature_462.pt
[LOG] Process 57: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1836 Tetrahedra.
    [LOG] Generated 43 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.604651162790697
    [LOG] Max number of nodes per cluster is 32 and the number is 14
[LOG] We will select 570 edges and 1836 tetra
[LOG] Edges from tetra 0 and KDTree 570 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Removed 0 subset clusters.
[LOG] Process 94: Created combinatorial complex for file data_759.hdf5
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Process 94: Calculating Neighbors
[LOG] Loading pickle file data_759.pickle
[LOG] Processing node features for num 759
[LOG] Processing edge features for num 759
[LOG] Processing tetra features for num 759
[LOG] Processing cluster features for num 759
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Processing cluster features for num 759
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 759
[LOG] Computing n0_to_0 for num 759
[LOG] Computing n1_to_1 for num 759
[LOG] Computing n2_to_2 (adjacency) for num 759
[LOG] Computing n3_to_3 (adjacency) for num 759
[LOG] Computing n4_to_4 (coadjacency) for num 759
[LOG] Computing n0_to_1 for num 759
[LOG] Computing n0_to_2 for num 759
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_3 for num 759
[LOG] Computing n0_to_4 for num 759
[LOG] Computing n1_to_2 for num 759
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_3 for num 759
[LOG] Computing n1_to_4 for num 759
[LOG] Computing n2_to_3 for num 759
[LOG] Computing n2_to_4 for num 759
[LOG] Computing n3_to_4 for num 759
[LOG] Global feature for num 759
[LOG] Global feature for num 759
[LOG] Saving tensor x_0_759.pt
[LOG] Saving tensor x_1_759.pt
[LOG] Saving tensor x_2_759.pt
[LOG] Saving tensor x_3_759.pt
[LOG] Saving tensor x_4_759.pt
[LOG] Saving tensor n0_to_0_759.pt
[LOG] Saving tensor n1_to_1_759.pt
[LOG] Saving tensor n2_to_2_759.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor n3_to_3_759.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor n4_to_4_759.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor n0_to_1_759.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor n0_to_2_759.pt
[LOG] Saving tensor n0_to_3_759.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor n0_to_4_759.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor n1_to_2_759.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor n1_to_3_759.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor n1_to_4_759.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor n2_to_3_759.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n2_to_4_759.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n3_to_4_759.pt
[LOG] Saving tensor global_feature_759.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Process 94: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2460 Tetrahedra.
    [LOG] Generated 69 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.73913043478261
    [LOG] Max number of nodes per cluster is 44 and the number is 19
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] We will select 609 edges and 2460 tetra
[LOG] Edges from tetra 0 and KDTree 780 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 16: Created combinatorial complex for file data_134.hdf5
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 16: Calculating Neighbors
[LOG] Loading pickle file data_134.pickle
[LOG] Processing node features for num 134
[LOG] Processing edge features for num 134
[LOG] Processing tetra features for num 134
[LOG] Processing cluster features for num 134
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing cluster features for num 134
[LOG] Processing adjacency and incidence matrices for num 134
[LOG] Computing n0_to_0 for num 134
[LOG] Computing n1_to_1 for num 134
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n2_to_2 (adjacency) for num 134
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_3 (adjacency) for num 134
[LOG] Computing n4_to_4 (coadjacency) for num 134
[LOG] Computing n0_to_1 for num 134
[LOG] Computing n0_to_2 for num 134
[LOG] Computing n0_to_3 for num 134
[LOG] Computing n0_to_4 for num 134
[LOG] Computing n1_to_2 for num 134
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] GENERATED TETRA
[LOG] GENERATED TETRA
[LOG] Computing n1_to_3 for num 134
[LOG] Computing n1_to_4 for num 134
[LOG] Computing n2_to_3 for num 134
[LOG] Computing n2_to_4 for num 134
[LOG] Computing n3_to_4 for num 134
[LOG] Global feature for num 134
[LOG] Global feature for num 134
[LOG] Saving tensor x_0_134.pt
[LOG] Saving tensor x_1_134.pt
[LOG] Saving tensor x_2_134.pt
[LOG] Saving tensor x_3_134.pt
[LOG] Saving tensor x_4_134.pt
[LOG] Saving tensor n0_to_0_134.pt
[LOG] Saving tensor n1_to_1_134.pt
[LOG] Saving tensor n2_to_2_134.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor n3_to_3_134.pt
[LOG] Saving tensor n4_to_4_134.pt
[LOG] Saving tensor n0_to_1_134.pt
[LOG] Saving tensor n0_to_2_134.pt
[LOG] Saving tensor n0_to_3_134.pt
[LOG] Saving tensor n0_to_4_134.pt
[LOG] Saving tensor n1_to_2_134.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor n1_to_3_134.pt
[LOG] Saving tensor n1_to_4_134.pt
[LOG] Saving tensor n2_to_3_134.pt
[LOG] Saving tensor n2_to_4_134.pt
[LOG] Saving tensor n3_to_4_134.pt
[LOG] Saving tensor global_feature_134.pt
[LOG] Process 16: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 3305 Tetrahedra.
    [LOG] Generated 82 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.963414634146341
    [LOG] Max number of nodes per cluster is 69 and the number is 64
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] We will select 606 edges and 3305 tetra
[LOG] Edges from tetra 0 and KDTree 606 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2885 Tetrahedra.
    [LOG] Generated 59 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.966101694915254
    [LOG] Max number of nodes per cluster is 63 and the number is 57
[LOG] Calculating for cell ranks 0 and 3
[LOG] We will select 1083 edges and 2885 tetra
[LOG] Edges from tetra 0 and KDTree 2936 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 36: Created combinatorial complex for file data_292.hdf5
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 36: Calculating Neighbors
[LOG] Loading pickle file data_292.pickle
[LOG] Processing node features for num 292
[LOG] Processing edge features for num 292
[LOG] Process 127: Created combinatorial complex for file data_998.hdf5
[LOG] Processing tetra features for num 292
[LOG] Processing cluster features for num 292
[LOG] Processing cluster features for num 292
[LOG] Processing adjacency and incidence matrices for num 292
[LOG] Computing n0_to_0 for num 292
[LOG] Computing n1_to_1 for num 292
[LOG] Computing n2_to_2 (adjacency) for num 292
[LOG] Process 127: Calculating Neighbors
[LOG] Loading pickle file data_998.pickle
[LOG] Processing node features for num 998
[LOG] Processing edge features for num 998
[LOG] Processing tetra features for num 998
[LOG] Processing cluster features for num 998
[LOG] Processing cluster features for num 998
[LOG] Processing adjacency and incidence matrices for num 998
[LOG] Computing n0_to_0 for num 998
[LOG] Computing n1_to_1 for num 998
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_3 (adjacency) for num 292
[LOG] Computing n4_to_4 (coadjacency) for num 292
[LOG] Computing n0_to_1 for num 292
[LOG] Computing n0_to_2 for num 292
[LOG] Computing n2_to_2 (adjacency) for num 998
[LOG] Computing n0_to_3 for num 292
[LOG] Computing n0_to_4 for num 292
[LOG] Computing n1_to_2 for num 292
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n3_to_3 (adjacency) for num 998
[LOG] Computing n4_to_4 (coadjacency) for num 998
[LOG] Computing n0_to_1 for num 998
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n1_to_3 for num 292
[LOG] Computing n1_to_4 for num 292
[LOG] Computing n2_to_3 for num 292
[LOG] Computing n0_to_2 for num 998
[LOG] Computing n2_to_4 for num 292
[LOG] Computing n3_to_4 for num 292
[LOG] Global feature for num 292
[LOG] Global feature for num 292
[LOG] Saving tensor x_0_292.pt
[LOG] Saving tensor x_1_292.pt
[LOG] Saving tensor x_2_292.pt
[LOG] Saving tensor x_3_292.pt
[LOG] Saving tensor x_4_292.pt
[LOG] Saving tensor n0_to_0_292.pt
[LOG] Saving tensor n1_to_1_292.pt
[LOG] Saving tensor n2_to_2_292.pt
[LOG] Saving tensor n3_to_3_292.pt
[LOG] Saving tensor n4_to_4_292.pt
[LOG] Saving tensor n0_to_1_292.pt
[LOG] Saving tensor n0_to_2_292.pt
[LOG] Saving tensor n0_to_3_292.pt
[LOG] Saving tensor n0_to_4_292.pt
[LOG] Saving tensor n1_to_2_292.pt
[LOG] Saving tensor n1_to_3_292.pt
[LOG] Saving tensor n1_to_4_292.pt
[LOG] Saving tensor n2_to_3_292.pt
[LOG] Saving tensor n2_to_4_292.pt
[LOG] Saving tensor n3_to_4_292.pt
[LOG] Saving tensor global_feature_292.pt
[LOG] Process 36: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 998
[LOG] Computing n0_to_4 for num 998
[LOG] Computing n1_to_2 for num 998
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_3 for num 998
[LOG] Computing n1_to_4 for num 998
[LOG] Computing n2_to_3 for num 998
[LOG] Computing n2_to_4 for num 998
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_4 for num 998
[LOG] Global feature for num 998
[LOG] Global feature for num 998
[LOG] Saving tensor x_0_998.pt
[LOG] Saving tensor x_1_998.pt
[LOG] Saving tensor x_2_998.pt
[LOG] Saving tensor x_3_998.pt
[LOG] Saving tensor x_4_998.pt
[LOG] Saving tensor n0_to_0_998.pt
[LOG] Saving tensor n1_to_1_998.pt
[LOG] Saving tensor n2_to_2_998.pt
[LOG] Saving tensor n3_to_3_998.pt
[LOG] Saving tensor n4_to_4_998.pt
[LOG] Saving tensor n0_to_1_998.pt
[LOG] Saving tensor n0_to_2_998.pt
[LOG] Saving tensor n0_to_3_998.pt
[LOG] Saving tensor n0_to_4_998.pt
[LOG] Saving tensor n1_to_2_998.pt
[LOG] Saving tensor n1_to_3_998.pt
[LOG] Saving tensor n1_to_4_998.pt
[LOG] Saving tensor n2_to_3_998.pt
[LOG] Saving tensor n2_to_4_998.pt
[LOG] Saving tensor n3_to_4_998.pt
[LOG] Saving tensor global_feature_998.pt
[LOG] Process 127: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 2569 Tetrahedra.
    [LOG] Generated 84 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.357142857142858
    [LOG] Max number of nodes per cluster is 39 and the number is 57
[LOG] Calculating for cell ranks 1 and 2
[LOG] We will select 562 edges and 2569 tetra
[LOG] Edges from tetra 0 and KDTree 1139 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Process 9: Created combinatorial complex for file data_75.hdf5
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 9: Calculating Neighbors
[LOG] Loading pickle file data_75.pickle
[LOG] Processing node features for num 75
[LOG] Processing edge features for num 75
[LOG] Processing tetra features for num 75
[LOG] Processing cluster features for num 75
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing cluster features for num 75
[LOG] Processing adjacency and incidence matrices for num 75
[LOG] Computing n0_to_0 for num 75
[LOG] Computing n1_to_1 for num 75
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_2 (adjacency) for num 75
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_3 (adjacency) for num 75
[LOG] Computing n4_to_4 (coadjacency) for num 75
[LOG] Computing n0_to_1 for num 75
[LOG] Computing n0_to_2 for num 75
[LOG] Computing n0_to_3 for num 75
[LOG] Computing n0_to_4 for num 75
[LOG] Computing n1_to_2 for num 75
[LOG] Computing n1_to_3 for num 75
[LOG] Computing n1_to_4 for num 75
[LOG] Computing n2_to_3 for num 75
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_4 for num 75
[LOG] Computing n3_to_4 for num 75
[LOG] Global feature for num 75
[LOG] Global feature for num 75
[LOG] Saving tensor x_0_75.pt
[LOG] Saving tensor x_1_75.pt
[LOG] Saving tensor x_2_75.pt
[LOG] Saving tensor x_3_75.pt
[LOG] Saving tensor x_4_75.pt
[LOG] Saving tensor n0_to_0_75.pt
[LOG] Saving tensor n1_to_1_75.pt
[LOG] Saving tensor n2_to_2_75.pt
[LOG] Saving tensor n3_to_3_75.pt
[LOG] Saving tensor n4_to_4_75.pt
[LOG] Saving tensor n0_to_1_75.pt
[LOG] Saving tensor n0_to_2_75.pt
[LOG] Saving tensor n0_to_3_75.pt
[LOG] Saving tensor n0_to_4_75.pt
[LOG] Saving tensor n1_to_2_75.pt
[LOG] Saving tensor n1_to_3_75.pt
[LOG] Saving tensor n1_to_4_75.pt
[LOG] Saving tensor n2_to_3_75.pt
[LOG] Saving tensor n2_to_4_75.pt
[LOG] Saving tensor n3_to_4_75.pt
[LOG] Saving tensor global_feature_75.pt
[LOG] Process 9: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 2307 Tetrahedra.
    [LOG] Generated 52 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.903846153846153
    [LOG] Max number of nodes per cluster is 50 and the number is 31
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] We will select 365 edges and 2307 tetra
[LOG] Edges from tetra 0 and KDTree 482 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Process 126: Created combinatorial complex for file data_992.hdf5
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Process 126: Calculating Neighbors
[LOG] Loading pickle file data_992.pickle
[LOG] Processing node features for num 992
[LOG] Processing edge features for num 992
[LOG] Processing tetra features for num 992
[LOG] Processing cluster features for num 992
[LOG] Processing cluster features for num 992
[LOG] Processing adjacency and incidence matrices for num 992
[LOG] Computing n0_to_0 for num 992
[LOG] Computing n1_to_1 for num 992
[LOG] Computing n2_to_2 (adjacency) for num 992
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n3_to_3 (adjacency) for num 992
[LOG] Computing n4_to_4 (coadjacency) for num 992
[LOG] Computing n0_to_1 for num 992
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_2 for num 992
[LOG] Computing n0_to_3 for num 992
[LOG] Computing n0_to_4 for num 992
[LOG] Computing n1_to_2 for num 992
[LOG] Computing n1_to_3 for num 992
[LOG] Computing n1_to_4 for num 992
[LOG] Computing n2_to_3 for num 992
[LOG] Computing n2_to_4 for num 992
[LOG] Computing n3_to_4 for num 992
[LOG] Global feature for num 992
[LOG] Global feature for num 992
[LOG] Saving tensor x_0_992.pt
[LOG] Saving tensor x_1_992.pt
[LOG] Saving tensor x_2_992.pt
[LOG] Saving tensor x_3_992.pt
[LOG] Saving tensor x_4_992.pt
[LOG] Saving tensor n0_to_0_992.pt
[LOG] Saving tensor n1_to_1_992.pt
[LOG] Saving tensor n2_to_2_992.pt
[LOG] Saving tensor n3_to_3_992.pt
[LOG] Saving tensor n4_to_4_992.pt
[LOG] Saving tensor n0_to_1_992.pt
[LOG] Saving tensor n0_to_2_992.pt
[LOG] Saving tensor n0_to_3_992.pt
[LOG] Saving tensor n0_to_4_992.pt
[LOG] Saving tensor n1_to_2_992.pt
[LOG] Saving tensor n1_to_3_992.pt
[LOG] Saving tensor n1_to_4_992.pt
[LOG] Saving tensor n2_to_3_992.pt
[LOG] Saving tensor n2_to_4_992.pt
[LOG] Saving tensor n3_to_4_992.pt
[LOG] Saving tensor global_feature_992.pt
[LOG] Process 126: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1856 Tetrahedra.
    [LOG] Generated 44 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.772727272727273
    [LOG] Max number of nodes per cluster is 44 and the number is 42
[LOG] We will select 550 edges and 1856 tetra
[LOG] Edges from tetra 0 and KDTree 1084 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.
[LOG] Process 109: Created combinatorial complex for file data_873.hdf5
[LOG] Process 109: Calculating Neighbors
[LOG] Loading pickle file data_873.pickle
[LOG] Processing node features for num 873
[LOG] Processing edge features for num 873
[LOG] Processing tetra features for num 873
[LOG] Processing cluster features for num 873
[LOG] Processing cluster features for num 873
[LOG] Processing adjacency and incidence matrices for num 873
[LOG] Computing n0_to_0 for num 873
[LOG] Computing n1_to_1 for num 873
[LOG] Computing n2_to_2 (adjacency) for num 873
[LOG] Computing n3_to_3 (adjacency) for num 873
[LOG] Computing n4_to_4 (coadjacency) for num 873
[LOG] Computing n0_to_1 for num 873
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_2 for num 873
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_3 for num 873
[LOG] Computing n0_to_4 for num 873
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Computing n1_to_2 for num 873
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Computing n1_to_3 for num 873
[LOG] Computing n1_to_4 for num 873
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_3 for num 873
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_4 for num 873
[LOG] Computing n3_to_4 for num 873
[LOG] Global feature for num 873
[LOG] Global feature for num 873
[LOG] Saving tensor x_0_873.pt
[LOG] Saving tensor x_1_873.pt
[LOG] Saving tensor x_2_873.pt
[LOG] Saving tensor x_3_873.pt
[LOG] Saving tensor x_4_873.pt
[LOG] Saving tensor n0_to_0_873.pt
[LOG] Saving tensor n1_to_1_873.pt
[LOG] Saving tensor n2_to_2_873.pt
[LOG] Saving tensor n3_to_3_873.pt
[LOG] Saving tensor n4_to_4_873.pt
[LOG] Saving tensor n0_to_1_873.pt
[LOG] Saving tensor n0_to_2_873.pt
[LOG] Saving tensor n0_to_3_873.pt
[LOG] Saving tensor n0_to_4_873.pt
[LOG] Saving tensor n1_to_2_873.pt
[LOG] Saving tensor n1_to_3_873.pt
[LOG] Saving tensor n1_to_4_873.pt
[LOG] Saving tensor n2_to_3_873.pt
[LOG] Saving tensor n2_to_4_873.pt
[LOG] Saving tensor n3_to_4_873.pt
[LOG] Saving tensor global_feature_873.pt
[LOG] Process 109: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3039 Tetrahedra.
    [LOG] Generated 68 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.191176470588236
    [LOG] Max number of nodes per cluster is 118 and the number is 66
[LOG] We will select 500 edges and 3039 tetra
[LOG] Edges from tetra 0 and KDTree 4147 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Process 107: Created combinatorial complex for file data_859.hdf5
[LOG] Process 107: Calculating Neighbors
[LOG] Loading pickle file data_859.pickle
[LOG] Processing node features for num 859
[LOG] Processing edge features for num 859
[LOG] Processing tetra features for num 859
[LOG] Processing cluster features for num 859
[LOG] Processing cluster features for num 859
[LOG] Processing adjacency and incidence matrices for num 859
[LOG] Computing n0_to_0 for num 859
[LOG] Computing n1_to_1 for num 859
[LOG] Computing n2_to_2 (adjacency) for num 859
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n3_to_3 (adjacency) for num 859
[LOG] Computing n4_to_4 (coadjacency) for num 859
[LOG] Computing n0_to_1 for num 859
[LOG] Computing n0_to_2 for num 859
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_3 for num 859
[LOG] Computing n0_to_4 for num 859
[LOG] Computing n1_to_2 for num 859
[LOG] Computing n1_to_3 for num 859
[LOG] Computing n1_to_4 for num 859
[LOG] Computing n2_to_3 for num 859
[LOG] Computing n2_to_4 for num 859
[LOG] Computing n3_to_4 for num 859
[LOG] Global feature for num 859
[LOG] Global feature for num 859
[LOG] Saving tensor x_0_859.pt
[LOG] Saving tensor x_1_859.pt
[LOG] Saving tensor x_2_859.pt
[LOG] Saving tensor x_3_859.pt
[LOG] Saving tensor x_4_859.pt
[LOG] Saving tensor n0_to_0_859.pt
[LOG] Saving tensor n1_to_1_859.pt
[LOG] Saving tensor n2_to_2_859.pt
[LOG] Saving tensor n3_to_3_859.pt
[LOG] Saving tensor n4_to_4_859.pt
[LOG] Saving tensor n0_to_1_859.pt
[LOG] Saving tensor n0_to_2_859.pt
[LOG] Saving tensor n0_to_3_859.pt
[LOG] Saving tensor n0_to_4_859.pt
[LOG] Saving tensor n1_to_2_859.pt
[LOG] Saving tensor n1_to_3_859.pt
[LOG] Saving tensor n1_to_4_859.pt
[LOG] Saving tensor n2_to_3_859.pt
[LOG] Saving tensor n2_to_4_859.pt
[LOG] Saving tensor n3_to_4_859.pt
[LOG] Saving tensor global_feature_859.pt
[LOG] Process 107: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2460 Tetrahedra.
    [LOG] Generated 52 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.903846153846153
    [LOG] Max number of nodes per cluster is 102 and the number is 44
[LOG] We will select 609 edges and 2460 tetra
[LOG] Edges from tetra 0 and KDTree 1259 with 0 edges in common.
[LOG] Removed 3 subset clusters.
[LOG] Process 16: Created combinatorial complex for file data_135.hdf5
[LOG] Process 16: Calculating Neighbors
[LOG] Loading pickle file data_135.pickle
[LOG] Processing node features for num 135
[LOG] Processing edge features for num 135
[LOG] Processing tetra features for num 135
[LOG] Processing cluster features for num 135
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing cluster features for num 135
[LOG] Processing adjacency and incidence matrices for num 135
[LOG] Computing n0_to_0 for num 135
[LOG] Computing n1_to_1 for num 135
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n2_to_2 (adjacency) for num 135
[LOG] Computing n3_to_3 (adjacency) for num 135
[LOG] Computing n4_to_4 (coadjacency) for num 135
[LOG] Computing n0_to_1 for num 135
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_2 for num 135
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_3 for num 135
[LOG] Computing n0_to_4 for num 135
[LOG] Computing n1_to_2 for num 135
[LOG] Computing n1_to_3 for num 135
[LOG] Computing n1_to_4 for num 135
[LOG] Computing n2_to_3 for num 135
[LOG] Computing n2_to_4 for num 135
[LOG] Computing n3_to_4 for num 135
[LOG] Global feature for num 135
[LOG] Global feature for num 135
[LOG] Saving tensor x_0_135.pt
[LOG] Saving tensor x_1_135.pt
[LOG] Saving tensor x_2_135.pt
[LOG] Saving tensor x_3_135.pt
[LOG] Saving tensor x_4_135.pt
[LOG] Saving tensor n0_to_0_135.pt
[LOG] Saving tensor n1_to_1_135.pt
[LOG] Saving tensor n2_to_2_135.pt
[LOG] Saving tensor n3_to_3_135.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n4_to_4_135.pt
[LOG] Saving tensor n0_to_1_135.pt
[LOG] Saving tensor n0_to_2_135.pt
[LOG] Saving tensor n0_to_3_135.pt
[LOG] Saving tensor n0_to_4_135.pt
[LOG] Saving tensor n1_to_2_135.pt
[LOG] Saving tensor n1_to_3_135.pt
[LOG] Saving tensor n1_to_4_135.pt
[LOG] Saving tensor n2_to_3_135.pt
[LOG] Saving tensor n2_to_4_135.pt
[LOG] Saving tensor n3_to_4_135.pt
[LOG] Saving tensor global_feature_135.pt
[LOG] Process 16: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] GENERATED TETRA
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1784 Tetrahedra.
    [LOG] Generated 50 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.46
    [LOG] Max number of nodes per cluster is 34 and the number is 4
[LOG] We will select 359 edges and 1784 tetra
[LOG] Edges from tetra 0 and KDTree 359 with 0 edges in common.
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2801 Tetrahedra.
    [LOG] Generated 83 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.879518072289157
    [LOG] Max number of nodes per cluster is 31 and the number is 81
[LOG] We will select 553 edges and 2801 tetra
[LOG] Edges from tetra 0 and KDTree 571 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 2 subset clusters.
[LOG] Process 41: Created combinatorial complex for file data_332.hdf5
[LOG] Process 41: Calculating Neighbors
[LOG] Loading pickle file data_332.pickle
[LOG] Processing node features for num 332
[LOG] Processing edge features for num 332
[LOG] Processing tetra features for num 332
[LOG] Processing cluster features for num 332
[LOG] Processing cluster features for num 332
[LOG] Processing adjacency and incidence matrices for num 332
[LOG] Computing n0_to_0 for num 332
[LOG] Computing n1_to_1 for num 332
[LOG] Computing n2_to_2 (adjacency) for num 332
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_3 (adjacency) for num 332
[LOG] Computing n4_to_4 (coadjacency) for num 332
[LOG] Computing n0_to_1 for num 332
[LOG] Computing n0_to_2 for num 332
[LOG] Removed 1 subset clusters.
[LOG] Computing n0_to_3 for num 332
[LOG] Computing n0_to_4 for num 332
[LOG] Computing n1_to_2 for num 332
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_3 for num 332
[LOG] Computing n1_to_4 for num 332
[LOG] Computing n2_to_3 for num 332
[LOG] Computing n2_to_4 for num 332
[LOG] Computing n3_to_4 for num 332
[LOG] Process 90: Created combinatorial complex for file data_725.hdf5
[LOG] Global feature for num 332
[LOG] Global feature for num 332
[LOG] Saving tensor x_0_332.pt
[LOG] Saving tensor x_1_332.pt
[LOG] Saving tensor x_2_332.pt
[LOG] Saving tensor x_3_332.pt
[LOG] Saving tensor x_4_332.pt
[LOG] Saving tensor n0_to_0_332.pt
[LOG] Saving tensor n1_to_1_332.pt
[LOG] Saving tensor n2_to_2_332.pt
[LOG] Saving tensor n3_to_3_332.pt
[LOG] Saving tensor n4_to_4_332.pt
[LOG] Saving tensor n0_to_1_332.pt
[LOG] Saving tensor n0_to_2_332.pt
[LOG] Saving tensor n0_to_3_332.pt
[LOG] Saving tensor n0_to_4_332.pt
[LOG] Saving tensor n1_to_2_332.pt
[LOG] Saving tensor n1_to_3_332.pt
[LOG] Saving tensor n1_to_4_332.pt
[LOG] Saving tensor n2_to_3_332.pt
[LOG] Saving tensor n2_to_4_332.pt
[LOG] Saving tensor n3_to_4_332.pt
[LOG] Saving tensor global_feature_332.pt
[LOG] Process 41: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 90: Calculating Neighbors
[LOG] Loading pickle file data_725.pickle
[LOG] Processing node features for num 725
[LOG] Processing edge features for num 725
[LOG] Processing tetra features for num 725
[LOG] Processing cluster features for num 725
[LOG] Processing cluster features for num 725
[LOG] Processing adjacency and incidence matrices for num 725
[LOG] Computing n0_to_0 for num 725
[LOG] Computing n1_to_1 for num 725
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n2_to_2 (adjacency) for num 725
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 725
[LOG] Computing n4_to_4 (coadjacency) for num 725
[LOG] Computing n0_to_1 for num 725
[LOG] Computing n0_to_2 for num 725
[LOG] Computing n0_to_3 for num 725
[LOG] Computing n0_to_4 for num 725
[LOG] Computing n1_to_2 for num 725
[LOG] Computing n1_to_3 for num 725
[LOG] Computing n1_to_4 for num 725
[LOG] Computing n2_to_3 for num 725
[LOG] Computing n2_to_4 for num 725
[LOG] Computing n3_to_4 for num 725
[LOG] Global feature for num 725
[LOG] Global feature for num 725
[LOG] Saving tensor x_0_725.pt
[LOG] Saving tensor x_1_725.pt
[LOG] Saving tensor x_2_725.pt
[LOG] Saving tensor x_3_725.pt
[LOG] Saving tensor x_4_725.pt
[LOG] Saving tensor n0_to_0_725.pt
[LOG] Saving tensor n1_to_1_725.pt
[LOG] Saving tensor n2_to_2_725.pt
[LOG] Saving tensor n3_to_3_725.pt
[LOG] Saving tensor n4_to_4_725.pt
[LOG] Saving tensor n0_to_1_725.pt
[LOG] Saving tensor n0_to_2_725.pt
[LOG] Saving tensor n0_to_3_725.pt
[LOG] Saving tensor n0_to_4_725.pt
[LOG] Saving tensor n1_to_2_725.pt
[LOG] Saving tensor n1_to_3_725.pt
[LOG] Saving tensor n1_to_4_725.pt
[LOG] Saving tensor n2_to_3_725.pt
[LOG] Saving tensor n2_to_4_725.pt
[LOG] Saving tensor n3_to_4_725.pt
[LOG] Saving tensor global_feature_725.pt
[LOG] Process 90: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] GENERATED TETRA
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1651 Tetrahedra.
    [LOG] Generated 55 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.272727272727273
    [LOG] Max number of nodes per cluster is 60 and the number is 51
[LOG] We will select 326 edges and 1651 tetra
[LOG] Edges from tetra 0 and KDTree 2827 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 2 subset clusters.
[LOG] Process 57: Created combinatorial complex for file data_463.hdf5
[LOG] Process 57: Calculating Neighbors
[LOG] Loading pickle file data_463.pickle
[LOG] Processing node features for num 463
[LOG] Processing edge features for num 463
[LOG] Processing tetra features for num 463
[LOG] Processing cluster features for num 463
[LOG] Processing cluster features for num 463
[LOG] Processing adjacency and incidence matrices for num 463
[LOG] Computing n0_to_0 for num 463
[LOG] Computing n1_to_1 for num 463
[LOG] Computing n2_to_2 (adjacency) for num 463
[LOG] Computing n3_to_3 (adjacency) for num 463
[LOG] Computing n4_to_4 (coadjacency) for num 463
[LOG] Computing n0_to_1 for num 463
[LOG] Computing n0_to_2 for num 463
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n0_to_3 for num 463
[LOG] Computing n0_to_4 for num 463
[LOG] Computing n1_to_2 for num 463
[LOG] Computing n1_to_3 for num 463
[LOG] Computing n1_to_4 for num 463
[LOG] Computing n2_to_3 for num 463
[LOG] Computing n2_to_4 for num 463
[LOG] Computing n3_to_4 for num 463
[LOG] Global feature for num 463
[LOG] Global feature for num 463
[LOG] Saving tensor x_0_463.pt
[LOG] Saving tensor x_1_463.pt
[LOG] Saving tensor x_2_463.pt
[LOG] Saving tensor x_3_463.pt
[LOG] Saving tensor x_4_463.pt
[LOG] Saving tensor n0_to_0_463.pt
[LOG] Saving tensor n1_to_1_463.pt
[LOG] Saving tensor n2_to_2_463.pt
[LOG] Saving tensor n3_to_3_463.pt
[LOG] Saving tensor n4_to_4_463.pt
[LOG] Saving tensor n0_to_1_463.pt
[LOG] Saving tensor n0_to_2_463.pt
[LOG] Saving tensor n0_to_3_463.pt
[LOG] Saving tensor n0_to_4_463.pt
[LOG] Saving tensor n1_to_2_463.pt
[LOG] Saving tensor n1_to_3_463.pt
[LOG] Saving tensor n1_to_4_463.pt
[LOG] Saving tensor n2_to_3_463.pt
[LOG] Saving tensor n2_to_4_463.pt
[LOG] Saving tensor n3_to_4_463.pt
[LOG] Saving tensor global_feature_463.pt
[LOG] Process 57: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 6149 Tetrahedra.
    [LOG] Generated 157 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.050955414012739
    [LOG] Max number of nodes per cluster is 39 and the number is 155
[LOG] Calculating for cell ranks 1 and 3
[LOG] We will select 1398 edges and 6149 tetra
[LOG] Edges from tetra 0 and KDTree 2321 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 2 subset clusters.
[LOG] Process 40: Created combinatorial complex for file data_323.hdf5
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 40: Calculating Neighbors
[LOG] Loading pickle file data_323.pickle
[LOG] Processing node features for num 323
[LOG] Processing edge features for num 323
[LOG] Processing tetra features for num 323
[LOG] Processing cluster features for num 323
[LOG] Processing cluster features for num 323
[LOG] Processing adjacency and incidence matrices for num 323
[LOG] Computing n0_to_0 for num 323
[LOG] GENERATED TETRA
[LOG] Computing n1_to_1 for num 323
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1909 Tetrahedra.
    [LOG] Generated 52 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.153846153846153
    [LOG] Max number of nodes per cluster is 48 and the number is 15
[LOG] We will select 612 edges and 1909 tetra
[LOG] Edges from tetra 0 and KDTree 612 with 0 edges in common.
[LOG] Removed 1 subset clusters.
[LOG] Process 74: Created combinatorial complex for file data_599.hdf5
[LOG] Process 74: Calculating Neighbors
[LOG] Loading pickle file data_599.pickle
[LOG] Processing node features for num 599
[LOG] Processing edge features for num 599
[LOG] Processing tetra features for num 599
[LOG] Processing cluster features for num 599
[LOG] Processing cluster features for num 599
[LOG] Processing adjacency and incidence matrices for num 599
[LOG] Computing n0_to_0 for num 599
[LOG] Computing n1_to_1 for num 599
[LOG] GENERATED TETRA
[LOG] Computing n2_to_2 (adjacency) for num 599
[LOG] Computing n2_to_2 (adjacency) for num 323
[LOG] Computing n3_to_3 (adjacency) for num 599
[LOG] Computing n4_to_4 (coadjacency) for num 599
[LOG] Computing n0_to_1 for num 599
[LOG] Computing n0_to_2 for num 599
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n0_to_3 for num 599
[LOG] Computing n0_to_4 for num 599
[LOG] Computing n1_to_2 for num 599
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_3 for num 599
[LOG] Computing n1_to_4 for num 599
[LOG] Computing n2_to_3 for num 599
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 2569 Tetrahedra.
    [LOG] Generated 68 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.544117647058824
    [LOG] Max number of nodes per cluster is 80 and the number is 58
[LOG] Computing n2_to_4 for num 599
[LOG] Computing n3_to_4 for num 599
[LOG] Global feature for num 599
[LOG] Global feature for num 599
[LOG] Saving tensor x_0_599.pt
[LOG] Saving tensor x_1_599.pt
[LOG] Saving tensor x_2_599.pt
[LOG] Saving tensor x_3_599.pt
[LOG] Saving tensor x_4_599.pt
[LOG] Saving tensor n0_to_0_599.pt
[LOG] Saving tensor n1_to_1_599.pt
[LOG] Saving tensor n2_to_2_599.pt
[LOG] Saving tensor n3_to_3_599.pt
[LOG] Saving tensor n4_to_4_599.pt
[LOG] Saving tensor n0_to_1_599.pt
[LOG] Saving tensor n0_to_2_599.pt
[LOG] Saving tensor n0_to_3_599.pt
[LOG] Saving tensor n0_to_4_599.pt
[LOG] Saving tensor n1_to_2_599.pt
[LOG] Saving tensor n1_to_3_599.pt
[LOG] Saving tensor n1_to_4_599.pt
[LOG] Saving tensor n2_to_3_599.pt
[LOG] Saving tensor n2_to_4_599.pt
[LOG] Saving tensor n3_to_4_599.pt
[LOG] Saving tensor global_feature_599.pt
[LOG] Process 74: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] We will select 562 edges and 2569 tetra
[LOG] Edges from tetra 0 and KDTree 1962 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] GENERATED TETRA
[LOG] Process 9: Created combinatorial complex for file data_76.hdf5
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 9: Calculating Neighbors
[LOG] Loading pickle file data_76.pickle
[LOG] Processing node features for num 76
[LOG] Processing edge features for num 76
[LOG] Processing tetra features for num 76
[LOG] Processing cluster features for num 76
[LOG] Processing cluster features for num 76
[LOG] Processing adjacency and incidence matrices for num 76
[LOG] Computing n0_to_0 for num 76
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_1 for num 76
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1334 Tetrahedra.
    [LOG] Generated 49 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.63265306122449
    [LOG] Max number of nodes per cluster is 36 and the number is 47
[LOG] Computing n3_to_3 (adjacency) for num 323
[LOG] Computing n4_to_4 (coadjacency) for num 323
[LOG] Computing n0_to_1 for num 323
[LOG] We will select 606 edges and 1334 tetra
[LOG] Edges from tetra 0 and KDTree 1599 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_2 (adjacency) for num 76
[LOG] Computing n0_to_2 for num 323
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Computing n3_to_3 (adjacency) for num 76
[LOG] Computing n4_to_4 (coadjacency) for num 76
[LOG] Computing n0_to_1 for num 76
[LOG] Computing n0_to_2 for num 76
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 36: Created combinatorial complex for file data_293.hdf5
[LOG] Process 36: Calculating Neighbors
[LOG] Loading pickle file data_293.pickle
[LOG] Processing node features for num 293
[LOG] Processing edge features for num 293
[LOG] Processing tetra features for num 293
[LOG] Processing cluster features for num 293
[LOG] Processing cluster features for num 293
[LOG] Processing adjacency and incidence matrices for num 293
[LOG] Computing n0_to_0 for num 293
[LOG] Computing n1_to_1 for num 293
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n2_to_2 (adjacency) for num 293
[LOG] Computing n3_to_3 (adjacency) for num 293
[LOG] Computing n4_to_4 (coadjacency) for num 293
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n0_to_1 for num 293
[LOG] Computing n0_to_2 for num 293
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n0_to_3 for num 293
[LOG] Computing n0_to_4 for num 293
[LOG] Computing n1_to_2 for num 293
[LOG] Computing n0_to_3 for num 76
[LOG] Computing n0_to_4 for num 76
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Computing n1_to_2 for num 76
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n1_to_3 for num 293
[LOG] Computing n1_to_4 for num 293
[LOG] Computing n2_to_3 for num 293
[LOG] Computing n2_to_4 for num 293
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n3_to_4 for num 293
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Global feature for num 293
[LOG] Global feature for num 293
[LOG] Saving tensor x_0_293.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor x_1_293.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor x_2_293.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor x_3_293.pt
[LOG] Saving tensor x_4_293.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor n0_to_0_293.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor n1_to_1_293.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor n2_to_2_293.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor n3_to_3_293.pt
[LOG] Saving tensor n4_to_4_293.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor n0_to_1_293.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor n0_to_2_293.pt
[LOG] Saving tensor n0_to_3_293.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor n0_to_4_293.pt
[LOG] Saving tensor n1_to_2_293.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor n1_to_3_293.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor n1_to_4_293.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor n2_to_3_293.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor n2_to_4_293.pt
[LOG] Saving tensor n3_to_4_293.pt
[LOG] Saving tensor global_feature_293.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Process 36: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_3 for num 76
[LOG] Computing n1_to_4 for num 76
[LOG] Computing n2_to_3 for num 76
[LOG] Computing n2_to_4 for num 76
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_4 for num 76
[LOG] Global feature for num 76
[LOG] Global feature for num 76
[LOG] Saving tensor x_0_76.pt
[LOG] Saving tensor x_1_76.pt
[LOG] Saving tensor x_2_76.pt
[LOG] Saving tensor x_3_76.pt
[LOG] Saving tensor x_4_76.pt
[LOG] Saving tensor n0_to_0_76.pt
[LOG] Saving tensor n1_to_1_76.pt
[LOG] Saving tensor n2_to_2_76.pt
[LOG] Saving tensor n3_to_3_76.pt
[LOG] Saving tensor n4_to_4_76.pt
[LOG] Saving tensor n0_to_1_76.pt
[LOG] Saving tensor n0_to_2_76.pt
[LOG] Saving tensor n0_to_3_76.pt
[LOG] Saving tensor n0_to_4_76.pt
[LOG] Saving tensor n1_to_2_76.pt
[LOG] Saving tensor n1_to_3_76.pt
[LOG] Saving tensor n1_to_4_76.pt
[LOG] Saving tensor n2_to_3_76.pt
[LOG] Saving tensor n2_to_4_76.pt
[LOG] Saving tensor n3_to_4_76.pt
[LOG] Saving tensor global_feature_76.pt
[LOG] Process 9: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 323
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_4 for num 323
[LOG] Computing n1_to_2 for num 323
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n1_to_3 for num 323
[LOG] Computing n1_to_4 for num 323
[LOG] Computing n2_to_3 for num 323
[LOG] Computing n2_to_4 for num 323
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_4 for num 323
[LOG] Global feature for num 323
[LOG] Global feature for num 323
[LOG] Saving tensor x_0_323.pt
[LOG] Saving tensor x_1_323.pt
[LOG] Saving tensor x_2_323.pt
[LOG] Saving tensor x_3_323.pt
[LOG] Saving tensor x_4_323.pt
[LOG] Saving tensor n0_to_0_323.pt
[LOG] Saving tensor n1_to_1_323.pt
[LOG] Saving tensor n2_to_2_323.pt
[LOG] Saving tensor n3_to_3_323.pt
[LOG] Saving tensor n4_to_4_323.pt
[LOG] Saving tensor n0_to_1_323.pt
[LOG] Saving tensor n0_to_2_323.pt
[LOG] Saving tensor n0_to_3_323.pt
[LOG] Saving tensor n0_to_4_323.pt
[LOG] Saving tensor n1_to_2_323.pt
[LOG] Saving tensor n1_to_3_323.pt
[LOG] Saving tensor n1_to_4_323.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n2_to_3_323.pt
[LOG] Saving tensor n2_to_4_323.pt
[LOG] Saving tensor n3_to_4_323.pt
[LOG] Saving tensor global_feature_323.pt
[LOG] Process 40: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] GENERATED TETRA
[LOG] Removed 6 subset clusters.

    [LOG] We Currently have 5592 Tetrahedra.
    [LOG] Generated 132 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.401515151515152
    [LOG] Max number of nodes per cluster is 113 and the number is 125
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2885 Tetrahedra.
    [LOG] Generated 87 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.114942528735632
    [LOG] Max number of nodes per cluster is 33 and the number is 79
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] We will select 1797 edges and 5592 tetra
[LOG] Edges from tetra 0 and KDTree 1797 with 0 edges in common.
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] We will select 707 edges and 2885 tetra
[LOG] Edges from tetra 0 and KDTree 707 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 127: Created combinatorial complex for file data_999.hdf5
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 127: Calculating Neighbors
[LOG] Loading pickle file data_999.pickle
[LOG] Processing node features for num 999
[LOG] Processing edge features for num 999
[LOG] Processing tetra features for num 999
[LOG] Processing cluster features for num 999
[LOG] Processing cluster features for num 999
[LOG] Processing adjacency and incidence matrices for num 999
[LOG] Computing n0_to_0 for num 999
[LOG] Computing n1_to_1 for num 999
[LOG] Computing n2_to_2 (adjacency) for num 999
[LOG] Removed 0 subset clusters.
[LOG] Computing n3_to_3 (adjacency) for num 999
[LOG] Computing n4_to_4 (coadjacency) for num 999
[LOG] Computing n0_to_1 for num 999
[LOG] Computing n0_to_2 for num 999
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 121: Created combinatorial complex for file data_952.hdf5
[LOG] Computing n0_to_3 for num 999
[LOG] Computing n0_to_4 for num 999
[LOG] Computing n1_to_2 for num 999
[LOG] Process 121: Calculating Neighbors
[LOG] Loading pickle file data_952.pickle
[LOG] Processing node features for num 952
[LOG] Processing edge features for num 952
[LOG] Processing tetra features for num 952
[LOG] Computing n1_to_3 for num 999
[LOG] Computing n1_to_4 for num 999
[LOG] Processing cluster features for num 952
[LOG] Computing n2_to_3 for num 999
[LOG] Processing cluster features for num 952
[LOG] Computing n2_to_4 for num 999
[LOG] Processing adjacency and incidence matrices for num 952
[LOG] Computing n0_to_0 for num 952
[LOG] Computing n3_to_4 for num 999
[LOG] Global feature for num 999
[LOG] Global feature for num 999
[LOG] Saving tensor x_0_999.pt
[LOG] Saving tensor x_1_999.pt
[LOG] Saving tensor x_2_999.pt
[LOG] Saving tensor x_3_999.pt
[LOG] Saving tensor x_4_999.pt
[LOG] Saving tensor n0_to_0_999.pt
[LOG] Saving tensor n1_to_1_999.pt
[LOG] Saving tensor n2_to_2_999.pt
[LOG] Saving tensor n3_to_3_999.pt
[LOG] Saving tensor n4_to_4_999.pt
[LOG] Saving tensor n0_to_1_999.pt
[LOG] Saving tensor n0_to_2_999.pt
[LOG] Saving tensor n0_to_3_999.pt
[LOG] Saving tensor n0_to_4_999.pt
[LOG] Saving tensor n1_to_2_999.pt
[LOG] Saving tensor n1_to_3_999.pt
[LOG] Saving tensor n1_to_4_999.pt
[LOG] Saving tensor n2_to_3_999.pt
[LOG] Saving tensor n2_to_4_999.pt
[LOG] Saving tensor n3_to_4_999.pt
[LOG] Saving tensor global_feature_999.pt
[LOG] Process 127: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_1 for num 952
[LOG] Calculating for cell ranks 1 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1784 Tetrahedra.
    [LOG] Generated 41 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 18.195121951219512
    [LOG] Max number of nodes per cluster is 83 and the number is 22
[LOG] Calculating for cell ranks 0 and 2
[LOG] We will select 359 edges and 1784 tetra
[LOG] Edges from tetra 0 and KDTree 1686 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Process 41: Created combinatorial complex for file data_333.hdf5
[LOG] Process 41: Calculating Neighbors
[LOG] Loading pickle file data_333.pickle
[LOG] Processing node features for num 333
[LOG] Processing edge features for num 333
[LOG] Processing tetra features for num 333
[LOG] Processing cluster features for num 333
[LOG] Processing cluster features for num 333
[LOG] Processing adjacency and incidence matrices for num 333
[LOG] Computing n0_to_0 for num 333
[LOG] Computing n1_to_1 for num 333
[LOG] Computing n2_to_2 (adjacency) for num 333
[LOG] Computing n2_to_2 (adjacency) for num 952
[LOG] Computing n3_to_3 (adjacency) for num 333
[LOG] Computing n4_to_4 (coadjacency) for num 333
[LOG] Computing n0_to_1 for num 333
[LOG] Computing n0_to_2 for num 333
[LOG] Computing n0_to_3 for num 333
[LOG] Computing n0_to_4 for num 333
[LOG] Computing n1_to_2 for num 333
[LOG] Computing n1_to_3 for num 333
[LOG] Computing n1_to_4 for num 333
[LOG] Computing n2_to_3 for num 333
[LOG] Computing n2_to_4 for num 333
[LOG] Computing n3_to_4 for num 333
[LOG] Global feature for num 333
[LOG] Global feature for num 333
[LOG] Saving tensor x_0_333.pt
[LOG] Saving tensor x_1_333.pt
[LOG] Saving tensor x_2_333.pt
[LOG] Saving tensor x_3_333.pt
[LOG] Saving tensor x_4_333.pt
[LOG] Saving tensor n0_to_0_333.pt
[LOG] Saving tensor n1_to_1_333.pt
[LOG] Saving tensor n2_to_2_333.pt
[LOG] Saving tensor n3_to_3_333.pt
[LOG] Saving tensor n4_to_4_333.pt
[LOG] Saving tensor n0_to_1_333.pt
[LOG] Saving tensor n0_to_2_333.pt
[LOG] Saving tensor n0_to_3_333.pt
[LOG] Saving tensor n0_to_4_333.pt
[LOG] Saving tensor n1_to_2_333.pt
[LOG] Saving tensor n1_to_3_333.pt
[LOG] Saving tensor n1_to_4_333.pt
[LOG] Saving tensor n2_to_3_333.pt
[LOG] Saving tensor n2_to_4_333.pt
[LOG] Saving tensor n3_to_4_333.pt
[LOG] Saving tensor global_feature_333.pt
[LOG] Process 41: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n3_to_3 (adjacency) for num 952
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n4_to_4 (coadjacency) for num 952
[LOG] Computing n0_to_1 for num 952
[LOG] Computing n0_to_2 for num 952
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_3 for num 952
[LOG] Computing n0_to_4 for num 952
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_2 for num 952
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_3 for num 952
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_4 for num 952
[LOG] Computing n2_to_3 for num 952
[LOG] Computing n2_to_4 for num 952
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] GENERATED TETRA
[LOG] Computing n3_to_4 for num 952
[LOG] Global feature for num 952
[LOG] Global feature for num 952
[LOG] Saving tensor x_0_952.pt
[LOG] Saving tensor x_1_952.pt
[LOG] Saving tensor x_2_952.pt
[LOG] Saving tensor x_3_952.pt
[LOG] Saving tensor x_4_952.pt
[LOG] Saving tensor n0_to_0_952.pt
[LOG] Saving tensor n1_to_1_952.pt
[LOG] Saving tensor n2_to_2_952.pt
[LOG] Saving tensor n3_to_3_952.pt
[LOG] Saving tensor n4_to_4_952.pt
[LOG] Saving tensor n0_to_1_952.pt
[LOG] Saving tensor n0_to_2_952.pt
[LOG] Saving tensor n0_to_3_952.pt
[LOG] Saving tensor n0_to_4_952.pt
[LOG] Saving tensor n1_to_2_952.pt
[LOG] Saving tensor n1_to_3_952.pt
[LOG] Saving tensor n1_to_4_952.pt
[LOG] Saving tensor n2_to_3_952.pt
[LOG] Saving tensor n2_to_4_952.pt
[LOG] Saving tensor n3_to_4_952.pt
[LOG] Saving tensor global_feature_952.pt
[LOG] Process 121: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2448 Tetrahedra.
    [LOG] Generated 83 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.566265060240964
    [LOG] Max number of nodes per cluster is 25 and the number is 36
[LOG] We will select 426 edges and 2448 tetra
[LOG] Edges from tetra 0 and KDTree 426 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 90: Created combinatorial complex for file data_726.hdf5
[LOG] Process 90: Calculating Neighbors
[LOG] Loading pickle file data_726.pickle
[LOG] Processing node features for num 726
[LOG] Processing edge features for num 726
[LOG] Processing tetra features for num 726
[LOG] Processing cluster features for num 726
[LOG] Processing cluster features for num 726
[LOG] Processing adjacency and incidence matrices for num 726
[LOG] Computing n0_to_0 for num 726
[LOG] Computing n1_to_1 for num 726
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n2_to_2 (adjacency) for num 726
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n3_to_3 (adjacency) for num 726
[LOG] Computing n4_to_4 (coadjacency) for num 726
[LOG] Computing n0_to_1 for num 726
[LOG] Computing n0_to_2 for num 726
[LOG] Computing n0_to_3 for num 726
[LOG] Computing n0_to_4 for num 726
[LOG] Computing n1_to_2 for num 726
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_3 for num 726
[LOG] Computing n1_to_4 for num 726
[LOG] Computing n2_to_3 for num 726
[LOG] Computing n2_to_4 for num 726
[LOG] Computing n3_to_4 for num 726
[LOG] Global feature for num 726
[LOG] Global feature for num 726
[LOG] Saving tensor x_0_726.pt
[LOG] Saving tensor x_1_726.pt
[LOG] Saving tensor x_2_726.pt
[LOG] Saving tensor x_3_726.pt
[LOG] Saving tensor x_4_726.pt
[LOG] Saving tensor n0_to_0_726.pt
[LOG] Saving tensor n1_to_1_726.pt
[LOG] Saving tensor n2_to_2_726.pt
[LOG] Saving tensor n3_to_3_726.pt
[LOG] Saving tensor n4_to_4_726.pt
[LOG] Saving tensor n0_to_1_726.pt
[LOG] Saving tensor n0_to_2_726.pt
[LOG] Saving tensor n0_to_3_726.pt
[LOG] Saving tensor n0_to_4_726.pt
[LOG] Saving tensor n1_to_2_726.pt
[LOG] Saving tensor n1_to_3_726.pt
[LOG] Saving tensor n1_to_4_726.pt
[LOG] Saving tensor n2_to_3_726.pt
[LOG] Saving tensor n2_to_4_726.pt
[LOG] Saving tensor n3_to_4_726.pt
[LOG] Saving tensor global_feature_726.pt
[LOG] Process 90: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1334 Tetrahedra.
    [LOG] Generated 44 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.113636363636363
    [LOG] Max number of nodes per cluster is 26 and the number is 31
[LOG] We will select 508 edges and 1334 tetra
[LOG] Edges from tetra 0 and KDTree 508 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 0 subset clusters.
[LOG] Process 36: Created combinatorial complex for file data_294.hdf5
[LOG] Process 36: Calculating Neighbors
[LOG] Loading pickle file data_294.pickle
[LOG] Processing node features for num 294
[LOG] Processing edge features for num 294
[LOG] Calculating for cell ranks 0 and 4
[LOG] Processing tetra features for num 294
[LOG] Processing cluster features for num 294
[LOG] Processing cluster features for num 294
[LOG] Processing adjacency and incidence matrices for num 294
[LOG] Computing n0_to_0 for num 294
[LOG] Computing n1_to_1 for num 294
[LOG] GENERATED TETRA
[LOG] Computing n2_to_2 (adjacency) for num 294
[LOG] Computing n3_to_3 (adjacency) for num 294
[LOG] Computing n4_to_4 (coadjacency) for num 294
[LOG] Computing n0_to_1 for num 294
[LOG] Computing n0_to_2 for num 294
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1761 Tetrahedra.
    [LOG] Generated 44 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.5
    [LOG] Max number of nodes per cluster is 50 and the number is 14
[LOG] Computing n0_to_3 for num 294
[LOG] Computing n0_to_4 for num 294
[LOG] Computing n1_to_2 for num 294
[LOG] We will select 761 edges and 1761 tetra
[LOG] Edges from tetra 0 and KDTree 761 with 0 edges in common.
[LOG] Computing n1_to_3 for num 294
[LOG] Computing n1_to_4 for num 294
[LOG] Computing n2_to_3 for num 294
[LOG] Computing n2_to_4 for num 294
[LOG] Computing n3_to_4 for num 294
[LOG] Global feature for num 294
[LOG] Global feature for num 294
[LOG] Saving tensor x_0_294.pt
[LOG] Saving tensor x_1_294.pt
[LOG] Saving tensor x_2_294.pt
[LOG] Saving tensor x_3_294.pt
[LOG] Saving tensor x_4_294.pt
[LOG] Saving tensor n0_to_0_294.pt
[LOG] Saving tensor n1_to_1_294.pt
[LOG] Saving tensor n2_to_2_294.pt
[LOG] Saving tensor n3_to_3_294.pt
[LOG] Saving tensor n4_to_4_294.pt
[LOG] Saving tensor n0_to_1_294.pt
[LOG] Saving tensor n0_to_2_294.pt
[LOG] Saving tensor n0_to_3_294.pt
[LOG] Saving tensor n0_to_4_294.pt
[LOG] Saving tensor n1_to_2_294.pt
[LOG] Saving tensor n1_to_3_294.pt
[LOG] Saving tensor n1_to_4_294.pt
[LOG] Saving tensor n2_to_3_294.pt
[LOG] Saving tensor n2_to_4_294.pt
[LOG] Saving tensor n3_to_4_294.pt
[LOG] Saving tensor global_feature_294.pt
[LOG] Process 36: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Process 4: Created combinatorial complex for file data_33.hdf5
[LOG] Process 4: Calculating Neighbors
[LOG] Loading pickle file data_33.pickle
[LOG] Processing node features for num 33
[LOG] Processing edge features for num 33
[LOG] Processing tetra features for num 33
[LOG] Processing cluster features for num 33
[LOG] Processing cluster features for num 33
[LOG] Processing adjacency and incidence matrices for num 33
[LOG] Computing n0_to_0 for num 33
[LOG] Computing n1_to_1 for num 33
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n2_to_2 (adjacency) for num 33
[LOG] Computing n3_to_3 (adjacency) for num 33
[LOG] Computing n4_to_4 (coadjacency) for num 33
[LOG] Computing n0_to_1 for num 33
[LOG] Computing n0_to_2 for num 33
[LOG] Computing n0_to_3 for num 33
[LOG] Computing n0_to_4 for num 33
[LOG] Computing n1_to_2 for num 33
[LOG] Computing n1_to_3 for num 33
[LOG] Computing n1_to_4 for num 33
[LOG] Computing n2_to_3 for num 33
[LOG] Computing n2_to_4 for num 33
[LOG] Computing n3_to_4 for num 33
[LOG] Global feature for num 33
[LOG] Global feature for num 33
[LOG] Saving tensor x_0_33.pt
[LOG] Saving tensor x_1_33.pt
[LOG] Saving tensor x_2_33.pt
[LOG] Saving tensor x_3_33.pt
[LOG] Saving tensor x_4_33.pt
[LOG] Saving tensor n0_to_0_33.pt
[LOG] Saving tensor n1_to_1_33.pt
[LOG] Saving tensor n2_to_2_33.pt
[LOG] Saving tensor n3_to_3_33.pt
[LOG] Saving tensor n4_to_4_33.pt
[LOG] Saving tensor n0_to_1_33.pt
[LOG] Saving tensor n0_to_2_33.pt
[LOG] Saving tensor n0_to_3_33.pt
[LOG] Saving tensor n0_to_4_33.pt
[LOG] Saving tensor n1_to_2_33.pt
[LOG] Saving tensor n1_to_3_33.pt
[LOG] Saving tensor n1_to_4_33.pt
[LOG] Saving tensor n2_to_3_33.pt
[LOG] Saving tensor n2_to_4_33.pt
[LOG] Saving tensor n3_to_4_33.pt
[LOG] Saving tensor global_feature_33.pt
[LOG] Process 4: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2448 Tetrahedra.
    [LOG] Generated 58 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.89655172413793
    [LOG] Max number of nodes per cluster is 68 and the number is 56
[LOG] We will select 426 edges and 2448 tetra
[LOG] Edges from tetra 0 and KDTree 944 with 0 edges in common.
[LOG] Removed 1 subset clusters.
[LOG] Process 90: Created combinatorial complex for file data_727.hdf5
[LOG] Process 90: Calculating Neighbors
[LOG] Loading pickle file data_727.pickle
[LOG] Processing node features for num 727
[LOG] Processing edge features for num 727
[LOG] Processing tetra features for num 727
[LOG] Processing cluster features for num 727
[LOG] Processing cluster features for num 727
[LOG] Processing adjacency and incidence matrices for num 727
[LOG] Computing n0_to_0 for num 727
[LOG] Computing n1_to_1 for num 727
[LOG] Computing n2_to_2 (adjacency) for num 727
[LOG] Computing n3_to_3 (adjacency) for num 727
[LOG] Computing n4_to_4 (coadjacency) for num 727
[LOG] Computing n0_to_1 for num 727
[LOG] Computing n0_to_2 for num 727
[LOG] GENERATED TETRA
[LOG] Computing n0_to_3 for num 727
[LOG] Computing n0_to_4 for num 727
[LOG] Computing n1_to_2 for num 727
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1334 Tetrahedra.
    [LOG] Generated 41 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.24390243902439
    [LOG] Max number of nodes per cluster is 34 and the number is 18
[LOG] We will select 508 edges and 1334 tetra
[LOG] Edges from tetra 0 and KDTree 715 with 0 edges in common.
[LOG] Computing n1_to_3 for num 727
[LOG] Computing n1_to_4 for num 727
[LOG] Computing n2_to_3 for num 727
[LOG] Computing n2_to_4 for num 727
[LOG] Computing n3_to_4 for num 727
[LOG] Global feature for num 727
[LOG] Global feature for num 727
[LOG] Saving tensor x_0_727.pt
[LOG] Saving tensor x_1_727.pt
[LOG] Saving tensor x_2_727.pt
[LOG] Saving tensor x_3_727.pt
[LOG] Saving tensor x_4_727.pt
[LOG] Saving tensor n0_to_0_727.pt
[LOG] Saving tensor n1_to_1_727.pt
[LOG] Saving tensor n2_to_2_727.pt
[LOG] Saving tensor n3_to_3_727.pt
[LOG] Saving tensor n4_to_4_727.pt
[LOG] Saving tensor n0_to_1_727.pt
[LOG] Saving tensor n0_to_2_727.pt
[LOG] Saving tensor n0_to_3_727.pt
[LOG] Saving tensor n0_to_4_727.pt
[LOG] Saving tensor n1_to_2_727.pt
[LOG] Saving tensor n1_to_3_727.pt
[LOG] Saving tensor n1_to_4_727.pt
[LOG] Saving tensor n2_to_3_727.pt
[LOG] Saving tensor n2_to_4_727.pt
[LOG] Saving tensor n3_to_4_727.pt
[LOG] Saving tensor global_feature_727.pt
[LOG] Process 90: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 0 subset clusters.
[LOG] Process 36: Created combinatorial complex for file data_295.hdf5
[LOG] Process 36: Calculating Neighbors
[LOG] Loading pickle file data_295.pickle
[LOG] Processing node features for num 295
[LOG] Processing edge features for num 295
[LOG] Processing tetra features for num 295
[LOG] Processing cluster features for num 295
[LOG] Processing cluster features for num 295
[LOG] Processing adjacency and incidence matrices for num 295
[LOG] Computing n0_to_0 for num 295
[LOG] Computing n1_to_1 for num 295
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n2_to_2 (adjacency) for num 295
[LOG] Computing n3_to_3 (adjacency) for num 295
[LOG] Computing n4_to_4 (coadjacency) for num 295
[LOG] Computing n0_to_1 for num 295
[LOG] Computing n0_to_2 for num 295
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_3 for num 295
[LOG] Computing n0_to_4 for num 295
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_2 for num 295
[LOG] Computing n1_to_3 for num 295
[LOG] Computing n1_to_4 for num 295
[LOG] Computing n2_to_3 for num 295
[LOG] Computing n2_to_4 for num 295
[LOG] Computing n3_to_4 for num 295
[LOG] Global feature for num 295
[LOG] Global feature for num 295
[LOG] Saving tensor x_0_295.pt
[LOG] Saving tensor x_1_295.pt
[LOG] Saving tensor x_2_295.pt
[LOG] Saving tensor x_3_295.pt
[LOG] Saving tensor x_4_295.pt
[LOG] Saving tensor n0_to_0_295.pt
[LOG] Saving tensor n1_to_1_295.pt
[LOG] Saving tensor n2_to_2_295.pt
[LOG] Saving tensor n3_to_3_295.pt
[LOG] Saving tensor n4_to_4_295.pt
[LOG] Saving tensor n0_to_1_295.pt
[LOG] Saving tensor n0_to_2_295.pt
[LOG] Saving tensor n0_to_3_295.pt
[LOG] Saving tensor n0_to_4_295.pt
[LOG] Saving tensor n1_to_2_295.pt
[LOG] Saving tensor n1_to_3_295.pt
[LOG] Saving tensor n1_to_4_295.pt
[LOG] Saving tensor n2_to_3_295.pt
[LOG] GENERATED TETRA
[LOG] Saving tensor n2_to_4_295.pt
[LOG] Saving tensor n3_to_4_295.pt
[LOG] Saving tensor global_feature_295.pt
[LOG] Process 36: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2693 Tetrahedra.
    [LOG] Generated 41 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 21.804878048780488
    [LOG] Max number of nodes per cluster is 142 and the number is 27
[LOG] We will select 572 edges and 2693 tetra
[LOG] Edges from tetra 0 and KDTree 2997 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Process 44: Created combinatorial complex for file data_359.hdf5
[LOG] Process 44: Calculating Neighbors
[LOG] Loading pickle file data_359.pickle
[LOG] Processing node features for num 359
[LOG] Processing edge features for num 359
[LOG] Processing tetra features for num 359
[LOG] Processing cluster features for num 359
[LOG] Processing cluster features for num 359
[LOG] Processing adjacency and incidence matrices for num 359
[LOG] Computing n0_to_0 for num 359
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n1_to_1 for num 359
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 359
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n3_to_3 (adjacency) for num 359
[LOG] Computing n4_to_4 (coadjacency) for num 359
[LOG] Computing n0_to_1 for num 359
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_2 for num 359
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_3 for num 359
[LOG] Computing n0_to_4 for num 359
[LOG] Computing n1_to_2 for num 359
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_3 for num 359
[LOG] Computing n1_to_4 for num 359
[LOG] Computing n2_to_3 for num 359
[LOG] Computing n2_to_4 for num 359
[LOG] Computing n3_to_4 for num 359
[LOG] Global feature for num 359
[LOG] Global feature for num 359
[LOG] Saving tensor x_0_359.pt
[LOG] Saving tensor x_1_359.pt
[LOG] Saving tensor x_2_359.pt
[LOG] Saving tensor x_3_359.pt
[LOG] Saving tensor x_4_359.pt
[LOG] Saving tensor n0_to_0_359.pt
[LOG] Saving tensor n1_to_1_359.pt
[LOG] Saving tensor n2_to_2_359.pt
[LOG] Saving tensor n3_to_3_359.pt
[LOG] Saving tensor n4_to_4_359.pt
[LOG] Saving tensor n0_to_1_359.pt
[LOG] Saving tensor n0_to_2_359.pt
[LOG] Saving tensor n0_to_3_359.pt
[LOG] Saving tensor n0_to_4_359.pt
[LOG] Saving tensor n1_to_2_359.pt
[LOG] Saving tensor n1_to_3_359.pt
[LOG] Saving tensor n1_to_4_359.pt
[LOG] Saving tensor n2_to_3_359.pt
[LOG] Saving tensor n2_to_4_359.pt
[LOG] Saving tensor n3_to_4_359.pt
[LOG] Saving tensor global_feature_359.pt
[LOG] Process 44: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1761 Tetrahedra.
    [LOG] Generated 51 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.607843137254902
    [LOG] Max number of nodes per cluster is 50 and the number is 48
[LOG] We will select 761 edges and 1761 tetra
[LOG] Edges from tetra 0 and KDTree 954 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 1 subset clusters.
[LOG] Process 4: Created combinatorial complex for file data_34.hdf5
[LOG] Process 4: Calculating Neighbors
[LOG] Loading pickle file data_34.pickle
[LOG] Processing node features for num 34
[LOG] Processing edge features for num 34
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing tetra features for num 34
[LOG] Processing cluster features for num 34
[LOG] Processing cluster features for num 34
[LOG] Processing adjacency and incidence matrices for num 34
[LOG] Computing n0_to_0 for num 34
[LOG] Computing n1_to_1 for num 34
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_2 (adjacency) for num 34
[LOG] Computing n3_to_3 (adjacency) for num 34
[LOG] Computing n4_to_4 (coadjacency) for num 34
[LOG] Computing n0_to_1 for num 34
[LOG] Computing n0_to_2 for num 34
[LOG] Computing n0_to_3 for num 34
[LOG] Computing n0_to_4 for num 34
[LOG] Computing n1_to_2 for num 34
[LOG] Computing n1_to_3 for num 34
[LOG] Computing n1_to_4 for num 34
[LOG] Computing n2_to_3 for num 34
[LOG] Computing n2_to_4 for num 34
[LOG] Computing n3_to_4 for num 34
[LOG] Global feature for num 34
[LOG] Global feature for num 34
[LOG] Saving tensor x_0_34.pt
[LOG] Saving tensor x_1_34.pt
[LOG] Saving tensor x_2_34.pt
[LOG] Saving tensor x_3_34.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor x_4_34.pt
[LOG] Saving tensor n0_to_0_34.pt
[LOG] Saving tensor n1_to_1_34.pt
[LOG] Saving tensor n2_to_2_34.pt
[LOG] Saving tensor n3_to_3_34.pt
[LOG] Saving tensor n4_to_4_34.pt
[LOG] Saving tensor n0_to_1_34.pt
[LOG] Saving tensor n0_to_2_34.pt
[LOG] Saving tensor n0_to_3_34.pt
[LOG] Saving tensor n0_to_4_34.pt
[LOG] Saving tensor n1_to_2_34.pt
[LOG] Saving tensor n1_to_3_34.pt
[LOG] Saving tensor n1_to_4_34.pt
[LOG] Saving tensor n2_to_3_34.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor n2_to_4_34.pt
[LOG] Saving tensor n3_to_4_34.pt
[LOG] Saving tensor global_feature_34.pt
[LOG] Process 4: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2513 Tetrahedra.
    [LOG] Generated 73 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.082191780821917
    [LOG] Max number of nodes per cluster is 68 and the number is 62
[LOG] We will select 448 edges and 2513 tetra
[LOG] Edges from tetra 0 and KDTree 981 with 0 edges in common.
[LOG] Removed 1 subset clusters.
[LOG] Process 52: Created combinatorial complex for file data_423.hdf5
[LOG] Process 52: Calculating Neighbors
[LOG] Loading pickle file data_423.pickle
[LOG] Processing node features for num 423
[LOG] Processing edge features for num 423
[LOG] Processing tetra features for num 423
[LOG] Processing cluster features for num 423
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing cluster features for num 423
[LOG] Processing adjacency and incidence matrices for num 423
[LOG] Computing n0_to_0 for num 423
[LOG] Computing n1_to_1 for num 423
[LOG] Computing n2_to_2 (adjacency) for num 423
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_3 (adjacency) for num 423
[LOG] Computing n4_to_4 (coadjacency) for num 423
[LOG] Computing n0_to_1 for num 423
[LOG] Computing n0_to_2 for num 423
[LOG] Computing n0_to_3 for num 423
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_4 for num 423
[LOG] Computing n1_to_2 for num 423
[LOG] Computing n1_to_3 for num 423
[LOG] Computing n1_to_4 for num 423
[LOG] Computing n2_to_3 for num 423
[LOG] Computing n2_to_4 for num 423
[LOG] Computing n3_to_4 for num 423
[LOG] Global feature for num 423
[LOG] Global feature for num 423
[LOG] Saving tensor x_0_423.pt
[LOG] Saving tensor x_1_423.pt
[LOG] Saving tensor x_2_423.pt
[LOG] Saving tensor x_3_423.pt
[LOG] Saving tensor x_4_423.pt
[LOG] Saving tensor n0_to_0_423.pt
[LOG] Saving tensor n1_to_1_423.pt
[LOG] Saving tensor n2_to_2_423.pt
[LOG] Saving tensor n3_to_3_423.pt
[LOG] Saving tensor n4_to_4_423.pt
[LOG] Saving tensor n0_to_1_423.pt
[LOG] Saving tensor n0_to_2_423.pt
[LOG] Saving tensor n0_to_3_423.pt
[LOG] Saving tensor n0_to_4_423.pt
[LOG] Saving tensor n1_to_2_423.pt
[LOG] Saving tensor n1_to_3_423.pt
[LOG] Saving tensor n1_to_4_423.pt
[LOG] Saving tensor n2_to_3_423.pt
[LOG] Saving tensor n2_to_4_423.pt
[LOG] Saving tensor n3_to_4_423.pt
[LOG] Saving tensor global_feature_423.pt
[LOG] Process 52: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2046 Tetrahedra.
    [LOG] Generated 65 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.430769230769231
    [LOG] Max number of nodes per cluster is 44 and the number is 63
[LOG] We will select 425 edges and 2046 tetra
[LOG] Edges from tetra 0 and KDTree 425 with 0 edges in common.
[LOG] Removed 2 subset clusters.
[LOG] Process 40: Created combinatorial complex for file data_324.hdf5
[LOG] Process 40: Calculating Neighbors
[LOG] Loading pickle file data_324.pickle
[LOG] Processing node features for num 324
[LOG] Processing edge features for num 324
[LOG] Processing tetra features for num 324
[LOG] Processing cluster features for num 324
[LOG] Processing cluster features for num 324
[LOG] Processing adjacency and incidence matrices for num 324
[LOG] Computing n0_to_0 for num 324
[LOG] Computing n1_to_1 for num 324
[LOG] Computing n2_to_2 (adjacency) for num 324
[LOG] Computing n3_to_3 (adjacency) for num 324
[LOG] Computing n4_to_4 (coadjacency) for num 324
[LOG] Computing n0_to_1 for num 324
[LOG] Computing n0_to_2 for num 324
[LOG] Computing n0_to_3 for num 324
[LOG] Computing n0_to_4 for num 324
[LOG] Computing n1_to_2 for num 324
[LOG] Computing n1_to_3 for num 324
[LOG] Computing n1_to_4 for num 324
[LOG] Computing n2_to_3 for num 324
[LOG] Computing n2_to_4 for num 324
[LOG] Computing n3_to_4 for num 324
[LOG] Global feature for num 324
[LOG] Global feature for num 324
[LOG] Saving tensor x_0_324.pt
[LOG] Saving tensor x_1_324.pt
[LOG] Saving tensor x_2_324.pt
[LOG] Saving tensor x_3_324.pt
[LOG] Saving tensor x_4_324.pt
[LOG] Saving tensor n0_to_0_324.pt
[LOG] Saving tensor n1_to_1_324.pt
[LOG] Saving tensor n2_to_2_324.pt
[LOG] Saving tensor n3_to_3_324.pt
[LOG] Saving tensor n4_to_4_324.pt
[LOG] Saving tensor n0_to_1_324.pt
[LOG] Saving tensor n0_to_2_324.pt
[LOG] Saving tensor n0_to_3_324.pt
[LOG] Saving tensor n0_to_4_324.pt
[LOG] Saving tensor n1_to_2_324.pt
[LOG] Saving tensor n1_to_3_324.pt
[LOG] Saving tensor n1_to_4_324.pt
[LOG] Saving tensor n2_to_3_324.pt
[LOG] Saving tensor n2_to_4_324.pt
[LOG] Saving tensor n3_to_4_324.pt
[LOG] Saving tensor global_feature_324.pt
[LOG] Process 40: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1784 Tetrahedra.
    [LOG] Generated 43 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.767441860465116
    [LOG] Max number of nodes per cluster is 48 and the number is 41
[LOG] We will select 359 edges and 1784 tetra
[LOG] Edges from tetra 0 and KDTree 467 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 0 subset clusters.
[LOG] Process 41: Created combinatorial complex for file data_334.hdf5
[LOG] Process 41: Calculating Neighbors
[LOG] Loading pickle file data_334.pickle
[LOG] Processing node features for num 334
[LOG] Processing edge features for num 334
[LOG] Processing tetra features for num 334
[LOG] Processing cluster features for num 334
[LOG] Processing cluster features for num 334
[LOG] Calculating for cell ranks 2 and 2
[LOG] Processing adjacency and incidence matrices for num 334
[LOG] Computing n0_to_0 for num 334
[LOG] Computing n1_to_1 for num 334
[LOG] Computing n2_to_2 (adjacency) for num 334
[LOG] Computing n3_to_3 (adjacency) for num 334
[LOG] Computing n4_to_4 (coadjacency) for num 334
[LOG] Computing n0_to_1 for num 334
[LOG] Computing n0_to_2 for num 334
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_3 for num 334
[LOG] Computing n0_to_4 for num 334
[LOG] Computing n1_to_2 for num 334
[LOG] Computing n1_to_3 for num 334
[LOG] Computing n1_to_4 for num 334
[LOG] Computing n2_to_3 for num 334
[LOG] Computing n2_to_4 for num 334
[LOG] Computing n3_to_4 for num 334
[LOG] Global feature for num 334
[LOG] Global feature for num 334
[LOG] Saving tensor x_0_334.pt
[LOG] Saving tensor x_1_334.pt
[LOG] Saving tensor x_2_334.pt
[LOG] Saving tensor x_3_334.pt
[LOG] Saving tensor x_4_334.pt
[LOG] Saving tensor n0_to_0_334.pt
[LOG] Saving tensor n1_to_1_334.pt
[LOG] Saving tensor n2_to_2_334.pt
[LOG] Saving tensor n3_to_3_334.pt
[LOG] Saving tensor n4_to_4_334.pt
[LOG] Saving tensor n0_to_1_334.pt
[LOG] Saving tensor n0_to_2_334.pt
[LOG] Saving tensor n0_to_3_334.pt
[LOG] Saving tensor n0_to_4_334.pt
[LOG] Saving tensor n1_to_2_334.pt
[LOG] Saving tensor n1_to_3_334.pt
[LOG] Saving tensor n1_to_4_334.pt
[LOG] Saving tensor n2_to_3_334.pt
[LOG] Saving tensor n2_to_4_334.pt
[LOG] Saving tensor n3_to_4_334.pt
[LOG] Saving tensor global_feature_334.pt
[LOG] Process 41: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 2569 Tetrahedra.
    [LOG] Generated 55 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.4
    [LOG] Max number of nodes per cluster is 49 and the number is 10
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] We will select 562 edges and 2569 tetra
[LOG] Edges from tetra 0 and KDTree 659 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 9: Created combinatorial complex for file data_77.hdf5
[LOG] Process 9: Calculating Neighbors
[LOG] Loading pickle file data_77.pickle
[LOG] Processing node features for num 77
[LOG] Processing edge features for num 77
[LOG] Processing tetra features for num 77
[LOG] Processing cluster features for num 77
[LOG] Processing cluster features for num 77
[LOG] Processing adjacency and incidence matrices for num 77
[LOG] Computing n0_to_0 for num 77
[LOG] Computing n1_to_1 for num 77
[LOG] Computing n2_to_2 (adjacency) for num 77
[LOG] Computing n3_to_3 (adjacency) for num 77
[LOG] Computing n4_to_4 (coadjacency) for num 77
[LOG] Computing n0_to_1 for num 77
[LOG] Computing n0_to_2 for num 77
[LOG] Computing n0_to_3 for num 77
[LOG] Computing n0_to_4 for num 77
[LOG] Computing n1_to_2 for num 77
[LOG] Computing n1_to_3 for num 77
[LOG] Computing n1_to_4 for num 77
[LOG] Computing n2_to_3 for num 77
[LOG] Computing n2_to_4 for num 77
[LOG] Computing n3_to_4 for num 77
[LOG] Global feature for num 77
[LOG] Global feature for num 77
[LOG] Saving tensor x_0_77.pt
[LOG] Saving tensor x_1_77.pt
[LOG] Saving tensor x_2_77.pt
[LOG] Saving tensor x_3_77.pt
[LOG] Saving tensor x_4_77.pt
[LOG] Saving tensor n0_to_0_77.pt
[LOG] Saving tensor n1_to_1_77.pt
[LOG] Saving tensor n2_to_2_77.pt
[LOG] Saving tensor n3_to_3_77.pt
[LOG] Saving tensor n4_to_4_77.pt
[LOG] Saving tensor n0_to_1_77.pt
[LOG] Saving tensor n0_to_2_77.pt
[LOG] Saving tensor n0_to_3_77.pt
[LOG] Saving tensor n0_to_4_77.pt
[LOG] Saving tensor n1_to_2_77.pt
[LOG] Saving tensor n1_to_3_77.pt
[LOG] Saving tensor n1_to_4_77.pt
[LOG] Saving tensor n2_to_3_77.pt
[LOG] Saving tensor n2_to_4_77.pt
[LOG] Saving tensor n3_to_4_77.pt
[LOG] Saving tensor global_feature_77.pt
[LOG] Process 9: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 4
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2046 Tetrahedra.
    [LOG] Generated 51 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.431372549019608
    [LOG] Max number of nodes per cluster is 34 and the number is 9
[LOG] Calculating for cell ranks 3 and 3
[LOG] We will select 425 edges and 2046 tetra
[LOG] Edges from tetra 0 and KDTree 597 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1761 Tetrahedra.
    [LOG] Generated 37 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 19.08108108108108
    [LOG] Max number of nodes per cluster is 101 and the number is 30
[LOG] We will select 761 edges and 1761 tetra
[LOG] Edges from tetra 0 and KDTree 5121 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Process 40: Created combinatorial complex for file data_325.hdf5
[LOG] Process 40: Calculating Neighbors
[LOG] Loading pickle file data_325.pickle
[LOG] Processing node features for num 325
[LOG] Processing edge features for num 325
[LOG] Processing tetra features for num 325
[LOG] Processing cluster features for num 325
[LOG] Processing cluster features for num 325
[LOG] Processing adjacency and incidence matrices for num 325
[LOG] Computing n0_to_0 for num 325
[LOG] Computing n1_to_1 for num 325
[LOG] Removed 0 subset clusters.
[LOG] Process 4: Created combinatorial complex for file data_35.hdf5
[LOG] Computing n2_to_2 (adjacency) for num 325
[LOG] Process 4: Calculating Neighbors
[LOG] Loading pickle file data_35.pickle
[LOG] Processing node features for num 35
[LOG] Processing edge features for num 35
[LOG] Computing n3_to_3 (adjacency) for num 325
[LOG] Processing tetra features for num 35
[LOG] Computing n4_to_4 (coadjacency) for num 325
[LOG] Computing n0_to_1 for num 325
[LOG] Processing cluster features for num 35
[LOG] Computing n0_to_2 for num 325
[LOG] Processing cluster features for num 35
[LOG] Processing adjacency and incidence matrices for num 35
[LOG] Computing n0_to_0 for num 35
[LOG] Computing n1_to_1 for num 35
[LOG] Computing n0_to_3 for num 325
[LOG] Computing n0_to_4 for num 325
[LOG] Computing n1_to_2 for num 325
[LOG] GENERATED TETRA
[LOG] Computing n2_to_2 (adjacency) for num 35
[LOG] Computing n1_to_3 for num 325
[LOG] Computing n1_to_4 for num 325
[LOG] Computing n2_to_3 for num 325
[LOG] Computing n2_to_4 for num 325
[LOG] Computing n3_to_4 for num 325
[LOG] Global feature for num 325
[LOG] Global feature for num 325
[LOG] Saving tensor x_0_325.pt
[LOG] Saving tensor x_1_325.pt
[LOG] Saving tensor x_2_325.pt
[LOG] Saving tensor x_3_325.pt
[LOG] Saving tensor x_4_325.pt
[LOG] Saving tensor n0_to_0_325.pt
[LOG] Saving tensor n1_to_1_325.pt
[LOG] Saving tensor n2_to_2_325.pt
[LOG] Computing n3_to_3 (adjacency) for num 35
[LOG] Saving tensor n3_to_3_325.pt
[LOG] Computing n4_to_4 (coadjacency) for num 35
[LOG] Saving tensor n4_to_4_325.pt
[LOG] Computing n0_to_1 for num 35
[LOG] Saving tensor n0_to_1_325.pt
[LOG] Saving tensor n0_to_2_325.pt
[LOG] Saving tensor n0_to_3_325.pt
[LOG] Saving tensor n0_to_4_325.pt
[LOG] Saving tensor n1_to_2_325.pt
[LOG] Saving tensor n1_to_3_325.pt
[LOG] Saving tensor n1_to_4_325.pt
[LOG] Saving tensor n2_to_3_325.pt
[LOG] Saving tensor n2_to_4_325.pt
[LOG] Saving tensor n3_to_4_325.pt
[LOG] Saving tensor global_feature_325.pt
[LOG] Process 40: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 1784 Tetrahedra.
    [LOG] Generated 57 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.596491228070175
    [LOG] Max number of nodes per cluster is 31 and the number is 16
[LOG] Computing n0_to_2 for num 35
[LOG] We will select 359 edges and 1784 tetra
[LOG] Edges from tetra 0 and KDTree 557 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Computing n0_to_3 for num 35
[LOG] Computing n0_to_4 for num 35
[LOG] Computing n1_to_2 for num 35
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_3 for num 35
[LOG] Computing n1_to_4 for num 35
[LOG] Computing n2_to_3 for num 35
[LOG] Process 41: Created combinatorial complex for file data_335.hdf5
[LOG] Computing n2_to_4 for num 35
[LOG] Computing n3_to_4 for num 35
[LOG] Global feature for num 35
[LOG] Global feature for num 35
[LOG] Saving tensor x_0_35.pt
[LOG] Saving tensor x_1_35.pt
[LOG] Saving tensor x_2_35.pt
[LOG] Saving tensor x_3_35.pt
[LOG] Saving tensor x_4_35.pt
[LOG] Saving tensor n0_to_0_35.pt
[LOG] Saving tensor n1_to_1_35.pt
[LOG] Saving tensor n2_to_2_35.pt
[LOG] Saving tensor n3_to_3_35.pt
[LOG] Saving tensor n4_to_4_35.pt
[LOG] Saving tensor n0_to_1_35.pt
[LOG] Saving tensor n0_to_2_35.pt
[LOG] Saving tensor n0_to_3_35.pt
[LOG] Saving tensor n0_to_4_35.pt
[LOG] Saving tensor n1_to_2_35.pt
[LOG] Saving tensor n1_to_3_35.pt
[LOG] Saving tensor n1_to_4_35.pt
[LOG] Saving tensor n2_to_3_35.pt
[LOG] Saving tensor n2_to_4_35.pt
[LOG] Saving tensor n3_to_4_35.pt
[LOG] Saving tensor global_feature_35.pt
[LOG] Process 4: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 41: Calculating Neighbors
[LOG] Loading pickle file data_335.pickle
[LOG] Processing node features for num 335
[LOG] Processing edge features for num 335
[LOG] Processing tetra features for num 335
[LOG] Processing cluster features for num 335
[LOG] Processing cluster features for num 335
[LOG] Processing adjacency and incidence matrices for num 335
[LOG] Computing n0_to_0 for num 335
[LOG] Computing n1_to_1 for num 335
[LOG] Computing n2_to_2 (adjacency) for num 335
[LOG] Computing n3_to_3 (adjacency) for num 335
[LOG] Computing n4_to_4 (coadjacency) for num 335
[LOG] Computing n0_to_1 for num 335
[LOG] Computing n0_to_2 for num 335
[LOG] Computing n0_to_3 for num 335
[LOG] Computing n0_to_4 for num 335
[LOG] Computing n1_to_2 for num 335
[LOG] Computing n1_to_3 for num 335
[LOG] Computing n1_to_4 for num 335
[LOG] Computing n2_to_3 for num 335
[LOG] Computing n2_to_4 for num 335
[LOG] Computing n3_to_4 for num 335
[LOG] Global feature for num 335
[LOG] Global feature for num 335
[LOG] Saving tensor x_0_335.pt
[LOG] Saving tensor x_1_335.pt
[LOG] Saving tensor x_2_335.pt
[LOG] Saving tensor x_3_335.pt
[LOG] Saving tensor x_4_335.pt
[LOG] Saving tensor n0_to_0_335.pt
[LOG] Saving tensor n1_to_1_335.pt
[LOG] Saving tensor n2_to_2_335.pt
[LOG] Saving tensor n3_to_3_335.pt
[LOG] Saving tensor n4_to_4_335.pt
[LOG] Saving tensor n0_to_1_335.pt
[LOG] Saving tensor n0_to_2_335.pt
[LOG] Saving tensor n0_to_3_335.pt
[LOG] Saving tensor n0_to_4_335.pt
[LOG] Saving tensor n1_to_2_335.pt
[LOG] Saving tensor n1_to_3_335.pt
[LOG] Saving tensor n1_to_4_335.pt
[LOG] Saving tensor n2_to_3_335.pt
[LOG] Saving tensor n2_to_4_335.pt
[LOG] Saving tensor n3_to_4_335.pt
[LOG] Saving tensor global_feature_335.pt
[LOG] Process 41: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3074 Tetrahedra.
    [LOG] Generated 74 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.45945945945946
    [LOG] Max number of nodes per cluster is 127 and the number is 58
[LOG] We will select 1021 edges and 3074 tetra
[LOG] Edges from tetra 0 and KDTree 4537 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 32: Created combinatorial complex for file data_260.hdf5
[LOG] Calculating for cell ranks 1 and 3
[LOG] Process 32: Calculating Neighbors
[LOG] Loading pickle file data_260.pickle
[LOG] Processing node features for num 260
[LOG] Processing edge features for num 260
[LOG] Processing tetra features for num 260
[LOG] Processing cluster features for num 260
[LOG] Calculating for cell ranks 1 and 4
[LOG] Processing cluster features for num 260
[LOG] Processing adjacency and incidence matrices for num 260
[LOG] Computing n0_to_0 for num 260
[LOG] Computing n1_to_1 for num 260
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n2_to_2 (adjacency) for num 260
[LOG] Computing n3_to_3 (adjacency) for num 260
[LOG] Computing n4_to_4 (coadjacency) for num 260
[LOG] Computing n0_to_1 for num 260
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_2 for num 260
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n0_to_3 for num 260
[LOG] Computing n0_to_4 for num 260
[LOG] Computing n1_to_2 for num 260
[LOG] Computing n1_to_3 for num 260
[LOG] Computing n1_to_4 for num 260
[LOG] Computing n2_to_3 for num 260
[LOG] Computing n2_to_4 for num 260
[LOG] Computing n3_to_4 for num 260
[LOG] Global feature for num 260
[LOG] Global feature for num 260
[LOG] Saving tensor x_0_260.pt
[LOG] Saving tensor x_1_260.pt
[LOG] Saving tensor x_2_260.pt
[LOG] Saving tensor x_3_260.pt
[LOG] Saving tensor x_4_260.pt
[LOG] Saving tensor n0_to_0_260.pt
[LOG] Saving tensor n1_to_1_260.pt
[LOG] Saving tensor n2_to_2_260.pt
[LOG] Saving tensor n3_to_3_260.pt
[LOG] Saving tensor n4_to_4_260.pt
[LOG] Saving tensor n0_to_1_260.pt
[LOG] Saving tensor n0_to_2_260.pt
[LOG] Saving tensor n0_to_3_260.pt
[LOG] Saving tensor n0_to_4_260.pt
[LOG] Saving tensor n1_to_2_260.pt
[LOG] Saving tensor n1_to_3_260.pt
[LOG] Saving tensor n1_to_4_260.pt
[LOG] Saving tensor n2_to_3_260.pt
[LOG] Saving tensor n2_to_4_260.pt
[LOG] Saving tensor n3_to_4_260.pt
[LOG] Saving tensor global_feature_260.pt
[LOG] Process 32: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2569 Tetrahedra.
    [LOG] Generated 63 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.063492063492063
    [LOG] Max number of nodes per cluster is 49 and the number is 59
[LOG] We will select 482 edges and 2569 tetra
[LOG] Edges from tetra 0 and KDTree 482 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 1 subset clusters.
[LOG] Process 9: Created combinatorial complex for file data_78.hdf5
[LOG] Process 9: Calculating Neighbors
[LOG] Loading pickle file data_78.pickle
[LOG] Processing node features for num 78
[LOG] Processing edge features for num 78
[LOG] Processing tetra features for num 78
[LOG] Processing cluster features for num 78
[LOG] Processing cluster features for num 78
[LOG] Processing adjacency and incidence matrices for num 78
[LOG] Computing n0_to_0 for num 78
[LOG] Computing n1_to_1 for num 78
[LOG] Computing n2_to_2 (adjacency) for num 78
[LOG] Computing n3_to_3 (adjacency) for num 78
[LOG] Computing n4_to_4 (coadjacency) for num 78
[LOG] Computing n0_to_1 for num 78
[LOG] Computing n0_to_2 for num 78
[LOG] Computing n0_to_3 for num 78
[LOG] Computing n0_to_4 for num 78
[LOG] Computing n1_to_2 for num 78
[LOG] Computing n1_to_3 for num 78
[LOG] Computing n1_to_4 for num 78
[LOG] Computing n2_to_3 for num 78
[LOG] Computing n2_to_4 for num 78
[LOG] Computing n3_to_4 for num 78
[LOG] Global feature for num 78
[LOG] Global feature for num 78
[LOG] Saving tensor x_0_78.pt
[LOG] Saving tensor x_1_78.pt
[LOG] Saving tensor x_2_78.pt
[LOG] Saving tensor x_3_78.pt
[LOG] Saving tensor x_4_78.pt
[LOG] Saving tensor n0_to_0_78.pt
[LOG] Saving tensor n1_to_1_78.pt
[LOG] Saving tensor n2_to_2_78.pt
[LOG] Saving tensor n3_to_3_78.pt
[LOG] Saving tensor n4_to_4_78.pt
[LOG] Saving tensor n0_to_1_78.pt
[LOG] Saving tensor n0_to_2_78.pt
[LOG] Saving tensor n0_to_3_78.pt
[LOG] Saving tensor n0_to_4_78.pt
[LOG] Saving tensor n1_to_2_78.pt
[LOG] Saving tensor n1_to_3_78.pt
[LOG] Saving tensor n1_to_4_78.pt
[LOG] Saving tensor n2_to_3_78.pt
[LOG] Saving tensor n2_to_4_78.pt
[LOG] Saving tensor n3_to_4_78.pt
[LOG] Saving tensor global_feature_78.pt
[LOG] Process 9: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 5741 Tetrahedra.
    [LOG] Generated 144 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.722222222222221
    [LOG] Max number of nodes per cluster is 66 and the number is 93
[LOG] Calculating for cell ranks 2 and 4
[LOG] We will select 1752 edges and 5741 tetra
[LOG] Edges from tetra 0 and KDTree 1789 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 87: Created combinatorial complex for file data_699.hdf5
[LOG] Process 87: Calculating Neighbors
[LOG] Loading pickle file data_699.pickle
[LOG] Processing node features for num 699
[LOG] Processing edge features for num 699
[LOG] Processing tetra features for num 699
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing cluster features for num 699
[LOG] Processing cluster features for num 699
[LOG] Processing adjacency and incidence matrices for num 699
[LOG] Computing n0_to_0 for num 699
[LOG] Computing n1_to_1 for num 699
[LOG] GENERATED TETRA
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2046 Tetrahedra.
    [LOG] Generated 43 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.813953488372093
    [LOG] Max number of nodes per cluster is 51 and the number is 4
[LOG] We will select 425 edges and 2046 tetra
[LOG] Edges from tetra 0 and KDTree 624 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.
[LOG] Process 40: Created combinatorial complex for file data_326.hdf5
[LOG] Process 40: Calculating Neighbors
[LOG] Loading pickle file data_326.pickle
[LOG] Processing node features for num 326
[LOG] Processing edge features for num 326
[LOG] Processing tetra features for num 326
[LOG] Processing cluster features for num 326
[LOG] Processing cluster features for num 326
[LOG] Processing adjacency and incidence matrices for num 326
[LOG] Computing n0_to_0 for num 326
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n1_to_1 for num 326
[LOG] Computing n2_to_2 (adjacency) for num 326
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n3_to_3 (adjacency) for num 326
[LOG] Computing n4_to_4 (coadjacency) for num 326
[LOG] Computing n0_to_1 for num 326
[LOG] Computing n0_to_2 for num 326
[LOG] Computing n0_to_3 for num 326
[LOG] Computing n0_to_4 for num 326
[LOG] Computing n1_to_2 for num 326
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n2_to_2 (adjacency) for num 699
[LOG] Computing n1_to_3 for num 326
[LOG] Computing n1_to_4 for num 326
[LOG] Computing n2_to_3 for num 326
[LOG] Computing n2_to_4 for num 326
[LOG] Computing n3_to_4 for num 326
[LOG] Global feature for num 326
[LOG] Global feature for num 326
[LOG] Saving tensor x_0_326.pt
[LOG] Saving tensor x_1_326.pt
[LOG] Saving tensor x_2_326.pt
[LOG] Saving tensor x_3_326.pt
[LOG] Saving tensor x_4_326.pt
[LOG] Saving tensor n0_to_0_326.pt
[LOG] Saving tensor n1_to_1_326.pt
[LOG] Saving tensor n2_to_2_326.pt
[LOG] Saving tensor n3_to_3_326.pt
[LOG] Saving tensor n4_to_4_326.pt
[LOG] Saving tensor n0_to_1_326.pt
[LOG] Saving tensor n0_to_2_326.pt
[LOG] Saving tensor n0_to_3_326.pt
[LOG] Saving tensor n0_to_4_326.pt
[LOG] Saving tensor n1_to_2_326.pt
[LOG] Saving tensor n1_to_3_326.pt
[LOG] Saving tensor n1_to_4_326.pt
[LOG] Saving tensor n2_to_3_326.pt
[LOG] Saving tensor n2_to_4_326.pt
[LOG] Saving tensor n3_to_4_326.pt
[LOG] Saving tensor global_feature_326.pt
[LOG] Process 40: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_3 (adjacency) for num 699
[LOG] Computing n4_to_4 (coadjacency) for num 699
[LOG] Computing n0_to_1 for num 699
[LOG] Computing n0_to_2 for num 699
[LOG] Computing n0_to_3 for num 699
[LOG] Computing n0_to_4 for num 699
[LOG] Computing n1_to_2 for num 699
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_3 for num 699
[LOG] Computing n1_to_4 for num 699
[LOG] Computing n2_to_3 for num 699
[LOG] Computing n2_to_4 for num 699
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n3_to_4 for num 699
[LOG] Global feature for num 699
[LOG] Global feature for num 699
[LOG] Saving tensor x_0_699.pt
[LOG] Saving tensor x_1_699.pt
[LOG] Saving tensor x_2_699.pt
[LOG] Saving tensor x_3_699.pt
[LOG] Saving tensor x_4_699.pt
[LOG] Saving tensor n0_to_0_699.pt
[LOG] Saving tensor n1_to_1_699.pt
[LOG] Saving tensor n2_to_2_699.pt
[LOG] Saving tensor n3_to_3_699.pt
[LOG] Saving tensor n4_to_4_699.pt
[LOG] Saving tensor n0_to_1_699.pt
[LOG] Saving tensor n0_to_2_699.pt
[LOG] Saving tensor n0_to_3_699.pt
[LOG] Saving tensor n0_to_4_699.pt
[LOG] Saving tensor n1_to_2_699.pt
[LOG] Saving tensor n1_to_3_699.pt
[LOG] Saving tensor n1_to_4_699.pt
[LOG] Saving tensor n2_to_3_699.pt
[LOG] Saving tensor n2_to_4_699.pt
[LOG] Saving tensor n3_to_4_699.pt
[LOG] Saving tensor global_feature_699.pt
[LOG] Process 87: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 2995 Tetrahedra.
    [LOG] Generated 113 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.513274336283185
    [LOG] Max number of nodes per cluster is 33 and the number is 33
[LOG] GENERATED TETRA
[LOG] We will select 1305 edges and 2995 tetra
[LOG] Edges from tetra 0 and KDTree 1305 with 0 edges in common.
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 2912 Tetrahedra.
    [LOG] Generated 64 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.625
    [LOG] Max number of nodes per cluster is 49 and the number is 20
[LOG] We will select 1129 edges and 2912 tetra
[LOG] Edges from tetra 0 and KDTree 1129 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 2 subset clusters.
[LOG] Removed 0 subset clusters.
[LOG] Process 98: Created combinatorial complex for file data_790.hdf5
[LOG] Process 27: Created combinatorial complex for file data_218.hdf5
[LOG] Process 98: Calculating Neighbors
[LOG] Loading pickle file data_790.pickle
[LOG] Processing node features for num 790
[LOG] Processing edge features for num 790
[LOG] Processing tetra features for num 790
[LOG] Calculating for cell ranks 2 and 3
[LOG] Processing cluster features for num 790
[LOG] Process 27: Calculating Neighbors
[LOG] Loading pickle file data_218.pickle
[LOG] Processing node features for num 218
[LOG] Processing edge features for num 218
[LOG] Processing cluster features for num 790
[LOG] Processing adjacency and incidence matrices for num 790
[LOG] Computing n0_to_0 for num 790
[LOG] Processing tetra features for num 218
[LOG] Processing cluster features for num 218
[LOG] Processing cluster features for num 218
[LOG] Processing adjacency and incidence matrices for num 218
[LOG] Computing n0_to_0 for num 218
[LOG] Computing n1_to_1 for num 790
[LOG] Computing n1_to_1 for num 218
[LOG] Computing n2_to_2 (adjacency) for num 790
[LOG] Computing n2_to_2 (adjacency) for num 218
[LOG] Computing n3_to_3 (adjacency) for num 790
[LOG] Computing n4_to_4 (coadjacency) for num 790
[LOG] Computing n0_to_1 for num 790
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n3_to_3 (adjacency) for num 218
[LOG] Computing n0_to_2 for num 790
[LOG] Computing n4_to_4 (coadjacency) for num 218
[LOG] Computing n0_to_1 for num 218
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_2 for num 218
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n0_to_3 for num 218
[LOG] Computing n0_to_4 for num 218
[LOG] Computing n1_to_2 for num 218
[LOG] Computing n0_to_3 for num 790
[LOG] Computing n0_to_4 for num 790
[LOG] Computing n1_to_2 for num 790
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_3 for num 790
[LOG] Computing n1_to_4 for num 790
[LOG] Computing n2_to_3 for num 790
[LOG] Computing n1_to_3 for num 218
[LOG] Computing n2_to_4 for num 790
[LOG] Computing n1_to_4 for num 218
[LOG] Computing n2_to_3 for num 218
[LOG] Computing n3_to_4 for num 790
[LOG] Global feature for num 790
[LOG] Global feature for num 790
[LOG] Saving tensor x_0_790.pt
[LOG] Saving tensor x_1_790.pt
[LOG] Saving tensor x_2_790.pt
[LOG] Saving tensor x_3_790.pt
[LOG] Saving tensor x_4_790.pt
[LOG] Saving tensor n0_to_0_790.pt
[LOG] Saving tensor n1_to_1_790.pt
[LOG] Saving tensor n2_to_2_790.pt
[LOG] Saving tensor n3_to_3_790.pt
[LOG] Saving tensor n4_to_4_790.pt
[LOG] Saving tensor n0_to_1_790.pt
[LOG] Saving tensor n0_to_2_790.pt
[LOG] Saving tensor n0_to_3_790.pt
[LOG] Saving tensor n0_to_4_790.pt
[LOG] Saving tensor n1_to_2_790.pt
[LOG] Saving tensor n1_to_3_790.pt
[LOG] Saving tensor n1_to_4_790.pt
[LOG] Computing n2_to_4 for num 218
[LOG] Saving tensor n2_to_3_790.pt
[LOG] Saving tensor n2_to_4_790.pt
[LOG] Saving tensor n3_to_4_790.pt
[LOG] Saving tensor global_feature_790.pt
[LOG] Process 98: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n3_to_4 for num 218
[LOG] Global feature for num 218
[LOG] Global feature for num 218
[LOG] Saving tensor x_0_218.pt
[LOG] Saving tensor x_1_218.pt
[LOG] Saving tensor x_2_218.pt
[LOG] Saving tensor x_3_218.pt
[LOG] Saving tensor x_4_218.pt
[LOG] Saving tensor n0_to_0_218.pt
[LOG] Saving tensor n1_to_1_218.pt
[LOG] Saving tensor n2_to_2_218.pt
[LOG] Saving tensor n3_to_3_218.pt
[LOG] Saving tensor n4_to_4_218.pt
[LOG] Saving tensor n0_to_1_218.pt
[LOG] Saving tensor n0_to_2_218.pt
[LOG] Saving tensor n0_to_3_218.pt
[LOG] Saving tensor n0_to_4_218.pt
[LOG] Saving tensor n1_to_2_218.pt
[LOG] Saving tensor n1_to_3_218.pt
[LOG] Saving tensor n1_to_4_218.pt
[LOG] Saving tensor n2_to_3_218.pt
[LOG] Saving tensor n2_to_4_218.pt
[LOG] Saving tensor n3_to_4_218.pt
[LOG] Saving tensor global_feature_218.pt
[LOG] Process 27: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 3762 Tetrahedra.
    [LOG] Generated 92 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.33695652173913
    [LOG] Max number of nodes per cluster is 85 and the number is 58
[LOG] Calculating for cell ranks 2 and 4
[LOG] We will select 551 edges and 3762 tetra
[LOG] Edges from tetra 0 and KDTree 551 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Removed 2 subset clusters.
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2569 Tetrahedra.
    [LOG] Generated 62 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.370967741935484
    [LOG] Max number of nodes per cluster is 75 and the number is 60
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Process 121: Created combinatorial complex for file data_953.hdf5
[LOG] Calculating for cell ranks 0 and 4
[LOG] We will select 482 edges and 2569 tetra
[LOG] Edges from tetra 0 and KDTree 3490 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 1
[LOG] Process 121: Calculating Neighbors
[LOG] Loading pickle file data_953.pickle
[LOG] Processing node features for num 953
[LOG] Processing edge features for num 953
[LOG] Processing tetra features for num 953
[LOG] Processing cluster features for num 953
[LOG] Processing cluster features for num 953
[LOG] Processing adjacency and incidence matrices for num 953
[LOG] Computing n0_to_0 for num 953
[LOG] Computing n1_to_1 for num 953
[LOG] Removed 0 subset clusters.
[LOG] Process 9: Created combinatorial complex for file data_79.hdf5
[LOG] Computing n2_to_2 (adjacency) for num 953
[LOG] Process 9: Calculating Neighbors
[LOG] Loading pickle file data_79.pickle
[LOG] Processing node features for num 79
[LOG] Processing edge features for num 79
[LOG] Calculating for cell ranks 1 and 1
[LOG] Processing tetra features for num 79
[LOG] Processing cluster features for num 79
[LOG] Processing cluster features for num 79
[LOG] Processing adjacency and incidence matrices for num 79
[LOG] Computing n0_to_0 for num 79
[LOG] Computing n1_to_1 for num 79
[LOG] Computing n2_to_2 (adjacency) for num 79
[LOG] Computing n3_to_3 (adjacency) for num 953
[LOG] Computing n4_to_4 (coadjacency) for num 953
[LOG] Computing n0_to_1 for num 953
[LOG] Computing n0_to_2 for num 953
[LOG] Computing n3_to_3 (adjacency) for num 79
[LOG] Computing n4_to_4 (coadjacency) for num 79
[LOG] Computing n0_to_1 for num 79
[LOG] Computing n0_to_2 for num 79
[LOG] Computing n0_to_3 for num 953
[LOG] Computing n0_to_4 for num 953
[LOG] Computing n1_to_2 for num 953
[LOG] Computing n1_to_3 for num 953
[LOG] Computing n1_to_4 for num 953
[LOG] Computing n2_to_3 for num 953
[LOG] Computing n0_to_3 for num 79
[LOG] Computing n0_to_4 for num 79
[LOG] Computing n2_to_4 for num 953
[LOG] Computing n1_to_2 for num 79
[LOG] Computing n3_to_4 for num 953
[LOG] Global feature for num 953
[LOG] Global feature for num 953
[LOG] Saving tensor x_0_953.pt
[LOG] Saving tensor x_1_953.pt
[LOG] Saving tensor x_2_953.pt
[LOG] Saving tensor x_3_953.pt
[LOG] Saving tensor x_4_953.pt
[LOG] Saving tensor n0_to_0_953.pt
[LOG] Saving tensor n1_to_1_953.pt
[LOG] Saving tensor n2_to_2_953.pt
[LOG] Saving tensor n3_to_3_953.pt
[LOG] Saving tensor n4_to_4_953.pt
[LOG] Saving tensor n0_to_1_953.pt
[LOG] Saving tensor n0_to_2_953.pt
[LOG] Saving tensor n0_to_3_953.pt
[LOG] Saving tensor n0_to_4_953.pt
[LOG] Saving tensor n1_to_2_953.pt
[LOG] Saving tensor n1_to_3_953.pt
[LOG] Saving tensor n1_to_4_953.pt
[LOG] Saving tensor n2_to_3_953.pt
[LOG] Saving tensor n2_to_4_953.pt
[LOG] Saving tensor n3_to_4_953.pt
[LOG] Saving tensor global_feature_953.pt
[LOG] Process 121: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 2
[LOG] Computing n1_to_3 for num 79
[LOG] Computing n1_to_4 for num 79
[LOG] Computing n2_to_3 for num 79
[LOG] Computing n2_to_4 for num 79
[LOG] Computing n3_to_4 for num 79
[LOG] Global feature for num 79
[LOG] Global feature for num 79
[LOG] Saving tensor x_0_79.pt
[LOG] Saving tensor x_1_79.pt
[LOG] Saving tensor x_2_79.pt
[LOG] Saving tensor x_3_79.pt
[LOG] Saving tensor x_4_79.pt
[LOG] Saving tensor n0_to_0_79.pt
[LOG] Saving tensor n1_to_1_79.pt
[LOG] Saving tensor n2_to_2_79.pt
[LOG] Saving tensor n3_to_3_79.pt
[LOG] Saving tensor n4_to_4_79.pt
[LOG] Saving tensor n0_to_1_79.pt
[LOG] Saving tensor n0_to_2_79.pt
[LOG] Saving tensor n0_to_3_79.pt
[LOG] Saving tensor n0_to_4_79.pt
[LOG] Saving tensor n1_to_2_79.pt
[LOG] Saving tensor n1_to_3_79.pt
[LOG] Saving tensor n1_to_4_79.pt
[LOG] Saving tensor n2_to_3_79.pt
[LOG] Saving tensor n2_to_4_79.pt
[LOG] Saving tensor n3_to_4_79.pt
[LOG] Saving tensor global_feature_79.pt
[LOG] Process 9: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2046 Tetrahedra.
    [LOG] Generated 43 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 19.372093023255815
    [LOG] Max number of nodes per cluster is 101 and the number is 11
[LOG] We will select 425 edges and 2046 tetra
[LOG] Edges from tetra 0 and KDTree 3672 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 0 subset clusters.
[LOG] Process 40: Created combinatorial complex for file data_327.hdf5
[LOG] Process 40: Calculating Neighbors
[LOG] Loading pickle file data_327.pickle
[LOG] Processing node features for num 327
[LOG] Processing edge features for num 327
[LOG] Processing tetra features for num 327
[LOG] Processing cluster features for num 327
[LOG] Processing cluster features for num 327
[LOG] Processing adjacency and incidence matrices for num 327
[LOG] Computing n0_to_0 for num 327
[LOG] Computing n1_to_1 for num 327
[LOG] Computing n2_to_2 (adjacency) for num 327
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n3_to_3 (adjacency) for num 327
[LOG] Computing n4_to_4 (coadjacency) for num 327
[LOG] Computing n0_to_1 for num 327
[LOG] Computing n0_to_2 for num 327
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_3 for num 327
[LOG] Computing n0_to_4 for num 327
[LOG] Computing n1_to_2 for num 327
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_3 for num 327
[LOG] Computing n1_to_4 for num 327
[LOG] Computing n2_to_3 for num 327
[LOG] Computing n2_to_4 for num 327
[LOG] Computing n3_to_4 for num 327
[LOG] Global feature for num 327
[LOG] Global feature for num 327
[LOG] Saving tensor x_0_327.pt
[LOG] Saving tensor x_1_327.pt
[LOG] Saving tensor x_2_327.pt
[LOG] Saving tensor x_3_327.pt
[LOG] Saving tensor x_4_327.pt
[LOG] Saving tensor n0_to_0_327.pt
[LOG] Saving tensor n1_to_1_327.pt
[LOG] Saving tensor n2_to_2_327.pt
[LOG] Saving tensor n3_to_3_327.pt
[LOG] Saving tensor n4_to_4_327.pt
[LOG] Saving tensor n0_to_1_327.pt
[LOG] Saving tensor n0_to_2_327.pt
[LOG] Saving tensor n0_to_3_327.pt
[LOG] Saving tensor n0_to_4_327.pt
[LOG] Saving tensor n1_to_2_327.pt
[LOG] Saving tensor n1_to_3_327.pt
[LOG] Saving tensor n1_to_4_327.pt
[LOG] Saving tensor n2_to_3_327.pt
[LOG] Saving tensor n2_to_4_327.pt
[LOG] Saving tensor n3_to_4_327.pt
[LOG] Saving tensor global_feature_327.pt
[LOG] Process 40: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2995 Tetrahedra.
    [LOG] Generated 54 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 20.5
    [LOG] Max number of nodes per cluster is 184 and the number is 40
[LOG] We will select 1305 edges and 2995 tetra
[LOG] Edges from tetra 0 and KDTree 5408 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Removed 1 subset clusters.
[LOG] Process 27: Created combinatorial complex for file data_219.hdf5
[LOG] Process 27: Calculating Neighbors
[LOG] Loading pickle file data_219.pickle
[LOG] Processing node features for num 219
[LOG] Processing edge features for num 219
[LOG] Processing tetra features for num 219
[LOG] Processing cluster features for num 219
[LOG] Processing cluster features for num 219
[LOG] Processing adjacency and incidence matrices for num 219
[LOG] Computing n0_to_0 for num 219
[LOG] Computing n1_to_1 for num 219
[LOG] Computing n2_to_2 (adjacency) for num 219
[LOG] Computing n3_to_3 (adjacency) for num 219
[LOG] Computing n4_to_4 (coadjacency) for num 219
[LOG] Computing n0_to_1 for num 219
[LOG] Computing n0_to_2 for num 219
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n0_to_3 for num 219
[LOG] Computing n0_to_4 for num 219
[LOG] Computing n1_to_2 for num 219
[LOG] Computing n1_to_3 for num 219
[LOG] Computing n1_to_4 for num 219
[LOG] Computing n2_to_3 for num 219
[LOG] Computing n2_to_4 for num 219
[LOG] Computing n3_to_4 for num 219
[LOG] Global feature for num 219
[LOG] Global feature for num 219
[LOG] Saving tensor x_0_219.pt
[LOG] Saving tensor x_1_219.pt
[LOG] Saving tensor x_2_219.pt
[LOG] Saving tensor x_3_219.pt
[LOG] Saving tensor x_4_219.pt
[LOG] Saving tensor n0_to_0_219.pt
[LOG] Saving tensor n1_to_1_219.pt
[LOG] Saving tensor n2_to_2_219.pt
[LOG] Saving tensor n3_to_3_219.pt
[LOG] Saving tensor n4_to_4_219.pt
[LOG] Saving tensor n0_to_1_219.pt
[LOG] Saving tensor n0_to_2_219.pt
[LOG] Saving tensor n0_to_3_219.pt
[LOG] Saving tensor n0_to_4_219.pt
[LOG] Saving tensor n1_to_2_219.pt
[LOG] Saving tensor n1_to_3_219.pt
[LOG] Saving tensor n1_to_4_219.pt
[LOG] Saving tensor n2_to_3_219.pt
[LOG] Saving tensor n2_to_4_219.pt
[LOG] Saving tensor n3_to_4_219.pt
[LOG] Saving tensor global_feature_219.pt
[LOG] Process 27: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1975 Tetrahedra.
    [LOG] Generated 47 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.085106382978722
    [LOG] Max number of nodes per cluster is 60 and the number is 27
[LOG] We will select 686 edges and 1975 tetra
[LOG] Edges from tetra 0 and KDTree 3280 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Process 68: Created combinatorial complex for file data_548.hdf5
[LOG] Process 68: Calculating Neighbors
[LOG] Loading pickle file data_548.pickle
[LOG] Processing node features for num 548
[LOG] Processing edge features for num 548
[LOG] Processing tetra features for num 548
[LOG] Processing cluster features for num 548
[LOG] Processing cluster features for num 548
[LOG] Processing adjacency and incidence matrices for num 548
[LOG] Computing n0_to_0 for num 548
[LOG] Computing n1_to_1 for num 548
[LOG] Computing n2_to_2 (adjacency) for num 548
[LOG] Computing n3_to_3 (adjacency) for num 548
[LOG] Computing n4_to_4 (coadjacency) for num 548
[LOG] Computing n0_to_1 for num 548
[LOG] Computing n0_to_2 for num 548
[LOG] Computing n0_to_3 for num 548
[LOG] Computing n0_to_4 for num 548
[LOG] Computing n1_to_2 for num 548
[LOG] Computing n1_to_3 for num 548
[LOG] Computing n1_to_4 for num 548
[LOG] Computing n2_to_3 for num 548
[LOG] Computing n2_to_4 for num 548
[LOG] Computing n3_to_4 for num 548
[LOG] Global feature for num 548
[LOG] Global feature for num 548
[LOG] Saving tensor x_0_548.pt
[LOG] Saving tensor x_1_548.pt
[LOG] Saving tensor x_2_548.pt
[LOG] Saving tensor x_3_548.pt
[LOG] Saving tensor x_4_548.pt
[LOG] Saving tensor n0_to_0_548.pt
[LOG] Saving tensor n1_to_1_548.pt
[LOG] Saving tensor n2_to_2_548.pt
[LOG] Saving tensor n3_to_3_548.pt
[LOG] Saving tensor n4_to_4_548.pt
[LOG] Saving tensor n0_to_1_548.pt
[LOG] Saving tensor n0_to_2_548.pt
[LOG] Saving tensor n0_to_3_548.pt
[LOG] Saving tensor n0_to_4_548.pt
[LOG] Saving tensor n1_to_2_548.pt
[LOG] Saving tensor n1_to_3_548.pt
[LOG] Saving tensor n1_to_4_548.pt
[LOG] Saving tensor n2_to_3_548.pt
[LOG] Saving tensor n2_to_4_548.pt
[LOG] Saving tensor n3_to_4_548.pt
[LOG] Saving tensor global_feature_548.pt
[LOG] Process 68: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 1983 Tetrahedra.
    [LOG] Generated 55 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.581818181818182
    [LOG] Max number of nodes per cluster is 49 and the number is 18
[LOG] We will select 217 edges and 1983 tetra
[LOG] Edges from tetra 0 and KDTree 217 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Process 98: Created combinatorial complex for file data_791.hdf5
[LOG] Process 98: Calculating Neighbors
[LOG] Loading pickle file data_791.pickle
[LOG] Processing node features for num 791
[LOG] Processing edge features for num 791
[LOG] Processing tetra features for num 791
[LOG] Processing cluster features for num 791
[LOG] Processing cluster features for num 791
[LOG] Processing adjacency and incidence matrices for num 791
[LOG] Computing n0_to_0 for num 791
[LOG] Computing n1_to_1 for num 791
[LOG] Computing n2_to_2 (adjacency) for num 791
[LOG] Computing n3_to_3 (adjacency) for num 791
[LOG] Computing n4_to_4 (coadjacency) for num 791
[LOG] Computing n0_to_1 for num 791
[LOG] Computing n0_to_2 for num 791
[LOG] Computing n0_to_3 for num 791
[LOG] Computing n0_to_4 for num 791
[LOG] Computing n1_to_2 for num 791
[LOG] Computing n1_to_3 for num 791
[LOG] Computing n1_to_4 for num 791
[LOG] Computing n2_to_3 for num 791
[LOG] Computing n2_to_4 for num 791
[LOG] Computing n3_to_4 for num 791
[LOG] Global feature for num 791
[LOG] Global feature for num 791
[LOG] Saving tensor x_0_791.pt
[LOG] Saving tensor x_1_791.pt
[LOG] Saving tensor x_2_791.pt
[LOG] Saving tensor x_3_791.pt
[LOG] Saving tensor x_4_791.pt
[LOG] Saving tensor n0_to_0_791.pt
[LOG] Saving tensor n1_to_1_791.pt
[LOG] Saving tensor n2_to_2_791.pt
[LOG] Saving tensor n3_to_3_791.pt
[LOG] Saving tensor n4_to_4_791.pt
[LOG] Saving tensor n0_to_1_791.pt
[LOG] Saving tensor n0_to_2_791.pt
[LOG] Saving tensor n0_to_3_791.pt
[LOG] Saving tensor n0_to_4_791.pt
[LOG] Saving tensor n1_to_2_791.pt
[LOG] Saving tensor n1_to_3_791.pt
[LOG] Saving tensor n1_to_4_791.pt
[LOG] Saving tensor n2_to_3_791.pt
[LOG] Saving tensor n2_to_4_791.pt
[LOG] Saving tensor n3_to_4_791.pt
[LOG] Saving tensor global_feature_791.pt
[LOG] Process 98: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1117 Tetrahedra.
    [LOG] Generated 44 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.909090909090908
    [LOG] Max number of nodes per cluster is 30 and the number is 7
[LOG] We will select 551 edges and 1117 tetra
[LOG] Edges from tetra 0 and KDTree 817 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Process 121: Created combinatorial complex for file data_954.hdf5
[LOG] Process 121: Calculating Neighbors
[LOG] Loading pickle file data_954.pickle
[LOG] Processing node features for num 954
[LOG] Processing edge features for num 954
[LOG] Processing tetra features for num 954
[LOG] Processing cluster features for num 954
[LOG] Processing cluster features for num 954
[LOG] Processing adjacency and incidence matrices for num 954
[LOG] Computing n0_to_0 for num 954
[LOG] Computing n1_to_1 for num 954
[LOG] Computing n2_to_2 (adjacency) for num 954
[LOG] Computing n3_to_3 (adjacency) for num 954
[LOG] Computing n4_to_4 (coadjacency) for num 954
[LOG] Computing n0_to_1 for num 954
[LOG] Computing n0_to_2 for num 954
[LOG] Computing n0_to_3 for num 954
[LOG] Computing n0_to_4 for num 954
[LOG] Computing n1_to_2 for num 954
[LOG] Computing n1_to_3 for num 954
[LOG] Computing n1_to_4 for num 954
[LOG] Computing n2_to_3 for num 954
[LOG] Computing n2_to_4 for num 954
[LOG] Computing n3_to_4 for num 954
[LOG] Global feature for num 954
[LOG] Global feature for num 954
[LOG] Saving tensor x_0_954.pt
[LOG] Saving tensor x_1_954.pt
[LOG] Saving tensor x_2_954.pt
[LOG] Saving tensor x_3_954.pt
[LOG] Saving tensor x_4_954.pt
[LOG] Saving tensor n0_to_0_954.pt
[LOG] Saving tensor n1_to_1_954.pt
[LOG] Saving tensor n2_to_2_954.pt
[LOG] Saving tensor n3_to_3_954.pt
[LOG] Saving tensor n4_to_4_954.pt
[LOG] Saving tensor n0_to_1_954.pt
[LOG] Saving tensor n0_to_2_954.pt
[LOG] Saving tensor n0_to_3_954.pt
[LOG] Saving tensor n0_to_4_954.pt
[LOG] Saving tensor n1_to_2_954.pt
[LOG] Saving tensor n1_to_3_954.pt
[LOG] Saving tensor n1_to_4_954.pt
[LOG] Saving tensor n2_to_3_954.pt
[LOG] Saving tensor n2_to_4_954.pt
[LOG] Saving tensor n3_to_4_954.pt
[LOG] Saving tensor global_feature_954.pt
[LOG] Process 121: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1761 Tetrahedra.
    [LOG] Generated 34 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 18.41176470588235
    [LOG] Max number of nodes per cluster is 105 and the number is 32
[LOG] We will select 761 edges and 1761 tetra
[LOG] Edges from tetra 0 and KDTree 941 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Process 4: Created combinatorial complex for file data_36.hdf5
[LOG] GENERATED TETRA
[LOG] Process 4: Calculating Neighbors
[LOG] Loading pickle file data_36.pickle
[LOG] Processing node features for num 36
[LOG] Processing edge features for num 36
[LOG] Processing tetra features for num 36
[LOG] Processing cluster features for num 36
[LOG] Processing cluster features for num 36
[LOG] Processing adjacency and incidence matrices for num 36
[LOG] Computing n0_to_0 for num 36
[LOG] Computing n1_to_1 for num 36
[LOG] Computing n2_to_2 (adjacency) for num 36
[LOG] Computing n3_to_3 (adjacency) for num 36
[LOG] Computing n4_to_4 (coadjacency) for num 36
[LOG] Computing n0_to_1 for num 36
[LOG] Computing n0_to_2 for num 36
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 4277 Tetrahedra.
    [LOG] Generated 112 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.526785714285714
    [LOG] Max number of nodes per cluster is 48 and the number is 104
[LOG] Computing n0_to_3 for num 36
[LOG] Computing n0_to_4 for num 36
[LOG] Computing n1_to_2 for num 36
[LOG] We will select 1172 edges and 4277 tetra
[LOG] Edges from tetra 0 and KDTree 1172 with 0 edges in common.
[LOG] Computing n1_to_3 for num 36
[LOG] Computing n1_to_4 for num 36
[LOG] Computing n2_to_3 for num 36
[LOG] Computing n2_to_4 for num 36
[LOG] Computing n3_to_4 for num 36
[LOG] Global feature for num 36
[LOG] Global feature for num 36
[LOG] Saving tensor x_0_36.pt
[LOG] Saving tensor x_1_36.pt
[LOG] Saving tensor x_2_36.pt
[LOG] Saving tensor x_3_36.pt
[LOG] Saving tensor x_4_36.pt
[LOG] Saving tensor n0_to_0_36.pt
[LOG] Saving tensor n1_to_1_36.pt
[LOG] Saving tensor n2_to_2_36.pt
[LOG] Saving tensor n3_to_3_36.pt
[LOG] Saving tensor n4_to_4_36.pt
[LOG] Saving tensor n0_to_1_36.pt
[LOG] Saving tensor n0_to_2_36.pt
[LOG] Saving tensor n0_to_3_36.pt
[LOG] Saving tensor n0_to_4_36.pt
[LOG] Saving tensor n1_to_2_36.pt
[LOG] Saving tensor n1_to_3_36.pt
[LOG] Saving tensor n1_to_4_36.pt
[LOG] Saving tensor n2_to_3_36.pt
[LOG] Saving tensor n2_to_4_36.pt
[LOG] Saving tensor n3_to_4_36.pt
[LOG] Saving tensor global_feature_36.pt
[LOG] Process 4: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 1 subset clusters.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Process 87: Created combinatorial complex for file data_700.hdf5
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 87: Calculating Neighbors
[LOG] Loading pickle file data_700.pickle
[LOG] Processing node features for num 700
[LOG] Processing edge features for num 700
[LOG] Processing tetra features for num 700
[LOG] Processing cluster features for num 700
[LOG] Processing cluster features for num 700
[LOG] Processing adjacency and incidence matrices for num 700
[LOG] Computing n0_to_0 for num 700
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_1 for num 700
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_2 (adjacency) for num 700
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n3_to_3 (adjacency) for num 700
[LOG] Computing n4_to_4 (coadjacency) for num 700
[LOG] Computing n0_to_1 for num 700
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Computing n0_to_2 for num 700
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n0_to_3 for num 700
[LOG] Computing n0_to_4 for num 700
[LOG] Computing n1_to_2 for num 700
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n1_to_3 for num 700
[LOG] Computing n1_to_4 for num 700
[LOG] Computing n2_to_3 for num 700
[LOG] Computing n2_to_4 for num 700
[LOG] Computing n3_to_4 for num 700
[LOG] Global feature for num 700
[LOG] Global feature for num 700
[LOG] Saving tensor x_0_700.pt
[LOG] Saving tensor x_1_700.pt
[LOG] Saving tensor x_2_700.pt
[LOG] Saving tensor x_3_700.pt
[LOG] Saving tensor x_4_700.pt
[LOG] Saving tensor n0_to_0_700.pt
[LOG] Saving tensor n1_to_1_700.pt
[LOG] Saving tensor n2_to_2_700.pt
[LOG] Saving tensor n3_to_3_700.pt
[LOG] Saving tensor n4_to_4_700.pt
[LOG] Saving tensor n0_to_1_700.pt
[LOG] Saving tensor n0_to_2_700.pt
[LOG] Saving tensor n0_to_3_700.pt
[LOG] Saving tensor n0_to_4_700.pt
[LOG] Saving tensor n1_to_2_700.pt
[LOG] Saving tensor n1_to_3_700.pt
[LOG] Saving tensor n1_to_4_700.pt
[LOG] Saving tensor n2_to_3_700.pt
[LOG] Saving tensor n2_to_4_700.pt
[LOG] Saving tensor n3_to_4_700.pt
[LOG] Saving tensor global_feature_700.pt
[LOG] Process 87: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1117 Tetrahedra.
    [LOG] Generated 38 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 18.92105263157895
    [LOG] Max number of nodes per cluster is 66 and the number is 32
[LOG] We will select 551 edges and 1117 tetra
[LOG] Edges from tetra 0 and KDTree 5072 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Process 121: Created combinatorial complex for file data_955.hdf5
[LOG] Process 121: Calculating Neighbors
[LOG] Loading pickle file data_955.pickle
[LOG] Processing node features for num 955
[LOG] Processing edge features for num 955
[LOG] Processing tetra features for num 955
[LOG] Processing cluster features for num 955
[LOG] Processing cluster features for num 955
[LOG] Processing adjacency and incidence matrices for num 955
[LOG] Computing n0_to_0 for num 955
[LOG] Computing n1_to_1 for num 955
[LOG] Computing n2_to_2 (adjacency) for num 955
[LOG] Computing n3_to_3 (adjacency) for num 955
[LOG] Computing n4_to_4 (coadjacency) for num 955
[LOG] Computing n0_to_1 for num 955
[LOG] Computing n0_to_2 for num 955
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n0_to_3 for num 955
[LOG] Computing n0_to_4 for num 955
[LOG] Computing n1_to_2 for num 955
[LOG] Computing n1_to_3 for num 955
[LOG] Computing n1_to_4 for num 955
[LOG] Computing n2_to_3 for num 955
[LOG] Computing n2_to_4 for num 955
[LOG] Computing n3_to_4 for num 955
[LOG] Global feature for num 955
[LOG] Global feature for num 955
[LOG] Saving tensor x_0_955.pt
[LOG] Saving tensor x_1_955.pt
[LOG] Saving tensor x_2_955.pt
[LOG] Saving tensor x_3_955.pt
[LOG] Saving tensor x_4_955.pt
[LOG] Saving tensor n0_to_0_955.pt
[LOG] Saving tensor n1_to_1_955.pt
[LOG] Saving tensor n2_to_2_955.pt
[LOG] Saving tensor n3_to_3_955.pt
[LOG] Saving tensor n4_to_4_955.pt
[LOG] Saving tensor n0_to_1_955.pt
[LOG] Saving tensor n0_to_2_955.pt
[LOG] Saving tensor n0_to_3_955.pt
[LOG] Saving tensor n0_to_4_955.pt
[LOG] Saving tensor n1_to_2_955.pt
[LOG] Saving tensor n1_to_3_955.pt
[LOG] Saving tensor n1_to_4_955.pt
[LOG] Saving tensor n2_to_3_955.pt
[LOG] Saving tensor n2_to_4_955.pt
[LOG] Saving tensor n3_to_4_955.pt
[LOG] Saving tensor global_feature_955.pt
[LOG] Process 121: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1183 Tetrahedra.
    [LOG] Generated 29 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.655172413793103
    [LOG] Max number of nodes per cluster is 50 and the number is 18
[LOG] We will select 180 edges and 1183 tetra
[LOG] Edges from tetra 0 and KDTree 180 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Process 49: Created combinatorial complex for file data_394.hdf5
[LOG] Process 49: Calculating Neighbors
[LOG] Loading pickle file data_394.pickle
[LOG] Processing node features for num 394
[LOG] Processing edge features for num 394
[LOG] Processing tetra features for num 394
[LOG] Processing cluster features for num 394
[LOG] Processing cluster features for num 394
[LOG] Processing adjacency and incidence matrices for num 394
[LOG] Computing n0_to_0 for num 394
[LOG] Computing n1_to_1 for num 394
[LOG] Computing n2_to_2 (adjacency) for num 394
[LOG] Computing n3_to_3 (adjacency) for num 394
[LOG] Computing n4_to_4 (coadjacency) for num 394
[LOG] Computing n0_to_1 for num 394
[LOG] Computing n0_to_2 for num 394
[LOG] Computing n0_to_3 for num 394
[LOG] Computing n0_to_4 for num 394
[LOG] Computing n1_to_2 for num 394
[LOG] Computing n1_to_3 for num 394
[LOG] Computing n1_to_4 for num 394
[LOG] Computing n2_to_3 for num 394
[LOG] Computing n2_to_4 for num 394
[LOG] Computing n3_to_4 for num 394
[LOG] Global feature for num 394
[LOG] Global feature for num 394
[LOG] Saving tensor x_0_394.pt
[LOG] Saving tensor x_1_394.pt
[LOG] Saving tensor x_2_394.pt
[LOG] Saving tensor x_3_394.pt
[LOG] Saving tensor x_4_394.pt
[LOG] Saving tensor n0_to_0_394.pt
[LOG] Saving tensor n1_to_1_394.pt
[LOG] Saving tensor n2_to_2_394.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Saving tensor n3_to_3_394.pt
[LOG] Saving tensor n4_to_4_394.pt
[LOG] Saving tensor n0_to_1_394.pt
[LOG] Saving tensor n0_to_2_394.pt
[LOG] Saving tensor n0_to_3_394.pt
[LOG] Saving tensor n0_to_4_394.pt
[LOG] Saving tensor n1_to_2_394.pt
[LOG] Saving tensor n1_to_3_394.pt
[LOG] Saving tensor n1_to_4_394.pt
[LOG] Saving tensor n2_to_3_394.pt
[LOG] Saving tensor n2_to_4_394.pt
[LOG] Saving tensor n3_to_4_394.pt
[LOG] Saving tensor global_feature_394.pt
[LOG] Process 49: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 3074 Tetrahedra.
    [LOG] Generated 71 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.746478873239436
    [LOG] Max number of nodes per cluster is 49 and the number is 68
[LOG] We will select 1021 edges and 3074 tetra
[LOG] Edges from tetra 0 and KDTree 1327 with 0 edges in common.
[LOG] Removed 2 subset clusters.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 32: Created combinatorial complex for file data_261.hdf5
[LOG] Process 32: Calculating Neighbors
[LOG] Loading pickle file data_261.pickle
[LOG] Processing node features for num 261
[LOG] Processing edge features for num 261
[LOG] Processing tetra features for num 261
[LOG] Processing cluster features for num 261
[LOG] Processing cluster features for num 261
[LOG] Processing adjacency and incidence matrices for num 261
[LOG] Computing n0_to_0 for num 261
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_1 for num 261
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1975 Tetrahedra.
    [LOG] Generated 61 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.836065573770492
    [LOG] Max number of nodes per cluster is 52 and the number is 22
[LOG] We will select 655 edges and 1975 tetra
[LOG] Edges from tetra 0 and KDTree 655 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_2 (adjacency) for num 261
[LOG] Removed 0 subset clusters.
[LOG] Process 68: Created combinatorial complex for file data_549.hdf5
[LOG] Computing n3_to_3 (adjacency) for num 261
[LOG] Computing n4_to_4 (coadjacency) for num 261
[LOG] Computing n0_to_1 for num 261
[LOG] Process 68: Calculating Neighbors
[LOG] Loading pickle file data_549.pickle
[LOG] Processing node features for num 549
[LOG] Processing edge features for num 549
[LOG] Processing tetra features for num 549
[LOG] Processing cluster features for num 549
[LOG] Processing cluster features for num 549
[LOG] Processing adjacency and incidence matrices for num 549
[LOG] Computing n0_to_0 for num 549
[LOG] Computing n0_to_2 for num 261
[LOG] Computing n1_to_1 for num 549
[LOG] Computing n2_to_2 (adjacency) for num 549
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Computing n3_to_3 (adjacency) for num 549
[LOG] Computing n4_to_4 (coadjacency) for num 549
[LOG] Computing n0_to_1 for num 549
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n0_to_3 for num 261
[LOG] Computing n0_to_2 for num 549
[LOG] Calculating for cell ranks 3 and 3
[LOG] Computing n0_to_4 for num 261
[LOG] Computing n1_to_2 for num 261
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Computing n0_to_3 for num 549
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Computing n0_to_4 for num 549
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Computing n1_to_2 for num 549
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Computing n1_to_3 for num 549
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Computing n1_to_4 for num 549
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Computing n2_to_3 for num 549
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Computing n1_to_3 for num 261
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Computing n2_to_4 for num 549
[LOG] Computing n1_to_4 for num 261
[LOG] Computing n2_to_3 for num 261
[LOG] Computing n3_to_4 for num 549
[LOG] Global feature for num 549
[LOG] Global feature for num 549
[LOG] Saving tensor x_0_549.pt
[LOG] Computing n2_to_4 for num 261
[LOG] Saving tensor x_1_549.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Computing n3_to_4 for num 261
[LOG] Global feature for num 261
[LOG] Global feature for num 261
[LOG] Saving tensor x_0_261.pt
[LOG] Saving tensor x_2_549.pt
[LOG] Saving tensor x_1_261.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor x_2_261.pt
[LOG] Saving tensor x_3_549.pt
[LOG] Saving tensor x_3_261.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor x_4_261.pt
[LOG] Saving tensor x_4_549.pt
[LOG] Saving tensor n0_to_0_549.pt
[LOG] Saving tensor n0_to_0_261.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor n1_to_1_261.pt
[LOG] Saving tensor n1_to_1_549.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor n2_to_2_261.pt
[LOG] Saving tensor n2_to_2_549.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor n3_to_3_549.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor n3_to_3_261.pt
[LOG] Saving tensor n4_to_4_261.pt
[LOG] Saving tensor n4_to_4_549.pt
[LOG] Saving tensor n0_to_1_261.pt
[LOG] Saving tensor n0_to_1_549.pt
[LOG] Saving tensor n0_to_2_261.pt
[LOG] Saving tensor n0_to_2_549.pt
[LOG] Saving tensor n0_to_3_261.pt
[LOG] Saving tensor n0_to_3_549.pt
[LOG] Saving tensor n0_to_4_261.pt
[LOG] Saving tensor n0_to_4_549.pt
[LOG] Saving tensor n1_to_2_261.pt
[LOG] Saving tensor n1_to_2_549.pt
[LOG] Saving tensor n1_to_3_261.pt
[LOG] Saving tensor n1_to_3_549.pt
[LOG] Saving tensor n1_to_4_261.pt
[LOG] Saving tensor n1_to_4_549.pt
[LOG] Saving tensor n2_to_3_261.pt
[LOG] Saving tensor n2_to_3_549.pt
[LOG] Saving tensor n2_to_4_261.pt
[LOG] Saving tensor n2_to_4_549.pt
[LOG] Saving tensor n3_to_4_261.pt
[LOG] Saving tensor n3_to_4_549.pt
[LOG] Saving tensor global_feature_261.pt
[LOG] Saving tensor global_feature_549.pt
[LOG] Process 32: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Process 68: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1117 Tetrahedra.
    [LOG] Generated 27 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.851851851851851
    [LOG] Max number of nodes per cluster is 58 and the number is 25
[LOG] We will select 370 edges and 1117 tetra
[LOG] Edges from tetra 0 and KDTree 370 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Process 121: Created combinatorial complex for file data_956.hdf5
[LOG] Process 121: Calculating Neighbors
[LOG] Loading pickle file data_956.pickle
[LOG] Processing node features for num 956
[LOG] Processing edge features for num 956
[LOG] Processing tetra features for num 956
[LOG] Processing cluster features for num 956
[LOG] Processing cluster features for num 956
[LOG] Processing adjacency and incidence matrices for num 956
[LOG] Computing n0_to_0 for num 956
[LOG] Computing n1_to_1 for num 956
[LOG] Computing n2_to_2 (adjacency) for num 956
[LOG] Computing n3_to_3 (adjacency) for num 956
[LOG] Computing n4_to_4 (coadjacency) for num 956
[LOG] Computing n0_to_1 for num 956
[LOG] Computing n0_to_2 for num 956
[LOG] Computing n0_to_3 for num 956
[LOG] Computing n0_to_4 for num 956
[LOG] Computing n1_to_2 for num 956
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n1_to_3 for num 956
[LOG] Computing n1_to_4 for num 956
[LOG] Computing n2_to_3 for num 956
[LOG] Computing n2_to_4 for num 956
[LOG] Computing n3_to_4 for num 956
[LOG] Global feature for num 956
[LOG] Global feature for num 956
[LOG] Saving tensor x_0_956.pt
[LOG] Saving tensor x_1_956.pt
[LOG] Saving tensor x_2_956.pt
[LOG] Saving tensor x_3_956.pt
[LOG] Saving tensor x_4_956.pt
[LOG] Saving tensor n0_to_0_956.pt
[LOG] Saving tensor n1_to_1_956.pt
[LOG] Saving tensor n2_to_2_956.pt
[LOG] Saving tensor n3_to_3_956.pt
[LOG] Saving tensor n4_to_4_956.pt
[LOG] Saving tensor n0_to_1_956.pt
[LOG] Saving tensor n0_to_2_956.pt
[LOG] Saving tensor n0_to_3_956.pt
[LOG] Saving tensor n0_to_4_956.pt
[LOG] Saving tensor n1_to_2_956.pt
[LOG] Saving tensor n1_to_3_956.pt
[LOG] Saving tensor n1_to_4_956.pt
[LOG] Saving tensor n2_to_3_956.pt
[LOG] Saving tensor n2_to_4_956.pt
[LOG] Saving tensor n3_to_4_956.pt
[LOG] Saving tensor global_feature_956.pt
[LOG] Process 121: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 2415 Tetrahedra.
    [LOG] Generated 63 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.476190476190476
    [LOG] Max number of nodes per cluster is 46 and the number is 22
[LOG] We will select 563 edges and 2415 tetra
[LOG] Edges from tetra 0 and KDTree 563 with 0 edges in common.
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1183 Tetrahedra.
    [LOG] Generated 32 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.09375
    [LOG] Max number of nodes per cluster is 38 and the number is 30
[LOG] We will select 180 edges and 1183 tetra
[LOG] Edges from tetra 0 and KDTree 2073 with 0 edges in common.
[LOG] Process 87: Created combinatorial complex for file data_701.hdf5
[LOG] Process 87: Calculating Neighbors
[LOG] Loading pickle file data_701.pickle
[LOG] Processing node features for num 701
[LOG] Processing edge features for num 701
[LOG] Processing tetra features for num 701
[LOG] Processing cluster features for num 701
[LOG] Removed 0 subset clusters.
[LOG] Processing cluster features for num 701
[LOG] Processing adjacency and incidence matrices for num 701
[LOG] Computing n0_to_0 for num 701
[LOG] Computing n1_to_1 for num 701
[LOG] Process 49: Created combinatorial complex for file data_395.hdf5
[LOG] Process 49: Calculating Neighbors
[LOG] Loading pickle file data_395.pickle
[LOG] Processing node features for num 395
[LOG] Processing edge features for num 395
[LOG] Processing tetra features for num 395
[LOG] Processing cluster features for num 395
[LOG] Processing cluster features for num 395
[LOG] Processing adjacency and incidence matrices for num 395
[LOG] Computing n0_to_0 for num 395
[LOG] Computing n1_to_1 for num 395
[LOG] Computing n2_to_2 (adjacency) for num 395
[LOG] Computing n2_to_2 (adjacency) for num 701
[LOG] Computing n3_to_3 (adjacency) for num 395
[LOG] Computing n4_to_4 (coadjacency) for num 395
[LOG] Computing n0_to_1 for num 395
[LOG] Computing n0_to_2 for num 395
[LOG] Computing n3_to_3 (adjacency) for num 701
[LOG] Computing n4_to_4 (coadjacency) for num 701
[LOG] Computing n0_to_1 for num 701
[LOG] Computing n0_to_2 for num 701
[LOG] Computing n0_to_3 for num 395
[LOG] Computing n0_to_4 for num 395
[LOG] Computing n1_to_2 for num 395
[LOG] Computing n1_to_3 for num 395
[LOG] Computing n1_to_4 for num 395
[LOG] Computing n2_to_3 for num 395
[LOG] Computing n2_to_4 for num 395
[LOG] Computing n3_to_4 for num 395
[LOG] Global feature for num 395
[LOG] Global feature for num 395
[LOG] Saving tensor x_0_395.pt
[LOG] Saving tensor x_1_395.pt
[LOG] Saving tensor x_2_395.pt
[LOG] Saving tensor x_3_395.pt
[LOG] Saving tensor x_4_395.pt
[LOG] Saving tensor n0_to_0_395.pt
[LOG] Saving tensor n1_to_1_395.pt
[LOG] Saving tensor n2_to_2_395.pt
[LOG] Saving tensor n3_to_3_395.pt
[LOG] Saving tensor n4_to_4_395.pt
[LOG] Saving tensor n0_to_1_395.pt
[LOG] Saving tensor n0_to_2_395.pt
[LOG] Saving tensor n0_to_3_395.pt
[LOG] Saving tensor n0_to_4_395.pt
[LOG] Saving tensor n1_to_2_395.pt
[LOG] Saving tensor n1_to_3_395.pt
[LOG] Saving tensor n1_to_4_395.pt
[LOG] Saving tensor n2_to_3_395.pt
[LOG] Saving tensor n2_to_4_395.pt
[LOG] Saving tensor n3_to_4_395.pt
[LOG] Saving tensor global_feature_395.pt
[LOG] Process 49: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n0_to_3 for num 701
[LOG] Computing n0_to_4 for num 701
[LOG] Computing n1_to_2 for num 701
[LOG] Computing n1_to_3 for num 701
[LOG] Computing n1_to_4 for num 701
[LOG] Computing n2_to_3 for num 701
[LOG] Computing n2_to_4 for num 701
[LOG] Computing n3_to_4 for num 701
[LOG] Global feature for num 701
[LOG] Global feature for num 701
[LOG] Saving tensor x_0_701.pt
[LOG] Saving tensor x_1_701.pt
[LOG] Saving tensor x_2_701.pt
[LOG] Saving tensor x_3_701.pt
[LOG] Saving tensor x_4_701.pt
[LOG] Saving tensor n0_to_0_701.pt
[LOG] Saving tensor n1_to_1_701.pt
[LOG] Saving tensor n2_to_2_701.pt
[LOG] Saving tensor n3_to_3_701.pt
[LOG] Saving tensor n4_to_4_701.pt
[LOG] Saving tensor n0_to_1_701.pt
[LOG] Saving tensor n0_to_2_701.pt
[LOG] Saving tensor n0_to_3_701.pt
[LOG] Saving tensor n0_to_4_701.pt
[LOG] Saving tensor n1_to_2_701.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Saving tensor n1_to_3_701.pt
[LOG] Saving tensor n1_to_4_701.pt
[LOG] Saving tensor n2_to_3_701.pt
[LOG] Saving tensor n2_to_4_701.pt
[LOG] Saving tensor n3_to_4_701.pt
[LOG] Saving tensor global_feature_701.pt
[LOG] Process 87: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] GENERATED TETRA
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1441 Tetrahedra.
    [LOG] Generated 43 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.627906976744185
    [LOG] Max number of nodes per cluster is 23 and the number is 37
[LOG] We will select 321 edges and 1441 tetra
[LOG] Edges from tetra 0 and KDTree 321 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 0 subset clusters.
[LOG] Calculating for cell ranks 2 and 2
[LOG] Process 68: Created combinatorial complex for file data_550.hdf5
[LOG] Process 68: Calculating Neighbors
[LOG] Loading pickle file data_550.pickle
[LOG] Processing node features for num 550
[LOG] Processing edge features for num 550
[LOG] Processing tetra features for num 550
[LOG] Processing cluster features for num 550
[LOG] Processing cluster features for num 550
[LOG] Processing adjacency and incidence matrices for num 550
[LOG] Computing n0_to_0 for num 550
[LOG] Computing n1_to_1 for num 550
[LOG] Computing n2_to_2 (adjacency) for num 550
[LOG] Computing n3_to_3 (adjacency) for num 550
[LOG] Computing n4_to_4 (coadjacency) for num 550
[LOG] Computing n0_to_1 for num 550
[LOG] Computing n0_to_2 for num 550
[LOG] Computing n0_to_3 for num 550
[LOG] Computing n0_to_4 for num 550
[LOG] Computing n1_to_2 for num 550
[LOG] Computing n1_to_3 for num 550
[LOG] Computing n1_to_4 for num 550
[LOG] Computing n2_to_3 for num 550
[LOG] Computing n2_to_4 for num 550
[LOG] Computing n3_to_4 for num 550
[LOG] Global feature for num 550
[LOG] Global feature for num 550
[LOG] Saving tensor x_0_550.pt
[LOG] Saving tensor x_1_550.pt
[LOG] Saving tensor x_2_550.pt
[LOG] Saving tensor x_3_550.pt
[LOG] Saving tensor x_4_550.pt
[LOG] Saving tensor n0_to_0_550.pt
[LOG] Saving tensor n1_to_1_550.pt
[LOG] Saving tensor n2_to_2_550.pt
[LOG] Saving tensor n3_to_3_550.pt
[LOG] Saving tensor n4_to_4_550.pt
[LOG] Saving tensor n0_to_1_550.pt
[LOG] Saving tensor n0_to_2_550.pt
[LOG] Saving tensor n0_to_3_550.pt
[LOG] Saving tensor n0_to_4_550.pt
[LOG] Saving tensor n1_to_2_550.pt
[LOG] Saving tensor n1_to_3_550.pt
[LOG] Saving tensor n1_to_4_550.pt
[LOG] Saving tensor n2_to_3_550.pt
[LOG] Saving tensor n2_to_4_550.pt
[LOG] Saving tensor n3_to_4_550.pt
[LOG] Saving tensor global_feature_550.pt
[LOG] Process 68: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1117 Tetrahedra.
    [LOG] Generated 29 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.20689655172414
    [LOG] Max number of nodes per cluster is 54 and the number is 25
[LOG] We will select 370 edges and 1117 tetra
[LOG] Edges from tetra 0 and KDTree 1409 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Process 121: Created combinatorial complex for file data_957.hdf5
[LOG] Process 121: Calculating Neighbors
[LOG] Loading pickle file data_957.pickle
[LOG] Processing node features for num 957
[LOG] Processing edge features for num 957
[LOG] Processing tetra features for num 957
[LOG] Processing cluster features for num 957
[LOG] Processing cluster features for num 957
[LOG] Processing adjacency and incidence matrices for num 957
[LOG] Computing n0_to_0 for num 957
[LOG] Computing n1_to_1 for num 957
[LOG] Computing n2_to_2 (adjacency) for num 957
[LOG] Computing n3_to_3 (adjacency) for num 957
[LOG] Computing n4_to_4 (coadjacency) for num 957
[LOG] Computing n0_to_1 for num 957
[LOG] Computing n0_to_2 for num 957
[LOG] Computing n0_to_3 for num 957
[LOG] Computing n0_to_4 for num 957
[LOG] Computing n1_to_2 for num 957
[LOG] Computing n1_to_3 for num 957
[LOG] Computing n1_to_4 for num 957
[LOG] Computing n2_to_3 for num 957
[LOG] Computing n2_to_4 for num 957
[LOG] Computing n3_to_4 for num 957
[LOG] Global feature for num 957
[LOG] Global feature for num 957
[LOG] Saving tensor x_0_957.pt
[LOG] Saving tensor x_1_957.pt
[LOG] Saving tensor x_2_957.pt
[LOG] Saving tensor x_3_957.pt
[LOG] Saving tensor x_4_957.pt
[LOG] Saving tensor n0_to_0_957.pt
[LOG] Saving tensor n1_to_1_957.pt
[LOG] Saving tensor n2_to_2_957.pt
[LOG] Saving tensor n3_to_3_957.pt
[LOG] Saving tensor n4_to_4_957.pt
[LOG] Saving tensor n0_to_1_957.pt
[LOG] Saving tensor n0_to_2_957.pt
[LOG] Saving tensor n0_to_3_957.pt
[LOG] Saving tensor n0_to_4_957.pt
[LOG] Saving tensor n1_to_2_957.pt
[LOG] Saving tensor n1_to_3_957.pt
[LOG] Saving tensor n1_to_4_957.pt
[LOG] Saving tensor n2_to_3_957.pt
[LOG] Saving tensor n2_to_4_957.pt
[LOG] Saving tensor n3_to_4_957.pt
[LOG] Saving tensor global_feature_957.pt
[LOG] Process 121: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1441 Tetrahedra.
    [LOG] Generated 58 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.275862068965518
    [LOG] Max number of nodes per cluster is 36 and the number is 33
[LOG] We will select 321 edges and 1441 tetra
[LOG] Edges from tetra 0 and KDTree 2327 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 0 subset clusters.
[LOG] Process 68: Created combinatorial complex for file data_551.hdf5
[LOG] Process 68: Calculating Neighbors
[LOG] Loading pickle file data_551.pickle
[LOG] Processing node features for num 551
[LOG] Processing edge features for num 551
[LOG] Processing tetra features for num 551
[LOG] Processing cluster features for num 551
[LOG] Processing cluster features for num 551
[LOG] Processing adjacency and incidence matrices for num 551
[LOG] Computing n0_to_0 for num 551
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n1_to_1 for num 551
[LOG] Computing n2_to_2 (adjacency) for num 551
[LOG] Computing n3_to_3 (adjacency) for num 551
[LOG] Computing n4_to_4 (coadjacency) for num 551
[LOG] Computing n0_to_1 for num 551
[LOG] Computing n0_to_2 for num 551
[LOG] Computing n0_to_3 for num 551
[LOG] Computing n0_to_4 for num 551
[LOG] Computing n1_to_2 for num 551
[LOG] Computing n1_to_3 for num 551
[LOG] Computing n1_to_4 for num 551
[LOG] Computing n2_to_3 for num 551
[LOG] Computing n2_to_4 for num 551
[LOG] Computing n3_to_4 for num 551
[LOG] Global feature for num 551
[LOG] Global feature for num 551
[LOG] Saving tensor x_0_551.pt
[LOG] Saving tensor x_1_551.pt
[LOG] Saving tensor x_2_551.pt
[LOG] Saving tensor x_3_551.pt
[LOG] Saving tensor x_4_551.pt
[LOG] Saving tensor n0_to_0_551.pt
[LOG] Saving tensor n1_to_1_551.pt
[LOG] Saving tensor n2_to_2_551.pt
[LOG] Saving tensor n3_to_3_551.pt
[LOG] Saving tensor n4_to_4_551.pt
[LOG] Saving tensor n0_to_1_551.pt
[LOG] Saving tensor n0_to_2_551.pt
[LOG] Saving tensor n0_to_3_551.pt
[LOG] Saving tensor n0_to_4_551.pt
[LOG] Saving tensor n1_to_2_551.pt
[LOG] Saving tensor n1_to_3_551.pt
[LOG] Saving tensor n1_to_4_551.pt
[LOG] Saving tensor n2_to_3_551.pt
[LOG] Saving tensor n2_to_4_551.pt
[LOG] Saving tensor n3_to_4_551.pt
[LOG] Saving tensor global_feature_551.pt
[LOG] Process 68: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2415 Tetrahedra.
    [LOG] Generated 60 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.316666666666666
    [LOG] Max number of nodes per cluster is 49 and the number is 33
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] We will select 563 edges and 2415 tetra
[LOG] Calculating for cell ranks 1 and 1
[LOG] Edges from tetra 0 and KDTree 791 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.
[LOG] Process 87: Created combinatorial complex for file data_702.hdf5
[LOG] Process 87: Calculating Neighbors
[LOG] Loading pickle file data_702.pickle
[LOG] Processing node features for num 702
[LOG] Processing edge features for num 702
[LOG] Processing tetra features for num 702
[LOG] Processing cluster features for num 702
[LOG] Processing cluster features for num 702
[LOG] Calculating for cell ranks 1 and 3
[LOG] Processing adjacency and incidence matrices for num 702
[LOG] Computing n0_to_0 for num 702
[LOG] Computing n1_to_1 for num 702
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Computing n2_to_2 (adjacency) for num 702
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Calculating for cell ranks 2 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n3_to_3 (adjacency) for num 702
[LOG] Computing n4_to_4 (coadjacency) for num 702
[LOG] Computing n0_to_1 for num 702
[LOG] Computing n0_to_2 for num 702
[LOG] Computing n0_to_3 for num 702
[LOG] Computing n0_to_4 for num 702
[LOG] Computing n1_to_2 for num 702
[LOG] Computing n1_to_3 for num 702
[LOG] Computing n1_to_4 for num 702
[LOG] Computing n2_to_3 for num 702
[LOG] Computing n2_to_4 for num 702
[LOG] Computing n3_to_4 for num 702
[LOG] Global feature for num 702
[LOG] Global feature for num 702
[LOG] Saving tensor x_0_702.pt
[LOG] Saving tensor x_1_702.pt
[LOG] Saving tensor x_2_702.pt
[LOG] Saving tensor x_3_702.pt
[LOG] Saving tensor x_4_702.pt
[LOG] Saving tensor n0_to_0_702.pt
[LOG] Saving tensor n1_to_1_702.pt
[LOG] Saving tensor n2_to_2_702.pt
[LOG] Saving tensor n3_to_3_702.pt
[LOG] Saving tensor n4_to_4_702.pt
[LOG] Saving tensor n0_to_1_702.pt
[LOG] Saving tensor n0_to_2_702.pt
[LOG] Saving tensor n0_to_3_702.pt
[LOG] Saving tensor n0_to_4_702.pt
[LOG] Saving tensor n1_to_2_702.pt
[LOG] Saving tensor n1_to_3_702.pt
[LOG] Saving tensor n1_to_4_702.pt
[LOG] Saving tensor n2_to_3_702.pt
[LOG] Saving tensor n2_to_4_702.pt
[LOG] Saving tensor n3_to_4_702.pt
[LOG] Saving tensor global_feature_702.pt
[LOG] Process 87: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 1
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 3074 Tetrahedra.
    [LOG] Generated 74 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.378378378378379
    [LOG] Max number of nodes per cluster is 43 and the number is 72
[LOG] We will select 1021 edges and 3074 tetra
[LOG] Edges from tetra 0 and KDTree 1073 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 0 subset clusters.
[LOG] Process 32: Created combinatorial complex for file data_262.hdf5
[LOG] Process 32: Calculating Neighbors
[LOG] Loading pickle file data_262.pickle
[LOG] Processing node features for num 262
[LOG] Processing edge features for num 262
[LOG] Processing tetra features for num 262
[LOG] Processing cluster features for num 262
[LOG] Processing cluster features for num 262
[LOG] Processing adjacency and incidence matrices for num 262
[LOG] Computing n0_to_0 for num 262
[LOG] Computing n1_to_1 for num 262
[LOG] Computing n2_to_2 (adjacency) for num 262
[LOG] Computing n3_to_3 (adjacency) for num 262
[LOG] Computing n4_to_4 (coadjacency) for num 262
[LOG] Computing n0_to_1 for num 262
[LOG] Computing n0_to_2 for num 262
[LOG] Computing n0_to_3 for num 262
[LOG] Computing n0_to_4 for num 262
[LOG] Computing n1_to_2 for num 262
[LOG] Calculating for cell ranks 0 and 3
[LOG] Computing n1_to_3 for num 262
[LOG] Computing n1_to_4 for num 262
[LOG] Computing n2_to_3 for num 262
[LOG] Computing n2_to_4 for num 262
[LOG] Computing n3_to_4 for num 262
[LOG] Global feature for num 262
[LOG] Global feature for num 262
[LOG] Saving tensor x_0_262.pt
[LOG] Saving tensor x_1_262.pt
[LOG] Saving tensor x_2_262.pt
[LOG] Saving tensor x_3_262.pt
[LOG] Saving tensor x_4_262.pt
[LOG] Saving tensor n0_to_0_262.pt
[LOG] Saving tensor n1_to_1_262.pt
[LOG] Saving tensor n2_to_2_262.pt
[LOG] Saving tensor n3_to_3_262.pt
[LOG] Saving tensor n4_to_4_262.pt
[LOG] Saving tensor n0_to_1_262.pt
[LOG] Saving tensor n0_to_2_262.pt
[LOG] Saving tensor n0_to_3_262.pt
[LOG] Saving tensor n0_to_4_262.pt
[LOG] Saving tensor n1_to_2_262.pt
[LOG] Saving tensor n1_to_3_262.pt
[LOG] Calculating for cell ranks 0 and 4
[LOG] Saving tensor n1_to_4_262.pt
[LOG] Saving tensor n2_to_3_262.pt
[LOG] Saving tensor n2_to_4_262.pt
[LOG] Saving tensor n3_to_4_262.pt
[LOG] Saving tensor global_feature_262.pt
[LOG] Process 32: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 1
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1183 Tetrahedra.
    [LOG] Generated 29 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 21.75862068965517
    [LOG] Max number of nodes per cluster is 126 and the number is 25
[LOG] We will select 180 edges and 1183 tetra
[LOG] Edges from tetra 0 and KDTree 8022 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 4
[LOG] Removed 0 subset clusters.
[LOG] Process 49: Created combinatorial complex for file data_396.hdf5
[LOG] Process 49: Calculating Neighbors
[LOG] Loading pickle file data_396.pickle
[LOG] Processing node features for num 396
[LOG] Processing edge features for num 396
[LOG] Processing tetra features for num 396
[LOG] Processing cluster features for num 396
[LOG] Processing cluster features for num 396
[LOG] Processing adjacency and incidence matrices for num 396
[LOG] Computing n0_to_0 for num 396
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_1 for num 396
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n2_to_2 (adjacency) for num 396
[LOG] Computing n3_to_3 (adjacency) for num 396
[LOG] Computing n4_to_4 (coadjacency) for num 396
[LOG] Computing n0_to_1 for num 396
[LOG] Computing n0_to_2 for num 396
[LOG] Computing n0_to_3 for num 396
[LOG] Computing n0_to_4 for num 396
[LOG] Computing n1_to_2 for num 396
[LOG] Computing n1_to_3 for num 396
[LOG] Computing n1_to_4 for num 396
[LOG] Computing n2_to_3 for num 396
[LOG] Computing n2_to_4 for num 396
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n3_to_4 for num 396
[LOG] Global feature for num 396
[LOG] Global feature for num 396
[LOG] Saving tensor x_0_396.pt
[LOG] Saving tensor x_1_396.pt
[LOG] Saving tensor x_2_396.pt
[LOG] Saving tensor x_3_396.pt
[LOG] Saving tensor x_4_396.pt
[LOG] Saving tensor n0_to_0_396.pt
[LOG] Saving tensor n1_to_1_396.pt
[LOG] Saving tensor n2_to_2_396.pt
[LOG] Saving tensor n3_to_3_396.pt
[LOG] Saving tensor n4_to_4_396.pt
[LOG] Saving tensor n0_to_1_396.pt
[LOG] Saving tensor n0_to_2_396.pt
[LOG] Saving tensor n0_to_3_396.pt
[LOG] Saving tensor n0_to_4_396.pt
[LOG] Saving tensor n1_to_2_396.pt
[LOG] Saving tensor n1_to_3_396.pt
[LOG] Saving tensor n1_to_4_396.pt
[LOG] Saving tensor n2_to_3_396.pt
[LOG] Saving tensor n2_to_4_396.pt
[LOG] Saving tensor n3_to_4_396.pt
[LOG] Saving tensor global_feature_396.pt
[LOG] Process 49: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1761 Tetrahedra.
    [LOG] Generated 49 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.775510204081632
    [LOG] Max number of nodes per cluster is 51 and the number is 37
[LOG] We will select 318 edges and 1761 tetra
[LOG] Edges from tetra 0 and KDTree 318 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 2
[LOG] Removed 0 subset clusters.
[LOG] Process 4: Created combinatorial complex for file data_37.hdf5
[LOG] Process 4: Calculating Neighbors
[LOG] Loading pickle file data_37.pickle
[LOG] Processing node features for num 37
[LOG] Processing edge features for num 37
[LOG] Processing tetra features for num 37
[LOG] Processing cluster features for num 37
[LOG] Processing cluster features for num 37
[LOG] Processing adjacency and incidence matrices for num 37
[LOG] Computing n0_to_0 for num 37
[LOG] Computing n1_to_1 for num 37
[LOG] Computing n2_to_2 (adjacency) for num 37
[LOG] Computing n3_to_3 (adjacency) for num 37
[LOG] Computing n4_to_4 (coadjacency) for num 37
[LOG] Computing n0_to_1 for num 37
[LOG] Computing n0_to_2 for num 37
[LOG] Computing n0_to_3 for num 37
[LOG] Computing n0_to_4 for num 37
[LOG] Computing n1_to_2 for num 37
[LOG] Computing n1_to_3 for num 37
[LOG] Computing n1_to_4 for num 37
[LOG] Computing n2_to_3 for num 37
[LOG] Computing n2_to_4 for num 37
[LOG] Computing n3_to_4 for num 37
[LOG] Global feature for num 37
[LOG] Global feature for num 37
[LOG] Saving tensor x_0_37.pt
[LOG] Saving tensor x_1_37.pt
[LOG] Saving tensor x_2_37.pt
[LOG] Calculating for cell ranks 1 and 3
[LOG] Saving tensor x_3_37.pt
[LOG] Saving tensor x_4_37.pt
[LOG] Saving tensor n0_to_0_37.pt
[LOG] Saving tensor n1_to_1_37.pt
[LOG] Saving tensor n2_to_2_37.pt
[LOG] Saving tensor n3_to_3_37.pt
[LOG] Saving tensor n4_to_4_37.pt
[LOG] Saving tensor n0_to_1_37.pt
[LOG] Saving tensor n0_to_2_37.pt
[LOG] Saving tensor n0_to_3_37.pt
[LOG] Saving tensor n0_to_4_37.pt
[LOG] Saving tensor n1_to_2_37.pt
[LOG] Saving tensor n1_to_3_37.pt
[LOG] Saving tensor n1_to_4_37.pt
[LOG] Saving tensor n2_to_3_37.pt
[LOG] Saving tensor n2_to_4_37.pt
[LOG] Saving tensor n3_to_4_37.pt
[LOG] Saving tensor global_feature_37.pt
[LOG] Process 4: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1761 Tetrahedra.
    [LOG] Generated 47 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.48936170212766
    [LOG] Max number of nodes per cluster is 26 and the number is 21
[LOG] Calculating for cell ranks 2 and 3
[LOG] We will select 318 edges and 1761 tetra
[LOG] Edges from tetra 0 and KDTree 321 with 0 edges in common.
[LOG] Calculating for cell ranks 2 and 3
[LOG] Removed 2 subset clusters.
[LOG] Process 4: Created combinatorial complex for file data_38.hdf5
[LOG] Calculating for cell ranks 2 and 4
[LOG] Process 4: Calculating Neighbors
[LOG] Loading pickle file data_38.pickle
[LOG] Processing node features for num 38
[LOG] Processing edge features for num 38
[LOG] Processing tetra features for num 38
[LOG] Processing cluster features for num 38
[LOG] Processing cluster features for num 38
[LOG] Processing adjacency and incidence matrices for num 38
[LOG] Computing n0_to_0 for num 38
[LOG] Computing n1_to_1 for num 38
[LOG] Computing n2_to_2 (adjacency) for num 38
[LOG] Computing n3_to_3 (adjacency) for num 38
[LOG] Computing n4_to_4 (coadjacency) for num 38
[LOG] Computing n0_to_1 for num 38
[LOG] Computing n0_to_2 for num 38
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n0_to_3 for num 38
[LOG] Computing n0_to_4 for num 38
[LOG] Computing n1_to_2 for num 38
[LOG] Computing n1_to_3 for num 38
[LOG] Computing n1_to_4 for num 38
[LOG] Computing n2_to_3 for num 38
[LOG] Computing n2_to_4 for num 38
[LOG] Computing n3_to_4 for num 38
[LOG] Global feature for num 38
[LOG] Global feature for num 38
[LOG] Saving tensor x_0_38.pt
[LOG] Saving tensor x_1_38.pt
[LOG] Saving tensor x_2_38.pt
[LOG] Saving tensor x_3_38.pt
[LOG] Saving tensor x_4_38.pt
[LOG] Saving tensor n0_to_0_38.pt
[LOG] Saving tensor n1_to_1_38.pt
[LOG] Saving tensor n2_to_2_38.pt
[LOG] Saving tensor n3_to_3_38.pt
[LOG] Saving tensor n4_to_4_38.pt
[LOG] Saving tensor n0_to_1_38.pt
[LOG] Saving tensor n0_to_2_38.pt
[LOG] Saving tensor n0_to_3_38.pt
[LOG] Saving tensor n0_to_4_38.pt
[LOG] Saving tensor n1_to_2_38.pt
[LOG] Saving tensor n1_to_3_38.pt
[LOG] Saving tensor n1_to_4_38.pt
[LOG] Saving tensor n2_to_3_38.pt
[LOG] Saving tensor n2_to_4_38.pt
[LOG] Saving tensor n3_to_4_38.pt
[LOG] Saving tensor global_feature_38.pt
[LOG] Process 4: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 1 and 1
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 3074 Tetrahedra.
    [LOG] Generated 94 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.882978723404255
    [LOG] Max number of nodes per cluster is 29 and the number is 80
[LOG] Calculating for cell ranks 1 and 2
[LOG] We will select 898 edges and 3074 tetra
[LOG] Edges from tetra 0 and KDTree 898 with 0 edges in common.
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] GENERATED TETRA
[LOG] Removed 2 subset clusters.
[LOG] Process 32: Created combinatorial complex for file data_263.hdf5
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2415 Tetrahedra.
    [LOG] Generated 53 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.547169811320753
    [LOG] Max number of nodes per cluster is 75 and the number is 49
[LOG] We will select 563 edges and 2415 tetra
[LOG] Edges from tetra 0 and KDTree 1221 with 0 edges in common.
[LOG] Process 32: Calculating Neighbors
[LOG] Loading pickle file data_263.pickle
[LOG] Processing node features for num 263
[LOG] Processing edge features for num 263
[LOG] Processing tetra features for num 263
[LOG] Processing cluster features for num 263
[LOG] Processing cluster features for num 263
[LOG] Processing adjacency and incidence matrices for num 263
[LOG] Computing n0_to_0 for num 263
[LOG] Computing n1_to_1 for num 263
[LOG] Removed 1 subset clusters.
[LOG] Process 87: Created combinatorial complex for file data_703.hdf5
[LOG] Computing n2_to_2 (adjacency) for num 263
[LOG] Process 87: Calculating Neighbors
[LOG] Loading pickle file data_703.pickle
[LOG] Processing node features for num 703
[LOG] Processing edge features for num 703
[LOG] Processing tetra features for num 703
[LOG] Processing cluster features for num 703
[LOG] Processing cluster features for num 703
[LOG] Processing adjacency and incidence matrices for num 703
[LOG] Computing n0_to_0 for num 703
[LOG] Computing n1_to_1 for num 703
[LOG] Computing n3_to_3 (adjacency) for num 263
[LOG] GENERATED TETRA
[LOG] Computing n4_to_4 (coadjacency) for num 263
[LOG] Computing n0_to_1 for num 263
[LOG] Computing n0_to_2 for num 263
[LOG] Computing n2_to_2 (adjacency) for num 703
[LOG] Computing n3_to_3 (adjacency) for num 703
[LOG] Computing n4_to_4 (coadjacency) for num 703
[LOG] Computing n0_to_1 for num 703
[LOG] Computing n0_to_2 for num 703
[LOG] Computing n0_to_3 for num 263
[LOG] Computing n0_to_4 for num 263
[LOG] Computing n1_to_2 for num 263
[LOG] Computing n0_to_3 for num 703
[LOG] Computing n0_to_4 for num 703
[LOG] Computing n1_to_2 for num 703
[LOG] Computing n1_to_3 for num 263
[LOG] Computing n1_to_4 for num 263
[LOG] Computing n2_to_3 for num 263
[LOG] Computing n2_to_4 for num 263
[LOG] Computing n3_to_4 for num 263
[LOG] Global feature for num 263
[LOG] Global feature for num 263
[LOG] Saving tensor x_0_263.pt
[LOG] Saving tensor x_1_263.pt
[LOG] Saving tensor x_2_263.pt
[LOG] Saving tensor x_3_263.pt
[LOG] Saving tensor x_4_263.pt
[LOG] Saving tensor n0_to_0_263.pt
[LOG] Computing n1_to_3 for num 703
[LOG] Saving tensor n1_to_1_263.pt
[LOG] Saving tensor n2_to_2_263.pt
[LOG] Computing n1_to_4 for num 703
[LOG] Saving tensor n3_to_3_263.pt
[LOG] Saving tensor n4_to_4_263.pt
[LOG] Computing n2_to_3 for num 703
[LOG] Saving tensor n0_to_1_263.pt
[LOG] Saving tensor n0_to_2_263.pt
[LOG] Saving tensor n0_to_3_263.pt
[LOG] Saving tensor n0_to_4_263.pt
[LOG] Saving tensor n1_to_2_263.pt
[LOG] Saving tensor n1_to_3_263.pt
[LOG] Saving tensor n1_to_4_263.pt
[LOG] Saving tensor n2_to_3_263.pt
[LOG] Saving tensor n2_to_4_263.pt
[LOG] Saving tensor n3_to_4_263.pt
[LOG] Saving tensor global_feature_263.pt
[LOG] Computing n2_to_4 for num 703
[LOG] Process 32: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n3_to_4 for num 703
[LOG] Global feature for num 703
[LOG] Global feature for num 703
[LOG] Saving tensor x_0_703.pt
[LOG] Saving tensor x_1_703.pt
[LOG] Saving tensor x_2_703.pt
[LOG] Saving tensor x_3_703.pt
[LOG] Saving tensor x_4_703.pt
[LOG] Saving tensor n0_to_0_703.pt
[LOG] Saving tensor n1_to_1_703.pt
[LOG] Saving tensor n2_to_2_703.pt
[LOG] Saving tensor n3_to_3_703.pt
[LOG] Saving tensor n4_to_4_703.pt
[LOG] Saving tensor n0_to_1_703.pt
[LOG] Saving tensor n0_to_2_703.pt
[LOG] Saving tensor n0_to_3_703.pt
[LOG] Saving tensor n0_to_4_703.pt
[LOG] Saving tensor n1_to_2_703.pt
[LOG] Saving tensor n1_to_3_703.pt
[LOG] Saving tensor n1_to_4_703.pt
[LOG] Saving tensor n2_to_3_703.pt
[LOG] Saving tensor n2_to_4_703.pt
[LOG] Saving tensor n3_to_4_703.pt
[LOG] Saving tensor global_feature_703.pt
[LOG] Process 87: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 7951 Tetrahedra.
    [LOG] Generated 190 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.83157894736842
    [LOG] Max number of nodes per cluster is 63 and the number is 182
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 1
[LOG] We will select 2758 edges and 7951 tetra
[LOG] Edges from tetra 0 and KDTree 2758 with 0 edges in common.
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 2
[LOG] Removed 2 subset clusters.
[LOG] Process 1: Created combinatorial complex for file data_9.hdf5
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Process 1: Calculating Neighbors
[LOG] Loading pickle file data_9.pickle
[LOG] Processing node features for num 9
[LOG] Processing edge features for num 9
[LOG] Processing tetra features for num 9
[LOG] Processing cluster features for num 9
[LOG] Processing cluster features for num 9
[LOG] Processing adjacency and incidence matrices for num 9
[LOG] Computing n0_to_0 for num 9
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Computing n1_to_1 for num 9
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n2_to_2 (adjacency) for num 9
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 1304 Tetrahedra.
    [LOG] Generated 35 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.342857142857143
    [LOG] Max number of nodes per cluster is 33 and the number is 9
[LOG] We will select 161 edges and 1304 tetra
[LOG] Edges from tetra 0 and KDTree 161 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Process 4: Created combinatorial complex for file data_39.hdf5
[LOG] Process 4: Calculating Neighbors
[LOG] Loading pickle file data_39.pickle
[LOG] Processing node features for num 39
[LOG] Processing edge features for num 39
[LOG] Processing tetra features for num 39
[LOG] Processing cluster features for num 39
[LOG] Processing cluster features for num 39
[LOG] Processing adjacency and incidence matrices for num 39
[LOG] Computing n0_to_0 for num 39
[LOG] Computing n1_to_1 for num 39
[LOG] Computing n2_to_2 (adjacency) for num 39
[LOG] Computing n3_to_3 (adjacency) for num 39
[LOG] Computing n4_to_4 (coadjacency) for num 39
[LOG] Computing n0_to_1 for num 39
[LOG] Computing n0_to_2 for num 39
[LOG] Computing n3_to_3 (adjacency) for num 9
[LOG] Computing n4_to_4 (coadjacency) for num 9
[LOG] Computing n0_to_1 for num 9
[LOG] Computing n0_to_3 for num 39
[LOG] Computing n0_to_4 for num 39
[LOG] Computing n1_to_2 for num 39
[LOG] Computing n1_to_3 for num 39
[LOG] Computing n1_to_4 for num 39
[LOG] Computing n2_to_3 for num 39
[LOG] Computing n2_to_4 for num 39
[LOG] Computing n3_to_4 for num 39
[LOG] Global feature for num 39
[LOG] Global feature for num 39
[LOG] Saving tensor x_0_39.pt
[LOG] Saving tensor x_1_39.pt
[LOG] Saving tensor x_2_39.pt
[LOG] Saving tensor x_3_39.pt
[LOG] Saving tensor x_4_39.pt
[LOG] Saving tensor n0_to_0_39.pt
[LOG] Saving tensor n1_to_1_39.pt
[LOG] Saving tensor n2_to_2_39.pt
[LOG] Saving tensor n3_to_3_39.pt
[LOG] Saving tensor n4_to_4_39.pt
[LOG] Saving tensor n0_to_1_39.pt
[LOG] Saving tensor n0_to_2_39.pt
[LOG] Saving tensor n0_to_3_39.pt
[LOG] Saving tensor n0_to_4_39.pt
[LOG] Saving tensor n1_to_2_39.pt
[LOG] Saving tensor n1_to_3_39.pt
[LOG] Saving tensor n1_to_4_39.pt
[LOG] Saving tensor n2_to_3_39.pt
[LOG] Saving tensor n2_to_4_39.pt
[LOG] Saving tensor n3_to_4_39.pt
[LOG] Saving tensor global_feature_39.pt
[LOG] Process 4: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n0_to_2 for num 9
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Computing n0_to_3 for num 9
[LOG] Calculating for cell ranks 1 and 4
[LOG] Computing n0_to_4 for num 9
[LOG] Computing n1_to_2 for num 9
[LOG] Calculating for cell ranks 2 and 2
[LOG] Computing n1_to_3 for num 9
[LOG] Computing n1_to_4 for num 9
[LOG] Computing n2_to_3 for num 9
[LOG] Computing n2_to_4 for num 9
[LOG] Computing n3_to_4 for num 9
[LOG] Global feature for num 9
[LOG] Global feature for num 9
[LOG] Saving tensor x_0_9.pt
[LOG] Saving tensor x_1_9.pt
[LOG] Saving tensor x_2_9.pt
[LOG] Saving tensor x_3_9.pt
[LOG] Saving tensor x_4_9.pt
[LOG] Saving tensor n0_to_0_9.pt
[LOG] Saving tensor n1_to_1_9.pt
[LOG] Saving tensor n2_to_2_9.pt
[LOG] Saving tensor n3_to_3_9.pt
[LOG] Saving tensor n4_to_4_9.pt
[LOG] Saving tensor n0_to_1_9.pt
[LOG] Saving tensor n0_to_2_9.pt
[LOG] Saving tensor n0_to_3_9.pt
[LOG] Saving tensor n0_to_4_9.pt
[LOG] Saving tensor n1_to_2_9.pt
[LOG] Saving tensor n1_to_3_9.pt
[LOG] Saving tensor n1_to_4_9.pt
[LOG] Saving tensor n2_to_3_9.pt
[LOG] Saving tensor n2_to_4_9.pt
[LOG] Saving tensor n3_to_4_9.pt
[LOG] Saving tensor global_feature_9.pt
[LOG] Process 1: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 4
[LOG] GENERATED TETRA
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1183 Tetrahedra.
    [LOG] Generated 42 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.071428571428571
    [LOG] Max number of nodes per cluster is 23 and the number is 24
[LOG] We will select 180 edges and 1183 tetra
[LOG] Edges from tetra 0 and KDTree 584 with 0 edges in common.
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Removed 3 subset clusters.
[LOG] Calculating for cell ranks 4 and 4
[LOG] Process 49: Created combinatorial complex for file data_397.hdf5
[LOG] Process 49: Calculating Neighbors
[LOG] Loading pickle file data_397.pickle
[LOG] Processing node features for num 397
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Processing edge features for num 397
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Processing tetra features for num 397
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Processing cluster features for num 397
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Processing cluster features for num 397
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Processing adjacency and incidence matrices for num 397
[LOG] Computing n0_to_0 for num 397
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Computing n1_to_1 for num 397
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Computing n2_to_2 (adjacency) for num 397
[LOG] Computing n3_to_3 (adjacency) for num 397
[LOG] Computing n4_to_4 (coadjacency) for num 397
[LOG] Computing n0_to_1 for num 397
[LOG] Computing n0_to_2 for num 397
[LOG] Computing n0_to_3 for num 397
[LOG] Computing n0_to_4 for num 397
[LOG] Computing n1_to_2 for num 397
[LOG] Computing n1_to_3 for num 397
[LOG] Computing n1_to_4 for num 397
[LOG] Computing n2_to_3 for num 397
[LOG] Computing n2_to_4 for num 397
[LOG] Computing n3_to_4 for num 397
[LOG] Global feature for num 397
[LOG] Global feature for num 397
[LOG] Saving tensor x_0_397.pt
[LOG] Saving tensor x_1_397.pt
[LOG] Saving tensor x_2_397.pt
[LOG] Saving tensor x_3_397.pt
[LOG] Saving tensor x_4_397.pt
[LOG] Saving tensor n0_to_0_397.pt
[LOG] Saving tensor n1_to_1_397.pt
[LOG] Saving tensor n2_to_2_397.pt
[LOG] Saving tensor n3_to_3_397.pt
[LOG] Saving tensor n4_to_4_397.pt
[LOG] Saving tensor n0_to_1_397.pt
[LOG] Saving tensor n0_to_2_397.pt
[LOG] Saving tensor n0_to_3_397.pt
[LOG] Saving tensor n0_to_4_397.pt
[LOG] Saving tensor n1_to_2_397.pt
[LOG] Saving tensor n1_to_3_397.pt
[LOG] Saving tensor n1_to_4_397.pt
[LOG] Saving tensor n2_to_3_397.pt
[LOG] Saving tensor n2_to_4_397.pt
[LOG] Saving tensor n3_to_4_397.pt
[LOG] Saving tensor global_feature_397.pt
[LOG] Process 49: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 1 and 2
[LOG] GENERATED TETRA
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 1183 Tetrahedra.
    [LOG] Generated 34 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.029411764705882
    [LOG] Max number of nodes per cluster is 45 and the number is 18
[LOG] We will select 180 edges and 1183 tetra
[LOG] Edges from tetra 0 and KDTree 360 with 0 edges in common.
[LOG] Removed 2 subset clusters.
[LOG] Process 49: Created combinatorial complex for file data_398.hdf5
[LOG] Process 49: Calculating Neighbors
[LOG] Loading pickle file data_398.pickle
[LOG] Processing node features for num 398
[LOG] Processing edge features for num 398
[LOG] Processing tetra features for num 398
[LOG] Processing cluster features for num 398
[LOG] Processing cluster features for num 398
[LOG] Processing adjacency and incidence matrices for num 398
[LOG] Computing n0_to_0 for num 398
[LOG] Computing n1_to_1 for num 398
[LOG] Computing n2_to_2 (adjacency) for num 398
[LOG] Computing n3_to_3 (adjacency) for num 398
[LOG] Computing n4_to_4 (coadjacency) for num 398
[LOG] Computing n0_to_1 for num 398
[LOG] Computing n0_to_2 for num 398
[LOG] Computing n0_to_3 for num 398
[LOG] Computing n0_to_4 for num 398
[LOG] Computing n1_to_2 for num 398
[LOG] Computing n1_to_3 for num 398
[LOG] Computing n1_to_4 for num 398
[LOG] Computing n2_to_3 for num 398
[LOG] Computing n2_to_4 for num 398
[LOG] Computing n3_to_4 for num 398
[LOG] Global feature for num 398
[LOG] Global feature for num 398
[LOG] Saving tensor x_0_398.pt
[LOG] Saving tensor x_1_398.pt
[LOG] Saving tensor x_2_398.pt
[LOG] Saving tensor x_3_398.pt
[LOG] Saving tensor x_4_398.pt
[LOG] Saving tensor n0_to_0_398.pt
[LOG] Saving tensor n1_to_1_398.pt
[LOG] Saving tensor n2_to_2_398.pt
[LOG] Saving tensor n3_to_3_398.pt
[LOG] Saving tensor n4_to_4_398.pt
[LOG] Saving tensor n0_to_1_398.pt
[LOG] Saving tensor n0_to_2_398.pt
[LOG] Saving tensor n0_to_3_398.pt
[LOG] Saving tensor n0_to_4_398.pt
[LOG] Saving tensor n1_to_2_398.pt
[LOG] Saving tensor n1_to_3_398.pt
[LOG] Saving tensor n1_to_4_398.pt
[LOG] Saving tensor n2_to_3_398.pt
[LOG] Saving tensor n2_to_4_398.pt
[LOG] Saving tensor n3_to_4_398.pt
[LOG] Saving tensor global_feature_398.pt
[LOG] Process 49: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1183 Tetrahedra.
    [LOG] Generated 37 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 17.54054054054054
    [LOG] Max number of nodes per cluster is 89 and the number is 35
[LOG] We will select 180 edges and 1183 tetra
[LOG] Edges from tetra 0 and KDTree 3737 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Process 49: Created combinatorial complex for file data_399.hdf5
[LOG] Process 49: Calculating Neighbors
[LOG] Loading pickle file data_399.pickle
[LOG] Processing node features for num 399
[LOG] Processing edge features for num 399
[LOG] Processing tetra features for num 399
[LOG] Processing cluster features for num 399
[LOG] Processing cluster features for num 399
[LOG] Processing adjacency and incidence matrices for num 399
[LOG] Computing n0_to_0 for num 399
[LOG] Computing n1_to_1 for num 399
[LOG] Computing n2_to_2 (adjacency) for num 399
[LOG] Computing n3_to_3 (adjacency) for num 399
[LOG] Computing n4_to_4 (coadjacency) for num 399
[LOG] Computing n0_to_1 for num 399
[LOG] Computing n0_to_2 for num 399
[LOG] Computing n0_to_3 for num 399
[LOG] Computing n0_to_4 for num 399
[LOG] Computing n1_to_2 for num 399
[LOG] Computing n1_to_3 for num 399
[LOG] Computing n1_to_4 for num 399
[LOG] Computing n2_to_3 for num 399
[LOG] Computing n2_to_4 for num 399
[LOG] Computing n3_to_4 for num 399
[LOG] Global feature for num 399
[LOG] Global feature for num 399
[LOG] Saving tensor x_0_399.pt
[LOG] Saving tensor x_1_399.pt
[LOG] Saving tensor x_2_399.pt
[LOG] Saving tensor x_3_399.pt
[LOG] Saving tensor x_4_399.pt
[LOG] Saving tensor n0_to_0_399.pt
[LOG] Saving tensor n1_to_1_399.pt
[LOG] Saving tensor n2_to_2_399.pt
[LOG] Saving tensor n3_to_3_399.pt
[LOG] Saving tensor n4_to_4_399.pt
[LOG] Saving tensor n0_to_1_399.pt
[LOG] Saving tensor n0_to_2_399.pt
[LOG] Saving tensor n0_to_3_399.pt
[LOG] Saving tensor n0_to_4_399.pt
[LOG] Saving tensor n1_to_2_399.pt
[LOG] Saving tensor n1_to_3_399.pt
[LOG] Saving tensor n1_to_4_399.pt
[LOG] Saving tensor n2_to_3_399.pt
[LOG] Saving tensor n2_to_4_399.pt
[LOG] Saving tensor n3_to_4_399.pt
[LOG] Saving tensor global_feature_399.pt
[LOG] Process 49: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 7919 Tetrahedra.
    [LOG] Generated 184 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.744565217391305
    [LOG] Max number of nodes per cluster is 99 and the number is 182
[LOG] We will select 2758 edges and 7919 tetra
[LOG] Edges from tetra 0 and KDTree 2921 with 0 edges in common.
[LOG] Removed 1 subset clusters.
[LOG] Process 1: Created combinatorial complex for file data_10.hdf5
[LOG] Process 1: Calculating Neighbors
[LOG] Loading pickle file data_10.pickle
[LOG] Processing node features for num 10
[LOG] Processing edge features for num 10
[LOG] Processing tetra features for num 10
[LOG] Processing cluster features for num 10
[LOG] Processing cluster features for num 10
[LOG] Processing adjacency and incidence matrices for num 10
[LOG] Computing n0_to_0 for num 10
[LOG] Computing n1_to_1 for num 10
[LOG] Computing n2_to_2 (adjacency) for num 10
[LOG] Computing n3_to_3 (adjacency) for num 10
[LOG] Computing n4_to_4 (coadjacency) for num 10
[LOG] Computing n0_to_1 for num 10
[LOG] Computing n0_to_2 for num 10
[LOG] Computing n0_to_3 for num 10
[LOG] Computing n0_to_4 for num 10
[LOG] Computing n1_to_2 for num 10
[LOG] Calculating for cell ranks 2 and 3
[LOG] Computing n1_to_3 for num 10
[LOG] Computing n1_to_4 for num 10
[LOG] Computing n2_to_3 for num 10
[LOG] Calculating for cell ranks 2 and 4
[LOG] Computing n2_to_4 for num 10
[LOG] Computing n3_to_4 for num 10
[LOG] Global feature for num 10
[LOG] Global feature for num 10
[LOG] Saving tensor x_0_10.pt
[LOG] Saving tensor x_1_10.pt
[LOG] Saving tensor x_2_10.pt
[LOG] Saving tensor x_3_10.pt
[LOG] Saving tensor x_4_10.pt
[LOG] Saving tensor n0_to_0_10.pt
[LOG] Saving tensor n1_to_1_10.pt
[LOG] Saving tensor n2_to_2_10.pt
[LOG] Saving tensor n3_to_3_10.pt
[LOG] Saving tensor n4_to_4_10.pt
[LOG] Saving tensor n0_to_1_10.pt
[LOG] Saving tensor n0_to_2_10.pt
[LOG] Saving tensor n0_to_3_10.pt
[LOG] Saving tensor n0_to_4_10.pt
[LOG] Saving tensor n1_to_2_10.pt
[LOG] Saving tensor n1_to_3_10.pt
[LOG] Saving tensor n1_to_4_10.pt
[LOG] Saving tensor n2_to_3_10.pt
[LOG] Saving tensor n2_to_4_10.pt
[LOG] Saving tensor n3_to_4_10.pt
[LOG] Saving tensor global_feature_10.pt
[LOG] Process 1: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 2578 Tetrahedra.
    [LOG] Generated 66 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.818181818181818
    [LOG] Max number of nodes per cluster is 47 and the number is 40
[LOG] We will select 395 edges and 2578 tetra
[LOG] Edges from tetra 0 and KDTree 395 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Process 70: Created combinatorial complex for file data_562.hdf5
[LOG] Process 70: Calculating Neighbors
[LOG] Loading pickle file data_562.pickle
[LOG] Processing node features for num 562
[LOG] Processing edge features for num 562
[LOG] Processing tetra features for num 562
[LOG] Processing cluster features for num 562
[LOG] Processing cluster features for num 562
[LOG] Processing adjacency and incidence matrices for num 562
[LOG] Computing n0_to_0 for num 562
[LOG] Computing n1_to_1 for num 562
[LOG] Computing n2_to_2 (adjacency) for num 562
[LOG] Computing n3_to_3 (adjacency) for num 562
[LOG] Computing n4_to_4 (coadjacency) for num 562
[LOG] Computing n0_to_1 for num 562
[LOG] Computing n0_to_2 for num 562
[LOG] Computing n0_to_3 for num 562
[LOG] Computing n0_to_4 for num 562
[LOG] Computing n1_to_2 for num 562
[LOG] Computing n1_to_3 for num 562
[LOG] Computing n1_to_4 for num 562
[LOG] Computing n2_to_3 for num 562
[LOG] Computing n2_to_4 for num 562
[LOG] Computing n3_to_4 for num 562
[LOG] Global feature for num 562
[LOG] Global feature for num 562
[LOG] Saving tensor x_0_562.pt
[LOG] Saving tensor x_1_562.pt
[LOG] Saving tensor x_2_562.pt
[LOG] Saving tensor x_3_562.pt
[LOG] Saving tensor x_4_562.pt
[LOG] Saving tensor n0_to_0_562.pt
[LOG] Saving tensor n1_to_1_562.pt
[LOG] Saving tensor n2_to_2_562.pt
[LOG] Saving tensor n3_to_3_562.pt
[LOG] Saving tensor n4_to_4_562.pt
[LOG] Saving tensor n0_to_1_562.pt
[LOG] Saving tensor n0_to_2_562.pt
[LOG] Saving tensor n0_to_3_562.pt
[LOG] Saving tensor n0_to_4_562.pt
[LOG] Saving tensor n1_to_2_562.pt
[LOG] Saving tensor n1_to_3_562.pt
[LOG] Saving tensor n1_to_4_562.pt
[LOG] Saving tensor n2_to_3_562.pt
[LOG] Saving tensor n2_to_4_562.pt
[LOG] Saving tensor n3_to_4_562.pt
[LOG] Saving tensor global_feature_562.pt
[LOG] Process 70: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2995 Tetrahedra.
    [LOG] Generated 81 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.679012345679013
    [LOG] Max number of nodes per cluster is 59 and the number is 73
[LOG] We will select 1305 edges and 2995 tetra
[LOG] Edges from tetra 0 and KDTree 2166 with 0 edges in common.
[LOG] Removed 1 subset clusters.
[LOG] Process 27: Created combinatorial complex for file data_220.hdf5
[LOG] Calculating for cell ranks 1 and 2
[LOG] Process 27: Calculating Neighbors
[LOG] Loading pickle file data_220.pickle
[LOG] Processing node features for num 220
[LOG] Processing edge features for num 220
[LOG] Processing tetra features for num 220
[LOG] Processing cluster features for num 220
[LOG] Processing cluster features for num 220
[LOG] Processing adjacency and incidence matrices for num 220
[LOG] Computing n0_to_0 for num 220
[LOG] Computing n1_to_1 for num 220
[LOG] Computing n2_to_2 (adjacency) for num 220
[LOG] Computing n3_to_3 (adjacency) for num 220
[LOG] Computing n4_to_4 (coadjacency) for num 220
[LOG] Computing n0_to_1 for num 220
[LOG] Computing n0_to_2 for num 220
[LOG] Computing n0_to_3 for num 220
[LOG] Computing n0_to_4 for num 220
[LOG] Computing n1_to_2 for num 220
[LOG] Computing n1_to_3 for num 220
[LOG] Computing n1_to_4 for num 220
[LOG] Computing n2_to_3 for num 220
[LOG] Computing n2_to_4 for num 220
[LOG] Computing n3_to_4 for num 220
[LOG] Calculating for cell ranks 1 and 3
[LOG] Global feature for num 220
[LOG] Global feature for num 220
[LOG] Saving tensor x_0_220.pt
[LOG] Saving tensor x_1_220.pt
[LOG] Saving tensor x_2_220.pt
[LOG] Saving tensor x_3_220.pt
[LOG] Saving tensor x_4_220.pt
[LOG] Saving tensor n0_to_0_220.pt
[LOG] Saving tensor n1_to_1_220.pt
[LOG] Saving tensor n2_to_2_220.pt
[LOG] Saving tensor n3_to_3_220.pt
[LOG] Saving tensor n4_to_4_220.pt
[LOG] Saving tensor n0_to_1_220.pt
[LOG] Saving tensor n0_to_2_220.pt
[LOG] Saving tensor n0_to_3_220.pt
[LOG] Saving tensor n0_to_4_220.pt
[LOG] Saving tensor n1_to_2_220.pt
[LOG] Saving tensor n1_to_3_220.pt
[LOG] Saving tensor n1_to_4_220.pt
[LOG] Saving tensor n2_to_3_220.pt
[LOG] Saving tensor n2_to_4_220.pt
[LOG] Saving tensor n3_to_4_220.pt
[LOG] Saving tensor global_feature_220.pt
[LOG] Process 27: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2578 Tetrahedra.
    [LOG] Generated 40 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 23.075
    [LOG] Max number of nodes per cluster is 290 and the number is 34
[LOG] We will select 395 edges and 2578 tetra
[LOG] Edges from tetra 0 and KDTree 15447 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Process 70: Created combinatorial complex for file data_563.hdf5
[LOG] Process 70: Calculating Neighbors
[LOG] Loading pickle file data_563.pickle
[LOG] Processing node features for num 563
[LOG] Processing edge features for num 563
[LOG] Processing tetra features for num 563
[LOG] Processing cluster features for num 563
[LOG] Processing cluster features for num 563
[LOG] Processing adjacency and incidence matrices for num 563
[LOG] Computing n0_to_0 for num 563
[LOG] Computing n1_to_1 for num 563
[LOG] Computing n2_to_2 (adjacency) for num 563
[LOG] Computing n3_to_3 (adjacency) for num 563
[LOG] Computing n4_to_4 (coadjacency) for num 563
[LOG] Computing n0_to_1 for num 563
[LOG] Computing n0_to_2 for num 563
[LOG] Computing n0_to_3 for num 563
[LOG] Computing n0_to_4 for num 563
[LOG] Computing n1_to_2 for num 563
[LOG] Computing n1_to_3 for num 563
[LOG] Computing n1_to_4 for num 563
[LOG] Computing n2_to_3 for num 563
[LOG] Computing n2_to_4 for num 563
[LOG] Computing n3_to_4 for num 563
[LOG] Global feature for num 563
[LOG] Global feature for num 563
[LOG] Saving tensor x_0_563.pt
[LOG] Saving tensor x_1_563.pt
[LOG] Saving tensor x_2_563.pt
[LOG] Saving tensor x_3_563.pt
[LOG] Saving tensor x_4_563.pt
[LOG] Saving tensor n0_to_0_563.pt
[LOG] Saving tensor n1_to_1_563.pt
[LOG] Saving tensor n2_to_2_563.pt
[LOG] Saving tensor n3_to_3_563.pt
[LOG] Saving tensor n4_to_4_563.pt
[LOG] Saving tensor n0_to_1_563.pt
[LOG] Saving tensor n0_to_2_563.pt
[LOG] Saving tensor n0_to_3_563.pt
[LOG] Saving tensor n0_to_4_563.pt
[LOG] Saving tensor n1_to_2_563.pt
[LOG] Saving tensor n1_to_3_563.pt
[LOG] Saving tensor n1_to_4_563.pt
[LOG] Saving tensor n2_to_3_563.pt
[LOG] Saving tensor n2_to_4_563.pt
[LOG] Saving tensor n3_to_4_563.pt
[LOG] Saving tensor global_feature_563.pt
[LOG] Process 70: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2995 Tetrahedra.
    [LOG] Generated 67 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.850746268656717
    [LOG] Max number of nodes per cluster is 136 and the number is 66
[LOG] We will select 1305 edges and 2995 tetra
[LOG] Edges from tetra 0 and KDTree 3480 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Process 27: Created combinatorial complex for file data_221.hdf5
[LOG] Process 27: Calculating Neighbors
[LOG] Loading pickle file data_221.pickle
[LOG] Processing node features for num 221
[LOG] Processing edge features for num 221
[LOG] Processing tetra features for num 221
[LOG] Processing cluster features for num 221
[LOG] Processing cluster features for num 221
[LOG] Processing adjacency and incidence matrices for num 221
[LOG] Computing n0_to_0 for num 221
[LOG] Computing n1_to_1 for num 221
[LOG] Computing n2_to_2 (adjacency) for num 221
[LOG] Computing n3_to_3 (adjacency) for num 221
[LOG] Computing n4_to_4 (coadjacency) for num 221
[LOG] Computing n0_to_1 for num 221
[LOG] Computing n0_to_2 for num 221
[LOG] Computing n0_to_3 for num 221
[LOG] Computing n0_to_4 for num 221
[LOG] Computing n1_to_2 for num 221
[LOG] Computing n1_to_3 for num 221
[LOG] Computing n1_to_4 for num 221
[LOG] Computing n2_to_3 for num 221
[LOG] Computing n2_to_4 for num 221
[LOG] Computing n3_to_4 for num 221
[LOG] Global feature for num 221
[LOG] Global feature for num 221
[LOG] Saving tensor x_0_221.pt
[LOG] Saving tensor x_1_221.pt
[LOG] Saving tensor x_2_221.pt
[LOG] Saving tensor x_3_221.pt
[LOG] Saving tensor x_4_221.pt
[LOG] Saving tensor n0_to_0_221.pt
[LOG] Saving tensor n1_to_1_221.pt
[LOG] Saving tensor n2_to_2_221.pt
[LOG] Saving tensor n3_to_3_221.pt
[LOG] Saving tensor n4_to_4_221.pt
[LOG] Saving tensor n0_to_1_221.pt
[LOG] Saving tensor n0_to_2_221.pt
[LOG] Saving tensor n0_to_3_221.pt
[LOG] Saving tensor n0_to_4_221.pt
[LOG] Saving tensor n1_to_2_221.pt
[LOG] Saving tensor n1_to_3_221.pt
[LOG] Saving tensor n1_to_4_221.pt
[LOG] Saving tensor n2_to_3_221.pt
[LOG] Saving tensor n2_to_4_221.pt
[LOG] Saving tensor n3_to_4_221.pt
[LOG] Saving tensor global_feature_221.pt
[LOG] Process 27: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] GENERATED TETRA
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1431 Tetrahedra.
    [LOG] Generated 31 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 16.483870967741936
    [LOG] Max number of nodes per cluster is 92 and the number is 27
[LOG] We will select 59 edges and 1431 tetra
[LOG] Edges from tetra 0 and KDTree 59 with 0 edges in common.
[LOG] Removed 4 subset clusters.

    [LOG] We Currently have 1779 Tetrahedra.
    [LOG] Generated 37 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.91891891891892
    [LOG] Max number of nodes per cluster is 60 and the number is 33
[LOG] We will select 224 edges and 1779 tetra
[LOG] Edges from tetra 0 and KDTree 224 with 0 edges in common.
[LOG] Removed 1 subset clusters.
[LOG] Process 61: Created combinatorial complex for file data_495.hdf5
[LOG] Process 61: Calculating Neighbors
[LOG] Loading pickle file data_495.pickle
[LOG] Processing node features for num 495
[LOG] Processing edge features for num 495
[LOG] Processing tetra features for num 495
[LOG] Processing cluster features for num 495
[LOG] Processing cluster features for num 495
[LOG] Processing adjacency and incidence matrices for num 495
[LOG] Computing n0_to_0 for num 495
[LOG] Removed 0 subset clusters.
[LOG] Computing n1_to_1 for num 495
[LOG] Computing n2_to_2 (adjacency) for num 495
[LOG] Computing n3_to_3 (adjacency) for num 495
[LOG] Computing n4_to_4 (coadjacency) for num 495
[LOG] Computing n0_to_1 for num 495
[LOG] Computing n0_to_2 for num 495
[LOG] Process 1: Created combinatorial complex for file data_11.hdf5
[LOG] Computing n0_to_3 for num 495
[LOG] Computing n0_to_4 for num 495
[LOG] Computing n1_to_2 for num 495
[LOG] Computing n1_to_3 for num 495
[LOG] Computing n1_to_4 for num 495
[LOG] Computing n2_to_3 for num 495
[LOG] Process 1: Calculating Neighbors
[LOG] Loading pickle file data_11.pickle
[LOG] Processing node features for num 11
[LOG] Processing edge features for num 11
[LOG] Computing n2_to_4 for num 495
[LOG] Processing tetra features for num 11
[LOG] Computing n3_to_4 for num 495
[LOG] Global feature for num 495
[LOG] Global feature for num 495
[LOG] Saving tensor x_0_495.pt
[LOG] Saving tensor x_1_495.pt
[LOG] Saving tensor x_2_495.pt
[LOG] Saving tensor x_3_495.pt
[LOG] Saving tensor x_4_495.pt
[LOG] Saving tensor n0_to_0_495.pt
[LOG] Saving tensor n1_to_1_495.pt
[LOG] Saving tensor n2_to_2_495.pt
[LOG] Processing cluster features for num 11
[LOG] Saving tensor n3_to_3_495.pt
[LOG] Saving tensor n4_to_4_495.pt
[LOG] Processing cluster features for num 11
[LOG] Saving tensor n0_to_1_495.pt
[LOG] Saving tensor n0_to_2_495.pt
[LOG] Saving tensor n0_to_3_495.pt
[LOG] Saving tensor n0_to_4_495.pt
[LOG] Processing adjacency and incidence matrices for num 11
[LOG] Computing n0_to_0 for num 11
[LOG] Saving tensor n1_to_2_495.pt
[LOG] Saving tensor n1_to_3_495.pt
[LOG] Saving tensor n1_to_4_495.pt
[LOG] Saving tensor n2_to_3_495.pt
[LOG] Saving tensor n2_to_4_495.pt
[LOG] Saving tensor n3_to_4_495.pt
[LOG] Saving tensor global_feature_495.pt
[LOG] Process 61: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Computing n1_to_1 for num 11
[LOG] Computing n2_to_2 (adjacency) for num 11
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Computing n3_to_3 (adjacency) for num 11
[LOG] Computing n4_to_4 (coadjacency) for num 11
[LOG] Computing n0_to_1 for num 11
[LOG] Computing n0_to_2 for num 11
[LOG] Computing n0_to_3 for num 11
[LOG] Computing n0_to_4 for num 11
[LOG] Computing n1_to_2 for num 11
[LOG] Computing n1_to_3 for num 11
[LOG] Computing n1_to_4 for num 11
[LOG] Computing n2_to_3 for num 11
[LOG] Computing n2_to_4 for num 11
[LOG] Computing n3_to_4 for num 11
[LOG] Global feature for num 11
[LOG] Global feature for num 11
[LOG] Saving tensor x_0_11.pt
[LOG] Saving tensor x_1_11.pt
[LOG] Saving tensor x_2_11.pt
[LOG] Saving tensor x_3_11.pt
[LOG] Saving tensor x_4_11.pt
[LOG] Saving tensor n0_to_0_11.pt
[LOG] Saving tensor n1_to_1_11.pt
[LOG] Saving tensor n2_to_2_11.pt
[LOG] Saving tensor n3_to_3_11.pt
[LOG] Saving tensor n4_to_4_11.pt
[LOG] Saving tensor n0_to_1_11.pt
[LOG] Saving tensor n0_to_2_11.pt
[LOG] Saving tensor n0_to_3_11.pt
[LOG] Saving tensor n0_to_4_11.pt
[LOG] Saving tensor n1_to_2_11.pt
[LOG] Saving tensor n1_to_3_11.pt
[LOG] Saving tensor n1_to_4_11.pt
[LOG] Saving tensor n2_to_3_11.pt
[LOG] Saving tensor n2_to_4_11.pt
[LOG] Saving tensor n3_to_4_11.pt
[LOG] Saving tensor global_feature_11.pt
[LOG] Process 1: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1779 Tetrahedra.
    [LOG] Generated 48 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 12.875
    [LOG] Max number of nodes per cluster is 48 and the number is 27
[LOG] We will select 224 edges and 1779 tetra
[LOG] Edges from tetra 0 and KDTree 505 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Process 1: Created combinatorial complex for file data_12.hdf5
[LOG] Process 1: Calculating Neighbors
[LOG] Loading pickle file data_12.pickle
[LOG] Processing node features for num 12
[LOG] Processing edge features for num 12
[LOG] Processing tetra features for num 12
[LOG] Processing cluster features for num 12
[LOG] Processing cluster features for num 12
[LOG] Processing adjacency and incidence matrices for num 12
[LOG] Computing n0_to_0 for num 12
[LOG] Computing n1_to_1 for num 12
[LOG] Computing n2_to_2 (adjacency) for num 12
[LOG] Computing n3_to_3 (adjacency) for num 12
[LOG] Computing n4_to_4 (coadjacency) for num 12
[LOG] Computing n0_to_1 for num 12
[LOG] Computing n0_to_2 for num 12
[LOG] Computing n0_to_3 for num 12
[LOG] Computing n0_to_4 for num 12
[LOG] Computing n1_to_2 for num 12
[LOG] Computing n1_to_3 for num 12
[LOG] Computing n1_to_4 for num 12
[LOG] Computing n2_to_3 for num 12
[LOG] Computing n2_to_4 for num 12
[LOG] Computing n3_to_4 for num 12
[LOG] Global feature for num 12
[LOG] Global feature for num 12
[LOG] Saving tensor x_0_12.pt
[LOG] Saving tensor x_1_12.pt
[LOG] Saving tensor x_2_12.pt
[LOG] Saving tensor x_3_12.pt
[LOG] Saving tensor x_4_12.pt
[LOG] Saving tensor n0_to_0_12.pt
[LOG] Saving tensor n1_to_1_12.pt
[LOG] Saving tensor n2_to_2_12.pt
[LOG] Saving tensor n3_to_3_12.pt
[LOG] Saving tensor n4_to_4_12.pt
[LOG] Saving tensor n0_to_1_12.pt
[LOG] Saving tensor n0_to_2_12.pt
[LOG] Saving tensor n0_to_3_12.pt
[LOG] Saving tensor n0_to_4_12.pt
[LOG] Saving tensor n1_to_2_12.pt
[LOG] Saving tensor n1_to_3_12.pt
[LOG] Saving tensor n1_to_4_12.pt
[LOG] Saving tensor n2_to_3_12.pt
[LOG] Saving tensor n2_to_4_12.pt
[LOG] Saving tensor n3_to_4_12.pt
[LOG] Saving tensor global_feature_12.pt
[LOG] Process 1: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1779 Tetrahedra.
    [LOG] Generated 32 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 22.09375
    [LOG] Max number of nodes per cluster is 133 and the number is 28
[LOG] We will select 224 edges and 1779 tetra
[LOG] Edges from tetra 0 and KDTree 2999 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Process 1: Created combinatorial complex for file data_13.hdf5
[LOG] Process 1: Calculating Neighbors
[LOG] Loading pickle file data_13.pickle
[LOG] Processing node features for num 13
[LOG] Processing edge features for num 13
[LOG] Processing tetra features for num 13
[LOG] Processing cluster features for num 13
[LOG] Processing cluster features for num 13
[LOG] Processing adjacency and incidence matrices for num 13
[LOG] Computing n0_to_0 for num 13
[LOG] Computing n1_to_1 for num 13
[LOG] Computing n2_to_2 (adjacency) for num 13
[LOG] Computing n3_to_3 (adjacency) for num 13
[LOG] Computing n4_to_4 (coadjacency) for num 13
[LOG] Computing n0_to_1 for num 13
[LOG] Computing n0_to_2 for num 13
[LOG] Computing n0_to_3 for num 13
[LOG] Computing n0_to_4 for num 13
[LOG] Computing n1_to_2 for num 13
[LOG] Computing n1_to_3 for num 13
[LOG] Computing n1_to_4 for num 13
[LOG] Computing n2_to_3 for num 13
[LOG] Computing n2_to_4 for num 13
[LOG] Computing n3_to_4 for num 13
[LOG] Global feature for num 13
[LOG] Global feature for num 13
[LOG] Saving tensor x_0_13.pt
[LOG] Saving tensor x_1_13.pt
[LOG] Saving tensor x_2_13.pt
[LOG] Saving tensor x_3_13.pt
[LOG] Saving tensor x_4_13.pt
[LOG] Saving tensor n0_to_0_13.pt
[LOG] Saving tensor n1_to_1_13.pt
[LOG] Saving tensor n2_to_2_13.pt
[LOG] Saving tensor n3_to_3_13.pt
[LOG] Saving tensor n4_to_4_13.pt
[LOG] Saving tensor n0_to_1_13.pt
[LOG] Saving tensor n0_to_2_13.pt
[LOG] Saving tensor n0_to_3_13.pt
[LOG] Saving tensor n0_to_4_13.pt
[LOG] Saving tensor n1_to_2_13.pt
[LOG] Saving tensor n1_to_3_13.pt
[LOG] Saving tensor n1_to_4_13.pt
[LOG] Saving tensor n2_to_3_13.pt
[LOG] Saving tensor n2_to_4_13.pt
[LOG] Saving tensor n3_to_4_13.pt
[LOG] Saving tensor global_feature_13.pt
[LOG] Process 1: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Removed 3 subset clusters.

    [LOG] We Currently have 2995 Tetrahedra.
    [LOG] Generated 87 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.068965517241379
    [LOG] Max number of nodes per cluster is 34 and the number is 18
[LOG] We will select 630 edges and 2995 tetra
[LOG] Edges from tetra 0 and KDTree 630 with 0 edges in common.
[LOG] Removed 3 subset clusters.
[LOG] Process 27: Created combinatorial complex for file data_222.hdf5
[LOG] Process 27: Calculating Neighbors
[LOG] Loading pickle file data_222.pickle
[LOG] Processing node features for num 222
[LOG] Processing edge features for num 222
[LOG] Processing tetra features for num 222
[LOG] Processing cluster features for num 222
[LOG] Processing cluster features for num 222
[LOG] Processing adjacency and incidence matrices for num 222
[LOG] Computing n0_to_0 for num 222
[LOG] Computing n1_to_1 for num 222
[LOG] Computing n2_to_2 (adjacency) for num 222
[LOG] Computing n3_to_3 (adjacency) for num 222
[LOG] Computing n4_to_4 (coadjacency) for num 222
[LOG] Computing n0_to_1 for num 222
[LOG] Computing n0_to_2 for num 222
[LOG] Computing n0_to_3 for num 222
[LOG] Computing n0_to_4 for num 222
[LOG] Computing n1_to_2 for num 222
[LOG] Computing n1_to_3 for num 222
[LOG] Computing n1_to_4 for num 222
[LOG] Computing n2_to_3 for num 222
[LOG] Computing n2_to_4 for num 222
[LOG] Computing n3_to_4 for num 222
[LOG] Global feature for num 222
[LOG] Global feature for num 222
[LOG] Saving tensor x_0_222.pt
[LOG] Saving tensor x_1_222.pt
[LOG] Saving tensor x_2_222.pt
[LOG] Saving tensor x_3_222.pt
[LOG] Saving tensor x_4_222.pt
[LOG] Saving tensor n0_to_0_222.pt
[LOG] Saving tensor n1_to_1_222.pt
[LOG] Saving tensor n2_to_2_222.pt
[LOG] Saving tensor n3_to_3_222.pt
[LOG] Saving tensor n4_to_4_222.pt
[LOG] Saving tensor n0_to_1_222.pt
[LOG] Saving tensor n0_to_2_222.pt
[LOG] Saving tensor n0_to_3_222.pt
[LOG] Saving tensor n0_to_4_222.pt
[LOG] Saving tensor n1_to_2_222.pt
[LOG] Saving tensor n1_to_3_222.pt
[LOG] Saving tensor n1_to_4_222.pt
[LOG] Saving tensor n2_to_3_222.pt
[LOG] Saving tensor n2_to_4_222.pt
[LOG] Saving tensor n3_to_4_222.pt
[LOG] Saving tensor global_feature_222.pt
[LOG] Process 27: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Removed 2 subset clusters.

    [LOG] We Currently have 1779 Tetrahedra.
    [LOG] Generated 47 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.595744680851064
    [LOG] Max number of nodes per cluster is 36 and the number is 45
[LOG] We will select 224 edges and 1779 tetra
[LOG] Edges from tetra 0 and KDTree 769 with 0 edges in common.
[LOG] Removed 3 subset clusters.
[LOG] Process 1: Created combinatorial complex for file data_14.hdf5
[LOG] Process 1: Calculating Neighbors
[LOG] Loading pickle file data_14.pickle
[LOG] Processing node features for num 14
[LOG] Processing edge features for num 14
[LOG] Processing tetra features for num 14
[LOG] Processing cluster features for num 14
[LOG] Processing cluster features for num 14
[LOG] Processing adjacency and incidence matrices for num 14
[LOG] Computing n0_to_0 for num 14
[LOG] Computing n1_to_1 for num 14
[LOG] Computing n2_to_2 (adjacency) for num 14
[LOG] Computing n3_to_3 (adjacency) for num 14
[LOG] Computing n4_to_4 (coadjacency) for num 14
[LOG] Computing n0_to_1 for num 14
[LOG] Computing n0_to_2 for num 14
[LOG] Computing n0_to_3 for num 14
[LOG] Computing n0_to_4 for num 14
[LOG] Computing n1_to_2 for num 14
[LOG] Computing n1_to_3 for num 14
[LOG] Computing n1_to_4 for num 14
[LOG] Computing n2_to_3 for num 14
[LOG] Computing n2_to_4 for num 14
[LOG] Computing n3_to_4 for num 14
[LOG] Global feature for num 14
[LOG] Global feature for num 14
[LOG] Saving tensor x_0_14.pt
[LOG] Saving tensor x_1_14.pt
[LOG] Saving tensor x_2_14.pt
[LOG] Saving tensor x_3_14.pt
[LOG] Saving tensor x_4_14.pt
[LOG] Saving tensor n0_to_0_14.pt
[LOG] Saving tensor n1_to_1_14.pt
[LOG] Saving tensor n2_to_2_14.pt
[LOG] Saving tensor n3_to_3_14.pt
[LOG] Saving tensor n4_to_4_14.pt
[LOG] Saving tensor n0_to_1_14.pt
[LOG] Saving tensor n0_to_2_14.pt
[LOG] Saving tensor n0_to_3_14.pt
[LOG] Saving tensor n0_to_4_14.pt
[LOG] Saving tensor n1_to_2_14.pt
[LOG] Saving tensor n1_to_3_14.pt
[LOG] Saving tensor n1_to_4_14.pt
[LOG] Saving tensor n2_to_3_14.pt
[LOG] Saving tensor n2_to_4_14.pt
[LOG] Saving tensor n3_to_4_14.pt
[LOG] Saving tensor global_feature_14.pt
[LOG] Process 1: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 2995 Tetrahedra.
    [LOG] Generated 93 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 14.559139784946236
    [LOG] Max number of nodes per cluster is 56 and the number is 13
[LOG] We will select 630 edges and 2995 tetra
[LOG] Edges from tetra 0 and KDTree 2325 with 0 edges in common.
[LOG] Removed 1 subset clusters.
[LOG] Process 27: Created combinatorial complex for file data_223.hdf5
[LOG] Process 27: Calculating Neighbors
[LOG] Loading pickle file data_223.pickle
[LOG] Processing node features for num 223
[LOG] Processing edge features for num 223
[LOG] Processing tetra features for num 223
[LOG] Processing cluster features for num 223
[LOG] Processing cluster features for num 223
[LOG] Processing adjacency and incidence matrices for num 223
[LOG] Computing n0_to_0 for num 223
[LOG] Computing n1_to_1 for num 223
[LOG] Computing n2_to_2 (adjacency) for num 223
[LOG] Computing n3_to_3 (adjacency) for num 223
[LOG] Computing n4_to_4 (coadjacency) for num 223
[LOG] Computing n0_to_1 for num 223
[LOG] Computing n0_to_2 for num 223
[LOG] Computing n0_to_3 for num 223
[LOG] Computing n0_to_4 for num 223
[LOG] Computing n1_to_2 for num 223
[LOG] Computing n1_to_3 for num 223
[LOG] Computing n1_to_4 for num 223
[LOG] Computing n2_to_3 for num 223
[LOG] Computing n2_to_4 for num 223
[LOG] Computing n3_to_4 for num 223
[LOG] Global feature for num 223
[LOG] Global feature for num 223
[LOG] Saving tensor x_0_223.pt
[LOG] Saving tensor x_1_223.pt
[LOG] Saving tensor x_2_223.pt
[LOG] Saving tensor x_3_223.pt
[LOG] Saving tensor x_4_223.pt
[LOG] Saving tensor n0_to_0_223.pt
[LOG] Saving tensor n1_to_1_223.pt
[LOG] Saving tensor n2_to_2_223.pt
[LOG] Saving tensor n3_to_3_223.pt
[LOG] Saving tensor n4_to_4_223.pt
[LOG] Saving tensor n0_to_1_223.pt
[LOG] Saving tensor n0_to_2_223.pt
[LOG] Saving tensor n0_to_3_223.pt
[LOG] Saving tensor n0_to_4_223.pt
[LOG] Saving tensor n1_to_2_223.pt
[LOG] Saving tensor n1_to_3_223.pt
[LOG] Saving tensor n1_to_4_223.pt
[LOG] Saving tensor n2_to_3_223.pt
[LOG] Saving tensor n2_to_4_223.pt
[LOG] Saving tensor n3_to_4_223.pt
[LOG] Saving tensor global_feature_223.pt
[LOG] Process 27: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 0 and 3
[LOG] GENERATED TETRA
[LOG] Calculating for cell ranks 0 and 4
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1779 Tetrahedra.
    [LOG] Generated 51 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.431372549019608
    [LOG] Max number of nodes per cluster is 37 and the number is 5
[LOG] We will select 224 edges and 1779 tetra
[LOG] Edges from tetra 0 and KDTree 676 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Process 1: Created combinatorial complex for file data_15.hdf5
[LOG] Process 1: Calculating Neighbors
[LOG] Loading pickle file data_15.pickle
[LOG] Processing node features for num 15
[LOG] Processing edge features for num 15
[LOG] Processing tetra features for num 15
[LOG] Processing cluster features for num 15
[LOG] Processing cluster features for num 15
[LOG] Processing adjacency and incidence matrices for num 15
[LOG] Computing n0_to_0 for num 15
[LOG] Computing n1_to_1 for num 15
[LOG] Computing n2_to_2 (adjacency) for num 15
[LOG] Computing n3_to_3 (adjacency) for num 15
[LOG] Computing n4_to_4 (coadjacency) for num 15
[LOG] Computing n0_to_1 for num 15
[LOG] Calculating for cell ranks 1 and 1
[LOG] Computing n0_to_2 for num 15
[LOG] Computing n0_to_3 for num 15
[LOG] Computing n0_to_4 for num 15
[LOG] Computing n1_to_2 for num 15
[LOG] Computing n1_to_3 for num 15
[LOG] Computing n1_to_4 for num 15
[LOG] Computing n2_to_3 for num 15
[LOG] Computing n2_to_4 for num 15
[LOG] Computing n3_to_4 for num 15
[LOG] Global feature for num 15
[LOG] Global feature for num 15
[LOG] Saving tensor x_0_15.pt
[LOG] Saving tensor x_1_15.pt
[LOG] Saving tensor x_2_15.pt
[LOG] Saving tensor x_3_15.pt
[LOG] Saving tensor x_4_15.pt
[LOG] Saving tensor n0_to_0_15.pt
[LOG] Saving tensor n1_to_1_15.pt
[LOG] Saving tensor n2_to_2_15.pt
[LOG] Saving tensor n3_to_3_15.pt
[LOG] Saving tensor n4_to_4_15.pt
[LOG] Saving tensor n0_to_1_15.pt
[LOG] Saving tensor n0_to_2_15.pt
[LOG] Saving tensor n0_to_3_15.pt
[LOG] Saving tensor n0_to_4_15.pt
[LOG] Saving tensor n1_to_2_15.pt
[LOG] Saving tensor n1_to_3_15.pt
[LOG] Saving tensor n1_to_4_15.pt
[LOG] Saving tensor n2_to_3_15.pt
[LOG] Saving tensor n2_to_4_15.pt
[LOG] Saving tensor n3_to_4_15.pt
[LOG] Saving tensor global_feature_15.pt
[LOG] Process 1: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Removed 1 subset clusters.

    [LOG] We Currently have 1848 Tetrahedra.
    [LOG] Generated 54 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.555555555555555
    [LOG] Max number of nodes per cluster is 49 and the number is 39
[LOG] We will select 253 edges and 1848 tetra
[LOG] Edges from tetra 0 and KDTree 253 with 0 edges in common.
[LOG] Removed 1 subset clusters.
[LOG] Process 70: Created combinatorial complex for file data_564.hdf5
[LOG] Process 70: Calculating Neighbors
[LOG] Loading pickle file data_564.pickle
[LOG] Processing node features for num 564
[LOG] Processing edge features for num 564
[LOG] Processing tetra features for num 564
[LOG] Processing cluster features for num 564
[LOG] Processing cluster features for num 564
[LOG] Processing adjacency and incidence matrices for num 564
[LOG] Computing n0_to_0 for num 564
[LOG] Computing n1_to_1 for num 564
[LOG] Computing n2_to_2 (adjacency) for num 564
[LOG] Computing n3_to_3 (adjacency) for num 564
[LOG] Computing n4_to_4 (coadjacency) for num 564
[LOG] Computing n0_to_1 for num 564
[LOG] Computing n0_to_2 for num 564
[LOG] Computing n0_to_3 for num 564
[LOG] Computing n0_to_4 for num 564
[LOG] Computing n1_to_2 for num 564
[LOG] Computing n1_to_3 for num 564
[LOG] Computing n1_to_4 for num 564
[LOG] Computing n2_to_3 for num 564
[LOG] Computing n2_to_4 for num 564
[LOG] Computing n3_to_4 for num 564
[LOG] Global feature for num 564
[LOG] Global feature for num 564
[LOG] Saving tensor x_0_564.pt
[LOG] Saving tensor x_1_564.pt
[LOG] Saving tensor x_2_564.pt
[LOG] Saving tensor x_3_564.pt
[LOG] Saving tensor x_4_564.pt
[LOG] Saving tensor n0_to_0_564.pt
[LOG] Saving tensor n1_to_1_564.pt
[LOG] Saving tensor n2_to_2_564.pt
[LOG] Saving tensor n3_to_3_564.pt
[LOG] Saving tensor n4_to_4_564.pt
[LOG] Saving tensor n0_to_1_564.pt
[LOG] Saving tensor n0_to_2_564.pt
[LOG] Saving tensor n0_to_3_564.pt
[LOG] Saving tensor n0_to_4_564.pt
[LOG] Saving tensor n1_to_2_564.pt
[LOG] Saving tensor n1_to_3_564.pt
[LOG] Saving tensor n1_to_4_564.pt
[LOG] Saving tensor n2_to_3_564.pt
[LOG] Saving tensor n2_to_4_564.pt
[LOG] Saving tensor n3_to_4_564.pt
[LOG] Saving tensor global_feature_564.pt
[LOG] Process 70: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1107 Tetrahedra.
    [LOG] Generated 32 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 13.625
    [LOG] Max number of nodes per cluster is 43 and the number is 12
[LOG] We will select 185 edges and 1107 tetra
[LOG] Edges from tetra 0 and KDTree 185 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Process 70: Created combinatorial complex for file data_565.hdf5
[LOG] Process 70: Calculating Neighbors
[LOG] Loading pickle file data_565.pickle
[LOG] Processing node features for num 565
[LOG] Processing edge features for num 565
[LOG] Processing tetra features for num 565
[LOG] Processing cluster features for num 565
[LOG] Processing cluster features for num 565
[LOG] Processing adjacency and incidence matrices for num 565
[LOG] Computing n0_to_0 for num 565
[LOG] Computing n1_to_1 for num 565
[LOG] Computing n2_to_2 (adjacency) for num 565
[LOG] Computing n3_to_3 (adjacency) for num 565
[LOG] Computing n4_to_4 (coadjacency) for num 565
[LOG] Computing n0_to_1 for num 565
[LOG] Computing n0_to_2 for num 565
[LOG] Computing n0_to_3 for num 565
[LOG] Computing n0_to_4 for num 565
[LOG] Computing n1_to_2 for num 565
[LOG] Computing n1_to_3 for num 565
[LOG] Computing n1_to_4 for num 565
[LOG] Computing n2_to_3 for num 565
[LOG] Computing n2_to_4 for num 565
[LOG] Computing n3_to_4 for num 565
[LOG] Global feature for num 565
[LOG] Global feature for num 565
[LOG] Saving tensor x_0_565.pt
[LOG] Saving tensor x_1_565.pt
[LOG] Saving tensor x_2_565.pt
[LOG] Saving tensor x_3_565.pt
[LOG] Saving tensor x_4_565.pt
[LOG] Saving tensor n0_to_0_565.pt
[LOG] Saving tensor n1_to_1_565.pt
[LOG] Saving tensor n2_to_2_565.pt
[LOG] Saving tensor n3_to_3_565.pt
[LOG] Saving tensor n4_to_4_565.pt
[LOG] Saving tensor n0_to_1_565.pt
[LOG] Saving tensor n0_to_2_565.pt
[LOG] Saving tensor n0_to_3_565.pt
[LOG] Saving tensor n0_to_4_565.pt
[LOG] Saving tensor n1_to_2_565.pt
[LOG] Saving tensor n1_to_3_565.pt
[LOG] Saving tensor n1_to_4_565.pt
[LOG] Saving tensor n2_to_3_565.pt
[LOG] Saving tensor n2_to_4_565.pt
[LOG] Saving tensor n3_to_4_565.pt
[LOG] Saving tensor global_feature_565.pt
[LOG] Process 70: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1107 Tetrahedra.
    [LOG] Generated 35 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 11.82857142857143
    [LOG] Max number of nodes per cluster is 36 and the number is 17
[LOG] We will select 185 edges and 1107 tetra
[LOG] Edges from tetra 0 and KDTree 519 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Process 70: Created combinatorial complex for file data_566.hdf5
[LOG] Process 70: Calculating Neighbors
[LOG] Loading pickle file data_566.pickle
[LOG] Processing node features for num 566
[LOG] Processing edge features for num 566
[LOG] Processing tetra features for num 566
[LOG] Processing cluster features for num 566
[LOG] Processing cluster features for num 566
[LOG] Processing adjacency and incidence matrices for num 566
[LOG] Computing n0_to_0 for num 566
[LOG] Computing n1_to_1 for num 566
[LOG] Computing n2_to_2 (adjacency) for num 566
[LOG] Computing n3_to_3 (adjacency) for num 566
[LOG] Computing n4_to_4 (coadjacency) for num 566
[LOG] Computing n0_to_1 for num 566
[LOG] Computing n0_to_2 for num 566
[LOG] Computing n0_to_3 for num 566
[LOG] Computing n0_to_4 for num 566
[LOG] Computing n1_to_2 for num 566
[LOG] Computing n1_to_3 for num 566
[LOG] Computing n1_to_4 for num 566
[LOG] Computing n2_to_3 for num 566
[LOG] Computing n2_to_4 for num 566
[LOG] Computing n3_to_4 for num 566
[LOG] Global feature for num 566
[LOG] Global feature for num 566
[LOG] Saving tensor x_0_566.pt
[LOG] Saving tensor x_1_566.pt
[LOG] Saving tensor x_2_566.pt
[LOG] Saving tensor x_3_566.pt
[LOG] Saving tensor x_4_566.pt
[LOG] Saving tensor n0_to_0_566.pt
[LOG] Saving tensor n1_to_1_566.pt
[LOG] Saving tensor n2_to_2_566.pt
[LOG] Saving tensor n3_to_3_566.pt
[LOG] Saving tensor n4_to_4_566.pt
[LOG] Saving tensor n0_to_1_566.pt
[LOG] Saving tensor n0_to_2_566.pt
[LOG] Saving tensor n0_to_3_566.pt
[LOG] Saving tensor n0_to_4_566.pt
[LOG] Saving tensor n1_to_2_566.pt
[LOG] Saving tensor n1_to_3_566.pt
[LOG] Saving tensor n1_to_4_566.pt
[LOG] Saving tensor n2_to_3_566.pt
[LOG] Saving tensor n2_to_4_566.pt
[LOG] Saving tensor n3_to_4_566.pt
[LOG] Saving tensor global_feature_566.pt
[LOG] Process 70: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
[LOG] GENERATED TETRA
[LOG] Removed 0 subset clusters.

    [LOG] We Currently have 1107 Tetrahedra.
    [LOG] Generated 32 Clusters of Tetrahedra. 
    [LOG] Mean number of nodes per cluster is 15.875
    [LOG] Max number of nodes per cluster is 47 and the number is 30
[LOG] We will select 185 edges and 1107 tetra
[LOG] Edges from tetra 0 and KDTree 1666 with 0 edges in common.
[LOG] Removed 0 subset clusters.
[LOG] Process 70: Created combinatorial complex for file data_567.hdf5
[LOG] Process 70: Calculating Neighbors
[LOG] Loading pickle file data_567.pickle
[LOG] Processing node features for num 567
[LOG] Processing edge features for num 567
[LOG] Processing tetra features for num 567
[LOG] Processing cluster features for num 567
[LOG] Processing cluster features for num 567
[LOG] Processing adjacency and incidence matrices for num 567
[LOG] Computing n0_to_0 for num 567
[LOG] Computing n1_to_1 for num 567
[LOG] Computing n2_to_2 (adjacency) for num 567
[LOG] Computing n3_to_3 (adjacency) for num 567
[LOG] Computing n4_to_4 (coadjacency) for num 567
[LOG] Computing n0_to_1 for num 567
[LOG] Computing n0_to_2 for num 567
[LOG] Computing n0_to_3 for num 567
[LOG] Computing n0_to_4 for num 567
[LOG] Computing n1_to_2 for num 567
[LOG] Computing n1_to_3 for num 567
[LOG] Computing n1_to_4 for num 567
[LOG] Computing n2_to_3 for num 567
[LOG] Computing n2_to_4 for num 567
[LOG] Computing n3_to_4 for num 567
[LOG] Global feature for num 567
[LOG] Global feature for num 567
[LOG] Saving tensor x_0_567.pt
[LOG] Saving tensor x_1_567.pt
[LOG] Saving tensor x_2_567.pt
[LOG] Saving tensor x_3_567.pt
[LOG] Saving tensor x_4_567.pt
[LOG] Saving tensor n0_to_0_567.pt
[LOG] Saving tensor n1_to_1_567.pt
[LOG] Saving tensor n2_to_2_567.pt
[LOG] Saving tensor n3_to_3_567.pt
[LOG] Saving tensor n4_to_4_567.pt
[LOG] Saving tensor n0_to_1_567.pt
[LOG] Saving tensor n0_to_2_567.pt
[LOG] Saving tensor n0_to_3_567.pt
[LOG] Saving tensor n0_to_4_567.pt
[LOG] Saving tensor n1_to_2_567.pt
[LOG] Saving tensor n1_to_3_567.pt
[LOG] Saving tensor n1_to_4_567.pt
[LOG] Saving tensor n2_to_3_567.pt
[LOG] Saving tensor n2_to_4_567.pt
[LOG] Saving tensor n3_to_4_567.pt
[LOG] Saving tensor global_feature_567.pt
[LOG] Process 70: Calculating Cross-Cell-Invariants
[LOG] Calculating for cell ranks 0 and 0
[LOG] Calculating for cell ranks 0 and 1
[LOG] Calculating for cell ranks 0 and 2
[LOG] Calculating for cell ranks 0 and 3
[LOG] Calculating for cell ranks 0 and 4
[LOG] Calculating for cell ranks 1 and 1
[LOG] Calculating for cell ranks 1 and 2
[LOG] Calculating for cell ranks 1 and 3
[LOG] Calculating for cell ranks 1 and 4
[LOG] Calculating for cell ranks 2 and 2
[LOG] Calculating for cell ranks 2 and 3
[LOG] Calculating for cell ranks 2 and 4
[LOG] Calculating for cell ranks 3 and 3
[LOG] Calculating for cell ranks 3 and 4
[LOG] Calculating for cell ranks 4 and 4
[LOG] Saving tensor euclidean_0_to_0.pt
[LOG] Saving tensor hausdorff_0_to_0.pt
[LOG] Saving tensor euclidean_0_to_1.pt
[LOG] Saving tensor hausdorff_0_to_1.pt
[LOG] Saving tensor euclidean_0_to_2.pt
[LOG] Saving tensor hausdorff_0_to_2.pt
[LOG] Saving tensor euclidean_0_to_3.pt
[LOG] Saving tensor hausdorff_0_to_3.pt
[LOG] Saving tensor euclidean_0_to_4.pt
[LOG] Saving tensor hausdorff_0_to_4.pt
[LOG] Saving tensor euclidean_1_to_1.pt
[LOG] Saving tensor hausdorff_1_to_1.pt
[LOG] Saving tensor euclidean_1_to_2.pt
[LOG] Saving tensor hausdorff_1_to_2.pt
[LOG] Saving tensor euclidean_1_to_3.pt
[LOG] Saving tensor hausdorff_1_to_3.pt
[LOG] Saving tensor euclidean_1_to_4.pt
[LOG] Saving tensor hausdorff_1_to_4.pt
[LOG] Saving tensor euclidean_2_to_2.pt
[LOG] Saving tensor hausdorff_2_to_2.pt
[LOG] Saving tensor euclidean_2_to_3.pt
[LOG] Saving tensor hausdorff_2_to_3.pt
[LOG] Saving tensor euclidean_2_to_4.pt
[LOG] Saving tensor hausdorff_2_to_4.pt
[LOG] Saving tensor euclidean_3_to_3.pt
[LOG] Saving tensor hausdorff_3_to_3.pt
[LOG] Saving tensor euclidean_3_to_4.pt
[LOG] Saving tensor hausdorff_3_to_4.pt
[LOG] Saving tensor euclidean_4_to_4.pt
[LOG] Saving tensor hausdorff_4_to_4.pt
